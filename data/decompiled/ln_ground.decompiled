[[4199456, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4199488, "sub_401440", "__int64 sub_401440()\n{\n  return qword_60C010();\n}\n"], [4199504, ".getenv", "// attributes: thunk\nchar *getenv(const char *name)\n{\n  return getenv(name);\n}\n"], [4199520, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4199536, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4199552, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4199568, ".unlink", "// attributes: thunk\nint unlink(const char *name)\n{\n  return unlink(name);\n}\n"], [4199584, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4199600, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4199616, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4199632, ".readlink", "// attributes: thunk\nssize_t readlink(const char *path, char *buf, size_t len)\n{\n  return readlink(path, buf, len);\n}\n"], [4199648, ".fcntl", "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\n  return fcntl(fd, cmd);\n}\n"], [4199664, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4199680, ".pathconf", "// attributes: thunk\n__int64 pathconf(const char *path, int name)\n{\n  return pathconf(path, name);\n}\n"], [4199696, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4199712, ".opendir", "// attributes: thunk\nDIR *opendir(const char *name)\n{\n  return opendir(name);\n}\n"], [4199728, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4199744, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4199760, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4199776, ".__lxstat", "// attributes: thunk\nint __lxstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _lxstat(ver, filename, stat_buf);\n}\n"], [4199792, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4199808, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4199824, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4199840, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4199856, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4199872, ".symlink", "// attributes: thunk\nint symlink(const char *from, const char *to)\n{\n  return symlink(from, to);\n}\n"], [4199888, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4199904, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4199920, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4199936, ".close", "// attributes: thunk\nint close(int fd)\n{\n  return close(fd);\n}\n"], [4199952, ".closedir", "// attributes: thunk\nint closedir(DIR *dirp)\n{\n  return closedir(dirp);\n}\n"], [4199968, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4199984, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4200000, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4200016, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4200032, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4200048, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4200064, ".readlinkat", "// attributes: thunk\nssize_t readlinkat(int fd, const char *path, char *buf, size_t len)\n{\n  return readlinkat(fd, path, buf, len);\n}\n"], [4200080, ".dirfd", "// attributes: thunk\nint dirfd(DIR *dirp)\n{\n  return dirfd(dirp);\n}\n"], [4200096, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4200112, ".rpmatch", "// attributes: thunk\nint rpmatch(const char *response)\n{\n  return rpmatch(response);\n}\n"], [4200128, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4200144, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4200160, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4200176, ".__xstat", "// attributes: thunk\nint __xstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _xstat(ver, filename, stat_buf);\n}\n"], [4200192, ".readdir", "// attributes: thunk\nstruct dirent *readdir(DIR *dirp)\n{\n  return readdir(dirp);\n}\n"], [4200208, ".putc_unlocked", "// attributes: thunk\nint putc_unlocked(int c, FILE *stream)\n{\n  return putc_unlocked(c, stream);\n}\n"], [4200224, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4200240, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4200256, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4200272, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4200288, ".linkat", "// attributes: thunk\nint linkat(int fromfd, const char *from, int tofd, const char *to, int flags)\n{\n  return linkat(fromfd, from, tofd, to, flags);\n}\n"], [4200304, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4200320, ".mempcpy", "// attributes: thunk\nvoid *mempcpy(void *dest, const void *src, size_t n)\n{\n  return mempcpy(dest, src, n);\n}\n"], [4200336, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4200352, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4200368, ".rename", "// attributes: thunk\nint rename(const char *old, const char *a2)\n{\n  return rename(old, a2);\n}\n"], [4200384, ".fdopendir", "// attributes: thunk\nDIR *fdopendir(int fd)\n{\n  return fdopendir(fd);\n}\n"], [4200400, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4200416, ".getline", "// attributes: thunk\n__ssize_t getline(char **lineptr, size_t *n, FILE *stream)\n{\n  return getline(lineptr, n, stream);\n}\n"], [4200432, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4200448, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4200464, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4200480, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4200496, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4200512, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4200560, "sub_401870", "signed __int64 sub_401870()\n{\n  signed __int64 result; // rax\n\n  result = &unk_60C277 - &unk_60C270;\n  if ( (unsigned __int64)(&unk_60C277 - &unk_60C270) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4200608, "sub_4018A0", "__int64 sub_4018A0()\n{\n  return 0LL;\n}\n"], [4200672, "sub_4018E0", "signed __int64 sub_4018E0()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_60C2D8 )\n  {\n    result = sub_401870();\n    byte_60C2D8 = 1;\n  }\n  return result;\n}\n"], [4200704, "sub_401900", "__int64 sub_401900()\n{\n  return sub_4018A0();\n}\n"], [4200749, "sub_40192D", "int sub_40192D()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_40375A(qword_60C310);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_40375A(qword_60C310);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_40375A(qword_60C310);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4201015, "sub_401A37", "_BOOL8 __fastcall sub_401A37(char *a1)\n{\n  bool v1; // al\n  int v2; // eax\n  int v3; // eax\n  bool v4; // al\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  bool v10; // [rsp+16h] [rbp-BAh]\n  bool v11; // [rsp+17h] [rbp-B9h]\n  int errnum; // [rsp+1Ch] [rbp-B4h]\n  char *s; // [rsp+20h] [rbp-B0h]\n  size_t v14; // [rsp+28h] [rbp-A8h]\n  struct stat stat_buf; // [rsp+30h] [rbp-A0h] BYREF\n\n  s = (char *)sub_40375A(a1);\n  v14 = strlen(s);\n  v1 = !v14 || s[v14 - 1] == 47;\n  v10 = v1;\n  if ( byte_60C220 )\n    v2 = sub_408E40(a1, &stat_buf);\n  else\n    v2 = sub_408E50(a1, &stat_buf);\n  if ( v2 )\n    v3 = *__errno_location();\n  else\n    v3 = 0;\n  errnum = v3;\n  v4 = !v3 && (stat_buf.st_mode & 0xF000) == 0x4000;\n  v11 = v4;\n  if ( errnum && errnum != 2 )\n  {\n    v5 = sub_4056CB(a1);\n    v6 = gettext(\"accessing %s\");\n    error(1, errnum, v6, v5);\n  }\n  if ( v11 < v10 )\n  {\n    v7 = sub_4056CB(a1);\n    v8 = gettext(\"target %s is not a directory\");\n    error(1, errnum, v8, v7);\n  }\n  return v11;\n}\n"], [4201458, "sub_401BF2", "__int64 __fastcall sub_401BF2(char *a1, char *a2)\n{\n  bool v2; // al\n  __int64 v3; // r12\n  char *v4; // rbx\n  int *v5; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  int v9; // eax\n  __int64 v10; // r12\n  char *v11; // rbx\n  int *v12; // rax\n  __int64 v13; // r12\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // r12\n  __int64 v17; // rbx\n  char *v18; // rax\n  __int64 v19; // rbx\n  char *v20; // rax\n  __int64 v21; // r12\n  __int64 v22; // rbx\n  char *v23; // rax\n  __int64 v24; // rbx\n  char *v25; // rax\n  bool v26; // al\n  unsigned int v27; // eax\n  __int64 v28; // r12\n  char *v29; // rbx\n  int *v30; // rax\n  bool v31; // al\n  unsigned int v32; // eax\n  const char *v33; // rax\n  const char *v34; // r12\n  unsigned int v35; // ebx\n  const char *v36; // rax\n  __int64 v37; // r13\n  __int64 v38; // r12\n  char *v39; // rax\n  const char *v40; // rbx\n  char *v41; // rax\n  int *v42; // rax\n  __int64 v43; // r12\n  char *v44; // rbx\n  int *v45; // rax\n  bool v46; // [rsp+11h] [rbp-14Fh]\n  char v47; // [rsp+12h] [rbp-14Eh]\n  bool v48; // [rsp+13h] [rbp-14Dh]\n  int errnum; // [rsp+14h] [rbp-14Ch]\n  char *newa; // [rsp+18h] [rbp-148h]\n  struct stat stat_buf; // [rsp+20h] [rbp-140h] BYREF\n  struct stat v52; // [rsp+B0h] [rbp-B0h] BYREF\n\n  newa = 0LL;\n  v46 = 0;\n  v47 = 0;\n  if ( byte_60C2E4 != 1 )\n  {\n    if ( byte_60C2E5 )\n      v2 = (unsigned int)sub_408E40(a1, &stat_buf) != 0;\n    else\n      v2 = (unsigned int)sub_408E50(a1, &stat_buf) != 0;\n    if ( v2 )\n    {\n      v3 = sub_4056CB(a1);\n      v4 = gettext(\"accessing %s\");\n      v5 = __errno_location();\n      error(0, *v5, v4, v3);\n      return 0LL;\n    }\n    if ( (stat_buf.st_mode & 0xF000) == 0x4000 )\n    {\n      v47 = 1;\n      if ( byte_60C2E9 != 1 )\n      {\n        v7 = sub_4056CB(a1);\n        v8 = gettext(\"%s: hard link not allowed for directory\");\n        error(0, 0, v8, v7);\n        return 0LL;\n      }\n    }\n  }\n  if ( byte_60C2E7 || byte_60C2E6 || dword_60C2E0 )\n  {\n    v9 = sub_408E50(a2, &v52);\n    v46 = v9 == 0;\n    if ( v9 )\n    {\n      if ( *__errno_location() != 2 )\n      {\n        v10 = sub_4056CB(a2);\n        v11 = gettext(\"accessing %s\");\n        v12 = __errno_location();\n        error(0, *v12, v11, v10);\n        return 0LL;\n      }\n    }\n  }\n  if ( v46 && qword_60C2F0 && (unsigned __int8)sub_40390E(qword_60C2F0, a2, &v52) )\n  {\n    v13 = sub_4056A7(1LL, a1);\n    v14 = sub_4056A7(0LL, a2);\n    v15 = gettext(\"will not overwrite just-created %s with %s\");\n    error(0, 0, v15, v14, v13);\n    return 0LL;\n  }\n  if ( (byte_60C2E7 || byte_60C2E4 != 1 && dword_60C2E0)\n    && v46\n    && (!dword_60C2E0 || byte_60C2E4 != 1)\n    && (byte_60C2E4 != 1 || !(unsigned int)sub_408E40(a1, &stat_buf))\n    && stat_buf.st_ino == v52.st_ino\n    && stat_buf.st_dev == v52.st_dev\n    && (stat_buf.st_nlink == 1 || (unsigned __int8)sub_406E63(a1, a2)) )\n  {\n    v16 = sub_4056A7(1LL, a2);\n    v17 = sub_4056A7(0LL, a1);\n    v18 = gettext(\"%s and %s are the same file\");\n    error(0, 0, v18, v17, v16);\n    return 0LL;\n  }\n  if ( v46 )\n  {\n    if ( (v52.st_mode & 0xF000) == 0x4000 )\n    {\n      v19 = sub_4056CB(a2);\n      v20 = gettext(\"%s: cannot overwrite directory\");\n      error(0, 0, v20, v19);\n      return 0LL;\n    }\n    if ( byte_60C2E6 )\n    {\n      v21 = sub_4056CB(a2);\n      v22 = qword_60C310;\n      v23 = gettext(\"%s: replace %s? \");\n      fprintf(stderr, v23, v22, v21);\n      if ( (unsigned __int8)sub_407BD3() != 1 )\n        return 1LL;\n      byte_60C2E7 = 1;\n    }\n    if ( dword_60C2E0 )\n    {\n      newa = (char *)sub_4032AB(a2, (unsigned int)dword_60C2E0);\n      if ( rename(a2, newa) )\n      {\n        errnum = *__errno_location();\n        free(newa);\n        newa = 0LL;\n        if ( errnum != 2 )\n        {\n          v24 = sub_4056CB(a2);\n          v25 = gettext(\"cannot backup %s\");\n          error(0, errnum, v25, v24);\n          return 0LL;\n        }\n      }\n    }\n  }\n  if ( byte_60C2E4 )\n  {\n    v26 = symlink(a1, a2) == 0;\n  }\n  else\n  {\n    if ( byte_60C2E5 )\n      v27 = 1024;\n    else\n      v27 = 0;\n    v26 = (unsigned int)sub_40820B(4294967196LL, a1, 4294967196LL, a2, v27) == 0;\n  }\n  v48 = v26;\n  if ( !v26 && *__errno_location() == 17 && (byte_60C2E7 || newa) )\n  {\n    if ( unlink(a2) )\n    {\n      v28 = sub_4056CB(a2);\n      v29 = gettext(\"cannot remove %s\");\n      v30 = __errno_location();\n      error(0, *v30, v29, v28);\n      free(newa);\n      return 0LL;\n    }\n    if ( byte_60C2E4 )\n    {\n      v31 = symlink(a1, a2) == 0;\n    }\n    else\n    {\n      if ( byte_60C2E5 )\n        v32 = 1024;\n      else\n        v32 = 0;\n      v31 = (unsigned int)sub_40820B(4294967196LL, a1, 4294967196LL, a2, v32) == 0;\n    }\n    v48 = v31;\n  }\n  if ( v48 )\n  {\n    sub_403873(qword_60C2F0, a2, &stat_buf);\n    if ( byte_60C2E8 )\n    {\n      if ( newa )\n      {\n        v33 = (const char *)sub_4056CB(newa);\n        printf(\"%s ~ \", v33);\n      }\n      v34 = (const char *)sub_4056A7(1LL, a1);\n      if ( byte_60C2E4 )\n        v35 = 45;\n      else\n        v35 = 61;\n      v36 = (const char *)sub_4056A7(0LL, a2);\n      printf(\"%s %c> %s\\n\", v36, v35, v34);\n    }\n  }\n  else\n  {\n    v37 = sub_4056A7(1LL, a1);\n    v38 = sub_4056A7(0LL, a2);\n    if ( byte_60C2E4 )\n    {\n      if ( *__errno_location() == 36 || !*a1 )\n        v39 = gettext(\"failed to create symbolic link %s -> %s\");\n      else\n        v39 = gettext(\"failed to create symbolic link %s\");\n      v40 = v39;\n    }\n    else\n    {\n      if ( *__errno_location() == 31 && v47 != 1 )\n      {\n        v41 = gettext(\"failed to create hard link to %.0s%s\");\n      }\n      else if ( *__errno_location() == 122\n             || *__errno_location() == 17\n             || *__errno_location() == 28\n             || *__errno_location() == 30 )\n      {\n        v41 = gettext(\"failed to create hard link %s\");\n      }\n      else\n      {\n        v41 = gettext(\"failed to create hard link %s => %s\");\n      }\n      v40 = v41;\n    }\n    v42 = __errno_location();\n    error(0, *v42, v40, v38, v37);\n    if ( newa && rename(newa, a2) )\n    {\n      v43 = sub_4056CB(a2);\n      v44 = gettext(\"cannot un-backup %s\");\n      v45 = __errno_location();\n      error(0, *v45, v44, v43);\n    }\n  }\n  free(newa);\n  return v48;\n}\n"], [4203787, "sub_40250B", "void __fastcall __noreturn sub_40250B(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  __int64 v3; // r14\n  __int64 v4; // r13\n  __int64 v5; // r12\n  __int64 v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rbx\n  char *v9; // rax\n  FILE *v10; // rbx\n  char *v11; // rax\n  FILE *v12; // rbx\n  char *v13; // rax\n  FILE *v14; // rbx\n  char *v15; // rax\n  FILE *v16; // rbx\n  char *v17; // rax\n  FILE *v18; // rbx\n  char *v19; // rax\n  FILE *v20; // rbx\n  char *v21; // rax\n  FILE *v22; // rbx\n  char *v23; // rax\n  char *v24; // rax\n  FILE *v25; // rbx\n  char *v26; // rax\n\n  if ( a1 )\n  {\n    v1 = qword_60C310;\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = qword_60C310;\n    v4 = qword_60C310;\n    v5 = qword_60C310;\n    v6 = qword_60C310;\n    v7 = gettext(\n           \"Usage: %s [OPTION]... [-T] TARGET LINK_NAME   (1st form)\\n\"\n           \"  or:  %s [OPTION]... TARGET                  (2nd form)\\n\"\n           \"  or:  %s [OPTION]... TARGET... DIRECTORY     (3rd form)\\n\"\n           \"  or:  %s [OPTION]... -t DIRECTORY TARGET...  (4th form)\\n\");\n    printf(v7, v6, v5, v4, v3);\n    v8 = stdout;\n    v9 = gettext(\n           \"In the 1st form, create a link to TARGET with the name LINK_NAME.\\n\"\n           \"In the 2nd form, create a link to TARGET in the current directory.\\n\"\n           \"In the 3rd and 4th forms, create links to each TARGET in DIRECTORY.\\n\"\n           \"Create hard links by default, symbolic links with --symbolic.\\n\"\n           \"When creating hard links, each TARGET must exist.  Symbolic links\\n\"\n           \"can hold arbitrary text; if later resolved, a relative link is\\n\"\n           \"interpreted in relation to its parent directory.\\n\"\n           \"\\n\");\n    fputs_unlocked(v9, v8);\n    v10 = stdout;\n    v11 = gettext(\"Mandatory arguments to long options are mandatory for short options too.\\n\");\n    fputs_unlocked(v11, v10);\n    v12 = stdout;\n    v13 = gettext(\n            \"      --backup[=CONTROL]      make a backup of each existing destination file\\n\"\n            \"  -b                          like --backup but does not accept an argument\\n\"\n            \"  -d, -F, --directory         allow the superuser to attempt to hard link\\n\"\n            \"                                directories (note: will probably fail due to\\n\"\n            \"                                system restrictions, even for the superuser)\\n\"\n            \"  -f, --force                 remove existing destination files\\n\");\n    fputs_unlocked(v13, v12);\n    v14 = stdout;\n    v15 = gettext(\n            \"  -i, --interactive           prompt whether to remove destinations\\n\"\n            \"  -L, --logical               make hard links to symbolic link references\\n\"\n            \"  -n, --no-dereference        treat destination that is a symlink to a\\n\"\n            \"                                directory as if it were a normal file\\n\"\n            \"  -P, --physical              make hard links directly to symbolic links\\n\"\n            \"  -s, --symbolic              make symbolic links instead of hard links\\n\");\n    fputs_unlocked(v15, v14);\n    v16 = stdout;\n    v17 = gettext(\n            \"  -S, --suffix=SUFFIX         override the usual backup suffix\\n\"\n            \"  -t, --target-directory=DIRECTORY  specify the DIRECTORY in which to create\\n\"\n            \"                                the links\\n\"\n            \"  -T, --no-target-directory   treat LINK_NAME as a normal file\\n\"\n            \"  -v, --verbose               print name of each linked file\\n\");\n    fputs_unlocked(v17, v16);\n    v18 = stdout;\n    v19 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v19, v18);\n    v20 = stdout;\n    v21 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v21, v20);\n    v22 = stdout;\n    v23 = gettext(\n            \"\\n\"\n            \"The backup suffix is `~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\n\"\n            \"The version control method may be selected via the --backup option or through\\n\"\n            \"the VERSION_CONTROL environment variable.  Here are the values:\\n\"\n            \"\\n\");\n    fputs_unlocked(v23, v22);\n    v24 = gettext(\n            \"Using -s ignores -L and -P.  Otherwise, the last option specified controls\\n\"\n            \"behavior when the source is a symbolic link, defaulting to %s.\\n\"\n            \"\\n\");\n    printf(v24, \"-P\");\n    v25 = stdout;\n    v26 = gettext(\n            \"  none, off       never make backups (even if --backup is given)\\n\"\n            \"  numbered, t     make numbered backups\\n\"\n            \"  existing, nil   numbered if numbered backups exist, simple otherwise\\n\"\n            \"  simple, never   always make simple backups\\n\");\n    fputs_unlocked(v26, v25);\n    sub_40192D();\n  }\n  exit(a1);\n}\n"], [4204220, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  char *v3; // rax\n  __int64 v4; // r12\n  char *v5; // rbx\n  int *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  char *v10; // rax\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // rbx\n  char *v14; // rax\n  char *v15; // rax\n  int v16; // eax\n  __int64 v17; // rax\n  char v18; // [rsp+29h] [rbp-D7h]\n  char v19; // [rsp+2Ah] [rbp-D6h]\n  char v20; // [rsp+2Bh] [rbp-D5h]\n  int v21; // [rsp+2Ch] [rbp-D4h]\n  int i; // [rsp+30h] [rbp-D0h]\n  int v23; // [rsp+34h] [rbp-CCh]\n  char *v24; // [rsp+38h] [rbp-C8h]\n  char *v25; // [rsp+40h] [rbp-C0h]\n  const char *v26; // [rsp+48h] [rbp-B8h]\n  char **v27; // [rsp+50h] [rbp-B0h]\n  char *ptr; // [rsp+58h] [rbp-A8h]\n  struct stat stat_buf; // [rsp+60h] [rbp-A0h] BYREF\n\n  v19 = 0;\n  v25 = 0LL;\n  v26 = 0LL;\n  v20 = 0;\n  sub_4055C0(*a2, a2, a3);\n  setlocale(6, locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_408E20(sub_403485);\n  v24 = getenv(\"SIMPLE_BACKUP_SUFFIX\");\n  byte_60C2E9 = 0;\n  byte_60C2E8 = 0;\n  byte_60C2E6 = 0;\n  byte_60C2E7 = 0;\n  byte_60C2E4 = 0;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v23 = getopt_long(a1, a2, \"bdfinst:vFLPS:T\", &longopts, 0LL);\n        if ( v23 == -1 )\n        {\n          v21 = a1 - optind;\n          v27 = &a2[optind];\n          if ( a1 - optind <= 0 )\n          {\n            v9 = gettext(\"missing file operand\");\n            error(0, 0, v9);\n            sub_40250B(1);\n          }\n          if ( v20 )\n          {\n            if ( v26 )\n            {\n              v10 = gettext(\"cannot combine --target-directory and --no-target-directory\");\n              error(1, 0, v10);\n            }\n            if ( v21 != 2 )\n            {\n              if ( v21 > 1 )\n              {\n                v11 = sub_4056CB(v27[2]);\n                v12 = gettext(\"extra operand %s\");\n              }\n              else\n              {\n                v11 = sub_4056CB(*v27);\n                v12 = gettext(\"missing destination file operand after %s\");\n              }\n              error(0, 0, v12, v11);\n              sub_40250B(1);\n            }\n          }\n          else if ( !v26 )\n          {\n            if ( v21 > 1 )\n            {\n              if ( sub_401A37(v27[v21 - 1]) )\n              {\n                v26 = v27[--v21];\n              }\n              else if ( v21 > 2 )\n              {\n                v13 = sub_4056CB(v27[v21 - 1]);\n                v14 = gettext(\"target %s is not a directory\");\n                error(1, 0, v14, v13);\n              }\n            }\n            else\n            {\n              v26 = \".\";\n            }\n          }\n          if ( v24 )\n            src = (char *)sub_407B71(v24);\n          if ( v19 )\n          {\n            v15 = gettext(\"backup type\");\n            v16 = sub_403420(v15, v25);\n          }\n          else\n          {\n            v16 = 0;\n          }\n          dword_60C2E0 = v16;\n          if ( v26 )\n          {\n            if ( v21 > 1 )\n            {\n              if ( byte_60C2E7 )\n              {\n                if ( byte_60C2E4 != 1 && dword_60C2E0 != 3 )\n                {\n                  qword_60C2F0 = sub_40449B(61LL, 0LL, sub_405429, sub_40549F, sub_40558F);\n                  if ( !qword_60C2F0 )\n                    sub_407B9E();\n                }\n              }\n            }\n            v18 = 1;\n            for ( i = 0; i < v21; ++i )\n            {\n              v17 = sub_40375A(v27[i]);\n              ptr = (char *)sub_40396A(v26, v17, &stat_buf);\n              sub_403811(stat_buf.st_dev);\n              v18 = (unsigned __int8)(v18 & sub_401BF2(v27[i], ptr)) != 0;\n              free(ptr);\n            }\n          }\n          else\n          {\n            v18 = sub_401BF2(*v27, v27[1]);\n          }\n          exit(v18 == 0);\n        }\n        if ( v23 != 98 )\n          break;\n        v19 = 1;\n        if ( optarg )\n          v25 = optarg;\n      }\n      if ( v23 > 98 )\n        break;\n      if ( v23 == 76 )\n      {\n        byte_60C2E5 = 1;\n      }\n      else if ( v23 > 76 )\n      {\n        switch ( v23 )\n        {\n          case 'S':\n            v19 = 1;\n            v24 = optarg;\n            break;\n          case 'T':\n            v20 = 1;\n            break;\n          case 'P':\n            byte_60C2E5 = 0;\n            break;\n          default:\n            goto LABEL_46;\n        }\n      }\n      else\n      {\n        if ( v23 == -130 )\n          sub_40250B(0);\n        if ( v23 != 70 )\n        {\n          if ( v23 == -131 )\n          {\n            sub_4077B4(\n              (_DWORD)stdout,\n              (unsigned int)\"ln\",\n              (unsigned int)\"GNU coreutils\",\n              off_60C228[0],\n              (unsigned int)\"Mike Parker\",\n              (unsigned int)\"David MacKenzie\",\n              0);\n            exit(0);\n          }\nLABEL_46:\n          sub_40250B(1);\n        }\nLABEL_27:\n        byte_60C2E9 = 1;\n      }\n    }\n    if ( v23 == 110 )\n    {\n      byte_60C220 = 0;\n    }\n    else if ( v23 > 110 )\n    {\n      switch ( v23 )\n      {\n        case 't':\n          if ( v26 )\n          {\n            v3 = gettext(\"multiple target directories specified\");\n            error(1, 0, v3);\n          }\n          else\n          {\n            if ( (unsigned int)sub_408E40(optarg, &stat_buf) )\n            {\n              v4 = sub_4056CB(optarg);\n              v5 = gettext(\"accessing %s\");\n              v6 = __errno_location();\n              error(1, *v6, v5, v4);\n            }\n            if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n            {\n              v7 = sub_4056CB(optarg);\n              v8 = gettext(\"target %s is not a directory\");\n              error(1, 0, v8, v7);\n            }\n          }\n          v26 = optarg;\n          break;\n        case 'v':\n          byte_60C2E8 = 1;\n          break;\n        case 's':\n          byte_60C2E4 = 1;\n          break;\n        default:\n          goto LABEL_46;\n      }\n    }\n    else\n    {\n      switch ( v23 )\n      {\n        case 'f':\n          byte_60C2E7 = 1;\n          byte_60C2E6 = 0;\n          break;\n        case 'i':\n          byte_60C2E7 = 0;\n          byte_60C2E6 = 1;\n          break;\n        case 'd':\n          goto LABEL_27;\n        default:\n          goto LABEL_46;\n      }\n    }\n  }\n}\n"], [4206176, "sub_402E60", "char *__fastcall sub_402E60(const char *a1, __int64 a2, char a3)\n{\n  char *result; // rax\n  __int16 v5; // [rsp+20h] [rbp-30h]\n  unsigned __int64 v6; // [rsp+28h] [rbp-28h]\n  unsigned __int64 v7; // [rsp+28h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+30h] [rbp-20h]\n  char *v9; // [rsp+38h] [rbp-18h]\n  __int64 v10; // [rsp+40h] [rbp-10h]\n\n  v9 = (char *)sub_40375A(a1);\n  v6 = sub_4037C3(v9);\n  v8 = 255LL;\n  if ( v6 > 0xE )\n  {\n    v5 = *(_WORD *)v9;\n    *(_WORD *)v9 = 46;\n    *__errno_location() = 0;\n    v10 = pathconf(a1, 3);\n    if ( v10 >= 0 || !*__errno_location() )\n      v8 = v10;\n    *(_WORD *)v9 = v5;\n  }\n  result = (char *)v8;\n  if ( v8 < v6 )\n  {\n    v7 = &a1[a2] - v9;\n    if ( v8 <= v7 )\n      v7 = v8 - 1;\n    v9[v7] = a3;\n    result = &v9[v7 + 1];\n    *result = 0;\n  }\n  return result;\n}\n"], [4206456, "sub_402F78", "__int64 __fastcall sub_402F78(__int64 *a1, unsigned __int64 a2, __int64 a3)\n{\n  bool v6; // [rsp+2Fh] [rbp-61h]\n  __int16 v7; // [rsp+30h] [rbp-60h]\n  unsigned int v8; // [rsp+34h] [rbp-5Ch]\n  __int64 v9; // [rsp+38h] [rbp-58h]\n  unsigned __int64 v10; // [rsp+40h] [rbp-50h]\n  _BYTE *desta; // [rsp+48h] [rbp-48h]\n  char *destb; // [rsp+48h] [rbp-48h]\n  char *dest; // [rsp+48h] [rbp-48h]\n  size_t n; // [rsp+50h] [rbp-40h]\n  char *v15; // [rsp+58h] [rbp-38h]\n  char *v16; // [rsp+60h] [rbp-30h]\n  __int64 v17; // [rsp+68h] [rbp-28h]\n  DIR *dirp; // [rsp+70h] [rbp-20h]\n  struct dirent *v19; // [rsp+78h] [rbp-18h]\n  char *s2; // [rsp+80h] [rbp-10h]\n  unsigned __int64 v21; // [rsp+88h] [rbp-8h]\n\n  v8 = 2;\n  v9 = *a1;\n  v10 = 1LL;\n  v15 = (char *)sub_40375A(*a1);\n  v16 = &v15[-v9];\n  v17 = sub_4037C3(v15);\n  v7 = *(_WORD *)v15;\n  *(_WORD *)v15 = 46;\n  dirp = (DIR *)sub_4036A4(v9);\n  *(_WORD *)v15 = v7;\n  strcpy(&v15[v17], \".~1~\");\n  if ( !dirp )\n    return 2LL;\n  while ( 1 )\n  {\n    v19 = readdir(dirp);\n    if ( !v19 )\n      break;\n    if ( v19->d_ino )\n    {\n      if ( strlen(v19->d_name) >= v17 + 4 && !memcmp(&v16[v9], v19->d_name, v17 + 2) )\n      {\n        s2 = &v19->d_name[v17 + 2];\n        if ( *s2 > 48 && *s2 <= 57 )\n        {\n          v6 = *s2 == 57;\n          for ( n = 1LL; (unsigned int)(s2[n] - 48) <= 9; ++n )\n            v6 = v6 && s2[n] == 57;\n          if ( s2[n] == 126 && !s2[n + 1] && (v10 < n || v10 == n && memcmp((const void *)(a3 + 2 + v9), s2, n) <= 0) )\n          {\n            v10 = v6 + n;\n            v8 = v6;\n            v21 = a3 + v10 + 3;\n            if ( a2 <= v21 )\n            {\n              v9 = sub_407911(v9, 2LL, v21);\n              a2 = 2 * v21;\n            }\n            *(_BYTE *)(v9 + a3) = 46;\n            desta = (_BYTE *)(v9 + a3 + 2);\n            *(_BYTE *)(v9 + a3 + 1) = 126;\n            *desta = 48;\n            destb = &desta[v6];\n            memcpy(destb, s2, n + 2);\n            for ( dest = &destb[n]; *--dest == 57; *dest = 48 )\n              ;\n            ++*dest;\n          }\n        }\n      }\n    }\n  }\n  closedir(dirp);\n  *a1 = v9;\n  return v8;\n}\n"], [4207275, "sub_4032AB", "void *__fastcall sub_4032AB(const char *a1, int a2)\n{\n  int v2; // eax\n  bool v4; // [rsp+17h] [rbp-29h]\n  void *dest; // [rsp+18h] [rbp-28h] BYREF\n  size_t v6; // [rsp+20h] [rbp-20h]\n  __int64 v7; // [rsp+28h] [rbp-18h]\n  size_t n; // [rsp+30h] [rbp-10h]\n  unsigned __int64 v9; // [rsp+38h] [rbp-8h]\n\n  v7 = strlen(a1);\n  v4 = 1;\n  n = strlen(src) + 1;\n  v6 = n;\n  if ( n <= 8 )\n    v6 = 9LL;\n  v9 = v7 + v6 + 1;\n  dest = (void *)sub_407A1C(v9);\n  memcpy(dest, a1, v7 + 1);\n  if ( a2 != 1 )\n  {\n    v2 = sub_402F78((__int64 *)&dest, v9, v7);\n    switch ( v2 )\n    {\n      case 1:\n        v4 = 0;\n        break;\n      case 0:\n        return dest;\n      case 2:\n        v4 = a2 == 2;\n        break;\n    }\n  }\n  if ( v4 )\n    memcpy((char *)dest + v7, src, n);\n  sub_402E60((const char *)dest, v7, 126);\n  return dest;\n}\n"], [4207556, "sub_4033C4", "__int64 __fastcall sub_4033C4(__int64 a1, _BYTE *a2)\n{\n  __int64 result; // rax\n\n  if ( a2 && *a2 )\n    result = (unsigned int)dword_40A0A0[sub_408600(a1, a2, off_40A040, dword_40A0A0, 4LL, off_60C268)];\n  else\n    result = 2LL;\n  return result;\n}\n"], [4207648, "sub_403420", "__int64 __fastcall sub_403420(__int64 a1, _BYTE *a2)\n{\n  char *v3; // rax\n\n  if ( a2 && *a2 )\n    return sub_4033C4(a1, a2);\n  v3 = getenv(\"VERSION_CONTROL\");\n  return sub_4033C4((__int64)\"$VERSION_CONTROL\", v3);\n}\n"], [4207728, "sub_403470", "__int64 __fastcall sub_403470(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_60C2F8 = a1;\n  return result;\n}\n"], [4207749, "sub_403485", "__int64 sub_403485()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char v4; // [rsp+7h] [rbp-19h]\n  char *v5; // [rsp+8h] [rbp-18h]\n\n  v4 = 0;\n  if ( sub_403B18(stdin) && !(unsigned int)sub_407F86(stdin, 0LL, 1LL) && (unsigned int)sub_407F3B(stdin) )\n    v4 = 1;\n  if ( (unsigned int)sub_408AB7(stdin) )\n    v4 = 1;\n  if ( v4 )\n  {\n    v5 = gettext(\"error closing file\");\n    if ( qword_60C2F8 )\n    {\n      v0 = (const char *)sub_406CE4(qword_60C2F8);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v5);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v5);\n    }\n  }\n  result = sub_4035B9();\n  if ( v4 )\n    _exit(status);\n  return result;\n}\n"], [4208015, "sub_40358F", "__int64 __fastcall sub_40358F(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_60C300 = a1;\n  return result;\n}\n"], [4208036, "sub_4035A4", "__int64 __fastcall sub_4035A4(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_60C308 = a1;\n  return result;\n}\n"], [4208057, "sub_4035B9", "__int64 sub_4035B9()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_408AB7(stdout) && (byte_60C308 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_60C300 )\n    {\n      v0 = (const char *)sub_406CE4(qword_60C300);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_408AB7(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4208292, "sub_4036A4", "DIR *__fastcall sub_4036A4(const char *a1)\n{\n  int v2; // [rsp+14h] [rbp-1Ch]\n  int v3; // [rsp+18h] [rbp-18h]\n  int fd; // [rsp+1Ch] [rbp-14h]\n  DIR *dirp; // [rsp+20h] [rbp-10h]\n  DIR *v6; // [rsp+28h] [rbp-8h]\n\n  dirp = opendir(a1);\n  if ( dirp )\n  {\n    v3 = dirfd(dirp);\n    if ( v3 >= 0 && v3 <= 2 )\n    {\n      fd = sub_40705C((unsigned int)v3);\n      if ( fd >= 0 )\n      {\n        v6 = fdopendir(fd);\n        v2 = *__errno_location();\n        if ( !v6 )\n          close(fd);\n      }\n      else\n      {\n        v2 = *__errno_location();\n        v6 = 0LL;\n      }\n      closedir(dirp);\n      *__errno_location() = v2;\n      dirp = v6;\n    }\n  }\n  return dirp;\n}\n"], [4208474, "sub_40375A", "_BYTE *__fastcall sub_40375A(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4208579, "sub_4037C3", "size_t __fastcall sub_4037C3(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4208657, "sub_403811", "_BOOL8 __fastcall sub_403811(char *a1)\n{\n  char v1; // al\n  const char *v3; // [rsp+20h] [rbp-10h]\n  const char *v4; // [rsp+28h] [rbp-8h]\n\n  v3 = sub_40375A(a1);\n  if ( !*v3 )\n    v3 = a1;\n  v4 = &v3[sub_4037C3(v3)];\n  v1 = *v4;\n  *v4 = 0;\n  return v1 != 0;\n}\n"], [4208755, "sub_403873", "void __fastcall sub_403873(__int64 a1, __int64 a2, _QWORD *a3)\n{\n  _QWORD *v4; // [rsp+20h] [rbp-10h]\n  __int64 v5; // [rsp+28h] [rbp-8h]\n\n  if ( a1 )\n  {\n    v4 = (_QWORD *)sub_407A1C(24LL);\n    *v4 = sub_407B71(a2);\n    v4[1] = a3[1];\n    v4[2] = *a3;\n    v5 = sub_405131(a1, v4);\n    if ( !v5 )\n      sub_407B9E();\n    if ( (_QWORD *)v5 != v4 )\n      sub_40558F(v4);\n  }\n}\n"], [4208910, "sub_40390E", "bool __fastcall sub_40390E(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v4[4]; // [rsp+20h] [rbp-20h] BYREF\n\n  if ( !a1 )\n    return 0;\n  v4[0] = a2;\n  v4[1] = a3[1];\n  v4[2] = *a3;\n  return sub_403E62(a1, v4) != 0;\n}\n"], [4209002, "sub_40396A", "__int64 __fastcall sub_40396A(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  v4 = sub_4039CB(a1, a2, a3);\n  if ( !v4 )\n    sub_407B9E();\n  return v4;\n}\n"], [4209067, "sub_4039AB", "_BYTE *__fastcall sub_4039AB(_BYTE *a1)\n{\n  while ( *a1 == 47 )\n    ++a1;\n  return a1;\n}\n"], [4209099, "sub_4039CB", "void *__fastcall sub_4039CB(_BYTE *a1, _BYTE *a2, _QWORD *a3)\n{\n  _BOOL4 v3; // eax\n  const char *v6; // [rsp+20h] [rbp-40h]\n  size_t v7; // [rsp+28h] [rbp-38h]\n  size_t n; // [rsp+30h] [rbp-30h]\n  _BOOL8 v9; // [rsp+38h] [rbp-28h]\n  char *s; // [rsp+40h] [rbp-20h]\n  size_t v11; // [rsp+48h] [rbp-18h]\n  void *dest; // [rsp+50h] [rbp-10h]\n  _BYTE *v13; // [rsp+58h] [rbp-8h]\n  char *v14; // [rsp+58h] [rbp-8h]\n\n  v6 = sub_40375A(a1);\n  v7 = sub_4037C3(v6);\n  n = v6 - a1 + v7;\n  v3 = v7 && v6[v7 - 1] != 47;\n  v9 = v3;\n  s = sub_4039AB(a2);\n  v11 = strlen(s);\n  dest = malloc(v9 + n + v11 + 1);\n  if ( !dest )\n    return 0LL;\n  v13 = mempcpy(dest, a1, n);\n  *v13 = 47;\n  v14 = &v13[v9];\n  if ( a3 )\n    *a3 = &v14[-(*a2 == 47)];\n  *(_BYTE *)mempcpy(v14, s, v11) = 0;\n  return dest;\n}\n"], [4209432, "sub_403B18", "__int64 __fastcall sub_403B18(__int64 a1)\n{\n  __int64 v2; // rax\n\n  if ( *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 32) )\n    return 0LL;\n  if ( (*(_DWORD *)a1 & 0x100) != 0 )\n    v2 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72);\n  else\n    v2 = 0LL;\n  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) + v2;\n}\n"], [4209545, "sub_403B89", "__int64 __fastcall sub_403B89(__int64 a1, char a2)\n{\n  return __ROR8__(a1, a2);\n}\n"], [4209573, "sub_403BA5", "__int64 __fastcall sub_403BA5(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 16);\n}\n"], [4209591, "sub_403BB7", "__int64 __fastcall sub_403BB7(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 24);\n}\n"], [4209609, "sub_403BC9", "__int64 __fastcall sub_403BC9(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 32);\n}\n"], [4209627, "sub_403BDB", "unsigned __int64 __fastcall sub_403BDB(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  unsigned __int64 v3; // [rsp+10h] [rbp-18h]\n  _QWORD *v4; // [rsp+18h] [rbp-10h]\n  unsigned __int64 j; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v4 = i;\n      for ( j = 1LL; ; ++j )\n      {\n        v4 = (_QWORD *)v4[1];\n        if ( !v4 )\n          break;\n      }\n      if ( j > v3 )\n        v3 = j;\n    }\n  }\n  return v3;\n}\n"], [4209753, "sub_403C59", "_BOOL8 __fastcall sub_403C59(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  __int64 v3; // [rsp+10h] [rbp-18h]\n  __int64 v4; // [rsp+18h] [rbp-10h]\n  _QWORD *v5; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  v4 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v5 = i;\n      ++v3;\n      ++v4;\n      while ( 1 )\n      {\n        v5 = (_QWORD *)v5[1];\n        if ( !v5 )\n          break;\n        ++v4;\n      }\n    }\n  }\n  return *(_QWORD *)(a1 + 24) == v3 && *(_QWORD *)(a1 + 32) == v4;\n}\n"], [4209907, "sub_403CF3", "int __fastcall sub_403CF3(__int64 a1, FILE *a2)\n{\n  double v2; // xmm0_8\n  double v3; // xmm1_8\n  double v4; // xmm0_8\n  __int64 v6; // [rsp+10h] [rbp-20h]\n  __int64 v7; // [rsp+18h] [rbp-18h]\n  __int64 v8; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v9; // [rsp+28h] [rbp-8h]\n\n  v6 = sub_403BC9(a1);\n  v7 = sub_403BA5(a1);\n  v8 = sub_403BB7(a1);\n  v9 = sub_403BDB(a1);\n  fprintf(a2, \"# entries:         %lu\\n\", v6);\n  fprintf(a2, \"# buckets:         %lu\\n\", v7);\n  if ( v8 < 0 )\n    v2 = (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1)) + (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1));\n  else\n    v2 = (double)(int)v8;\n  v3 = 100.0 * v2;\n  if ( v7 < 0 )\n    v4 = (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1)) + (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1));\n  else\n    v4 = (double)(int)v7;\n  fprintf(a2, \"# buckets used:    %lu (%.2f%%)\\n\", v8, v3 / v4);\n  return fprintf(a2, \"max bucket length: %lu\\n\", v9);\n}\n"], [4210187, "sub_403E0B", "__int64 __fastcall sub_403E0B(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v3 )\n    abort();\n  return 16 * v3 + *(_QWORD *)a1;\n}\n"], [4210274, "sub_403E62", "__int64 __fastcall sub_403E62(__int64 a1, __int64 a2)\n{\n  _QWORD *i; // [rsp+10h] [rbp-10h]\n  _QWORD *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = (_QWORD *)sub_403E0B(a1, a2);\n  if ( !*v4 )\n    return 0LL;\n  for ( i = v4; i; i = (_QWORD *)i[1] )\n  {\n    if ( *i == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *i) )\n      return *i;\n  }\n  return 0LL;\n}\n"], [4210421, "sub_403EF5", "__int64 __fastcall sub_403EF5(unsigned __int64 *a1)\n{\n  unsigned __int64 i; // [rsp+18h] [rbp-8h]\n\n  if ( !a1[4] )\n    return 0LL;\n  for ( i = *a1; ; i += 16LL )\n  {\n    if ( a1[1] <= i )\n      abort();\n    if ( *(_QWORD *)i )\n      break;\n  }\n  return *(_QWORD *)i;\n}\n"], [4210513, "sub_403F51", "__int64 __fastcall sub_403F51(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_403E0B(a1, a2);\n  v4 = v3;\n  do\n  {\n    if ( *(_QWORD *)v4 == a2 && *(_QWORD *)(v4 + 8) )\n      return **(_QWORD **)(v4 + 8);\n    v4 = *(_QWORD *)(v4 + 8);\n  }\n  while ( v4 );\n  while ( 1 )\n  {\n    v3 += 16LL;\n    if ( v3 >= *(_QWORD *)(a1 + 8) )\n      break;\n    if ( *(_QWORD *)v3 )\n      return *(_QWORD *)v3;\n  }\n  return 0LL;\n}\n"], [4210667, "sub_403FEB", "unsigned __int64 __fastcall sub_403FEB(__int64 a1, __int64 a2, unsigned __int64 a3)\n{\n  __int64 v4; // rax\n  unsigned __int64 v5; // [rsp+20h] [rbp-18h]\n  _QWORD *i; // [rsp+28h] [rbp-10h]\n  _QWORD *j; // [rsp+30h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( v5 >= a3 )\n          return v5;\n        v4 = v5++;\n        *(_QWORD *)(a2 + 8 * v4) = *j;\n      }\n    }\n  }\n  return v5;\n}\n"], [4210823, "sub_404087", "__int64 __fastcall sub_404087(__int64 a1, unsigned __int8 (__fastcall *a2)(_QWORD, __int64), __int64 a3)\n{\n  __int64 v5; // [rsp+28h] [rbp-18h]\n  _QWORD *i; // [rsp+30h] [rbp-10h]\n  _QWORD *j; // [rsp+38h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( a2(*j, a3) != 1 )\n          return v5;\n        ++v5;\n      }\n    }\n  }\n  return v5;\n}\n"], [4210971, "sub_40411B", "unsigned __int64 __fastcall sub_40411B(_BYTE *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = 0LL;\n  while ( *a1 )\n    v4 = (31 * v4 + (unsigned __int8)*a1++) % a2;\n  return v4;\n}\n"], [4211057, "sub_404171", "bool __fastcall sub_404171(unsigned __int64 a1)\n{\n  unsigned __int64 v2; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+10h] [rbp-8h]\n\n  v2 = 3LL;\n  v4 = 9LL;\n  while ( v4 < a1 && a1 % v2 )\n  {\n    v3 = v2 + 1;\n    v4 += 4 * v3;\n    v2 = v3 + 1;\n  }\n  return a1 % v2 != 0;\n}\n"], [4211165, "sub_4041DD", "__int64 __fastcall sub_4041DD(unsigned __int64 a1)\n{\n  __int64 v2; // [rsp+0h] [rbp-8h]\n  __int64 i; // [rsp+0h] [rbp-8h]\n\n  v2 = a1;\n  if ( a1 <= 9 )\n    v2 = 10LL;\n  for ( i = v2 | 1; i != -1 && !sub_404171(i); i += 2LL )\n    ;\n  return i;\n}\n"], [4211236, "sub_404224", "__int64 __fastcall sub_404224(__int64 a1)\n{\n  __int64 result; // rax\n\n  *(_DWORD *)a1 = 0;\n  *(_DWORD *)(a1 + 4) = 1065353216;\n  *(_DWORD *)(a1 + 8) = 1061997773;\n  *(_DWORD *)(a1 + 12) = 1068826100;\n  result = a1;\n  *(_BYTE *)(a1 + 16) = 0;\n  return result;\n}\n"], [4211305, "sub_404269", "unsigned __int64 __fastcall sub_404269(__int64 a1, unsigned __int64 a2)\n{\n  return sub_403B89(a1, 3) % a2;\n}\n"], [4211360, "sub_4042A0", "bool __fastcall sub_4042A0(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"], [4211385, "sub_4042B9", "__int64 __fastcall sub_4042B9(__int64 a1)\n{\n  __int64 v2; // [rsp+10h] [rbp-8h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( (_UNKNOWN *)v2 == &unk_40A120 )\n    return 1LL;\n  if ( *(float *)(v2 + 8) > 0.1\n    && (float)(1.0 - 0.1) > *(float *)(v2 + 8)\n    && *(float *)(v2 + 12) > (float)(0.1 + 1.0)\n    && *(float *)v2 >= 0.0\n    && *(float *)(v2 + 4) > (float)(*(float *)v2 + 0.1)\n    && *(float *)(v2 + 4) <= 1.0\n    && *(float *)(v2 + 8) > (float)(*(float *)v2 + 0.1) )\n  {\n    return 1LL;\n  }\n  *(_QWORD *)(a1 + 40) = &unk_40A120;\n  return 0LL;\n}\n"], [4211633, "sub_4043B1", "unsigned __int64 __fastcall sub_4043B1(__int64 a1, __int64 a2)\n{\n  float v2; // xmm0_4\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // [rsp+8h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-18h]\n  float v6; // [rsp+1Ch] [rbp-4h]\n\n  v4 = a1;\n  if ( *(_BYTE *)(a2 + 16) != 1 )\n  {\n    if ( a1 < 0 )\n      v2 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n         + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n    else\n      v2 = (float)(int)a1;\n    v6 = v2 / *(float *)(a2 + 8);\n    if ( v6 >= 1.8446744e19 )\n      return 0LL;\n    if ( v6 >= 9.223372e18 )\n      v4 = (unsigned int)(int)(float)(v6 - 9.223372e18) ^ 0x8000000000000000LL;\n    else\n      v4 = (unsigned int)(int)v6;\n  }\n  v5 = sub_4041DD(v4);\n  if ( v5 <= 0x1FFFFFFFFFFFFFFFLL )\n    result = v5;\n  else\n    result = 0LL;\n  return result;\n}\n"], [4211867, "sub_40449B", "size_t *__fastcall sub_40449B(__int64 a1, void *a2, unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2), bool (__fastcall *a4)(__int64 a1, __int64 a2), size_t a5)\n{\n  size_t *result; // rax\n  bool (__fastcall *v7)(__int64, __int64); // [rsp+10h] [rbp-30h]\n  unsigned __int64 (__fastcall *v8)(__int64, unsigned __int64); // [rsp+18h] [rbp-28h]\n  void *v9; // [rsp+20h] [rbp-20h]\n  size_t *ptr; // [rsp+38h] [rbp-8h]\n\n  v9 = a2;\n  v8 = a3;\n  v7 = a4;\n  if ( !a3 )\n    v8 = sub_404269;\n  if ( !a4 )\n    v7 = sub_4042A0;\n  ptr = (size_t *)malloc(0x50uLL);\n  if ( !ptr )\n    return 0LL;\n  if ( !a2 )\n    v9 = &unk_40A120;\n  ptr[5] = (size_t)v9;\n  if ( (unsigned __int8)sub_4042B9((__int64)ptr) == 1\n    && (ptr[2] = sub_4043B1(a1, (__int64)v9)) != 0\n    && (*ptr = (size_t)calloc(ptr[2], 0x10uLL)) != 0 )\n  {\n    ptr[1] = 16 * ptr[2] + *ptr;\n    ptr[3] = 0LL;\n    ptr[4] = 0LL;\n    ptr[6] = (size_t)v8;\n    ptr[7] = (size_t)v7;\n    ptr[8] = a5;\n    ptr[9] = 0LL;\n    result = ptr;\n  }\n  else\n  {\n    free(ptr);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4212224, "sub_404600", "__int64 __fastcall sub_404600(__int64 a1)\n{\n  __int64 result; // rax\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+20h] [rbp-10h]\n  _QWORD *v4; // [rsp+28h] [rbp-8h]\n\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (_QWORD *)i[1]; j; j = v4 )\n      {\n        if ( *(_QWORD *)(a1 + 64) )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*j);\n        *j = 0LL;\n        v4 = (_QWORD *)j[1];\n        j[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = j;\n      }\n      if ( *(_QWORD *)(a1 + 64) )\n        (*(void (__fastcall **)(_QWORD))(a1 + 64))(*i);\n      *i = 0LL;\n      i[1] = 0LL;\n    }\n  }\n  *(_QWORD *)(a1 + 24) = 0LL;\n  result = a1;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  return result;\n}\n"], [4212486, "sub_404706", "void __fastcall sub_404706(__int64 a1)\n{\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+18h] [rbp-18h]\n  _QWORD *ptr; // [rsp+20h] [rbp-10h]\n  _QWORD *ptra; // [rsp+20h] [rbp-10h]\n  _QWORD *ptrb; // [rsp+20h] [rbp-10h]\n  _QWORD *v6; // [rsp+28h] [rbp-8h]\n  _QWORD *v7; // [rsp+28h] [rbp-8h]\n\n  if ( *(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 32) )\n  {\n    for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n    {\n      if ( *i )\n      {\n        for ( ptr = i; ptr; ptr = (_QWORD *)ptr[1] )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*ptr);\n      }\n    }\n  }\n  for ( j = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)j; j += 2 )\n  {\n    for ( ptra = (_QWORD *)j[1]; ptra; ptra = v6 )\n    {\n      v6 = (_QWORD *)ptra[1];\n      free(ptra);\n    }\n  }\n  for ( ptrb = *(_QWORD **)(a1 + 72); ptrb; ptrb = v7 )\n  {\n    v7 = (_QWORD *)ptrb[1];\n    free(ptrb);\n  }\n  free(*(void **)a1);\n  free((void *)a1);\n}\n"], [4212784, "sub_404830", "void *__fastcall sub_404830(__int64 a1)\n{\n  __int64 v2; // [rsp+18h] [rbp-8h]\n\n  if ( !*(_QWORD *)(a1 + 72) )\n    return malloc(0x10uLL);\n  v2 = *(_QWORD *)(a1 + 72);\n  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v2 + 8);\n  return (void *)v2;\n}\n"], [4212859, "sub_40487B", "__int64 __fastcall sub_40487B(__int64 a1, _QWORD *a2)\n{\n  __int64 result; // rax\n\n  *a2 = 0LL;\n  a2[1] = *(_QWORD *)(a1 + 72);\n  result = a1;\n  *(_QWORD *)(a1 + 72) = a2;\n  return result;\n}\n"], [4212912, "sub_4048B0", "__int64 __fastcall sub_4048B0(__int64 a1, __int64 a2, _QWORD *a3, char a4)\n{\n  __int64 result; // rax\n  __int64 v5; // rdx\n  _QWORD *i; // [rsp+20h] [rbp-30h]\n  _QWORD *v9; // [rsp+28h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-20h]\n  _QWORD *v11; // [rsp+38h] [rbp-18h]\n  __int64 v12; // [rsp+40h] [rbp-10h]\n  _QWORD *v13; // [rsp+48h] [rbp-8h]\n\n  v9 = (_QWORD *)sub_403E0B(a1, a2);\n  *a3 = v9;\n  if ( !*v9 )\n    return 0LL;\n  if ( *v9 == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *v9) )\n  {\n    v12 = *v9;\n    if ( a4 )\n    {\n      if ( v9[1] )\n      {\n        v13 = (_QWORD *)v9[1];\n        v5 = v13[1];\n        *v9 = *v13;\n        v9[1] = v5;\n        sub_40487B(a1, v13);\n      }\n      else\n      {\n        *v9 = 0LL;\n      }\n    }\n    result = v12;\n  }\n  else\n  {\n    for ( i = v9; ; i = (_QWORD *)i[1] )\n    {\n      if ( !i[1] )\n        return 0LL;\n      if ( *(_QWORD *)i[1] == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *(_QWORD *)i[1]) )\n        break;\n    }\n    v10 = *(_QWORD *)i[1];\n    if ( a4 )\n    {\n      v11 = (_QWORD *)i[1];\n      i[1] = v11[1];\n      sub_40487B(a1, v11);\n    }\n    result = v10;\n  }\n  return result;\n}\n"], [4213317, "sub_404A45", "__int64 __fastcall sub_404A45(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *i; // [rsp+20h] [rbp-30h]\n  __int64 *j; // [rsp+28h] [rbp-28h]\n  __int64 v7; // [rsp+30h] [rbp-20h]\n  __int64 v8; // [rsp+30h] [rbp-20h]\n  _QWORD *v9; // [rsp+38h] [rbp-18h]\n  _QWORD *v10; // [rsp+38h] [rbp-18h]\n  __int64 *v11; // [rsp+40h] [rbp-10h]\n  _QWORD *v12; // [rsp+48h] [rbp-8h]\n\n  for ( i = *(__int64 **)a2; *(_QWORD *)(a2 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (__int64 *)i[1]; j; j = v11 )\n      {\n        v7 = *j;\n        v9 = (_QWORD *)sub_403E0B(a1, *j);\n        v11 = (__int64 *)j[1];\n        if ( *v9 )\n        {\n          j[1] = v9[1];\n          v9[1] = j;\n        }\n        else\n        {\n          *v9 = v7;\n          ++*(_QWORD *)(a1 + 24);\n          sub_40487B(a1, j);\n        }\n      }\n      v8 = *i;\n      i[1] = 0LL;\n      if ( !a3 )\n      {\n        v10 = (_QWORD *)sub_403E0B(a1, v8);\n        if ( *v10 )\n        {\n          v12 = sub_404830(a1);\n          if ( !v12 )\n            return 0LL;\n          *v12 = v8;\n          v12[1] = v10[1];\n          v10[1] = v12;\n        }\n        else\n        {\n          *v10 = v8;\n          ++*(_QWORD *)(a1 + 24);\n        }\n        *i = 0LL;\n        --*(_QWORD *)(a2 + 24);\n      }\n    }\n  }\n  return 1LL;\n}\n"], [4213779, "sub_404C13", "__int64 __fastcall sub_404C13(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 nmemb; // [rsp+10h] [rbp-60h]\n  void *v4; // [rsp+20h] [rbp-50h] BYREF\n  __int64 v5; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v6; // [rsp+30h] [rbp-40h]\n  __int64 v7; // [rsp+38h] [rbp-38h]\n  __int64 v8; // [rsp+40h] [rbp-30h]\n  __int64 v9; // [rsp+48h] [rbp-28h]\n  __int64 v10; // [rsp+50h] [rbp-20h]\n  __int64 v11; // [rsp+58h] [rbp-18h]\n  __int64 v12; // [rsp+60h] [rbp-10h]\n  __int64 v13; // [rsp+68h] [rbp-8h]\n\n  nmemb = sub_4043B1(a2, *(_QWORD *)(a1 + 40));\n  if ( !nmemb )\n    return 0LL;\n  if ( *(_QWORD *)(a1 + 16) == nmemb )\n    return 1LL;\n  v4 = calloc(nmemb, 0x10uLL);\n  if ( !v4 )\n    return 0LL;\n  v6 = nmemb;\n  v5 = (__int64)v4 + 16 * nmemb;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = *(_QWORD *)(a1 + 40);\n  v10 = *(_QWORD *)(a1 + 48);\n  v11 = *(_QWORD *)(a1 + 56);\n  v12 = *(_QWORD *)(a1 + 64);\n  v13 = *(_QWORD *)(a1 + 72);\n  if ( (unsigned __int8)sub_404A45((__int64)&v4, a1, 0) )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = v4;\n    *(_QWORD *)(a1 + 8) = v5;\n    *(_QWORD *)(a1 + 16) = v6;\n    *(_QWORD *)(a1 + 24) = v7;\n    *(_QWORD *)(a1 + 72) = v13;\n    result = 1LL;\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 72) = v13;\n    if ( (unsigned __int8)sub_404A45(a1, (__int64)&v4, 1) != 1 || (unsigned __int8)sub_404A45(a1, (__int64)&v4, 0) != 1 )\n      abort();\n    free(v4);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4214295, "sub_404E17", "__int64 __fastcall sub_404E17(_QWORD *a1, __int64 a2, _QWORD *a3)\n{\n  __int64 result; // rax\n  __int64 v4; // rax\n  float v5; // xmm0_4\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  float v8; // xmm1_4\n  __int64 v9; // rdx\n  __int64 v10; // rax\n  float v11; // xmm0_4\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  float v14; // xmm1_4\n  __int64 v15; // rdx\n  __int64 v16; // rax\n  float v17; // xmm0_4\n  __int64 v18; // rdx\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  __int64 v23; // rax\n  __int64 *v25; // [rsp+30h] [rbp-20h] BYREF\n  __int64 v26; // [rsp+38h] [rbp-18h]\n  __int64 v27; // [rsp+40h] [rbp-10h]\n  _QWORD *v28; // [rsp+48h] [rbp-8h]\n\n  if ( !a2 )\n    abort();\n  v26 = sub_4048B0((__int64)a1, a2, &v25, 0);\n  if ( v26 )\n  {\n    if ( a3 )\n      *a3 = v26;\n    result = 0LL;\n  }\n  else\n  {\n    v4 = a1[3];\n    if ( v4 < 0 )\n    {\n      v6 = a1[3] & 1LL | ((unsigned __int64)v4 >> 1);\n      v5 = (float)(int)v6 + (float)(int)v6;\n    }\n    else\n    {\n      v5 = (float)(int)v4;\n    }\n    v7 = a1[2];\n    if ( v7 < 0 )\n    {\n      v9 = a1[2] & 1LL | ((unsigned __int64)v7 >> 1);\n      v8 = (float)(int)v9 + (float)(int)v9;\n    }\n    else\n    {\n      v8 = (float)(int)v7;\n    }\n    if ( v5 > (float)(v8 * *(float *)(a1[5] + 8LL)) )\n    {\n      sub_4042B9((__int64)a1);\n      v10 = a1[3];\n      if ( v10 < 0 )\n      {\n        v12 = a1[3] & 1LL | ((unsigned __int64)v10 >> 1);\n        v11 = (float)(int)v12 + (float)(int)v12;\n      }\n      else\n      {\n        v11 = (float)(int)v10;\n      }\n      v13 = a1[2];\n      if ( v13 < 0 )\n      {\n        v15 = a1[2] & 1LL | ((unsigned __int64)v13 >> 1);\n        v14 = (float)(int)v15 + (float)(int)v15;\n      }\n      else\n      {\n        v14 = (float)(int)v13;\n      }\n      if ( v11 > (float)(v14 * *(float *)(a1[5] + 8LL)) )\n      {\n        v27 = a1[5];\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v16 = a1[2];\n          if ( v16 < 0 )\n          {\n            v18 = a1[2] & 1LL | ((unsigned __int64)v16 >> 1);\n            v17 = (float)(int)v18 + (float)(int)v18;\n          }\n          else\n          {\n            v17 = (float)(int)v16;\n          }\n          v19 = v17 * *(float *)(v27 + 12);\n        }\n        else\n        {\n          v20 = a1[2];\n          if ( v20 < 0 )\n          {\n            v22 = a1[2] & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v19 = (float)(v21 * *(float *)(v27 + 12)) * *(float *)(v27 + 8);\n        }\n        if ( v19 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        if ( v19 >= 9.223372e18 )\n          v23 = (unsigned int)(int)(float)(v19 - 9.223372e18) ^ 0x8000000000000000LL;\n        else\n          v23 = (unsigned int)(int)v19;\n        if ( (unsigned __int8)sub_404C13((__int64)a1, v23) != 1 )\n          return 0xFFFFFFFFLL;\n        if ( sub_4048B0((__int64)a1, a2, &v25, 0) )\n          abort();\n      }\n    }\n    if ( *v25 )\n    {\n      v28 = sub_404830((__int64)a1);\n      if ( v28 )\n      {\n        *v28 = a2;\n        v28[1] = v25[1];\n        v25[1] = (__int64)v28;\n        ++a1[4];\n        result = 1LL;\n      }\n      else\n      {\n        result = 0xFFFFFFFFLL;\n      }\n    }\n    else\n    {\n      *v25 = a2;\n      ++a1[4];\n      ++a1[3];\n      result = 1LL;\n    }\n  }\n  return result;\n}\n"], [4215089, "sub_405131", "__int64 __fastcall sub_405131(_QWORD *a1, __int64 a2)\n{\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h] BYREF\n\n  v3 = sub_404E17(a1, a2, &v4);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( v3 )\n    return a2;\n  return v4;\n}\n"], [4215162, "sub_40517A", "__int64 __fastcall sub_40517A(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rax\n  float v4; // xmm0_4\n  __int64 v5; // rdx\n  __int64 v6; // rax\n  float v7; // xmm1_4\n  __int64 v8; // rdx\n  __int64 v9; // rax\n  float v10; // xmm0_4\n  __int64 v11; // rdx\n  __int64 v12; // rax\n  float v13; // xmm1_4\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  float v16; // xmm0_4\n  __int64 v17; // rdx\n  float v18; // xmm0_4\n  __int64 v19; // rax\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  float v23; // xmm0_4\n  _QWORD *v24; // [rsp+10h] [rbp-30h] BYREF\n  void *ptr; // [rsp+18h] [rbp-28h]\n  __int64 v26; // [rsp+20h] [rbp-20h]\n  __int64 v27; // [rsp+28h] [rbp-18h]\n  __int64 v28; // [rsp+30h] [rbp-10h]\n  void *v29; // [rsp+38h] [rbp-8h]\n\n  v26 = sub_4048B0(a1, a2, &v24, 1);\n  if ( !v26 )\n    return 0LL;\n  --*(_QWORD *)(a1 + 32);\n  if ( !*v24 )\n  {\n    v3 = --*(_QWORD *)(a1 + 24);\n    if ( v3 < 0 )\n    {\n      v5 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v3 >> 1);\n      v4 = (float)(int)v5 + (float)(int)v5;\n    }\n    else\n    {\n      v4 = (float)(int)v3;\n    }\n    v6 = *(_QWORD *)(a1 + 16);\n    if ( v6 < 0 )\n    {\n      v8 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v6 >> 1);\n      v7 = (float)(int)v8 + (float)(int)v8;\n    }\n    else\n    {\n      v7 = (float)(int)v6;\n    }\n    if ( (float)(v7 * **(float **)(a1 + 40)) > v4 )\n    {\n      sub_4042B9(a1);\n      v9 = *(_QWORD *)(a1 + 24);\n      if ( v9 < 0 )\n      {\n        v11 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v9 >> 1);\n        v10 = (float)(int)v11 + (float)(int)v11;\n      }\n      else\n      {\n        v10 = (float)(int)v9;\n      }\n      v12 = *(_QWORD *)(a1 + 16);\n      if ( v12 < 0 )\n      {\n        v14 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v12 >> 1);\n        v13 = (float)(int)v14 + (float)(int)v14;\n      }\n      else\n      {\n        v13 = (float)(int)v12;\n      }\n      if ( (float)(v13 * **(float **)(a1 + 40)) > v10 )\n      {\n        v27 = *(_QWORD *)(a1 + 40);\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v15 = *(_QWORD *)(a1 + 16);\n          if ( v15 < 0 )\n          {\n            v17 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v15 >> 1);\n            v16 = (float)(int)v17 + (float)(int)v17;\n          }\n          else\n          {\n            v16 = (float)(int)v15;\n          }\n          v18 = v16 * *(float *)(v27 + 4);\n          if ( v18 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v18;\n        }\n        else\n        {\n          v20 = *(_QWORD *)(a1 + 16);\n          if ( v20 < 0 )\n          {\n            v22 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v23 = (float)(v21 * *(float *)(v27 + 4)) * *(float *)(v27 + 8);\n          if ( v23 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v23 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v23;\n        }\n        v28 = v19;\n        if ( (unsigned __int8)sub_404C13(a1, v19) != 1 )\n        {\n          for ( ptr = *(void **)(a1 + 72); ptr; ptr = v29 )\n          {\n            v29 = (void *)*((_QWORD *)ptr + 1);\n            free(ptr);\n          }\n          *(_QWORD *)(a1 + 72) = 0LL;\n        }\n      }\n    }\n  }\n  return v26;\n}\n"], [4215849, "sub_405429", "unsigned __int64 __fastcall sub_405429(_QWORD *a1, unsigned __int64 a2)\n{\n  return ((unsigned __int64)sub_408C90(*a1, a2) ^ a1[1]) % a2;\n}\n"], [4215925, "sub_405475", "unsigned __int64 __fastcall sub_405475(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n"], [4215967, "sub_40549F", "_BOOL8 __fastcall sub_40549F(_QWORD *a1, _QWORD *a2)\n{\n  return a1[1] == a2[1] && a1[2] == a2[2] && (unsigned __int8)sub_406E63(*a1, *a2);\n}\n"], [4216087, "sub_405517", "_BOOL8 __fastcall sub_405517(__int64 a1, __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)\n      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)\n      && !strcmp(*(const char **)a1, *(const char **)a2);\n}\n"], [4216207, "sub_40558F", "void __fastcall sub_40558F(void **a1)\n{\n  free(*a1);\n  free(a1);\n}\n"], [4216256, "sub_4055C0", "char *__fastcall sub_4055C0(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_60C310 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4216487, "sub_4056A7", "__int64 __fastcall sub_4056A7(unsigned int a1, __int64 a2)\n{\n  return sub_406B56(a1, 6LL, a2);\n}\n"], [4216523, "sub_4056CB", "__int64 __fastcall sub_4056CB(__int64 a1)\n{\n  return sub_4056A7(0, a1);\n}\n"], [4216554, "sub_4056EA", "__int64 __fastcall sub_4056EA(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60C320;\n  v4 = sub_407B40(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4216627, "sub_405733", "__int64 __fastcall sub_405733(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60C320;\n  return *(unsigned int *)v1;\n}\n"], [4216657, "sub_405751", "__int64 *__fastcall sub_405751(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_60C320;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4216693, "sub_405775", "__int64 __fastcall sub_405775(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_60C320;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4216829, "sub_4057FD", "__int64 __fastcall sub_4057FD(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_60C320;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4216880, "sub_405830", "__int64 *__fastcall sub_405830(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_60C320;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4216970, "sub_40588A", "_QWORD *__fastcall sub_40588A(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4217090, "sub_405902", "char *__fastcall sub_405902(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)asc_40A2E0;\n  return v3;\n}\n"], [4217151, "sub_40593F", "unsigned __int64 __fastcall sub_40593F(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_405902((const char *)&asc_40A2E0[1], a5);\n        a9 = sub_405902((const char *)&asc_40A2E0[2], a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)asc_40A2E0;\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(asc_40A2E0 + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_40593F(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4220298, "sub_40658A", "unsigned __int64 __fastcall sub_40658A(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_60C320;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_40593F(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4220458, "sub_40662A", "__int64 __fastcall sub_40662A(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_40665C(a1, a2, 0LL, a3);\n}\n"], [4220508, "sub_40665C", "__int64 __fastcall sub_40665C(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_60C320;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_40593F(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_407A02(v10);\n  sub_40593F(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4220808, "sub_406788", "void sub_406788()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_60C260;\n  for ( i = 1; i < dword_60C240; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_60C360 )\n  {\n    free(ptr[1]);\n    qword_60C250 = 256LL;\n    off_60C258 = &unk_60C360;\n  }\n  if ( ptr != (void **)&qword_60C250 )\n  {\n    free(ptr);\n    off_60C260 = (__int64)&qword_60C250;\n  }\n  dword_60C240 = 1;\n}\n"], [4220979, "sub_406833", "void *__fastcall sub_406833(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  _QWORD *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = (_QWORD *)off_60C260;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60C240 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_60C260 == (_QWORD)&qword_60C250;\n    if ( (__int64 *)off_60C260 == &qword_60C250 )\n      v4 = 0LL;\n    else\n      v4 = off_60C260;\n    v12 = (_QWORD *)sub_407A51(v4, 16 * v14);\n    off_60C260 = (__int64)v12;\n    if ( v9 )\n    {\n      v5 = off_60C258;\n      *v12 = qword_60C250;\n      v12[1] = v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_60C240], 0, 16 * (v14 - (unsigned int)dword_60C240));\n    dword_60C240 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_40593F((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_60C360 )\n      free(ptr);\n    ptr = (void *)sub_407A02(v16);\n    v12[2 * a1 + 1] = ptr;\n    sub_40593F((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4221625, "sub_406AB9", "void *__fastcall sub_406AB9(int a1, __int64 a2)\n{\n  return sub_406833(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_60C320);\n}\n"], [4221668, "sub_406AE4", "void *__fastcall sub_406AE4(int a1, __int64 a2, size_t a3)\n{\n  return sub_406833(a1, a2, a3, (__int64)&qword_60C320);\n}\n"], [4221712, "sub_406B10", "void *__fastcall sub_406B10(__int64 a1)\n{\n  return sub_406AB9(0, a1);\n}\n"], [4221743, "sub_406B2F", "void *__fastcall sub_406B2F(__int64 a1, size_t a2)\n{\n  return sub_406AE4(0, a1, a2);\n}\n"], [4221782, "sub_406B56", "void *__fastcall sub_406B56(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_40588A(v5, a2);\n  return sub_406833(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4221847, "sub_406B97", "void *__fastcall sub_406B97(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_40588A(v7, a2);\n  return sub_406833(a1, a3, a4, (__int64)v7);\n}\n"], [4221910, "sub_406BD6", "void *__fastcall sub_406BD6(int a1, __int64 a2)\n{\n  return sub_406B56(0, a1, a2);\n}\n"], [4221946, "sub_406BFA", "void *__fastcall sub_406BFA(int a1, __int64 a2, size_t a3)\n{\n  return sub_406B97(0, a1, a2, a3);\n}\n"], [4221990, "sub_406C26", "void *__fastcall sub_406C26(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_60C320;\n  v4[1] = qword_60C328;\n  v4[2] = qword_60C330;\n  v4[3] = qword_60C338;\n  v4[4] = qword_60C340;\n  v4[5] = qword_60C348;\n  v4[6] = qword_60C350;\n  sub_405775(v4, a3, 1);\n  return sub_406833(0, a1, a2, (__int64)v4);\n}\n"], [4222138, "sub_406CBA", "void *__fastcall sub_406CBA(__int64 a1, unsigned __int8 a2)\n{\n  return sub_406C26(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4222180, "sub_406CE4", "void *__fastcall sub_406CE4(__int64 a1)\n{\n  return sub_406CBA(a1, 0x3Au);\n}\n"], [4222211, "sub_406D03", "void *__fastcall sub_406D03(__int64 a1, size_t a2)\n{\n  return sub_406C26(a1, a2, 0x3Au);\n}\n"], [4222253, "sub_406D2D", "__int64 __fastcall sub_406D2D(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_406D63(a1, a2, a3, a4, -1LL);\n}\n"], [4222307, "sub_406D63", "void *__fastcall sub_406D63(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_60C320;\n  v8[1] = qword_60C328;\n  v8[2] = qword_60C330;\n  v8[3] = qword_60C338;\n  v8[4] = qword_60C340;\n  v8[5] = qword_60C348;\n  v8[6] = qword_60C350;\n  sub_405830(v8, a2, a3);\n  return sub_406833(a1, a4, a5, (__int64)v8);\n}\n"], [4222458, "sub_406DFA", "__int64 __fastcall sub_406DFA(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_406D2D(0, a1, a2, a3);\n}\n"], [4222505, "sub_406E29", "void *__fastcall sub_406E29(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_406D63(0, a1, a2, a3, a4);\n}\n"], [4222563, "sub_406E63", "_BOOL8 __fastcall sub_406E63(_BYTE *a1, _BYTE *a2)\n{\n  bool v2; // al\n  int *v3; // rax\n  int *v4; // rax\n  bool v5; // al\n  bool v7; // [rsp+1Dh] [rbp-153h]\n  const char *s1; // [rsp+20h] [rbp-150h]\n  const char *s2; // [rsp+28h] [rbp-148h]\n  size_t v10; // [rsp+30h] [rbp-140h]\n  size_t n; // [rsp+38h] [rbp-138h]\n  char *ptr; // [rsp+40h] [rbp-130h]\n  char *filename; // [rsp+48h] [rbp-128h]\n  struct stat stat_buf; // [rsp+50h] [rbp-120h] BYREF\n  struct stat v15; // [rsp+E0h] [rbp-90h] BYREF\n\n  s1 = sub_40375A(a1);\n  s2 = sub_40375A(a2);\n  v10 = sub_4037C3(s1);\n  n = sub_4037C3(s2);\n  v2 = v10 == n && !memcmp(s1, s2, n);\n  v7 = 0;\n  if ( v2 )\n  {\n    ptr = (char *)sub_408B42(a1);\n    filename = (char *)sub_408B42(a2);\n    if ( (unsigned int)sub_408E40(ptr, &stat_buf) )\n    {\n      v3 = __errno_location();\n      error(1, *v3, \"%s\", ptr);\n    }\n    if ( (unsigned int)sub_408E40(filename, &v15) )\n    {\n      v4 = __errno_location();\n      error(1, *v4, \"%s\", filename);\n    }\n    v5 = stat_buf.st_ino == v15.st_ino && stat_buf.st_dev == v15.st_dev;\n    v7 = v5;\n    free(ptr);\n    free(filename);\n  }\n  return v7;\n}\n"], [4223068, "sub_40705C", "__int64 __fastcall sub_40705C(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_407C4E(a1, 0, 3, a4, a5, a6);\n}\n"], [4223106, "sub_407082", "int __fastcall sub_407082(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4224621, "sub_40766D", "int __fastcall sub_40766D(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_407082(a1, a2, a3, a4, a5, i);\n}\n"], [4224731, "sub_4076DB", "int __fastcall sub_4076DB(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_407082(a1, a2, a3, a4, v8, i);\n}\n"], [4224948, "sub_4077B4", "int sub_4077B4(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_4076DB(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4225130, "sub_40786A", "int sub_40786A()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4225235, "sub_4078D3", "__int64 __fastcall sub_4078D3(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_407B9E(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_407A1C(a2 * a1);\n}\n"], [4225297, "sub_407911", "__int64 __fastcall sub_407911(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_407B9E(a1, a2, v4);\n  return sub_407A51(a1, a3 * a2);\n}\n"], [4225373, "sub_40795D", "__int64 __fastcall sub_40795D(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_407B9E(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_407A51(a1, a3 * v6);\n}\n"], [4225538, "sub_407A02", "__int64 __fastcall sub_407A02(__int64 a1)\n{\n  return sub_407A1C(a1);\n}\n"], [4225564, "sub_407A1C", "void *__fastcall sub_407A1C(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_407B9E(a1, a2, v2);\n  return v4;\n}\n"], [4225617, "sub_407A51", "void *__fastcall sub_407A51(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_407B9E(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4225714, "sub_407AB2", "__int64 __fastcall sub_407AB2(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_40795D(a1, a2, 1uLL);\n}\n"], [4225756, "sub_407ADC", "void *__fastcall sub_407ADC(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_407A1C(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4225799, "sub_407B07", "void *__fastcall sub_407B07(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_407B9E(a1, a2, v2);\n  return v4;\n}\n"], [4225856, "sub_407B40", "void *__fastcall sub_407B40(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_407A1C(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4225905, "sub_407B71", "void *__fastcall sub_407B71(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_407B40(a1, v1 + 1);\n}\n"], [4225950, "sub_407B9E", "void __noreturn sub_407B9E()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4226003, "sub_407BD3", "_BOOL8 sub_407BD3()\n{\n  bool v1; // [rsp+7h] [rbp-19h]\n  char *lineptr; // [rsp+8h] [rbp-18h] BYREF\n  size_t n; // [rsp+10h] [rbp-10h] BYREF\n  __ssize_t v4; // [rsp+18h] [rbp-8h]\n\n  lineptr = 0LL;\n  n = 0LL;\n  v4 = getline(&lineptr, &n, stdin);\n  if ( v4 > 0 )\n  {\n    lineptr[v4 - 1] = 0;\n    v1 = rpmatch(lineptr) > 0;\n  }\n  else\n  {\n    v1 = 0;\n  }\n  free(lineptr);\n  return v1;\n}\n"], [4226126, "sub_407C4E", "__int64 __fastcall sub_407C4E(int a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128 a7, __m128 a8, __m128 a9, __m128 a10, __m128 a11, __m128 a12, __m128 a13, __m128 a14)\n{\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  int v18; // [rsp+10h] [rbp-E0h]\n  int v19; // [rsp+14h] [rbp-DCh]\n  int v20; // [rsp+18h] [rbp-D8h]\n  int v21; // [rsp+1Ch] [rbp-D4h]\n  __int64 v22; // [rsp+50h] [rbp-A0h]\n  __int64 v23; // [rsp+58h] [rbp-98h]\n  __int64 v24; // [rsp+60h] [rbp-90h]\n  __int64 v25; // [rsp+68h] [rbp-88h]\n  __m128 v26; // [rsp+70h] [rbp-80h]\n  __m128 v27; // [rsp+80h] [rbp-70h]\n  __m128 v28; // [rsp+90h] [rbp-60h]\n  __m128 v29; // [rsp+A0h] [rbp-50h]\n  __m128 v30; // [rsp+B0h] [rbp-40h]\n  __m128 v31; // [rsp+C0h] [rbp-30h]\n  __m128 v32; // [rsp+D0h] [rbp-20h]\n  __m128 v33; // [rsp+E0h] [rbp-10h]\n\n  v22 = a3;\n  v23 = a4;\n  v24 = a5;\n  v25 = a6;\n  v26 = a7;\n  v27 = a8;\n  v28 = a9;\n  v29 = a10;\n  v30 = a11;\n  v31 = a12;\n  v32 = a13;\n  v33 = a14;\n  if ( a2 != 1030 )\n    return (unsigned int)fcntl(a1, a2, v22);\n  v19 = v22;\n  if ( dword_60C460 < 0 )\n  {\n    v18 = sub_407C4E(a1, 0, v22, a4, a5, a6);\n  }\n  else\n  {\n    v18 = fcntl(a1, 1030, (unsigned int)v22);\n    if ( v18 < 0 && *__errno_location() == 22 )\n    {\n      v18 = sub_407C4E(a1, 0, v19, v14, v15, v16);\n      if ( v18 < 0 )\n        return (unsigned int)v18;\n      dword_60C460 = -1;\n    }\n    else\n    {\n      dword_60C460 = 1;\n    }\n  }\n  if ( v18 >= 0 && dword_60C460 == -1 )\n  {\n    v20 = fcntl(v18, 1);\n    if ( v20 < 0 || fcntl(v18, 2, v20 | 1u) == -1 )\n    {\n      v21 = *__errno_location();\n      close(v18);\n      *__errno_location() = v21;\n      v18 = -1;\n    }\n  }\n  return (unsigned int)v18;\n}\n"], [4226824, "sub_407F08", "__int64 __fastcall sub_407F08(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_407F86(a1, 0LL, 1LL);\n  return result;\n}\n"], [4226875, "sub_407F3B", "int __fastcall sub_407F3B(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_407F08(a1);\n  return fflush(a1);\n}\n"], [4226950, "sub_407F86", "int __fastcall sub_407F86(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4227134, "sub_40803E", "__int64 __fastcall sub_40803E(unsigned int a1, void *a2, int a3, const char *a4)\n{\n  __int64 result; // rax\n  int v8; // [rsp+28h] [rbp-28h]\n  int v9; // [rsp+2Ch] [rbp-24h]\n  unsigned int v10; // [rsp+30h] [rbp-20h]\n  int v11; // [rsp+34h] [rbp-1Ch]\n  void *ptr; // [rsp+38h] [rbp-18h]\n  _BYTE *v13; // [rsp+40h] [rbp-10h]\n  _BYTE *v14; // [rsp+48h] [rbp-8h]\n\n  ptr = a2;\n  v8 = 20;\n  while ( v8-- )\n  {\n    v13 = (_BYTE *)sub_4082D1(a1, ptr);\n    if ( !v13 )\n      break;\n    if ( *v13 == 47 )\n    {\n      if ( ptr != a2 )\n        free(ptr);\n      ptr = v13;\n    }\n    else\n    {\n      v14 = (_BYTE *)sub_408BF9(ptr);\n      if ( ptr != a2 )\n        free(ptr);\n      if ( !v14 )\n      {\n        free(v13);\n        *__errno_location() = 12;\n        return 0xFFFFFFFFLL;\n      }\n      ptr = sub_4039CB(v14, v13, 0LL);\n      free(v14);\n      free(v13);\n      if ( !ptr )\n      {\n        *__errno_location() = 12;\n        return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  if ( v8 < 0 )\n  {\n    v13 = 0LL;\n    *__errno_location() = 40;\n  }\n  if ( v13 || *__errno_location() == 22 )\n  {\n    v10 = linkat(a1, (const char *)ptr, a3, a4, 0);\n    if ( ptr != a2 )\n    {\n      v11 = *__errno_location();\n      free(ptr);\n      *__errno_location() = v11;\n    }\n    result = v10;\n  }\n  else\n  {\n    if ( ptr != a2 )\n    {\n      v9 = *__errno_location();\n      free(ptr);\n      *__errno_location() = v9;\n    }\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"], [4227595, "sub_40820B", "int __fastcall sub_40820B(unsigned int a1, char *a2, int a3, const char *a4, int a5)\n{\n  int v5; // eax\n  int v9; // [rsp+2Ch] [rbp-4h]\n\n  v5 = a5;\n  BYTE1(v5) = BYTE1(a5) & 0xFB;\n  if ( v5 )\n  {\n    *__errno_location() = 22;\n    return -1;\n  }\n  if ( !a5 )\n    return linkat(a1, a2, a3, a4, 0);\n  if ( dword_60C464 >= 0 )\n  {\n    v9 = linkat(a1, a2, a3, a4, a5);\n    if ( v9 != -1 || *__errno_location() != 22 )\n    {\n      dword_60C464 = 1;\n      return v9;\n    }\n    dword_60C464 = -1;\n  }\n  return sub_40803E(a1, a2, a3, a4);\n}\n"], [4227793, "sub_4082D1", "__int64 __fastcall sub_4082D1(unsigned int a1, __int64 a2)\n{\n  return sub_40874D(a1, a2, 0LL, 0LL, 0LL, readlinkat, a2);\n}\n"], [4227846, "sub_408306", "void __noreturn sub_408306()\n{\n  sub_40250B(1);\n}\n"], [4227862, "sub_408316", "__int64 __fastcall sub_408316(const char *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 result; // rax\n  char v7; // [rsp+27h] [rbp-19h]\n  __int64 i; // [rsp+28h] [rbp-18h]\n  __int64 v9; // [rsp+30h] [rbp-10h]\n  size_t n; // [rsp+38h] [rbp-8h]\n\n  v9 = -1LL;\n  v7 = 0;\n  n = strlen(a1);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !strncmp(*(const char **)(8 * i + a2), a1, n) )\n    {\n      if ( strlen(*(const char **)(8 * i + a2)) == n )\n        return i;\n      if ( v9 == -1 )\n      {\n        v9 = i;\n      }\n      else if ( !a3 || memcmp((const void *)(a4 * v9 + a3), (const void *)(i * a4 + a3), a4) )\n      {\n        v7 = 1;\n      }\n    }\n  }\n  if ( v7 )\n    result = -2LL;\n  else\n    result = v9;\n  return result;\n}\n"], [4228165, "sub_408445", "void __fastcall sub_408445(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  __int64 v4; // rbx\n  void *v5; // rax\n  char *format; // [rsp+28h] [rbp-18h]\n\n  if ( a3 == -1 )\n    v3 = gettext(\"invalid argument %s for %s\");\n  else\n    v3 = gettext(\"ambiguous argument %s for %s\");\n  format = v3;\n  v4 = sub_4056A7(1u, a1);\n  v5 = sub_406B56(0, 6, a2);\n  error(0, 0, format, v5, v4);\n}\n"], [4228304, "sub_4084D0", "int __fastcall sub_4084D0(__int64 a1, __int64 a2, size_t a3)\n{\n  char *v3; // rax\n  __int64 i; // [rsp+20h] [rbp-10h]\n  void *s1; // [rsp+28h] [rbp-8h]\n\n  s1 = 0LL;\n  v3 = gettext(\"Valid arguments are:\");\n  fprintf(stderr, v3);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a1); ++i )\n  {\n    if ( i && !memcmp(s1, (const void *)(i * a3 + a2), a3) )\n    {\n      fprintf(stderr, \", `%s'\", *(const char **)(8 * i + a1));\n    }\n    else\n    {\n      fprintf(stderr, \"\\n  - `%s'\", *(const char **)(8 * i + a1));\n      s1 = (void *)(i * a3 + a2);\n    }\n  }\n  return putc_unlocked(10, stderr);\n}\n"], [4228608, "sub_408600", "__int64 __fastcall sub_408600(__int64 a1, const char *a2, __int64 a3, __int64 a4, size_t a5, void (*a6)(void))\n{\n  __int64 v11; // [rsp+38h] [rbp-8h]\n\n  v11 = sub_408316(a2, a3, a4, a5);\n  if ( v11 >= 0 )\n    return v11;\n  sub_408445(a1, (__int64)a2, v11);\n  sub_4084D0(a3, a4, a5);\n  a6();\n  return -1LL;\n}\n"], [4228742, "sub_408686", "__int64 __fastcall sub_408686(const void *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 i; // [rsp+28h] [rbp-8h]\n\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !memcmp(a1, (const void *)(i * a4 + a3), a4) )\n      return *(_QWORD *)(8 * i + a2);\n  }\n  return 0LL;\n}\n"], [4228882, "sub_408712", "ssize_t __fastcall sub_408712(int a1, const char *a2, char *a3, size_t a4)\n{\n  if ( a1 != -100 )\n    abort();\n  return readlink(a2, a3, a4);\n}\n"], [4228941, "sub_40874D", "char *__fastcall sub_40874D(unsigned int a1, __int64 a2, char *a3, __int64 a4, void *(**a5)(size_t size), __int64 (__fastcall *a6)(_QWORD, __int64, char *, unsigned __int64))\n{\n  __int64 v7; // rax\n  void *(**v9)(size_t); // [rsp+8h] [rbp-488h]\n  __int64 v10; // [rsp+10h] [rbp-480h]\n  int v12; // [rsp+34h] [rbp-45Ch]\n  char *src; // [rsp+38h] [rbp-458h]\n  unsigned __int64 v14; // [rsp+40h] [rbp-450h]\n  __int64 v15; // [rsp+50h] [rbp-440h]\n  size_t n; // [rsp+58h] [rbp-438h]\n  void *dest; // [rsp+60h] [rbp-430h]\n  __int64 v18; // [rsp+68h] [rbp-428h]\n  char v19[1032]; // [rsp+70h] [rbp-420h] BYREF\n  unsigned __int64 v20; // [rsp+478h] [rbp-18h]\n\n  v10 = a4;\n  v9 = a5;\n  v20 = __readfsqword(0x28u);\n  if ( !a5 )\n    v9 = &off_40A6E0;\n  if ( !a4 )\n  {\n    a3 = v19;\n    v10 = 1024LL;\n  }\n  src = a3;\n  v14 = v10;\n  while ( 1 )\n  {\n    v15 = a6(a1, a2, src, v14);\n    if ( v15 < 0 )\n    {\n      v12 = *__errno_location();\n      if ( v12 != 34 )\n      {\n        if ( src != a3 )\n        {\n          v9[2]((size_t)src);\n          *__errno_location() = v12;\n        }\n        return 0LL;\n      }\n    }\n    if ( v15 < v14 )\n      break;\n    if ( src != a3 )\n      v9[2]((size_t)src);\n    if ( v14 > 0x4000000000000000LL )\n    {\n      if ( v14 >= 0x8000000000000000LL )\n      {\n        *__errno_location() = 36;\n        return 0LL;\n      }\n      v14 = 0x8000000000000000LL;\n      v7 = (__int64)(*v9)(0x8000000000000000LL);\n    }\n    else\n    {\n      v14 *= 2LL;\n      v7 = (__int64)(*v9)(v14);\n    }\n    src = (char *)v7;\n    if ( !v7 )\n      goto LABEL_29;\n  }\n  n = v15 + 1;\n  src[v15] = 0;\n  if ( src != v19 )\n  {\n    if ( n < v14 && src != a3 )\n    {\n      if ( v9[1] )\n      {\n        v18 = ((__int64 (__fastcall *)(char *, size_t))v9[1])(src, n);\n        if ( v18 )\n          src = (char *)v18;\n      }\n    }\n    return src;\n  }\n  dest = (*v9)(n);\n  v14 = v15 + 1;\n  if ( dest )\n  {\n    memcpy(dest, src, n);\n    return (char *)dest;\n  }\nLABEL_29:\n  if ( v9[3] )\n    v9[3](v14);\n  *__errno_location() = 12;\n  return 0LL;\n}\n"], [4229815, "sub_408AB7", "__int64 __fastcall sub_408AB7(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = (unsigned int)sub_408CEA(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4229954, "sub_408B42", "__int64 __fastcall sub_408B42(__int64 a1)\n{\n  __int64 v2; // [rsp+18h] [rbp-8h]\n\n  v2 = sub_408BF9(a1);\n  if ( !v2 )\n    sub_407B9E();\n  return v2;\n}\n"], [4230000, "sub_408B70", "_BYTE *__fastcall sub_408B70(_BYTE *a1)\n{\n  _BYTE *i; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = *a1 == 47;\n  for ( i = (_BYTE *)(sub_40375A(a1) - a1); v3 < (unsigned __int64)i && a1[(_QWORD)(i - 1)] == 47; --i )\n    ;\n  return i;\n}\n"], [4230137, "sub_408BF9", "_BYTE *__fastcall sub_408BF9(_BYTE *a1)\n{\n  size_t n; // [rsp+20h] [rbp-10h]\n  _BYTE *dest; // [rsp+28h] [rbp-8h]\n\n  n = (size_t)sub_408B70(a1);\n  dest = malloc((n == 0) + n + 1);\n  if ( !dest )\n    return 0LL;\n  memcpy(dest, a1, n);\n  if ( !n )\n  {\n    n = 1LL;\n    *dest = 46;\n  }\n  dest[n] = 0;\n  return dest;\n}\n"], [4230288, "sub_408C90", "unsigned __int64 __fastcall sub_408C90(_BYTE *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = 0LL;\n  while ( *a1 )\n    v4 = __ROR8__(v4, 55) + (char)*a1++;\n  return v4 % a2;\n}\n"], [4230378, "sub_408CEA", "int __fastcall sub_408CEA(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( sub_407F3B(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4230560, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_60BE18 - off_60BE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_60BE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4230672, "fini", "void fini(void)\n{\n  ;\n}\n"], [4230688, "sub_408E20", "int __fastcall sub_408E20(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_60C218 )\n    v1 = (void *)qword_60C218;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4230720, "sub_408E40", "int __fastcall sub_408E40(char *filename, struct stat *stat_buf)\n{\n  return __xstat(1, filename, stat_buf);\n}\n"], [4230736, "sub_408E50", "int __fastcall sub_408E50(char *filename, struct stat *stat_buf)\n{\n  return __lxstat(1, filename, stat_buf);\n}\n"], [4230752, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]