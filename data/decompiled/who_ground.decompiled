[[4199392, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4199424, "sub_401400", "__int64 sub_401400()\n{\n  return qword_60F010();\n}\n"], [4199440, ".utmpxname", "// attributes: thunk\nint utmpxname(const char *file)\n{\n  return utmpxname(file);\n}\n"], [4199456, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4199472, ".localtime", "// attributes: thunk\nstruct tm *localtime(const time_t *timer)\n{\n  return localtime(timer);\n}\n"], [4199488, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4199504, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4199520, ".strncpy", "// attributes: thunk\nchar *strncpy(char *dest, const char *src, size_t n)\n{\n  return strncpy(dest, src, n);\n}\n"], [4199536, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4199552, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4199568, ".strcpy", "// attributes: thunk\nchar *strcpy(char *dest, const char *src)\n{\n  return strcpy(dest, src);\n}\n"], [4199584, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4199600, ".puts", "// attributes: thunk\nint puts(const char *s)\n{\n  return puts(s);\n}\n"], [4199616, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4199632, ".endutxent", "// attributes: thunk\nvoid endutxent(void)\n{\n  endutxent();\n}\n"], [4199648, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4199664, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4199680, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4199696, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4199712, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4199728, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4199744, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4199760, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4199776, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4199792, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4199808, ".snprintf", "// attributes: thunk\nint snprintf(char *s, size_t maxlen, const char *format, ...)\n{\n  return snprintf(s, maxlen, format);\n}\n"], [4199824, ".gai_strerror", "// attributes: thunk\nconst char *gai_strerror(int ecode)\n{\n  return gai_strerror(ecode);\n}\n"], [4199840, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4199856, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4199872, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4199888, ".strncat", "// attributes: thunk\nchar *strncat(char *dest, const char *src, size_t n)\n{\n  return strncat(dest, src, n);\n}\n"], [4199904, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4199920, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4199936, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4199952, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4199968, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4199984, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4200000, ".setutxent", "// attributes: thunk\nvoid setutxent(void)\n{\n  setutxent();\n}\n"], [4200016, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4200032, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4200048, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4200064, ".kill", "// attributes: thunk\nint kill(__pid_t pid, int sig)\n{\n  return kill(pid, sig);\n}\n"], [4200080, ".time", "// attributes: thunk\ntime_t time(time_t *timer)\n{\n  return time(timer);\n}\n"], [4200096, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4200112, ".__xstat", "// attributes: thunk\nint __xstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _xstat(ver, filename, stat_buf);\n}\n"], [4200128, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4200144, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4200160, ".nl_langinfo", "// attributes: thunk\nchar *nl_langinfo(nl_item item)\n{\n  return nl_langinfo(item);\n}\n"], [4200176, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4200192, ".ttyname", "// attributes: thunk\nchar *ttyname(int fd)\n{\n  return ttyname(fd);\n}\n"], [4200208, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4200224, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4200240, ".strftime", "// attributes: thunk\nsize_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)\n{\n  return strftime(s, maxsize, format, tp);\n}\n"], [4200256, ".getutxent", "// attributes: thunk\nstruct utmpx *getutxent(void)\n{\n  return getutxent();\n}\n"], [4200272, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4200288, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4200304, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4200320, ".sprintf", "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\n  return sprintf(s, format);\n}\n"], [4200336, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4200352, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4200368, ".getaddrinfo", "// attributes: thunk\nint getaddrinfo(const char *name, const char *service, const struct addrinfo *req, struct addrinfo **pai)\n{\n  return getaddrinfo(name, service, req, pai);\n}\n"], [4200384, ".strdup", "// attributes: thunk\nchar *strdup(const char *s)\n{\n  return strdup(s);\n}\n"], [4200400, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4200416, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4200432, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4200448, ".freeaddrinfo", "// attributes: thunk\nvoid freeaddrinfo(struct addrinfo *ai)\n{\n  freeaddrinfo(ai);\n}\n"], [4200464, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4200512, "sub_401840", "signed __int64 sub_401840()\n{\n  signed __int64 result; // rax\n\n  result = &unk_60F27F - &unk_60F278;\n  if ( (unsigned __int64)(&unk_60F27F - &unk_60F278) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4200560, "sub_401870", "__int64 sub_401870()\n{\n  return 0LL;\n}\n"], [4200624, "sub_4018B0", "signed __int64 sub_4018B0()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_60F2B8 )\n  {\n    result = sub_401840();\n    byte_60F2B8 = 1;\n  }\n  return result;\n}\n"], [4200656, "sub_4018D0", "__int64 sub_4018D0()\n{\n  return sub_401870();\n}\n"], [4200701, "sub_4018FD", "int sub_4018FD()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_4036B6(qword_60F3C0);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_4036B6(qword_60F3C0);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_4036B6(qword_60F3C0);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4200967, "sub_401A07", "__int64 __fastcall sub_401A07(__int64 a1, __int64 a2)\n{\n  return sub_4037CA(a1, a2);\n}\n"], [4201004, "sub_401A2C", "char *__fastcall sub_401A2C(time_t a1, time_t a2)\n{\n  if ( timer == 0x8000000000000000LL )\n    time(&timer);\n  if ( a2 >= a1 || timer - 86400 >= a1 || a1 > timer )\n    return gettext(\" old \");\n  if ( (int)timer - (int)a1 <= 59 )\n    return \"  .  \";\n  sprintf(\n    s,\n    \"%02d:%02d\",\n    (unsigned int)(((int)timer - (int)a1) / 3600),\n    (unsigned int)(((int)timer - (int)a1) % 3600 / 60));\n  return s;\n}\n"], [4201279, "sub_401B3F", "char *__fastcall sub_401B3F(__int64 a1)\n{\n  time_t timer; // [rsp+10h] [rbp-10h] BYREF\n  struct tm *tp; // [rsp+18h] [rbp-8h]\n\n  timer = *(int *)(a1 + 340);\n  tp = localtime(&timer);\n  if ( !tp )\n    return (char *)sub_401A07(timer, (__int64)byte_60F300);\n  strftime(byte_60F300, 0x21uLL, qword_60F2D0, tp);\n  return byte_60F300;\n}\n"], [4201388, "sub_401BAC", "unsigned __int64 __fastcall sub_401BAC(int a1, __int64 a2, char a3, int a4, __int64 a5, __int64 a6, const char *a7, const char *a8, __int64 a9, const char *a10)\n{\n  size_t v10; // rax\n  const char *v11; // rdx\n  const char *v12; // rax\n  char *v13; // rbx\n  char *v18; // [rsp+88h] [rbp-58h] BYREF\n  char *v19; // [rsp+90h] [rbp-50h]\n  char *v20; // [rsp+98h] [rbp-48h]\n  char v21[16]; // [rsp+A0h] [rbp-40h] BYREF\n  char v22[24]; // [rsp+B0h] [rbp-30h] BYREF\n  unsigned __int64 v23; // [rsp+C8h] [rbp-18h]\n\n  v23 = __readfsqword(0x28u);\n  byte_60F239 = a3;\n  if ( byte_60F2C3 && byte_60F2C2 != 1 && strlen(a7) <= 6 )\n    sprintf(v21, \" %-6s\", a7);\n  else\n    v21[0] = 0;\n  if ( byte_60F2C2 != 1 && strlen(a8) <= 0xB )\n    sprintf(v22, \" %10s\", a8);\n  else\n    v22[0] = 0;\n  if ( byte_60F2C6 )\n  {\n    if ( strlen(a10) <= 0xB )\n      v10 = 14LL;\n    else\n      v10 = strlen(a10) + 2;\n  }\n  else\n  {\n    v10 = 1LL;\n  }\n  v20 = (char *)sub_405B39(v10);\n  if ( byte_60F2C6 )\n    sprintf(v20, \" %-12s\", a10);\n  else\n    *v20 = 0;\n  if ( byte_60F2C5 )\n    v11 = (const char *)&unk_60F238;\n  else\n    v11 = &locale;\n  if ( a2 )\n    LODWORD(v12) = a2;\n  else\n    v12 = \"   .\";\n  if ( (unsigned int)sub_405CF0(\n                       (unsigned int)&v18,\n                       (unsigned int)\"%-8.*s%s %-12.*s %-*s%s%s %-8s%s\",\n                       a1,\n                       (_DWORD)v12,\n                       (_DWORD)v11,\n                       a4,\n                       a5,\n                       dword_60F2D8,\n                       a6,\n                       v21,\n                       v22,\n                       a9,\n                       v20) == -1 )\n    sub_405CBB();\n  v13 = v18;\n  v19 = &v13[strlen(v18)];\n  do\n    --v19;\n  while ( *v19 == 32 );\n  v19[1] = 0;\n  puts(v18);\n  free(v18);\n  free(v20);\n  return __readfsqword(0x28u) ^ v23;\n}\n"], [4202046, "sub_401E3E", "bool __fastcall sub_401E3E(__int64 a1)\n{\n  return (*(_DWORD *)(a1 + 24) & 0x10) != 0;\n}\n"], [4202071, "sub_401E57", "unsigned __int64 __fastcall sub_401E57(__int64 a1, time_t a2)\n{\n  char v2; // al\n  char *v3; // rax\n  const char *v4; // rax\n  size_t v5; // rbx\n  size_t v6; // rbx\n  const char *v7; // rbx\n  char *v8; // rax\n  char v10; // [rsp+37h] [rbp-219h]\n  __time_t v11; // [rsp+38h] [rbp-218h]\n  char *v12; // [rsp+40h] [rbp-210h]\n  const char *v13; // [rsp+48h] [rbp-208h]\n  struct stat stat_buf; // [rsp+50h] [rbp-200h] BYREF\n  char v15[16]; // [rsp+E0h] [rbp-170h] BYREF\n  char s[16]; // [rsp+F0h] [rbp-160h] BYREF\n  char dest[48]; // [rsp+100h] [rbp-150h] BYREF\n  char v18[264]; // [rsp+130h] [rbp-120h] BYREF\n  unsigned __int64 v19; // [rsp+238h] [rbp-18h]\n\n  v19 = __readfsqword(0x28u);\n  sprintf(s, \"%ld\", *(int *)(a1 + 4));\n  if ( *(_BYTE *)(a1 + 8) == 47 )\n  {\n    strncpy(dest, (const char *)(a1 + 8), 0x20uLL);\n    dest[32] = 0;\n  }\n  else\n  {\n    strcpy(dest, \"/dev/\");\n    strncpy(&dest[5], (const char *)(a1 + 8), 0x20uLL);\n    dest[37] = 0;\n  }\n  if ( (unsigned int)sub_40BB90(dest, &stat_buf) )\n  {\n    v10 = 63;\n    v11 = 0LL;\n  }\n  else\n  {\n    if ( sub_401E3E((__int64)&stat_buf) )\n      v2 = 43;\n    else\n      v2 = 45;\n    v10 = v2;\n    v11 = stat_buf.st_atim.tv_sec;\n  }\n  if ( v11 )\n  {\n    v3 = sub_401A2C(v11, a2);\n    sprintf(v15, \"%.*s\", 6, v3);\n  }\n  else\n  {\n    *(_DWORD *)v15 = 4136992;\n  }\n  if ( *(_BYTE *)(a1 + 76) )\n  {\n    v12 = 0LL;\n    strncpy(v18, (const char *)(a1 + 76), 0x100uLL);\n    v18[256] = 0;\n    v13 = strchr(v18, 58);\n    if ( v13 )\n    {\n      v4 = v13++;\n      *v4 = 0;\n    }\n    if ( v18[0] && byte_60F2C0 )\n      v12 = (char *)sub_4034BC(v18);\n    if ( !v12 )\n      v12 = v18;\n    if ( v13 )\n    {\n      v5 = strlen(v12);\n      if ( v5 + strlen(v13) + 4 > qword_60F328 )\n      {\n        v6 = strlen(v12);\n        qword_60F328 = v6 + strlen(v13) + 4;\n        free(ptr);\n        ptr = (char *)sub_405B39(qword_60F328);\n      }\n      sprintf(ptr, \"(%s:%s)\", v12, v13);\n    }\n    else\n    {\n      if ( strlen(v12) + 3 > qword_60F328 )\n      {\n        qword_60F328 = strlen(v12) + 3;\n        free(ptr);\n        ptr = (char *)sub_405B39(qword_60F328);\n      }\n      sprintf(ptr, \"(%s)\", v12);\n    }\n    if ( v12 != v18 )\n      free(v12);\n  }\n  else\n  {\n    if ( !qword_60F328 )\n    {\n      qword_60F328 = 1LL;\n      free(ptr);\n      ptr = (char *)sub_405B39(qword_60F328);\n    }\n    *ptr = 0;\n  }\n  if ( ptr )\n    v7 = ptr;\n  else\n    v7 = &locale;\n  v8 = sub_401B3F(a1);\n  sub_401BAC(32, a1 + 44, v10, 32, a1 + 8, (__int64)v8, v15, s, (__int64)v7, &locale);\n  return __readfsqword(0x28u) ^ v19;\n}\n"], [4203248, "sub_4022F0", "unsigned __int64 __fastcall sub_4022F0(__int64 a1)\n{\n  char *v1; // rbx\n  char *v2; // rax\n\n  v1 = sub_401B3F(a1);\n  v2 = gettext(\"system boot\");\n  return sub_401BAC(-1, (__int64)&locale, 32, -1, (__int64)v2, (__int64)v1, &locale, &locale, (__int64)&locale, &locale);\n}\n"], [4203359, "sub_40235F", "char *__fastcall sub_40235F(__int64 a1)\n{\n  char *v1; // rax\n  size_t v2; // rax\n  char *v3; // rax\n  char *dest; // [rsp+18h] [rbp-8h]\n\n  v1 = gettext(\"id=\");\n  v2 = strlen(v1);\n  dest = (char *)sub_405B39(v2 + 5);\n  v3 = gettext(\"id=\");\n  strcpy(dest, v3);\n  strncat(dest, (const char *)(a1 + 40), 4uLL);\n  return dest;\n}\n"], [4203467, "sub_4023CB", "unsigned __int64 __fastcall sub_4023CB(__int64 a1)\n{\n  char *v1; // rax\n  size_t v2; // rbx\n  char *v3; // rax\n  size_t v4; // rax\n  unsigned int v5; // er13\n  char *v6; // r12\n  unsigned int v7; // ebx\n  char *v8; // rax\n  const char *v9; // rbx\n  char *v10; // rax\n  char *ptr; // [rsp+38h] [rbp-48h]\n  char s[24]; // [rsp+40h] [rbp-40h] BYREF\n  unsigned __int64 v14; // [rsp+58h] [rbp-28h]\n\n  v14 = __readfsqword(0x28u);\n  ptr = sub_40235F(a1);\n  sprintf(s, \"%ld\", *(int *)(a1 + 4));\n  if ( !qword_60F338 )\n  {\n    v1 = gettext(\"term=\");\n    v2 = strlen(v1);\n    v3 = gettext(\"exit=\");\n    v4 = strlen(v3);\n    qword_60F338 = (char *)sub_405B39(v2 + v4 + 14);\n  }\n  v5 = *(__int16 *)(a1 + 334);\n  v6 = gettext(\"exit=\");\n  v7 = *(__int16 *)(a1 + 332);\n  v8 = gettext(\"term=\");\n  sprintf(qword_60F338, \"%s%d %s%d\", v8, v7, v6, v5);\n  v9 = qword_60F338;\n  v10 = sub_401B3F(a1);\n  sub_401BAC(-1, (__int64)&locale, 32, 32, a1 + 8, (__int64)v10, &locale, s, (__int64)ptr, v9);\n  free(ptr);\n  return __readfsqword(0x28u) ^ v14;\n}\n"], [4203840, "sub_402540", "unsigned __int64 __fastcall sub_402540(__int64 a1)\n{\n  char *v1; // rbx\n  char *v2; // rax\n  char *ptr; // [rsp+38h] [rbp-38h]\n  char s[24]; // [rsp+40h] [rbp-30h] BYREF\n  unsigned __int64 v6; // [rsp+58h] [rbp-18h]\n\n  v6 = __readfsqword(0x28u);\n  ptr = sub_40235F(a1);\n  sprintf(s, \"%ld\", *(int *)(a1 + 4));\n  v1 = sub_401B3F(a1);\n  v2 = gettext(\"LOGIN\");\n  sub_401BAC(-1, (__int64)v2, 32, 32, a1 + 8, (__int64)v1, &locale, s, (__int64)ptr, &locale);\n  free(ptr);\n  return __readfsqword(0x28u) ^ v6;\n}\n"], [4204056, "sub_402618", "unsigned __int64 __fastcall sub_402618(__int64 a1)\n{\n  char *v1; // rax\n  char *ptr; // [rsp+38h] [rbp-28h]\n  char s[24]; // [rsp+40h] [rbp-20h] BYREF\n  unsigned __int64 v5; // [rsp+58h] [rbp-8h]\n\n  v5 = __readfsqword(0x28u);\n  ptr = sub_40235F(a1);\n  sprintf(s, \"%ld\", *(int *)(a1 + 4));\n  v1 = sub_401B3F(a1);\n  sub_401BAC(-1, (__int64)&locale, 32, 32, a1 + 8, (__int64)v1, &locale, s, (__int64)ptr, &locale);\n  free(ptr);\n  return __readfsqword(0x28u) ^ v5;\n}\n"], [4204251, "sub_4026DB", "unsigned __int64 __fastcall sub_4026DB(__int64 a1)\n{\n  char *v1; // rbx\n  char *v2; // rax\n\n  v1 = sub_401B3F(a1);\n  v2 = gettext(\"clock change\");\n  return sub_401BAC(-1, (__int64)&locale, 32, -1, (__int64)v2, (__int64)v1, &locale, &locale, (__int64)&locale, &locale);\n}\n"], [4204362, "sub_40274A", "unsigned __int64 __fastcall sub_40274A(__int64 a1)\n{\n  int v1; // eax\n  char *v2; // rax\n  size_t v3; // rax\n  char *v4; // rax\n  char *v5; // rax\n  size_t v6; // rax\n  unsigned int v7; // ebx\n  char *v8; // rax\n  const char *v9; // rbx\n  char *v10; // rax\n  unsigned __int8 v12; // [rsp+3Eh] [rbp-12h]\n  unsigned __int8 v13; // [rsp+3Fh] [rbp-11h]\n\n  v1 = *(_DWORD *)(a1 + 4);\n  if ( v1 < 0 )\n    BYTE1(v1) = (unsigned __int16)(v1 + 255) >> 8;\n  v12 = BYTE1(v1);\n  v13 = *(_DWORD *)(a1 + 4);\n  if ( !qword_60F340 )\n  {\n    v2 = gettext(\"run-level\");\n    v3 = strlen(v2);\n    qword_60F340 = (char *)sub_405B39(v3 + 3);\n  }\n  v4 = gettext(\"run-level\");\n  sprintf(qword_60F340, \"%s %c\", v4, v13);\n  if ( !qword_60F348 )\n  {\n    v5 = gettext(\"last=\");\n    v6 = strlen(v5);\n    qword_60F348 = (char *)sub_405B39(v6 + 2);\n  }\n  if ( v12 == 78 )\n    v7 = 83;\n  else\n    v7 = v12;\n  v8 = gettext(\"last=\");\n  sprintf(qword_60F348, \"%s%c\", v8, v7);\n  if ( (unsigned __int8)sub_403378(v12) )\n    v9 = qword_60F348;\n  else\n    v9 = &locale;\n  v10 = sub_401B3F(a1);\n  return sub_401BAC(\n           -1,\n           (__int64)&locale,\n           32,\n           -1,\n           (__int64)qword_60F340,\n           (__int64)v10,\n           &locale,\n           &locale,\n           (__int64)v9,\n           &locale);\n}\n"], [4204737, "sub_4028C1", "int __fastcall sub_4028C1(__int64 a1, __int64 a2)\n{\n  char *v3; // rax\n  __int64 v7; // [rsp+18h] [rbp-18h]\n  const char *v8; // [rsp+20h] [rbp-10h]\n  char *ptr; // [rsp+28h] [rbp-8h]\n\n  v7 = 0LL;\n  v8 = &locale;\n  while ( a1-- )\n  {\n    if ( *(_BYTE *)(a2 + 44) && *(_WORD *)a2 == 7 )\n    {\n      ptr = (char *)sub_405DA4(a2);\n      printf(\"%s%s\", v8, ptr);\n      free(ptr);\n      v8 = \" \";\n      ++v7;\n    }\n    a2 += 384LL;\n  }\n  v3 = gettext(\"\\n# users=%lu\\n\");\n  return printf(v3, v7);\n}\n"], [4204920, "sub_402978", "unsigned __int64 sub_402978()\n{\n  char *v0; // r14\n  char *v1; // r13\n  char *v2; // r12\n  char *v3; // rbx\n  char *v4; // r15\n  char *v5; // rax\n  char *v7; // [rsp+28h] [rbp-38h]\n\n  v0 = gettext(\"EXIT\");\n  v1 = gettext(\"COMMENT\");\n  v2 = gettext(\"PID\");\n  v3 = gettext(\"IDLE\");\n  v7 = gettext(\"TIME\");\n  v4 = gettext(\"LINE\");\n  v5 = gettext(\"NAME\");\n  return sub_401BAC(-1, (__int64)v5, 32, -1, (__int64)v4, (__int64)v7, v3, v2, (__int64)v1, v0);\n}\n"], [4205090, "sub_402A22", "char *__fastcall sub_402A22(char *a1, __int64 a2)\n{\n  char *result; // rax\n  char *s1; // [rsp+10h] [rbp-10h]\n  time_t v6; // [rsp+18h] [rbp-8h]\n\n  v6 = 0x8000000000000000LL;\n  if ( byte_60F2C4 )\n    sub_402978();\n  if ( byte_60F2CE )\n  {\n    result = ttyname(0);\n    s1 = result;\n    if ( !result )\n      return result;\n    if ( !strncmp(result, \"/dev/\", 5uLL) )\n      s1 += 5;\n  }\n  while ( 1 )\n  {\n    result = a1--;\n    if ( !result )\n      break;\n    if ( byte_60F2CE != 1 || !strncmp(s1, (const char *)(a2 + 8), 0x20uLL) )\n    {\n      if ( byte_60F2CD && *(_BYTE *)(a2 + 44) && *(_WORD *)a2 == 7 )\n      {\n        sub_401E57(a2, v6);\n      }\n      else if ( byte_60F2CC && *(_WORD *)a2 == 1 )\n      {\n        sub_40274A(a2);\n      }\n      else if ( byte_60F2C7 && *(_WORD *)a2 == 2 )\n      {\n        sub_4022F0(a2);\n      }\n      else if ( byte_60F2CB && *(_WORD *)a2 == 3 )\n      {\n        sub_4026DB(a2);\n      }\n      else if ( byte_60F2CA && *(_WORD *)a2 == 5 )\n      {\n        sub_402618(a2);\n      }\n      else if ( byte_60F2C9 && *(_WORD *)a2 == 6 )\n      {\n        sub_402540(a2);\n      }\n      else if ( byte_60F2C8 && *(_WORD *)a2 == 8 )\n      {\n        sub_4023CB(a2);\n      }\n    }\n    if ( *(_WORD *)a2 == 2 )\n      v6 = *(int *)(a2 + 340);\n    a2 += 384LL;\n  }\n  return result;\n}\n"], [4205616, "sub_402C30", "void __fastcall sub_402C30(const char *a1, unsigned int a2)\n{\n  int *v2; // rax\n  char *v3; // [rsp+10h] [rbp-10h] BYREF\n  void *ptr; // [rsp+18h] [rbp-8h] BYREF\n\n  if ( (unsigned int)sub_405ECC(a1, &v3, &ptr, a2) )\n  {\n    v2 = __errno_location();\n    error(1, *v2, \"%s\", a1);\n  }\n  if ( byte_60F2C1 )\n    sub_4028C1((__int64)v3, (__int64)ptr);\n  else\n    sub_402A22(v3, (__int64)ptr);\n  free(ptr);\n}\n"], [4205759, "sub_402CBF", "void __fastcall __noreturn sub_402CBF(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbx\n  char *v5; // rax\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rbx\n  char *v9; // rax\n  FILE *v10; // rbx\n  char *v11; // rax\n  FILE *v12; // rbx\n  char *v13; // rax\n  FILE *v14; // rbx\n  char *v15; // rax\n  FILE *v16; // rbx\n  char *v17; // rax\n  FILE *v18; // rbx\n  char *v19; // rax\n  char *v20; // rax\n\n  v1 = qword_60F3C0;\n  if ( a1 )\n  {\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = gettext(\"Usage: %s [OPTION]... [ FILE | ARG1 ARG2 ]\\n\");\n    printf(v3, v1);\n    v4 = stdout;\n    v5 = gettext(\"Print information about users who are currently logged in.\\n\");\n    fputs_unlocked(v5, v4);\n    v6 = stdout;\n    v7 = gettext(\n           \"\\n\"\n           \"  -a, --all         same as -b -d --login -p -r -t -T -u\\n\"\n           \"  -b, --boot        time of last system boot\\n\"\n           \"  -d, --dead        print dead processes\\n\"\n           \"  -H, --heading     print line of column headings\\n\");\n    fputs_unlocked(v7, v6);\n    v8 = stdout;\n    v9 = gettext(\"  -l, --login       print system login processes\\n\");\n    fputs_unlocked(v9, v8);\n    v10 = stdout;\n    v11 = gettext(\n            \"      --lookup      attempt to canonicalize hostnames via DNS\\n\"\n            \"  -m                only hostname and user associated with stdin\\n\"\n            \"  -p, --process     print active processes spawned by init\\n\");\n    fputs_unlocked(v11, v10);\n    v12 = stdout;\n    v13 = gettext(\n            \"  -q, --count       all login names and number of users logged on\\n\"\n            \"  -r, --runlevel    print current runlevel\\n\"\n            \"  -s, --short       print only name, line, and time (default)\\n\"\n            \"  -t, --time        print last system clock change\\n\");\n    fputs_unlocked(v13, v12);\n    v14 = stdout;\n    v15 = gettext(\n            \"  -T, -w, --mesg    add user's message status as +, - or ?\\n\"\n            \"  -u, --users       list users logged in\\n\"\n            \"      --message     same as -T\\n\"\n            \"      --writable    same as -T\\n\");\n    fputs_unlocked(v15, v14);\n    v16 = stdout;\n    v17 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v17, v16);\n    v18 = stdout;\n    v19 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v19, v18);\n    v20 = gettext(\n            \"\\n\"\n            \"If FILE is not specified, use %s.  %s as FILE is common.\\n\"\n            \"If ARG1 ARG2 given, -m presumed: `am i' or `mom likes' are usual.\\n\");\n    printf(v20, \"/var/run/utmp\", \"/var/log/wtmp\");\n    sub_4018FD();\n  }\n  exit(a1);\n}\n"], [4206133, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  int v3; // eax\n  __int64 v4; // rbx\n  char *v5; // rax\n  char v6; // [rsp+2Bh] [rbp-15h]\n  int v7; // [rsp+2Ch] [rbp-14h]\n\n  v6 = 1;\n  sub_4038FC(*a2, a2, a3);\n  setlocale(6, &locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40BB70(sub_4035CB);\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v7 = getopt_long(a1, a2, \"abdlmpqrstuwHT\", &longopts, 0LL);\n        if ( v7 == -1 )\n        {\n          if ( v6 )\n          {\n            byte_60F2CD = 1;\n            byte_60F2C2 = 1;\n          }\n          if ( byte_60F2C6 )\n            byte_60F2C2 = 0;\n          if ( (unsigned __int8)sub_40376D(2LL) )\n          {\n            qword_60F2D0 = \"%Y-%m-%d %H:%M\";\n            dword_60F2D8 = 16;\n          }\n          else\n          {\n            qword_60F2D0 = \"%b %e %H:%M\";\n            dword_60F2D8 = 12;\n          }\n          v3 = a1 - optind;\n          if ( a1 - optind != 1 )\n          {\n            if ( v3 > 1 )\n            {\n              if ( v3 == 2 )\n              {\n                byte_60F2CE = 1;\n                goto LABEL_59;\n              }\n            }\n            else if ( v3 >= -1 )\n            {\nLABEL_59:\n              sub_402C30(\"/var/run/utmp\", 1u);\n              goto LABEL_62;\n            }\n            v4 = sub_403A07(a2[optind + 2]);\n            v5 = gettext(\"extra operand %s\");\n            error(0, 0, v5, v4);\n            sub_402CBF(1);\n          }\n          sub_402C30(a2[optind], 0);\nLABEL_62:\n          exit(0);\n        }\n        if ( v7 != 109 )\n          break;\n        byte_60F2CE = 1;\n      }\n      if ( v7 <= 109 )\n        break;\n      if ( v7 == 115 )\n      {\n        byte_60F2C2 = 1;\n      }\n      else if ( v7 > 115 )\n      {\n        if ( v7 == 117 )\n        {\n          byte_60F2CD = 1;\n          byte_60F2C3 = 1;\n          v6 = 0;\n        }\n        else if ( v7 < 117 )\n        {\n          byte_60F2CB = 1;\n          v6 = 0;\n        }\n        else if ( v7 == 119 )\n        {\nLABEL_39:\n          byte_60F2C5 = 1;\n        }\n        else\n        {\n          if ( v7 != 128 )\n            goto LABEL_44;\n          byte_60F2C0 = 1;\n        }\n      }\n      else if ( v7 == 113 )\n      {\n        byte_60F2C1 = 1;\n      }\n      else if ( v7 > 113 )\n      {\n        byte_60F2CC = 1;\n        byte_60F2C3 = 1;\n        v6 = 0;\n      }\n      else\n      {\n        if ( v7 != 112 )\n          goto LABEL_44;\n        byte_60F2CA = 1;\n        v6 = 0;\n      }\n    }\n    if ( v7 == 84 )\n      goto LABEL_39;\n    if ( v7 > 84 )\n    {\n      if ( v7 == 98 )\n      {\n        byte_60F2C7 = 1;\n        v6 = 0;\n      }\n      else if ( v7 > 98 )\n      {\n        if ( v7 == 100 )\n        {\n          byte_60F2C8 = 1;\n          byte_60F2C3 = 1;\n          byte_60F2C6 = 1;\n          v6 = 0;\n        }\n        else\n        {\n          if ( v7 != 108 )\n            goto LABEL_44;\n          byte_60F2C9 = 1;\n          byte_60F2C3 = 1;\n          v6 = 0;\n        }\n      }\n      else\n      {\n        if ( v7 != 97 )\n          goto LABEL_44;\n        byte_60F2C7 = 1;\n        byte_60F2C8 = 1;\n        byte_60F2C9 = 1;\n        byte_60F2CA = 1;\n        byte_60F2CC = 1;\n        byte_60F2CB = 1;\n        byte_60F2CD = 1;\n        byte_60F2C5 = 1;\n        byte_60F2C3 = 1;\n        byte_60F2C6 = 1;\n        v6 = 0;\n      }\n    }\n    else\n    {\n      if ( v7 == -130 )\n        sub_402CBF(0);\n      if ( v7 != 72 )\n      {\n        if ( v7 == -131 )\n        {\n          sub_4058D1(\n            (_DWORD)stdout,\n            (unsigned int)\"who\",\n            (unsigned int)\"GNU coreutils\",\n            (_DWORD)off_60F240,\n            (unsigned int)\"Joseph Arceneaux\",\n            (unsigned int)\"David MacKenzie\",\n            \"Michael Stone\",\n            0LL);\n          exit(0);\n        }\nLABEL_44:\n        sub_402CBF(1);\n      }\n      byte_60F2C4 = 1;\n    }\n  }\n}\n"], [4207192, "sub_403258", "_BOOL8 __fastcall sub_403258(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4207250, "sub_403292", "_BOOL8 __fastcall sub_403292(int a1)\n{\n  return (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4207296, "sub_4032C0", "_BOOL8 __fastcall sub_4032C0(int a1)\n{\n  return a1 == 32 || a1 == 9;\n}\n"], [4207332, "sub_4032E4", "_BOOL8 __fastcall sub_4032E4(int a1)\n{\n  return (a1 & 0xFFFFFFE0) == 0 || a1 == 127;\n}\n"], [4207372, "sub_40330C", "_BOOL8 __fastcall sub_40330C(int a1)\n{\n  return a1 > 47 && a1 <= 57;\n}\n"], [4207408, "sub_403330", "_BOOL8 __fastcall sub_403330(int a1)\n{\n  return a1 > 96 && a1 <= 122;\n}\n"], [4207444, "sub_403354", "_BOOL8 __fastcall sub_403354(int a1)\n{\n  return a1 > 32 && a1 <= 126;\n}\n"], [4207480, "sub_403378", "_BOOL8 __fastcall sub_403378(int a1)\n{\n  return a1 > 31 && a1 <= 126;\n}\n"], [4207516, "sub_40339C", "_BOOL8 __fastcall sub_40339C(int a1)\n{\n  return a1 > 32 && a1 <= 126 && (a1 <= 47 || a1 > 57) && ((int)(a1 & 0xFFFFFFDF) <= 64 || (int)(a1 & 0xFFFFFFDF) > 90);\n}\n"], [4207586, "sub_4033E2", "_BOOL8 __fastcall sub_4033E2(int a1)\n{\n  return a1 == 32 || a1 == 9 || a1 == 10 || a1 == 11 || a1 == 12 || a1 == 13;\n}\n"], [4207646, "sub_40341E", "_BOOL8 __fastcall sub_40341E(int a1)\n{\n  return a1 > 64 && a1 <= 90;\n}\n"], [4207682, "sub_403442", "_BOOL8 __fastcall sub_403442(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 70;\n}\n"], [4207740, "sub_40347C", "__int64 __fastcall sub_40347C(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 64 || a1 > 90 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 + 32);\n  return result;\n}\n"], [4207772, "sub_40349C", "__int64 __fastcall sub_40349C(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 96 || a1 > 122 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 - 32);\n  return result;\n}\n"], [4207804, "sub_4034BC", "__int64 __fastcall sub_4034BC(__int64 a1)\n{\n  return sub_4034DB(a1, &ecode);\n}\n"], [4207835, "sub_4034DB", "char *__fastcall sub_4034DB(const char *a1, int *a2)\n{\n  char *v2; // rax\n  int v4; // [rsp+1Ch] [rbp-14h]\n  struct addrinfo *pai; // [rsp+20h] [rbp-10h] BYREF\n  char *v6; // [rsp+28h] [rbp-8h]\n\n  v6 = 0LL;\n  pai = 0LL;\n  req.ai_flags = 2;\n  v4 = getaddrinfo(a1, 0LL, &req, &pai);\n  if ( v4 )\n  {\n    if ( a2 )\n      *a2 = v4;\n  }\n  else\n  {\n    if ( pai->ai_canonname )\n      v2 = pai->ai_canonname;\n    else\n      v2 = (char *)a1;\n    v6 = strdup(v2);\n    if ( !v6 && a2 )\n      *a2 = -10;\n    freeaddrinfo(pai);\n  }\n  return v6;\n}\n"], [4208014, "sub_40358E", "const char *sub_40358E()\n{\n  return gai_strerror(ecode);\n}\n"], [4208033, "sub_4035A1", "__int64 __fastcall sub_4035A1(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_60F3B0 = a1;\n  return result;\n}\n"], [4208054, "sub_4035B6", "__int64 __fastcall sub_4035B6(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_60F3B8 = a1;\n  return result;\n}\n"], [4208075, "sub_4035CB", "__int64 sub_4035CB()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_40609D(stdout) && (byte_60F3B8 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_60F3B0 )\n    {\n      v0 = (const char *)sub_405020(qword_60F3B0);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_40609D(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4208310, "sub_4036B6", "_BYTE *__fastcall sub_4036B6(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4208415, "sub_40371F", "size_t __fastcall sub_40371F(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4208493, "sub_40376D", "__int64 __fastcall sub_40376D(int a1)\n{\n  unsigned __int8 v2; // [rsp+17h] [rbp-9h]\n  const char *s1; // [rsp+18h] [rbp-8h]\n\n  v2 = 1;\n  s1 = setlocale(a1, 0LL);\n  if ( s1 && (!strcmp(s1, \"C\") || !strcmp(s1, \"POSIX\")) )\n    v2 = 0;\n  return v2;\n}\n"], [4208586, "sub_4037CA", "__int64 __fastcall sub_4037CA(__int64 a1, __int64 a2)\n{\n  __int64 v3; // [rsp+8h] [rbp-18h]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = a1;\n  v4 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  if ( a1 >= 0 )\n  {\n    do\n    {\n      *(_BYTE *)--v4 = (char)v3 % 10 + 48;\n      v3 /= 10LL;\n    }\n    while ( v3 );\n  }\n  else\n  {\n    do\n    {\n      *(_BYTE *)--v4 = 48 - (char)v3 % 10;\n      v3 /= 10LL;\n    }\n    while ( v3 );\n    *(_BYTE *)--v4 = 45;\n  }\n  return v4;\n}\n"], [4208892, "sub_4038FC", "char *__fastcall sub_4038FC(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_60F3C0 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4209123, "sub_4039E3", "__int64 __fastcall sub_4039E3(unsigned int a1, __int64 a2)\n{\n  return sub_404E92(a1, 6LL, a2);\n}\n"], [4209159, "sub_403A07", "__int64 __fastcall sub_403A07(__int64 a1)\n{\n  return sub_4039E3(0, a1);\n}\n"], [4209190, "sub_403A26", "__int64 __fastcall sub_403A26(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60F3E0;\n  v4 = sub_405C5D(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4209263, "sub_403A6F", "__int64 __fastcall sub_403A6F(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60F3E0;\n  return *(unsigned int *)v1;\n}\n"], [4209293, "sub_403A8D", "__int64 *__fastcall sub_403A8D(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_60F3E0;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4209329, "sub_403AB1", "__int64 __fastcall sub_403AB1(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_60F3E0;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4209465, "sub_403B39", "__int64 __fastcall sub_403B39(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_60F3E0;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4209516, "sub_403B6C", "__int64 *__fastcall sub_403B6C(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_60F3E0;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4209606, "sub_403BC6", "_QWORD *__fastcall sub_403BC6(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4209726, "sub_403C3E", "char *__fastcall sub_403C3E(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'\";\n  return v3;\n}\n"], [4209787, "sub_403C7B", "unsigned __int64 __fastcall sub_403C7B(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_403C3E((const char *)L\"`'\", a5);\n        a9 = sub_403C3E((const char *)L\"'\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_403C7B(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4212934, "sub_4048C6", "unsigned __int64 __fastcall sub_4048C6(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_60F3E0;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_403C7B(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4213094, "sub_404966", "__int64 __fastcall sub_404966(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_404998(a1, a2, 0LL, a3);\n}\n"], [4213144, "sub_404998", "__int64 __fastcall sub_404998(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_60F3E0;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_403C7B(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_405B1F(v10);\n  sub_403C7B(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4213444, "sub_404AC4", "void sub_404AC4()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_60F270;\n  for ( i = 1; i < dword_60F250; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_60F420 )\n  {\n    free(ptr[1]);\n    qword_60F260 = 256LL;\n    off_60F268 = &unk_60F420;\n  }\n  if ( ptr != (void **)&qword_60F260 )\n  {\n    free(ptr);\n    off_60F270 = &qword_60F260;\n  }\n  dword_60F250 = 1;\n}\n"], [4213615, "sub_404B6F", "void *__fastcall sub_404B6F(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_60F270;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60F250 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_60F270 == &qword_60F260;\n    if ( off_60F270 == &qword_60F260 )\n      v4 = 0LL;\n    else\n      v4 = off_60F270;\n    v12 = (__int64 *)sub_405B6E(v4, 16 * v14);\n    off_60F270 = v12;\n    if ( v9 )\n    {\n      v5 = off_60F268;\n      *v12 = qword_60F260;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_60F250], 0, 16 * (v14 - (unsigned int)dword_60F250));\n    dword_60F250 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_403C7B((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_60F420 )\n      free(ptr);\n    ptr = (void *)sub_405B1F(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_403C7B((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4214261, "sub_404DF5", "void *__fastcall sub_404DF5(int a1, __int64 a2)\n{\n  return sub_404B6F(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_60F3E0);\n}\n"], [4214304, "sub_404E20", "void *__fastcall sub_404E20(int a1, __int64 a2, size_t a3)\n{\n  return sub_404B6F(a1, a2, a3, (__int64)&qword_60F3E0);\n}\n"], [4214348, "sub_404E4C", "void *__fastcall sub_404E4C(__int64 a1)\n{\n  return sub_404DF5(0, a1);\n}\n"], [4214379, "sub_404E6B", "void *__fastcall sub_404E6B(__int64 a1, size_t a2)\n{\n  return sub_404E20(0, a1, a2);\n}\n"], [4214418, "sub_404E92", "void *__fastcall sub_404E92(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_403BC6(v5, a2);\n  return sub_404B6F(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4214483, "sub_404ED3", "void *__fastcall sub_404ED3(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_403BC6(v7, a2);\n  return sub_404B6F(a1, a3, a4, (__int64)v7);\n}\n"], [4214546, "sub_404F12", "void *__fastcall sub_404F12(int a1, __int64 a2)\n{\n  return sub_404E92(0, a1, a2);\n}\n"], [4214582, "sub_404F36", "void *__fastcall sub_404F36(int a1, __int64 a2, size_t a3)\n{\n  return sub_404ED3(0, a1, a2, a3);\n}\n"], [4214626, "sub_404F62", "void *__fastcall sub_404F62(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_60F3E0;\n  v4[1] = qword_60F3E8;\n  v4[2] = qword_60F3F0;\n  v4[3] = qword_60F3F8;\n  v4[4] = qword_60F400;\n  v4[5] = qword_60F408;\n  v4[6] = qword_60F410;\n  sub_403AB1(v4, a3, 1);\n  return sub_404B6F(0, a1, a2, (__int64)v4);\n}\n"], [4214774, "sub_404FF6", "void *__fastcall sub_404FF6(__int64 a1, unsigned __int8 a2)\n{\n  return sub_404F62(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4214816, "sub_405020", "void *__fastcall sub_405020(__int64 a1)\n{\n  return sub_404FF6(a1, 0x3Au);\n}\n"], [4214847, "sub_40503F", "void *__fastcall sub_40503F(__int64 a1, size_t a2)\n{\n  return sub_404F62(a1, a2, 0x3Au);\n}\n"], [4214889, "sub_405069", "__int64 __fastcall sub_405069(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_40509F(a1, a2, a3, a4, -1LL);\n}\n"], [4214943, "sub_40509F", "void *__fastcall sub_40509F(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_60F3E0;\n  v8[1] = qword_60F3E8;\n  v8[2] = qword_60F3F0;\n  v8[3] = qword_60F3F8;\n  v8[4] = qword_60F400;\n  v8[5] = qword_60F408;\n  v8[6] = qword_60F410;\n  sub_403B6C(v8, a2, a3);\n  return sub_404B6F(a1, a4, a5, (__int64)v8);\n}\n"], [4215094, "sub_405136", "__int64 __fastcall sub_405136(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_405069(0, a1, a2, a3);\n}\n"], [4215141, "sub_405165", "void *__fastcall sub_405165(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_40509F(0, a1, a2, a3, a4);\n}\n"], [4215199, "sub_40519F", "int __fastcall sub_40519F(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4216714, "sub_40578A", "int __fastcall sub_40578A(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_40519F(a1, a2, a3, a4, a5, i);\n}\n"], [4216824, "sub_4057F8", "int __fastcall sub_4057F8(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_40519F(a1, a2, a3, a4, v8, i);\n}\n"], [4217041, "sub_4058D1", "int sub_4058D1(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_4057F8(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4217223, "sub_405987", "int sub_405987()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4217328, "sub_4059F0", "__int64 __fastcall sub_4059F0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_405CBB(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_405B39(a2 * a1);\n}\n"], [4217390, "sub_405A2E", "__int64 __fastcall sub_405A2E(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_405CBB(a1, a2, v4);\n  return sub_405B6E(a1, a3 * a2);\n}\n"], [4217466, "sub_405A7A", "__int64 __fastcall sub_405A7A(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_405CBB(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_405B6E(a1, a3 * v6);\n}\n"], [4217631, "sub_405B1F", "__int64 __fastcall sub_405B1F(__int64 a1)\n{\n  return sub_405B39(a1);\n}\n"], [4217657, "sub_405B39", "void *__fastcall sub_405B39(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_405CBB(a1, a2, v2);\n  return v4;\n}\n"], [4217710, "sub_405B6E", "void *__fastcall sub_405B6E(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_405CBB(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4217807, "sub_405BCF", "__int64 __fastcall sub_405BCF(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_405A7A(a1, a2, 1uLL);\n}\n"], [4217849, "sub_405BF9", "void *__fastcall sub_405BF9(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_405B39(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4217892, "sub_405C24", "void *__fastcall sub_405C24(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_405CBB(a1, a2, v2);\n  return v4;\n}\n"], [4217949, "sub_405C5D", "void *__fastcall sub_405C5D(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_405B39(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4217998, "sub_405C8E", "void *__fastcall sub_405C8E(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_405C5D(a1, v1 + 1);\n}\n"], [4218043, "sub_405CBB", "void __noreturn sub_405CBB()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4218096, "sub_405CF0", "__int64 sub_405CF0(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+18h] [rbp-C8h] BYREF\n\n  va_start(va, a2);\n  return (unsigned int)sub_406023(a1, a2, va);\n}\n"], [4218276, "sub_405DA4", "char *__fastcall sub_405DA4(__int64 a1, __int64 a2)\n{\n  char *i; // [rsp+10h] [rbp-10h]\n  char *dest; // [rsp+18h] [rbp-8h]\n\n  dest = (char *)sub_405B39(0x21uLL, a2);\n  strncpy(dest, (const char *)(a1 + 44), 0x20uLL);\n  dest[32] = 0;\n  for ( i = &dest[strlen(dest)]; dest < i && *(i - 1) == 32; *i = 0 )\n    --i;\n  return dest;\n}\n"], [4218409, "sub_405E29", "_BOOL8 __fastcall sub_405E29(__int64 a1, char a2)\n{\n  bool v2; // al\n\n  v2 = *(_BYTE *)(a1 + 44) && *(_WORD *)a1 == 7;\n  if ( (a2 & 2) != 0 && !v2 )\n    return 0LL;\n  return (a2 & 1) == 0 || !v2 || *(int *)(a1 + 4) > 0 && (kill(*(_DWORD *)(a1 + 4), 0) >= 0 || *__errno_location() != 3);\n}\n"], [4218572, "sub_405ECC", "__int64 __fastcall sub_405ECC(const char *a1, _QWORD *a2, _QWORD *a3, char a4)\n{\n  __int64 v4; // rdx\n  _DWORD *v5; // rax\n  struct utmpx *v6; // rsi\n  unsigned int v7; // er8\n  __int64 v8; // rcx\n  _DWORD *v9; // rdi\n  __int16 *v10; // rsi\n  __int64 v11; // rdx\n  unsigned __int64 v16; // [rsp+20h] [rbp-20h] BYREF\n  __int64 v17; // [rsp+28h] [rbp-18h]\n  __int64 v18; // [rsp+30h] [rbp-10h]\n  struct utmpx *v19; // [rsp+38h] [rbp-8h]\n\n  v17 = 0LL;\n  v16 = 0LL;\n  v18 = 0LL;\n  utmpxname(a1);\n  setutxent();\n  while ( 1 )\n  {\n    v19 = getutxent();\n    if ( !v19 )\n      break;\n    if ( sub_405E29((__int64)v19, a4) )\n    {\n      if ( v17 == v16 )\n        v18 = sub_405A7A(v18, &v16, 0x180uLL);\n      v4 = v17++;\n      v5 = (_DWORD *)(384 * v4 + v18);\n      v6 = v19;\n      v7 = 384;\n      if ( ((((_BYTE)v4 << 7) + (_BYTE)v18) & 4) != 0 )\n      {\n        *v5++ = *(_DWORD *)&v19->ut_type;\n        v6 = (struct utmpx *)((char *)v6 + 4);\n        v7 = 380;\n      }\n      v8 = v7 >> 3;\n      qmemcpy(v5, v6, 8 * v8);\n      v10 = &v6->ut_type + 4 * v8;\n      v9 = &v5[2 * v8];\n      v11 = 0LL;\n      if ( (v7 & 4) != 0 )\n      {\n        *v9 = *(_DWORD *)v10;\n        v11 = 2LL;\n      }\n      if ( (v7 & 2) != 0 )\n      {\n        *(_WORD *)((char *)v9 + v11 * 2) = v10[v11];\n        ++v11;\n      }\n      if ( (v7 & 1) != 0 )\n        *((_BYTE *)v9 + v11 * 2) = v10[v11];\n    }\n  }\n  endutxent();\n  *a2 = v17;\n  *a3 = v18;\n  return 0LL;\n}\n"], [4218915, "sub_406023", "unsigned __int64 __fastcall sub_406023(void **a1, __int64 a2, __int64 a3)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // [rsp+20h] [rbp-10h] BYREF\n  void *ptr; // [rsp+28h] [rbp-8h]\n\n  ptr = (void *)sub_406423(0LL, &v4, a2, a3);\n  if ( !ptr )\n    return 0xFFFFFFFFLL;\n  if ( v4 <= 0x7FFFFFFF )\n  {\n    *a1 = ptr;\n    result = v4;\n  }\n  else\n  {\n    free(ptr);\n    *__errno_location() = 75;\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"], [4219037, "sub_40609D", "__int64 __fastcall sub_40609D(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = (unsigned int)sub_406128(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4219176, "sub_406128", "int __fastcall sub_406128(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_406210(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4219357, "sub_4061DD", "__int64 __fastcall sub_4061DD(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_40625B(a1, 0LL, 1LL);\n  return result;\n}\n"], [4219408, "sub_406210", "int __fastcall sub_406210(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_4061DD(a1);\n  return fflush(a1);\n}\n"], [4219483, "sub_40625B", "int __fastcall sub_40625B(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4219667, "sub_406313", "__int64 __fastcall sub_406313(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4219719, "sub_406347", "__int64 __fastcall sub_406347(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  __int64 v5; // rax\n\n  v4 = sub_406313(a1, a2);\n  v5 = sub_406313(v4, a3);\n  return sub_406313(v5, a4);\n}\n"], [4219794, "sub_406392", "unsigned __int64 __fastcall sub_406392(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = a2;\n  if ( a1 >= a2 )\n    result = a1;\n  return result;\n}\n"], [4219821, "sub_4063AD", "__int64 sub_4063AD()\n{\n  __int64 result; // rax\n  char *v1; // [rsp+8h] [rbp-8h]\n\n  v1 = nl_langinfo(0x10000);\n  if ( *v1 )\n    result = (unsigned __int8)*v1;\n  else\n    result = 46LL;\n  return result;\n}\n"], [4219870, "sub_4063DE", "_BOOL8 __fastcall sub_4063DE(int a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, __int64 a11, int a12, int a13, int a14, long double a15)\n{\n  return (unsigned int)sub_409BDE(a1, a2, DWORD2(a15), a12, a13, a14, *(__int64 *)&a15, DWORD2(a15)) || a15 == a15 + a15;\n}\n"], [4219939, "sub_406423", "void *__fastcall sub_406423(void *a1, unsigned __int64 *a2, void *a3, __int64 a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)\n{\n  int v13; // esi\n  int v14; // edi\n  int v15; // ecx\n  int v16; // er8\n  int v17; // er9\n  double v18; // xmm4_8\n  double v19; // xmm5_8\n  void *v20; // rsp\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  unsigned __int64 v23; // rax\n  unsigned int v24; // eax\n  char *v25; // rax\n  char *v26; // rax\n  __int64 v27; // rcx\n  unsigned __int64 v28; // rax\n  char *v29; // rax\n  __int64 v30; // rcx\n  unsigned __int64 v31; // rax\n  int v32; // edi\n  int v33; // ecx\n  int v34; // er8\n  int v35; // er9\n  char *v36; // rax\n  int v37; // edx\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  char *v41; // rax\n  char *v42; // rax\n  char *v43; // rax\n  __int16 v44; // ax\n  __int16 v45; // fps\n  char *v47; // rax\n  char *v48; // rax\n  char *v49; // rax\n  char *v50; // rax\n  char *v51; // rax\n  char *v52; // rax\n  char *v53; // rax\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rbx\n  char *v58; // rax\n  char *v59; // rax\n  char *v60; // rbx\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rax\n  char *v64; // rax\n  char *v65; // rax\n  char *v66; // rax\n  __int64 v67; // rax\n  char *v68; // rbx\n  char *v69; // rax\n  char *v70; // rax\n  char *v71; // rax\n  char *v72; // rax\n  char *v73; // rbx\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  unsigned __int64 v81; // rax\n  _BYTE *v82; // rax\n  _BYTE *v83; // rax\n  _BYTE *v84; // rax\n  _BYTE *v85; // rax\n  _BYTE *v86; // rax\n  _BYTE *v87; // rax\n  _BYTE *v88; // rax\n  _BYTE *v89; // rax\n  _BYTE *v90; // rax\n  _BYTE *v91; // rax\n  unsigned int v92; // eax\n  unsigned int v93; // eax\n  unsigned __int64 v94; // rax\n  __int64 v95; // rax\n  unsigned __int64 v96; // rax\n  char *v97; // rax\n  int v98; // edx\n  int *v99; // rdx\n  int v100; // eax\n  unsigned __int64 v101; // rbx\n  __int64 v102; // rax\n  unsigned __int64 v103; // rax\n  __int64 v104; // rax\n  unsigned __int64 v105; // rax\n  long double v106; // [rsp+0h] [rbp-8E0h]\n  __int64 v107; // [rsp+18h] [rbp-8C8h] BYREF\n  __int64 v108; // [rsp+20h] [rbp-8C0h]\n  void *v109; // [rsp+28h] [rbp-8B8h]\n  unsigned __int64 *v110; // [rsp+30h] [rbp-8B0h]\n  void *v111; // [rsp+38h] [rbp-8A8h]\n  __int16 v112; // [rsp+4Ah] [rbp-896h]\n  int v113; // [rsp+4Ch] [rbp-894h] BYREF\n  int v114; // [rsp+50h] [rbp-890h]\n  int v115; // [rsp+54h] [rbp-88Ch]\n  int v116; // [rsp+58h] [rbp-888h]\n  int v117; // [rsp+5Ch] [rbp-884h]\n  unsigned int v118; // [rsp+60h] [rbp-880h]\n  int v119; // [rsp+64h] [rbp-87Ch]\n  int v120; // [rsp+68h] [rbp-878h]\n  int v121; // [rsp+6Ch] [rbp-874h]\n  unsigned int v122; // [rsp+70h] [rbp-870h]\n  int v123; // [rsp+74h] [rbp-86Ch]\n  int v124; // [rsp+78h] [rbp-868h]\n  unsigned int v125; // [rsp+7Ch] [rbp-864h]\n  unsigned int v126; // [rsp+80h] [rbp-860h]\n  unsigned int v127; // [rsp+84h] [rbp-85Ch]\n  unsigned int v128; // [rsp+88h] [rbp-858h]\n  unsigned int v129; // [rsp+8Ch] [rbp-854h]\n  unsigned int v130; // [rsp+90h] [rbp-850h]\n  unsigned int v131; // [rsp+94h] [rbp-84Ch]\n  unsigned int v132; // [rsp+98h] [rbp-848h]\n  int v133; // [rsp+9Ch] [rbp-844h]\n  unsigned int v134; // [rsp+A0h] [rbp-840h]\n  unsigned int v135; // [rsp+A4h] [rbp-83Ch]\n  char *format; // [rsp+A8h] [rbp-838h]\n  void *v137; // [rsp+B0h] [rbp-830h]\n  void *v138; // [rsp+B8h] [rbp-828h]\n  __int64 v139; // [rsp+C0h] [rbp-820h]\n  char *i; // [rsp+C8h] [rbp-818h]\n  void *src; // [rsp+D0h] [rbp-810h]\n  unsigned __int64 v142; // [rsp+D8h] [rbp-808h]\n  size_t n; // [rsp+E0h] [rbp-800h]\n  void *dest; // [rsp+E8h] [rbp-7F8h]\n  void *v145; // [rsp+F0h] [rbp-7F0h]\n  unsigned __int64 v146; // [rsp+F8h] [rbp-7E8h]\n  unsigned __int64 v147; // [rsp+100h] [rbp-7E0h]\n  unsigned __int64 v148; // [rsp+108h] [rbp-7D8h]\n  void *v149; // [rsp+110h] [rbp-7D0h]\n  unsigned __int64 v150; // [rsp+118h] [rbp-7C8h]\n  char *v151; // [rsp+120h] [rbp-7C0h]\n  char *v152; // [rsp+128h] [rbp-7B8h]\n  char *v153; // [rsp+130h] [rbp-7B0h]\n  __int64 v154; // [rsp+138h] [rbp-7A8h]\n  unsigned __int64 v155; // [rsp+140h] [rbp-7A0h]\n  _BYTE *v156; // [rsp+148h] [rbp-798h]\n  _BYTE *v157; // [rsp+150h] [rbp-790h]\n  void *v158; // [rsp+158h] [rbp-788h]\n  void *v159; // [rsp+160h] [rbp-780h]\n  void *v160; // [rsp+168h] [rbp-778h]\n  size_t maxlen; // [rsp+170h] [rbp-770h]\n  void *v162; // [rsp+178h] [rbp-768h]\n  void *v163; // [rsp+180h] [rbp-760h]\n  unsigned __int64 v164; // [rsp+188h] [rbp-758h]\n  size_t size; // [rsp+190h] [rbp-750h]\n  size_t v166; // [rsp+198h] [rbp-748h]\n  unsigned __int64 v167; // [rsp+1A0h] [rbp-740h]\n  size_t v168; // [rsp+1A8h] [rbp-738h]\n  size_t v169; // [rsp+1B0h] [rbp-730h]\n  void *v170; // [rsp+1B8h] [rbp-728h]\n  unsigned __int64 v171; // [rsp+1C0h] [rbp-720h]\n  size_t v172; // [rsp+1C8h] [rbp-718h]\n  size_t v173; // [rsp+1D0h] [rbp-710h]\n  _BYTE *v174; // [rsp+1D8h] [rbp-708h]\n  size_t v175; // [rsp+1E0h] [rbp-700h]\n  unsigned __int64 v176; // [rsp+1E8h] [rbp-6F8h]\n  size_t v177; // [rsp+1F0h] [rbp-6F0h]\n  size_t v178; // [rsp+1F8h] [rbp-6E8h]\n  size_t v179; // [rsp+200h] [rbp-6E0h]\n  size_t v180; // [rsp+208h] [rbp-6D8h]\n  __int64 v181; // [rsp+210h] [rbp-6D0h]\n  __int64 v182; // [rsp+218h] [rbp-6C8h]\n  __int64 v183; // [rsp+220h] [rbp-6C0h]\n  __int64 v184; // [rsp+228h] [rbp-6B8h]\n  double v185; // [rsp+230h] [rbp-6B0h]\n  __int64 v186; // [rsp+238h] [rbp-6A8h]\n  __int64 v187; // [rsp+240h] [rbp-6A0h]\n  __int64 v188; // [rsp+248h] [rbp-698h]\n  unsigned __int64 v189; // [rsp+250h] [rbp-690h]\n  size_t v190; // [rsp+258h] [rbp-688h]\n  long double v191; // [rsp+260h] [rbp-680h]\n  __int64 v192; // [rsp+270h] [rbp-670h]\n  int v193; // [rsp+278h] [rbp-668h]\n  char v194[8]; // [rsp+280h] [rbp-660h] BYREF\n  void *v195; // [rsp+288h] [rbp-658h]\n  _BYTE v196[224]; // [rsp+290h] [rbp-650h] BYREF\n  __int64 v197; // [rsp+370h] [rbp-570h] BYREF\n  void *ptr; // [rsp+378h] [rbp-568h]\n  __int64 v199; // [rsp+380h] [rbp-560h]\n  __int64 v200; // [rsp+388h] [rbp-558h]\n  _BYTE v201[624]; // [rsp+390h] [rbp-550h] BYREF\n  char v202[712]; // [rsp+600h] [rbp-2E0h] BYREF\n  unsigned __int64 v203; // [rsp+8C8h] [rbp-18h]\n\n  v111 = a1;\n  v110 = a2;\n  v109 = a3;\n  v108 = a4;\n  v203 = __readfsqword(0x28u);\n  if ( (int)sub_40A548(a3, &v197, v194) < 0 )\n    return 0LL;\n  if ( (int)sub_409C36(v108, v194) < 0 )\n  {\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 22;\n    return 0LL;\n  }\n  v13 = v199;\n  v14 = 7;\n  v164 = sub_406347(7uLL, v199, v200, 6LL);\n  if ( v164 > 0xF9F )\n  {\n    size = v164;\n    if ( v164 == -1LL )\n      goto LABEL_530;\n    v14 = size;\n    format = (char *)malloc(size);\n    if ( !format )\n      goto LABEL_530;\n    v137 = format;\n  }\n  else\n  {\n    v20 = alloca(16 * ((v164 + 30) / 0x10));\n    format = (char *)(16 * (((unsigned __int64)&v107 + 7) >> 4));\n    v137 = 0LL;\n  }\n  if ( v111 )\n  {\n    src = v111;\n    v142 = *v110;\n  }\n  else\n  {\n    src = 0LL;\n    v142 = 0LL;\n  }\n  n = 0LL;\n  v138 = v109;\n  v139 = 0LL;\n  for ( i = (char *)ptr; ; i += 88 )\n  {\n    if ( *(void **)i != v138 )\n    {\n      v166 = *(_QWORD *)i - (_QWORD)v138;\n      v167 = sub_406313(n, v166);\n      if ( v167 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v21 = -1LL;\n          else\n            v21 = 2 * v142;\n        }\n        else\n        {\n          v21 = 12LL;\n        }\n        v142 = v21;\n        if ( v167 > v21 )\n          v142 = v167;\n        v168 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        dest = src != v111 && src ? realloc(src, v168) : malloc(v168);\n        if ( !dest )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(dest, src, n);\n        src = dest;\n      }\n      v13 = (int)v138;\n      v14 = (_DWORD)src + n;\n      memcpy((char *)src + n, v138, v166);\n      n = v167;\n    }\n    if ( v197 == v139 )\n    {\n      v22 = sub_406313(n, 1LL);\n      if ( v22 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v104 = -1LL;\n          else\n            v104 = 2 * v142;\n        }\n        else\n        {\n          v104 = 12LL;\n        }\n        v142 = v104;\n        v105 = sub_406313(n, 1LL);\n        if ( v105 > v142 )\n          v142 = sub_406313(n, 1LL);\n        v169 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v163 = src != v111 && src ? realloc(src, v169) : malloc(v169);\n        if ( !v163 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v163, src, n);\n        src = v163;\n      }\n      *((_BYTE *)src + n) = 0;\n      if ( src != v111 && n + 1 < v142 )\n      {\n        v170 = realloc(src, n + 1);\n        if ( v170 )\n          src = v170;\n      }\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      *v110 = n;\n      return src;\n    }\n    if ( i[72] == 37 )\n    {\n      if ( *((_QWORD *)i + 10) != -1LL )\n        abort();\n      v13 = 1;\n      v14 = n;\n      v171 = sub_406313(n, 1LL);\n      if ( v171 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v23 = -1LL;\n          else\n            v23 = 2 * v142;\n        }\n        else\n        {\n          v23 = 12LL;\n        }\n        v142 = v23;\n        if ( v171 > v23 )\n          v142 = v171;\n        v172 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        if ( src != v111 && src )\n        {\n          v13 = v172;\n          v14 = (int)src;\n          v145 = realloc(src, v172);\n        }\n        else\n        {\n          v14 = v172;\n          v145 = malloc(v172);\n        }\n        if ( !v145 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n        {\n          v13 = (int)src;\n          v14 = (int)v145;\n          memcpy(v145, src, n);\n        }\n        src = v145;\n      }\n      *((_BYTE *)src + n) = 37;\n      n = v171;\n      goto LABEL_487;\n    }\n    if ( *((_QWORD *)i + 10) == -1LL )\n      abort();\n    if ( i[72] == 110 )\n    {\n      v24 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n      if ( v24 == 20 )\n      {\n        **((_DWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n        goto LABEL_487;\n      }\n      if ( v24 > 0x14 )\n      {\n        if ( v24 == 21 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 22 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      else\n      {\n        if ( v24 == 18 )\n        {\n          **((_BYTE **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 19 )\n        {\n          **((_WORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      abort();\n    }\n    if ( i[72] != 102\n      && i[72] != 70\n      && i[72] != 101\n      && i[72] != 69\n      && i[72] != 103\n      && i[72] != 71\n      && i[72] != 97\n      && i[72] != 65 )\n    {\n      break;\n    }\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10)) != 12 )\n      break;\n    v25 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    *(_QWORD *)&v106 = *((_QWORD *)v25 + 2);\n    DWORD2(v106) = *((_DWORD *)v25 + 6);\n    if ( !sub_4063DE(v14, v13, a5, a6, a7, a8, v18, v19, a11, a12, DWORD2(v106), v15, v16, v17, v106) )\n      break;\n    v114 = *((_DWORD *)i + 4);\n    v115 = 0;\n    v146 = 0LL;\n    if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n    {\n      if ( *((_QWORD *)i + 5) == -1LL )\n      {\n        v152 = (char *)*((_QWORD *)i + 3);\n        do\n        {\n          v26 = v152++;\n          v27 = *v26 - 48;\n          if ( v146 > 0x1999999999999999LL )\n            v28 = -1LL;\n          else\n            v28 = 10 * v146;\n          v146 = sub_406313(v28, v27);\n        }\n        while ( *((char **)i + 4) != v152 );\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n          abort();\n        v120 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n        if ( v120 >= 0 )\n        {\n          v146 = v120;\n        }\n        else\n        {\n          v114 |= 2u;\n          v146 = (unsigned int)-v120;\n        }\n      }\n      v115 = 1;\n    }\n    v116 = 0;\n    v147 = 0LL;\n    if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n    {\n      if ( *((_QWORD *)i + 8) == -1LL )\n      {\n        v153 = (char *)(*((_QWORD *)i + 6) + 1LL);\n        v147 = 0LL;\n        while ( *((char **)i + 7) != v153 )\n        {\n          v29 = v153++;\n          v30 = *v29 - 48;\n          if ( v147 > 0x1999999999999999LL )\n            v31 = -1LL;\n          else\n            v31 = 10 * v147;\n          v147 = sub_406313(v31, v30);\n        }\n        v116 = 1;\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n          abort();\n        v121 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n        if ( v121 >= 0 )\n        {\n          v147 = v121;\n          v116 = 1;\n        }\n      }\n    }\n    if ( !v116 && i[72] != 97 && i[72] != 65 )\n      v147 = 6LL;\n    v148 = 0LL;\n    if ( v147 )\n      v148 = v147;\n    v148 = sub_406313(v148, 12LL);\n    if ( v148 < v146 )\n      v148 = v146;\n    v32 = v148;\n    v148 = sub_406313(v148, 1LL);\n    if ( v148 > 0x2BC )\n    {\n      v173 = v148;\n      if ( v148 == -1LL )\n        goto LABEL_525;\n      v32 = v173;\n      v149 = malloc(v173);\n      if ( !v149 )\n        goto LABEL_525;\n    }\n    else\n    {\n      v149 = v202;\n    }\n    v150 = 0LL;\n    v151 = (char *)v149;\n    v36 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    v37 = *((_DWORD *)v36 + 6);\n    *(_QWORD *)&v191 = *((_QWORD *)v36 + 2);\n    DWORD2(v191) = v37;\n    if ( (unsigned int)sub_409BDE(v32, 1, v37, v33, v34, v35, *(__int64 *)&v191, v37) )\n    {\n      if ( i[72] <= 64 || i[72] > 90 )\n      {\n        v41 = v151++;\n        *v41 = 110;\n        v42 = v151++;\n        *v42 = 97;\n        v43 = v151++;\n        *v43 = 110;\n      }\n      else\n      {\n        v38 = v151++;\n        *v38 = 78;\n        v39 = v151++;\n        *v39 = 65;\n        v40 = v151++;\n        *v40 = 78;\n      }\n    }\n    else\n    {\n      v117 = 0;\n      v112 = v134;\n      LOBYTE(v44) = v134;\n      HIBYTE(v44) = BYTE1(v134) | 3;\n      LOWORD(v134) = v44;\n      _FST7 = v191;\n      __asm { fxam }\n      if ( (v45 & 0x200) != 0 )\n      {\n        v117 = -1;\n        v191 = -v191;\n      }\n      if ( v117 >= 0 )\n      {\n        if ( (v114 & 4) != 0 )\n        {\n          v48 = v151++;\n          *v48 = 43;\n        }\n        else if ( (v114 & 8) != 0 )\n        {\n          v49 = v151++;\n          *v49 = 32;\n        }\n      }\n      else\n      {\n        v47 = v151++;\n        *v47 = 45;\n      }\n      if ( v191 > 0.0 && v191 == v191 + v191 )\n      {\n        if ( i[72] <= 64 || i[72] > 90 )\n        {\n          v53 = v151++;\n          *v53 = 105;\n          v54 = v151++;\n          *v54 = 110;\n          v55 = v151++;\n          *v55 = 102;\n        }\n        else\n        {\n          v50 = v151++;\n          *v50 = 73;\n          v51 = v151++;\n          *v51 = 78;\n          v52 = v151++;\n          *v52 = 70;\n        }\n      }\n      else\n      {\n        if ( 0.0 != v191 )\n          abort();\n        v150 = (unsigned __int64)v151;\n        switch ( i[72] )\n        {\n          case 'f':\n          case 'F':\n            v56 = v151++;\n            *v56 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v57 = v151++;\n              *v57 = sub_4063AD();\n              while ( v147 )\n              {\n                v58 = v151++;\n                *v58 = 48;\n                --v147;\n              }\n            }\n            break;\n          case 'e':\n          case 'E':\n            v59 = v151++;\n            *v59 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v60 = v151++;\n              *v60 = sub_4063AD();\n              while ( v147 )\n              {\n                v61 = v151++;\n                *v61 = 48;\n                --v147;\n              }\n            }\n            v62 = v151++;\n            *v62 = i[72];\n            v63 = v151++;\n            *v63 = 43;\n            v64 = v151++;\n            *v64 = 48;\n            v65 = v151++;\n            *v65 = 48;\n            break;\n          case 'g':\n          case 'G':\n            v66 = v151++;\n            *v66 = 48;\n            if ( (v114 & 0x10) != 0 )\n            {\n              if ( v147 )\n                v67 = v147 - 1;\n              else\n                v67 = 0LL;\n              v154 = v67;\n              v68 = v151++;\n              *v68 = sub_4063AD();\n              while ( v154 )\n              {\n                v69 = v151++;\n                *v69 = 48;\n                --v154;\n              }\n            }\n            break;\n          case 'a':\n          case 'A':\n            v70 = v151++;\n            *v70 = 48;\n            v71 = v151++;\n            *v71 = i[72] + 23;\n            v150 = (unsigned __int64)v151;\n            v72 = v151++;\n            *v72 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v73 = v151++;\n              *v73 = sub_4063AD();\n              while ( v147 )\n              {\n                v74 = v151++;\n                *v74 = 48;\n                --v147;\n              }\n            }\n            v75 = v151++;\n            *v75 = i[72] + 15;\n            v76 = v151++;\n            *v76 = 43;\n            v77 = v151++;\n            *v77 = 48;\n            break;\n          default:\n            abort();\n        }\n      }\n      LOWORD(v134) = v112;\n    }\n    if ( v115 && v151 - (_BYTE *)v149 < v146 )\n    {\n      v155 = (_BYTE *)v149 - v151 + v146;\n      v174 = (char *)v149 + v146;\n      if ( (v114 & 2) != 0 )\n      {\n        while ( v155 )\n        {\n          v78 = v151++;\n          *v78 = 32;\n          --v155;\n        }\n      }\n      else if ( (v114 & 0x20) != 0 && v150 )\n      {\n        v156 = v174;\n        while ( (unsigned __int64)v151 > v150 )\n          *--v156 = *--v151;\n        while ( v155 )\n        {\n          v79 = v151++;\n          *v79 = 48;\n          --v155;\n        }\n      }\n      else\n      {\n        v157 = v174;\n        while ( v151 > v149 )\n          *--v157 = *--v151;\n        while ( v155 )\n        {\n          v80 = v151++;\n          *v80 = 32;\n          --v155;\n        }\n      }\n      v151 = v174;\n    }\n    v175 = v151 - (_BYTE *)v149;\n    if ( v151 - (_BYTE *)v149 >= v148 )\n      abort();\n    if ( v142 - n <= v175 )\n    {\n      v176 = sub_406313(n, v175);\n      if ( v176 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v81 = -1LL;\n          else\n            v81 = 2 * v142;\n        }\n        else\n        {\n          v81 = 12LL;\n        }\n        v142 = v81;\n        if ( v176 > v81 )\n          v142 = v176;\n        v177 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v158 = src != v111 && src ? realloc(src, v177) : malloc(v177);\n        if ( !v158 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v158, src, n);\n        src = v158;\n      }\n    }\n    v13 = (int)v149;\n    v14 = (_DWORD)src + n;\n    memcpy((char *)src + n, v149, v175);\n    if ( v149 != v202 )\n    {\n      v14 = (int)v149;\n      free(v149);\n    }\n    n += v175;\nLABEL_487:\n    v138 = (void *)*((_QWORD *)i + 1);\n    ++v139;\n  }\n  v122 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n  v123 = *((_DWORD *)i + 4);\n  v159 = format + 1;\n  *format = 37;\n  if ( (v123 & 1) != 0 )\n  {\n    v82 = v159;\n    v159 = (char *)v159 + 1;\n    *v82 = 39;\n  }\n  if ( (v123 & 2) != 0 )\n  {\n    v83 = v159;\n    v159 = (char *)v159 + 1;\n    *v83 = 45;\n  }\n  if ( (v123 & 4) != 0 )\n  {\n    v84 = v159;\n    v159 = (char *)v159 + 1;\n    *v84 = 43;\n  }\n  if ( (v123 & 8) != 0 )\n  {\n    v85 = v159;\n    v159 = (char *)v159 + 1;\n    *v85 = 32;\n  }\n  if ( (v123 & 0x10) != 0 )\n  {\n    v86 = v159;\n    v159 = (char *)v159 + 1;\n    *v86 = 35;\n  }\n  if ( (v123 & 0x40) != 0 )\n  {\n    v87 = v159;\n    v159 = (char *)v159 + 1;\n    *v87 = 73;\n  }\n  if ( (v123 & 0x20) != 0 )\n  {\n    v88 = v159;\n    v159 = (char *)v159 + 1;\n    *v88 = 48;\n  }\n  if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n  {\n    v178 = *((_QWORD *)i + 4) - *((_QWORD *)i + 3);\n    memcpy(v159, *((const void **)i + 3), v178);\n    v159 = (char *)v159 + v178;\n  }\n  if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n  {\n    v179 = *((_QWORD *)i + 7) - *((_QWORD *)i + 6);\n    memcpy(v159, *((const void **)i + 6), v179);\n    v159 = (char *)v159 + v179;\n  }\n  if ( v122 > 0xA )\n  {\n    if ( v122 == 14 || v122 == 16 )\n      goto LABEL_260;\n    if ( v122 == 12 )\n    {\n      v91 = v159;\n      v159 = (char *)v159 + 1;\n      *v91 = 76;\n    }\n  }\n  else\n  {\n    if ( v122 >= 9 )\n    {\n      v89 = v159;\n      v159 = (char *)v159 + 1;\n      *v89 = 108;\n      goto LABEL_260;\n    }\n    if ( v122 >= 7 )\n    {\nLABEL_260:\n      v90 = v159;\n      v159 = (char *)v159 + 1;\n      *v90 = 108;\n    }\n  }\n  *(_WORD *)v159 = (unsigned __int8)i[72];\n  v118 = 0;\n  if ( *((_QWORD *)i + 5) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n      abort();\n    v92 = v118++;\n    *(&v134 + v92) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n  }\n  if ( *((_QWORD *)i + 8) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n      abort();\n    v93 = v118++;\n    *(&v134 + v93) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n  }\n  v94 = sub_406313(n, 2LL);\n  if ( v94 > v142 )\n  {\n    if ( v142 )\n    {\n      if ( (v142 & 0x8000000000000000LL) != 0LL )\n        v95 = -1LL;\n      else\n        v95 = 2 * v142;\n    }\n    else\n    {\n      v95 = 12LL;\n    }\n    v142 = v95;\n    v96 = sub_406313(n, 2LL);\n    if ( v96 > v142 )\n      v142 = sub_406313(n, 2LL);\n    v180 = v142;\n    if ( v142 != -1LL )\n    {\n      v160 = src != v111 && src ? realloc(src, v180) : malloc(v180);\n      if ( v160 )\n      {\n        if ( src == v111 && n )\n          memcpy(v160, src, n);\n        src = v160;\n        goto LABEL_288;\n      }\n    }\nLABEL_525:\n    if ( src != v111 && src )\n      free(src);\n    if ( v137 )\n      free(v137);\nLABEL_530:\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 12;\n    return 0LL;\n  }\nLABEL_288:\n  *((_BYTE *)src + n) = 0;\n  v124 = *__errno_location();\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v113 = -1;\n      v119 = 0;\n      maxlen = v142 - n;\n      if ( v142 - n > 0x7FFFFFFF )\n        maxlen = 0x7FFFFFFFLL;\n      *__errno_location() = 0;\n      if ( v122 == 9 )\n      {\n        v183 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v183, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v183, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v183, &v113);\n        }\n      }\n      else if ( v122 > 9 )\n      {\n        if ( v122 == 13 )\n        {\n          v131 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v131, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v131, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v131, &v113);\n          }\n        }\n        else if ( v122 > 0xD )\n        {\n          if ( v122 == 15 )\n          {\n            v186 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v186, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v186, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v186, &v113);\n            }\n          }\n          else if ( v122 < 0xF )\n          {\n            v132 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v132, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v132, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v132, &v113);\n            }\n          }\n          else if ( v122 == 16 )\n          {\n            v187 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v187, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v187, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v187, &v113);\n            }\n          }\n          else\n          {\n            if ( v122 != 17 )\nLABEL_432:\n              abort();\n            v188 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v188, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v188, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v188, &v113);\n            }\n          }\n        }\n        else if ( v122 == 11 )\n        {\n          v185 = *((double *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113, v185);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v185);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113, v185);\n          }\n        }\n        else if ( v122 > 0xB )\n        {\n          v97 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n          v98 = *((_DWORD *)v97 + 6);\n          v192 = *((_QWORD *)v97 + 2);\n          v193 = v98;\n          if ( v118 == 1 )\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v13 = maxlen;\n            DWORD2(v106) = v193;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v192, *((_QWORD *)&v106 + 1));\n          }\n          else\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113);\n          }\n        }\n        else\n        {\n          v184 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v184, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v184, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v184, &v113);\n          }\n        }\n      }\n      else if ( v122 == 4 )\n      {\n        v128 = *((unsigned __int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v128, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v128, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v128, &v113);\n        }\n      }\n      else if ( v122 > 4 )\n      {\n        if ( v122 == 6 )\n        {\n          v130 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v130, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v130, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v130, &v113);\n          }\n        }\n        else if ( v122 < 6 )\n        {\n          v129 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v129, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v129, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v129, &v113);\n          }\n        }\n        else if ( v122 == 7 )\n        {\n          v181 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v181, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v181, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v181, &v113);\n          }\n        }\n        else\n        {\n          v182 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v182, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v182, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v182, &v113);\n          }\n        }\n      }\n      else if ( v122 == 2 )\n      {\n        v126 = *((unsigned __int8 *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v126, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v126, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v126, &v113);\n        }\n      }\n      else if ( v122 > 2 )\n      {\n        v127 = *((__int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v127, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v127, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v127, &v113);\n        }\n      }\n      else\n      {\n        if ( v122 != 1 )\n          goto LABEL_432;\n        v125 = *((char *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v125, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v125, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v125, &v113);\n        }\n      }\n      if ( v113 >= 0 )\n      {\n        if ( v113 < maxlen && *((_BYTE *)src + n + v113) )\n          abort();\n        if ( v119 > v113 )\n          v113 = v119;\n        goto LABEL_443;\n      }\n      if ( !*((_BYTE *)v159 + 1) )\n        break;\n      *((_BYTE *)v159 + 1) = 0;\n    }\n    if ( v119 >= 0 )\n      v113 = v119;\nLABEL_443:\n    if ( v113 < 0 )\n    {\n      v133 = *__errno_location();\n      if ( src != v111 && src )\n        free(src);\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      v99 = __errno_location();\n      if ( v133 )\n      {\n        v100 = v133;\n      }\n      else if ( i[72] == 99 || i[72] == 115 )\n      {\n        v100 = 84;\n      }\n      else\n      {\n        v100 = 22;\n      }\n      *v99 = v100;\n      return 0LL;\n    }\n    if ( (unsigned int)(v113 + 1) < maxlen )\n    {\n      n += v113;\n      *__errno_location() = v124;\n      goto LABEL_487;\n    }\n    if ( maxlen == 0x7FFFFFFF )\n      break;\n    if ( (v142 & 0x8000000000000000LL) != 0LL )\n      v101 = -1LL;\n    else\n      v101 = 2 * v142;\n    v102 = sub_406313(n, (unsigned int)(v113 + 2));\n    v189 = sub_406392(v102, v101);\n    if ( v189 > v142 )\n    {\n      if ( v142 )\n      {\n        if ( (v142 & 0x8000000000000000LL) != 0LL )\n          v103 = -1LL;\n        else\n          v103 = 2 * v142;\n      }\n      else\n      {\n        v103 = 12LL;\n      }\n      v142 = v103;\n      if ( v189 > v103 )\n        v142 = v189;\n      v190 = v142;\n      if ( v142 == -1LL )\n        goto LABEL_525;\n      v162 = src != v111 && src ? realloc(src, v190) : malloc(v190);\n      if ( !v162 )\n        goto LABEL_525;\n      if ( src == v111 && n )\n        memcpy(v162, src, n);\n      src = v162;\n    }\n  }\n  if ( src != v111 && src )\n    free(src);\n  if ( v137 )\n    free(v137);\n  if ( ptr != v201 )\n    free(ptr);\n  if ( v195 != v196 )\n    free(v195);\n  *__errno_location() = 75;\n  return 0LL;\n}\n"], [4234206, "sub_409BDE", "_BOOL8 __fastcall sub_409BDE(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int16 a8)\n{\n  if ( (a8 & 0x7FFF) == 0 )\n    return HIDWORD(a7) >> 31;\n  if ( (a8 & 0x7FFF) == 0x7FFF )\n    return (HIDWORD(a7) ^ 0x80000000 | (unsigned int)a7) != 0;\n  return a7 >= 0;\n}\n"], [4234294, "sub_409C36", "__int64 __fastcall sub_409C36(unsigned int *a1, unsigned __int64 *a2)\n{\n  unsigned int v2; // eax\n  _DWORD *v3; // rax\n  _DWORD *v4; // rax\n  _DWORD *v5; // rax\n  _DWORD *v6; // rax\n  _DWORD *v7; // rax\n  _DWORD *v8; // rax\n  _QWORD *v9; // rax\n  _QWORD *v10; // rax\n  _QWORD *v11; // rax\n  _QWORD *v12; // rax\n  _QWORD *v13; // rax\n  unsigned __int64 v14; // rdx\n  __int64 v15; // rax\n  _DWORD *v16; // rax\n  _DWORD *v17; // rax\n  _QWORD *v18; // rax\n  _QWORD *v19; // rax\n  _QWORD *v20; // rax\n  _QWORD *v21; // rax\n  _QWORD *v22; // rax\n  _QWORD *v23; // rax\n  _QWORD *v24; // rax\n  _QWORD *v25; // rax\n  unsigned __int64 v27; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v28; // [rsp+18h] [rbp-8h]\n\n  v27 = 0LL;\n  v28 = a2[1];\n  while ( *a2 > v27 )\n  {\n    v2 = *(_DWORD *)v28;\n    if ( *(_DWORD *)v28 == 11 )\n    {\n      if ( a1[1] >= 0xB0 )\n      {\n        v13 = (_QWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v13 + 1;\n      }\n      else\n      {\n        v13 = (_QWORD *)(*((_QWORD *)a1 + 2) + a1[1]);\n        a1[1] += 16;\n      }\n      *(_QWORD *)(v28 + 16) = *v13;\n    }\n    else if ( v2 > 0xB )\n    {\n      if ( v2 == 17 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v20 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v20 + 1;\n        }\n        else\n        {\n          v20 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v20;\n      }\n      else if ( v2 > 0x11 )\n      {\n        if ( v2 == 20 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v23 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v23 + 1;\n          }\n          else\n          {\n            v23 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v23;\n        }\n        else if ( v2 > 0x14 )\n        {\n          if ( v2 == 21 )\n          {\n            if ( *a1 >= 0x30 )\n            {\n              v24 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v24 + 1;\n            }\n            else\n            {\n              v24 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v24;\n          }\n          else\n          {\n            if ( v2 != 22 )\n              return 0xFFFFFFFFLL;\n            if ( *a1 >= 0x30 )\n            {\n              v25 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v25 + 1;\n            }\n            else\n            {\n              v25 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v25;\n          }\n        }\n        else if ( v2 == 18 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v21 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v21 + 1;\n          }\n          else\n          {\n            v21 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v21;\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v22 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v22 + 1;\n          }\n          else\n          {\n            v22 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v22;\n        }\n      }\n      else if ( v2 == 14 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v17 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v17 + 2;\n        }\n        else\n        {\n          v17 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v17;\n      }\n      else if ( v2 > 0xE )\n      {\n        if ( v2 == 15 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v18 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v18 + 1;\n          }\n          else\n          {\n            v18 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v18;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(NULL)\";\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v19 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v19 + 1;\n          }\n          else\n          {\n            v19 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v19;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(\";\n        }\n      }\n      else if ( v2 == 12 )\n      {\n        v14 = (*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;\n        *((_QWORD *)a1 + 1) = v14 + 16;\n        v15 = *(_QWORD *)v14;\n        LODWORD(v14) = *(_DWORD *)(v14 + 8);\n        *(_QWORD *)(v28 + 16) = v15;\n        *(_DWORD *)(v28 + 24) = v14;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v16 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v16 + 2;\n        }\n        else\n        {\n          v16 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v16;\n      }\n    }\n    else if ( v2 == 5 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v7 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v7 + 2;\n      }\n      else\n      {\n        v7 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_DWORD *)(v28 + 16) = *v7;\n    }\n    else if ( v2 > 5 )\n    {\n      if ( v2 == 8 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v10 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v10 + 1;\n        }\n        else\n        {\n          v10 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v10;\n      }\n      else if ( v2 > 8 )\n      {\n        if ( v2 == 9 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v11 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v11 + 1;\n          }\n          else\n          {\n            v11 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v11;\n        }\n        else\n        {\n          if ( v2 != 10 )\n            return 0xFFFFFFFFLL;\n          if ( *a1 >= 0x30 )\n          {\n            v12 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 1;\n          }\n          else\n          {\n            v12 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v12;\n        }\n      }\n      else if ( v2 == 6 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v8 + 2;\n        }\n        else\n        {\n          v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v8;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v9 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v9 + 1;\n        }\n        else\n        {\n          v9 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v9;\n      }\n    }\n    else if ( v2 == 2 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v4 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v4 + 2;\n      }\n      else\n      {\n        v4 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v4;\n    }\n    else if ( v2 > 2 )\n    {\n      if ( v2 == 3 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v5 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v5 + 2;\n        }\n        else\n        {\n          v5 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v5;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v6 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v6 + 2;\n        }\n        else\n        {\n          v6 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v6;\n      }\n    }\n    else\n    {\n      if ( v2 != 1 )\n        return 0xFFFFFFFFLL;\n      if ( *a1 >= 0x30 )\n      {\n        v3 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v3 + 2;\n      }\n      else\n      {\n        v3 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v3;\n    }\n    ++v27;\n    v28 += 32LL;\n  }\n  return 0LL;\n}\n"], [4236564, "sub_40A514", "__int64 __fastcall sub_40A514(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4236616, "sub_40A548", "__int64 __fastcall sub_40A548(char *a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rax\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rax\n  void *v9; // rax\n  __int64 v10; // rsi\n  __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned __int64 v14; // rax\n  size_t v15; // rax\n  void *v16; // rax\n  __int64 v17; // rsi\n  __int64 v18; // rax\n  char *v19; // rax\n  int v20; // eax\n  __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  size_t v23; // rax\n  void *v24; // rax\n  __int64 v25; // rsi\n  __int64 v26; // rax\n  unsigned __int64 v27; // rax\n  size_t v28; // rax\n  void *v29; // rax\n  char v33; // [rsp+2Fh] [rbp-E1h]\n  int v34; // [rsp+30h] [rbp-E0h]\n  int ii; // [rsp+34h] [rbp-DCh]\n  __int64 v37; // [rsp+40h] [rbp-D0h]\n  __int64 v38; // [rsp+48h] [rbp-C8h]\n  __int64 v39; // [rsp+50h] [rbp-C0h]\n  unsigned __int64 v40; // [rsp+58h] [rbp-B8h]\n  unsigned __int64 v41; // [rsp+60h] [rbp-B0h]\n  __int64 v42; // [rsp+68h] [rbp-A8h]\n  char *i; // [rsp+70h] [rbp-A0h]\n  char *j; // [rsp+70h] [rbp-A0h]\n  unsigned __int64 v45; // [rsp+78h] [rbp-98h]\n  char *k; // [rsp+80h] [rbp-90h]\n  char *l; // [rsp+80h] [rbp-90h]\n  unsigned __int64 v48; // [rsp+88h] [rbp-88h]\n  char *m; // [rsp+90h] [rbp-80h]\n  char *n; // [rsp+90h] [rbp-80h]\n  unsigned __int64 v51; // [rsp+98h] [rbp-78h]\n  __int64 v52; // [rsp+A0h] [rbp-70h]\n  unsigned __int64 v53; // [rsp+A8h] [rbp-68h]\n  void *dest; // [rsp+B8h] [rbp-58h]\n  unsigned __int64 v55; // [rsp+C8h] [rbp-48h]\n  void *v56; // [rsp+D8h] [rbp-38h]\n  unsigned __int64 v57; // [rsp+E8h] [rbp-28h]\n  void *v58; // [rsp+F8h] [rbp-18h]\n  void *v59; // [rsp+108h] [rbp-8h]\n\n  v37 = 0LL;\n  v40 = 0LL;\n  v41 = 0LL;\n  *(_QWORD *)a2 = 0LL;\n  v38 = 7LL;\n  *(_QWORD *)(a2 + 8) = a2 + 32;\n  *(_QWORD *)a3 = 0LL;\n  v39 = 7LL;\n  *(_QWORD *)(a3 + 8) = a3 + 16;\n  while ( 1 )\n  {\n    do\n    {\n      if ( !*a1 )\n      {\n        *(_QWORD *)(*(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2) = a1;\n        *(_QWORD *)(a2 + 16) = v40;\n        *(_QWORD *)(a2 + 24) = v41;\n        return 0LL;\n      }\n      v3 = a1++;\n    }\n    while ( *v3 != 37 );\n    v42 = -1LL;\n    v52 = *(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2;\n    *(_QWORD *)v52 = a1 - 1;\n    *(_DWORD *)(v52 + 16) = 0;\n    *(_QWORD *)(v52 + 24) = 0LL;\n    *(_QWORD *)(v52 + 32) = 0LL;\n    *(_QWORD *)(v52 + 40) = -1LL;\n    *(_QWORD *)(v52 + 48) = 0LL;\n    *(_QWORD *)(v52 + 56) = 0LL;\n    *(_QWORD *)(v52 + 64) = -1LL;\n    *(_QWORD *)(v52 + 80) = -1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( i = a1; *i > 47 && *i <= 57; ++i )\n        ;\n      if ( *i == 36 )\n      {\n        v45 = 0LL;\n        for ( j = a1; *j > 47 && *j <= 57; ++j )\n        {\n          if ( v45 > 0x1999999999999999LL )\n            v4 = -1LL;\n          else\n            v4 = 10 * v45;\n          v45 = sub_40A514(v4, *j - 48);\n        }\n        if ( !v45 || v45 == -1LL )\n        {\nLABEL_272:\n          if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n            free(*(void **)(a3 + 8));\n          if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n            free(*(void **)(a2 + 8));\n          *__errno_location() = 22;\n          return 0xFFFFFFFFLL;\n        }\n        v42 = v45 - 1;\n        a1 = j + 1;\n      }\n    }\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( 1 )\n              {\n                while ( *a1 == 39 )\n                {\n                  *(_DWORD *)(v52 + 16) |= 1u;\n                  ++a1;\n                }\n                if ( *a1 != 45 )\n                  break;\n                *(_DWORD *)(v52 + 16) |= 2u;\n                ++a1;\n              }\n              if ( *a1 != 43 )\n                break;\n              *(_DWORD *)(v52 + 16) |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 32 )\n              break;\n            *(_DWORD *)(v52 + 16) |= 8u;\n            ++a1;\n          }\n          if ( *a1 != 35 )\n            break;\n          *(_DWORD *)(v52 + 16) |= 0x10u;\n          ++a1;\n        }\n        if ( *a1 != 48 )\n          break;\n        *(_DWORD *)(v52 + 16) |= 0x20u;\n        ++a1;\n      }\n      if ( *a1 != 73 )\n        break;\n      *(_DWORD *)(v52 + 16) |= 0x40u;\n      ++a1;\n    }\n    if ( *a1 != 42 )\n    {\n      if ( *a1 > 47 && *a1 <= 57 )\n      {\n        *(_QWORD *)(v52 + 24) = a1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 32) = a1;\n        if ( v40 < *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24) )\n          v40 = *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24);\n      }\n      goto LABEL_88;\n    }\n    *(_QWORD *)(v52 + 24) = a1++;\n    *(_QWORD *)(v52 + 32) = a1;\n    if ( !v40 )\n      v40 = 1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( k = a1; *k > 47 && *k <= 57; ++k )\n        ;\n      if ( *k == 36 )\n      {\n        v48 = 0LL;\n        for ( l = a1; *l > 47 && *l <= 57; ++l )\n        {\n          if ( v48 > 0x1999999999999999LL )\n            v5 = -1LL;\n          else\n            v5 = 10 * v48;\n          v48 = sub_40A514(v5, *l - 48);\n        }\n        if ( !v48 || v48 == -1LL )\n          goto LABEL_272;\n        *(_QWORD *)(v52 + 40) = v48 - 1;\n        a1 = l + 1;\n      }\n    }\n    if ( *(_QWORD *)(v52 + 40) == -1LL )\n    {\n      v6 = v37++;\n      *(_QWORD *)(v52 + 40) = v6;\n      if ( *(_QWORD *)(v52 + 40) == -1LL )\n        goto LABEL_272;\n    }\n    v53 = *(_QWORD *)(v52 + 40);\n    if ( v53 >= v39 )\n      break;\nLABEL_75:\n    while ( *(_QWORD *)a3 <= v53 )\n    {\n      v10 = *(_QWORD *)(a3 + 8);\n      v11 = (*(_QWORD *)a3)++;\n      *(_DWORD *)(v10 + 32 * v11) = 0;\n    }\n    if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) )\n    {\n      if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) != 5 )\n        goto LABEL_272;\n    }\n    else\n    {\n      *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) = 5;\n    }\nLABEL_88:\n    if ( *a1 == 46 )\n    {\n      if ( *++a1 == 42 )\n      {\n        *(_QWORD *)(v52 + 48) = a1++ - 1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 <= 1 )\n          v41 = 2LL;\n        if ( *a1 > 47 && *a1 <= 57 )\n        {\n          for ( m = a1; *m > 47 && *m <= 57; ++m )\n            ;\n          if ( *m == 36 )\n          {\n            v51 = 0LL;\n            for ( n = a1; *n > 47 && *n <= 57; ++n )\n            {\n              if ( v51 > 0x1999999999999999LL )\n                v12 = -1LL;\n              else\n                v12 = 10 * v51;\n              v51 = sub_40A514(v12, *n - 48);\n            }\n            if ( !v51 || v51 == -1LL )\n              goto LABEL_272;\n            *(_QWORD *)(v52 + 64) = v51 - 1;\n            a1 = n + 1;\n          }\n        }\n        if ( *(_QWORD *)(v52 + 64) == -1LL )\n        {\n          v13 = v37++;\n          *(_QWORD *)(v52 + 64) = v13;\n          if ( *(_QWORD *)(v52 + 64) == -1LL )\n            goto LABEL_272;\n        }\n        v55 = *(_QWORD *)(v52 + 64);\n        if ( v55 >= v39 )\n        {\n          if ( v39 < 0 )\n            v14 = -1LL;\n          else\n            v14 = 2 * v39;\n          v39 = v14;\n          if ( v14 <= v55 )\n            v39 = sub_40A514(v55, 1LL);\n          if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n            v15 = -1LL;\n          else\n            v15 = 32 * v39;\n          if ( v15 == -1LL )\n            goto LABEL_277;\n          v16 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v15) : realloc(*(void **)(a3 + 8), v15);\n          v56 = v16;\n          if ( !v16 )\n            goto LABEL_277;\n          if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n            memcpy(v16, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n          *(_QWORD *)(a3 + 8) = v56;\n        }\n        while ( *(_QWORD *)a3 <= v55 )\n        {\n          v17 = *(_QWORD *)(a3 + 8);\n          v18 = (*(_QWORD *)a3)++;\n          *(_DWORD *)(v17 + 32 * v18) = 0;\n        }\n        if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) )\n        {\n          if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) != 5 )\n            goto LABEL_272;\n        }\n        else\n        {\n          *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) = 5;\n        }\n      }\n      else\n      {\n        *(_QWORD *)(v52 + 48) = a1 - 1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 < *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48) )\n          v41 = *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48);\n      }\n    }\n    for ( ii = 0; ; ii += 8 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( *a1 == 104 )\n              {\n                ii |= 1 << (ii & 1);\n                ++a1;\n              }\n              if ( *a1 != 76 )\n                break;\n              ii |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 108 )\n              break;\n            ii += 8;\n            ++a1;\n          }\n          if ( *a1 != 106 )\n            break;\n          ii += 8;\n          ++a1;\n        }\n        if ( *a1 != 122 && *a1 != 90 )\n          break;\n        ii += 8;\n        ++a1;\n      }\n      if ( *a1 != 116 )\n        break;\n      ++a1;\n    }\n    v19 = a1++;\n    v33 = *v19;\n    v20 = *v19;\n    if ( v20 == 100 )\n    {\nLABEL_185:\n      if ( ii > 15 || (ii & 4) != 0 )\n      {\n        v34 = 9;\n      }\n      else if ( ii <= 7 )\n      {\n        if ( (ii & 2) != 0 )\n        {\n          v34 = 1;\n        }\n        else if ( (ii & 1) != 0 )\n        {\n          v34 = 3;\n        }\n        else\n        {\n          v34 = 5;\n        }\n      }\n      else\n      {\n        v34 = 7;\n      }\n      goto LABEL_229;\n    }\n    if ( v20 > 100 )\n    {\n      if ( v20 == 111 )\n        goto LABEL_195;\n      if ( v20 > 111 )\n      {\n        if ( v20 == 115 )\n        {\n          if ( ii <= 7 )\n            v34 = 15;\n          else\n            v34 = 16;\n          goto LABEL_229;\n        }\n        if ( v20 > 115 )\n        {\n          if ( v20 != 117 && v20 != 120 )\n            goto LABEL_272;\nLABEL_195:\n          if ( ii > 15 || (ii & 4) != 0 )\n          {\n            v34 = 10;\n          }\n          else if ( ii <= 7 )\n          {\n            if ( (ii & 2) != 0 )\n            {\n              v34 = 2;\n            }\n            else if ( (ii & 1) != 0 )\n            {\n              v34 = 4;\n            }\n            else\n            {\n              v34 = 6;\n            }\n          }\n          else\n          {\n            v34 = 8;\n          }\n          goto LABEL_229;\n        }\n        if ( v20 != 112 )\n          goto LABEL_272;\n        v34 = 17;\n      }\n      else\n      {\n        if ( v20 == 105 )\n          goto LABEL_185;\n        if ( v20 <= 105 )\n        {\n          if ( v20 > 103 )\n            goto LABEL_272;\nLABEL_205:\n          if ( ii > 15 || (ii & 4) != 0 )\n            v34 = 12;\n          else\n            v34 = 11;\n          goto LABEL_229;\n        }\n        if ( v20 != 110 )\n          goto LABEL_272;\n        if ( ii > 15 || (ii & 4) != 0 )\n        {\n          v34 = 22;\n        }\n        else if ( ii <= 7 )\n        {\n          if ( (ii & 2) != 0 )\n          {\n            v34 = 18;\n          }\n          else if ( (ii & 1) != 0 )\n          {\n            v34 = 19;\n          }\n          else\n          {\n            v34 = 20;\n          }\n        }\n        else\n        {\n          v34 = 21;\n        }\n      }\n    }\n    else if ( v20 > 71 )\n    {\n      if ( v20 == 88 )\n        goto LABEL_195;\n      if ( v20 > 88 )\n      {\n        if ( v20 == 97 )\n          goto LABEL_205;\n        if ( v20 != 99 )\n          goto LABEL_272;\n        if ( ii <= 7 )\n          v34 = 13;\n        else\n          v34 = 14;\n      }\n      else\n      {\n        if ( v20 != 83 )\n          goto LABEL_272;\n        v34 = 16;\n        v33 = 115;\n      }\n    }\n    else\n    {\n      if ( v20 >= 69 || v20 == 65 )\n        goto LABEL_205;\n      if ( v20 == 67 )\n      {\n        v34 = 14;\n        v33 = 99;\n      }\n      else\n      {\n        if ( v20 != 37 )\n          goto LABEL_272;\n        v34 = 0;\n      }\n    }\nLABEL_229:\n    if ( v34 )\n    {\n      *(_QWORD *)(v52 + 80) = v42;\n      if ( *(_QWORD *)(v52 + 80) == -1LL )\n      {\n        v21 = v37++;\n        *(_QWORD *)(v52 + 80) = v21;\n        if ( *(_QWORD *)(v52 + 80) == -1LL )\n          goto LABEL_272;\n      }\n      v57 = *(_QWORD *)(v52 + 80);\n      if ( v57 >= v39 )\n      {\n        if ( v39 < 0 )\n          v22 = -1LL;\n        else\n          v22 = 2 * v39;\n        v39 = v22;\n        if ( v22 <= v57 )\n          v39 = sub_40A514(v57, 1LL);\n        if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n          v23 = -1LL;\n        else\n          v23 = 32 * v39;\n        if ( v23 == -1LL )\n          goto LABEL_277;\n        v24 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v23) : realloc(*(void **)(a3 + 8), v23);\n        v58 = v24;\n        if ( !v24 )\n          goto LABEL_277;\n        if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n          memcpy(v24, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n        *(_QWORD *)(a3 + 8) = v58;\n      }\n      while ( *(_QWORD *)a3 <= v57 )\n      {\n        v25 = *(_QWORD *)(a3 + 8);\n        v26 = (*(_QWORD *)a3)++;\n        *(_DWORD *)(v25 + 32 * v26) = 0;\n      }\n      if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) )\n      {\n        if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) != v34 )\n          goto LABEL_272;\n      }\n      else\n      {\n        *(_DWORD *)(*(_QWORD *)(a3 + 8) + 32 * v57) = v34;\n      }\n    }\n    *(_BYTE *)(v52 + 72) = v33;\n    *(_QWORD *)(v52 + 8) = a1;\n    if ( ++*(_QWORD *)a2 >= (unsigned __int64)v38 )\n    {\n      if ( v38 < 0 )\n        v27 = -1LL;\n      else\n        v27 = 2 * v38;\n      v38 = v27;\n      if ( v27 > 0x2E8BA2E8BA2E8BALL )\n        v28 = -1LL;\n      else\n        v28 = 88 * v27;\n      if ( v28 == -1LL )\n        goto LABEL_277;\n      v29 = *(_QWORD *)(a2 + 8) == a2 + 32 ? malloc(v28) : realloc(*(void **)(a2 + 8), v28);\n      v59 = v29;\n      if ( !v29 )\n        goto LABEL_277;\n      if ( *(_QWORD *)(a2 + 8) == a2 + 32 )\n        memcpy(v29, *(const void **)(a2 + 8), 88LL * *(_QWORD *)a2);\n      *(_QWORD *)(a2 + 8) = v59;\n    }\n  }\n  if ( v39 < 0 )\n    v7 = -1LL;\n  else\n    v7 = 2 * v39;\n  v39 = v7;\n  if ( v7 <= v53 )\n    v39 = sub_40A514(v53, 1LL);\n  if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n    v8 = -1LL;\n  else\n    v8 = 32 * v39;\n  if ( v8 != -1LL )\n  {\n    v9 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v8) : realloc(*(void **)(a3 + 8), v8);\n    dest = v9;\n    if ( v9 )\n    {\n      if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n        memcpy(v9, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n      *(_QWORD *)(a3 + 8) = dest;\n      goto LABEL_75;\n    }\n  }\nLABEL_277:\n  if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n    free(*(void **)(a3 + 8));\n  if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n    free(*(void **)(a2 + 8));\n  *__errno_location() = 12;\n  return 0xFFFFFFFFLL;\n}\n"], [4242160, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_60EE18 - off_60EE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_60EE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4242272, "fini", "void fini(void)\n{\n  ;\n}\n"], [4242288, "sub_40BB70", "int __fastcall sub_40BB70(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_60F228 )\n    v1 = (void *)qword_60F228;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4242320, "sub_40BB90", "int __fastcall sub_40BB90(char *filename, struct stat *stat_buf)\n{\n  return __xstat(1, filename, stat_buf);\n}\n"], [4242336, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]