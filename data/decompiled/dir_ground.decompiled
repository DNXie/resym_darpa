[[4201872, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4201904, "sub_401DB0", "__int64 sub_401DB0()\n{\n  return qword_61D010();\n}\n"], [4201920, ".getenv", "// attributes: thunk\nchar *getenv(const char *name)\n{\n  return getenv(name);\n}\n"], [4201936, ".sigprocmask", "// attributes: thunk\nint sigprocmask(int how, const sigset_t *set, sigset_t *oset)\n{\n  return sigprocmask(how, set, oset);\n}\n"], [4201952, ".raise", "// attributes: thunk\nint raise(int sig)\n{\n  return raise(sig);\n}\n"], [4201968, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4201984, ".localtime", "// attributes: thunk\nstruct tm *localtime(const time_t *timer)\n{\n  return localtime(timer);\n}\n"], [4202000, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4202016, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4202032, ".strncpy", "// attributes: thunk\nchar *strncpy(char *dest, const char *src, size_t n)\n{\n  return strncpy(dest, src, n);\n}\n"], [4202048, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4202064, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4202080, ".strcpy", "// attributes: thunk\nchar *strcpy(char *dest, const char *src)\n{\n  return strcpy(dest, src);\n}\n"], [4202096, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4202112, ".toupper", "// attributes: thunk\nint toupper(int c)\n{\n  return toupper(c);\n}\n"], [4202128, ".isatty", "// attributes: thunk\nint isatty(int fd)\n{\n  return isatty(fd);\n}\n"], [4202144, ".sigaction", "// attributes: thunk\nint sigaction(int sig, const struct sigaction *act, struct sigaction *oact)\n{\n  return sigaction(sig, act, oact);\n}\n"], [4202160, ".iswcntrl", "// attributes: thunk\nint iswcntrl(wint_t wc)\n{\n  return iswcntrl(wc);\n}\n"], [4202176, ".wcswidth", "// attributes: thunk\nint wcswidth(const wchar_t *s, size_t n)\n{\n  return wcswidth(s, n);\n}\n"], [4202192, ".localeconv", "// attributes: thunk\nstruct lconv *localeconv(void)\n{\n  return localeconv();\n}\n"], [4202208, ".mbstowcs", "// attributes: thunk\nsize_t mbstowcs(wchar_t *pwcs, const char *s, size_t n)\n{\n  return mbstowcs(pwcs, s, n);\n}\n"], [4202224, ".readlink", "// attributes: thunk\nssize_t readlink(const char *path, char *buf, size_t len)\n{\n  return readlink(path, buf, len);\n}\n"], [4202240, ".clock_gettime", "// attributes: thunk\nint clock_gettime(clockid_t clock_id, struct timespec *tp)\n{\n  return clock_gettime(clock_id, tp);\n}\n"], [4202256, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4202272, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4202288, ".opendir", "// attributes: thunk\nDIR *opendir(const char *name)\n{\n  return opendir(name);\n}\n"], [4202304, ".getpwuid", "// attributes: thunk\nstruct passwd *getpwuid(__uid_t uid)\n{\n  return getpwuid(uid);\n}\n"], [4202320, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4202336, ".stpcpy", "// attributes: thunk\nchar *stpcpy(char *dest, const char *src)\n{\n  return stpcpy(dest, src);\n}\n"], [4202352, ".dcgettext", "// attributes: thunk\nchar *dcgettext(const char *domainname, const char *msgid, int category)\n{\n  return dcgettext(domainname, msgid, category);\n}\n"], [4202368, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4202384, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4202400, ".__lxstat", "// attributes: thunk\nint __lxstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _lxstat(ver, filename, stat_buf);\n}\n"], [4202416, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4202432, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4202448, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4202464, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4202480, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4202496, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4202512, ".getgrgid", "// attributes: thunk\nstruct group *getgrgid(__gid_t gid)\n{\n  return getgrgid(gid);\n}\n"], [4202528, "._obstack_begin", "// attributes: thunk\nint _obstack_begin(struct obstack *a1, int a2, int a3, void *(*a4)(__int64), void (*a5)(void *))\n{\n  return obstack_begin(a1, a2, a3, a4, a5);\n}\n"], [4202544, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4202560, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4202576, ".gettimeofday", "// attributes: thunk\nint gettimeofday(struct timeval *tv, __timezone_ptr_t tz)\n{\n  return gettimeofday(tv, tz);\n}\n"], [4202592, ".__assert_fail", "// attributes: thunk\nvoid __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\n{\n  _assert_fail(assertion, file, line, function);\n}\n"], [4202608, ".fnmatch", "// attributes: thunk\nint fnmatch(const char *pattern, const char *name, int flags)\n{\n  return fnmatch(pattern, name, flags);\n}\n"], [4202624, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4202640, ".ioctl", "// attributes: thunk\nint ioctl(int fd, unsigned __int64 request, ...)\n{\n  return ioctl(fd, request);\n}\n"], [4202656, ".closedir", "// attributes: thunk\nint closedir(DIR *dirp)\n{\n  return closedir(dirp);\n}\n"], [4202672, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4202688, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4202704, "._setjmp", "// attributes: thunk\nint _setjmp(struct __jmp_buf_tag env[1])\n{\n  return setjmp(env);\n}\n"], [4202720, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4202736, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4202752, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4202768, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4202784, ".signal", "// attributes: thunk\n__sighandler_t signal(int sig, __sighandler_t handler)\n{\n  return signal(sig, handler);\n}\n"], [4202800, ".dirfd", "// attributes: thunk\nint dirfd(DIR *dirp)\n{\n  return dirfd(dirp);\n}\n"], [4202816, ".getpwnam", "// attributes: thunk\nstruct passwd *getpwnam(const char *name)\n{\n  return getpwnam(name);\n}\n"], [4202832, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4202848, ".sigemptyset", "// attributes: thunk\nint sigemptyset(sigset_t *set)\n{\n  return sigemptyset(set);\n}\n"], [4202864, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4202880, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4202896, ".getgrnam", "// attributes: thunk\nstruct group *getgrnam(const char *name)\n{\n  return getgrnam(name);\n}\n"], [4202912, ".putchar_unlocked", "// attributes: thunk\nint putchar_unlocked(int c)\n{\n  return putchar_unlocked(c);\n}\n"], [4202928, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4202944, ".tcgetpgrp", "// attributes: thunk\n__pid_t tcgetpgrp(int fd)\n{\n  return tcgetpgrp(fd);\n}\n"], [4202960, ".__xstat", "// attributes: thunk\nint __xstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _xstat(ver, filename, stat_buf);\n}\n"], [4202976, ".readdir", "// attributes: thunk\nstruct dirent *readdir(DIR *dirp)\n{\n  return readdir(dirp);\n}\n"], [4202992, ".wcwidth", "// attributes: thunk\nint wcwidth(wchar_t c)\n{\n  return wcwidth(c);\n}\n"], [4203008, ".tolower", "// attributes: thunk\nint tolower(int c)\n{\n  return tolower(c);\n}\n"], [4203024, ".putc_unlocked", "// attributes: thunk\nint putc_unlocked(int c, FILE *stream)\n{\n  return putc_unlocked(c, stream);\n}\n"], [4203040, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4203056, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4203072, ".nl_langinfo", "// attributes: thunk\nchar *nl_langinfo(nl_item item)\n{\n  return nl_langinfo(item);\n}\n"], [4203088, ".__fxstat", "// attributes: thunk\nint __fxstat(int ver, int fildes, struct stat *stat_buf)\n{\n  return _fxstat(ver, fildes, stat_buf);\n}\n"], [4203104, ".strcoll", "// attributes: thunk\nint strcoll(const char *s1, const char *s2)\n{\n  return strcoll(s1, s2);\n}\n"], [4203120, ".mktime", "// attributes: thunk\ntime_t mktime(struct tm *tp)\n{\n  return mktime(tp);\n}\n"], [4203136, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4203152, ".fwrite_unlocked", "// attributes: thunk\nsize_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)\n{\n  return fwrite_unlocked(ptr, size, n, stream);\n}\n"], [4203168, ".gnu_dev_major", "// attributes: thunk\nunsigned int gnu_dev_major(unsigned __int64 dev)\n{\n  return gnu_dev_major(dev);\n}\n"], [4203184, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4203200, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4203216, "._obstack_newchunk", "// attributes: thunk\nvoid _obstack_newchunk(struct obstack *a1, int a2)\n{\n  obstack_newchunk(a1, a2);\n}\n"], [4203232, ".longjmp", "// attributes: thunk\nvoid __noreturn longjmp(struct __jmp_buf_tag env[1], int val)\n{\n  longjmp(env, val);\n}\n"], [4203248, ".strftime", "// attributes: thunk\nsize_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)\n{\n  return strftime(s, maxsize, format, tp);\n}\n"], [4203264, ".mempcpy", "// attributes: thunk\nvoid *mempcpy(void *dest, const void *src, size_t n)\n{\n  return mempcpy(dest, src, n);\n}\n"], [4203280, ".memmove", "// attributes: thunk\nvoid *memmove(void *dest, const void *src, size_t n)\n{\n  return memmove(dest, src, n);\n}\n"], [4203296, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4203312, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4203328, ".strtoumax", "// attributes: thunk\nuintmax_t strtoumax(const char *nptr, char **endptr, int base)\n{\n  return strtoumax(nptr, endptr, base);\n}\n"], [4203344, ".gnu_dev_minor", "// attributes: thunk\nunsigned int gnu_dev_minor(unsigned __int64 dev)\n{\n  return gnu_dev_minor(dev);\n}\n"], [4203360, ".strtoul", "// attributes: thunk\nunsigned __int64 strtoul(const char *nptr, char **endptr, int base)\n{\n  return strtoul(nptr, endptr, base);\n}\n"], [4203376, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4203392, ".wcstombs", "// attributes: thunk\nsize_t wcstombs(char *s, const wchar_t *pwcs, size_t n)\n{\n  return wcstombs(s, pwcs, n);\n}\n"], [4203408, ".sprintf", "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\n  return sprintf(s, format);\n}\n"], [4203424, ".sigismember", "// attributes: thunk\nint sigismember(const sigset_t *set, int signo)\n{\n  return sigismember(set, signo);\n}\n"], [4203440, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4203456, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4203472, ".fflush_unlocked", "// attributes: thunk\nint fflush_unlocked(FILE *stream)\n{\n  return fflush_unlocked(stream);\n}\n"], [4203488, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4203504, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4203520, ".sigaddset", "// attributes: thunk\nint sigaddset(sigset_t *set, int signo)\n{\n  return sigaddset(set, signo);\n}\n"], [4203536, ".strstr", "// attributes: thunk\nchar *strstr(const char *haystack, const char *needle)\n{\n  return strstr(haystack, needle);\n}\n"], [4203552, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4203568, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4203616, "sub_402460", "signed __int64 sub_402460()\n{\n  signed __int64 result; // rax\n\n  result = &unk_61D5BF - &unk_61D5B8;\n  if ( (unsigned __int64)(&unk_61D5BF - &unk_61D5B8) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4203664, "sub_402490", "__int64 sub_402490()\n{\n  return 0LL;\n}\n"], [4203728, "sub_4024D0", "signed __int64 sub_4024D0()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_61D618 )\n  {\n    result = sub_402460();\n    byte_61D618 = 1;\n  }\n  return result;\n}\n"], [4203760, "sub_4024F0", "__int64 sub_4024F0()\n{\n  return sub_402490();\n}\n"], [4203805, "sub_40251D", "void sub_40251D()\n{\n  ;\n}\n"], [4203815, "sub_402527", "__int64 sub_402527()\n{\n  *__errno_location() = 95;\n  return 0xFFFFFFFFLL;\n}\n"], [4203849, "sub_402549", "__int64 sub_402549()\n{\n  *__errno_location() = 95;\n  return 0xFFFFFFFFLL;\n}\n"], [4203883, "sub_40256B", "__int64 __fastcall sub_40256B(unsigned int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 != 1 )\n  {\n    result = a1;\n    dword_61D580 = a1;\n  }\n  return result;\n}\n"], [4203907, "sub_402583", "__int64 __fastcall sub_402583(__int64 a1, int a2, __int64 a3, int a4)\n{\n  if ( a1 < a3 )\n    return 0xFFFFFFFFLL;\n  if ( a1 > a3 )\n    return 1LL;\n  return (unsigned int)(a2 - a4);\n}\n"], [4203998, "sub_4025DE", "__int64 __fastcall sub_4025DE(unsigned __int8 a1)\n{\n  return a1;\n}\n"], [4204013, "sub_4025ED", "_BOOL8 __fastcall sub_4025ED(_BYTE *a1)\n{\n  __int64 v1; // rax\n  char v4; // [rsp+17h] [rbp-1h]\n\n  if ( *a1 != 46 )\n    return 0LL;\n  if ( a1[1] == 46 )\n    v1 = 2LL;\n  else\n    v1 = 1LL;\n  v4 = a1[v1];\n  return !v4 || v4 == 47;\n}\n"], [4204108, "sub_40264C", "int sub_40264C()\n{\n  FILE *v0; // rbx\n  char *v1; // rax\n\n  v0 = stdout;\n  v1 = gettext(\n         \"\\n\"\n         \"SIZE may be (or may be an integer optionally followed by) one of following:\\n\"\n         \"KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.\\n\");\n  return fputs_unlocked(v1, v0);\n}\n"], [4204152, "sub_402678", "int sub_402678()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_40B763(qword_61E1C0);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_40B763(qword_61E1C0);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_40B763(qword_61E1C0);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4204418, "sub_402782", "__int64 __fastcall sub_402782(__int64 a1, __int64 a2)\n{\n  return sub_40EE58(a1, a2);\n}\n"], [4204455, "sub_4027A7", "__int64 __fastcall sub_4027A7(__int64 a1)\n{\n  return a1;\n}\n"], [4204469, "sub_4027B5", "__int64 __fastcall sub_4027B5(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 72);\n}\n"], [4204491, "sub_4027CB", "__int64 __fastcall sub_4027CB(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 104);\n}\n"], [4204513, "sub_4027E1", "__int64 __fastcall sub_4027E1(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 88);\n}\n"], [4204535, "sub_4027F7", "__int64 sub_4027F7()\n{\n  if ( (unsigned int)(LODWORD(stru_61D8C0.next_free) - LODWORD(stru_61D8C0.object_base)) <= 0xF )\n    __assert_fail(\n      \"sizeof (struct dev_ino) <= __extension__ ({ struct obstack const *__o = (&dev_ino_obstack); (unsigned) (__o->next_\"\n      \"free - __o->object_base); })\",\n      \"../../src/src/ls.c\",\n      0x3D5u,\n      \"dev_ino_pop\");\n  if ( stru_61D8C0.chunk_limit - stru_61D8C0.next_free < -16 )\n    _obstack_newchunk(&stru_61D8C0, -16);\n  stru_61D8C0.next_free -= 16;\n  return *(_QWORD *)stru_61D8C0.next_free;\n}\n"], [4204710, "sub_4028A6", "unsigned int __fastcall sub_4028A6(const char *a1, __int64 a2)\n{\n  unsigned int result; // eax\n  unsigned __int64 i; // [rsp+10h] [rbp-30h]\n  unsigned __int64 v4; // [rsp+20h] [rbp-20h]\n  __int64 v5; // [rsp+30h] [rbp-10h]\n\n  result = (unsigned int)(*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 16)) >> 3;\n  v4 = result;\n  if ( result )\n  {\n    v5 = *(_QWORD *)(a2 + 16);\n    if ( *(_QWORD *)(a2 + 24) == v5 )\n      *(_BYTE *)(a2 + 80) |= 2u;\n    *(_QWORD *)(a2 + 24) = (*(int *)(a2 + 48) + *(_QWORD *)(a2 + 24)) & ~*(_DWORD *)(a2 + 48);\n    if ( *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 8) > *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 8) )\n      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a2 + 32);\n    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a2 + 24);\n    fputs_unlocked(a1, stdout);\n    for ( i = 0LL; i < v4; ++i )\n      printf(\" %lu\", *(_QWORD *)(8 * i + v5));\n    result = putchar_unlocked(10);\n  }\n  return result;\n}\n"], [4205069, "sub_402A0D", "__int64 sub_402A0D()\n{\n  char *v0; // rax\n  __int64 v2; // rax\n  int i; // [rsp+4h] [rbp-2Ch]\n  unsigned __int64 v4; // [rsp+8h] [rbp-28h] BYREF\n  unsigned __int64 v5; // [rsp+10h] [rbp-20h]\n  unsigned __int64 v6; // [rsp+18h] [rbp-18h]\n\n  qword_61E0B0 = 5LL;\n  do\n  {\n    v5 = qword_61E0B0;\n    qword_61E0B0 = 0LL;\n    for ( i = 0; i <= 11; ++i )\n    {\n      v4 = v5;\n      v0 = nl_langinfo(i + 131086);\n      v6 = sub_40F12B(v0, (char *)&unk_61D920 + 161 * i, 161LL, &v4, 0LL, 0LL);\n      if ( v6 == -1LL || v6 > 0xA0 )\n      {\n        qword_61E0B0 = 0LL;\n        return 0LL;\n      }\n      v2 = qword_61E0B0;\n      if ( v4 >= qword_61E0B0 )\n        v2 = v4;\n      qword_61E0B0 = v2;\n    }\n  }\n  while ( v5 > qword_61E0B0 );\n  return qword_61E0B0;\n}\n"], [4205322, "sub_402B0A", "unsigned __int64 __fastcall sub_402B0A(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"], [4205363, "sub_402B33", "_BOOL8 __fastcall sub_402B33(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2 && a1[1] == a2[1];\n}\n"], [4205448, "sub_402B88", "void __fastcall sub_402B88(void *a1)\n{\n  free(a1);\n}\n"], [4205474, "sub_402BA2", "_BOOL8 __fastcall sub_402BA2(__int64 a1, __int64 a2)\n{\n  _QWORD *ptr; // [rsp+20h] [rbp-10h]\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  ptr = (_QWORD *)sub_414989(16LL);\n  *ptr = a2;\n  ptr[1] = a1;\n  v4 = sub_40D83F(qword_61D620, ptr);\n  if ( !v4 )\n    sub_414B0B();\n  if ( (_QWORD *)v4 != ptr )\n    free(ptr);\n  return v4 != (_QWORD)ptr;\n}\n"], [4205603, "sub_402C23", "void __fastcall sub_402C23(void **a1)\n{\n  free(*a1);\n  free(a1[1]);\n  free(a1);\n}\n"], [4205660, "sub_402C5C", "_BOOL8 __fastcall sub_402C5C(unsigned int a1)\n{\n  __int64 v3; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  v3 = qword_61D3A0[2 * a1];\n  s1 = (char *)*(&::s1 + 2 * a1);\n  return v3 && (v3 != 1 || *s1 != unk_41606D) && (v3 != 2 || strncmp(s1, \"00\", 2uLL));\n}\n"], [4205795, "sub_402CE3", "__int64 sub_402CE3()\n{\n  sub_40A1D5(qword_61D3A0);\n  return sub_40A1D5(&qword_61D3B0);\n}\n"], [4205821, "sub_402CFD", "__int64 sub_402CFD()\n{\n  __int64 result; // rax\n\n  result = (unsigned __int8)byte_61D6C0;\n  if ( byte_61D6C0 )\n  {\n    result = sub_402C5C(4u);\n    if ( (_BYTE)result )\n    {\n      sub_40A1D5(qword_61D3A0);\n      sub_40A1D5(&unk_61D3E0);\n      result = sub_40A1D5(&qword_61D3B0);\n    }\n  }\n  return result;\n}\n"], [4205882, "sub_402D3A", "__int64 __fastcall sub_402D3A(unsigned int a1)\n{\n  __int64 result; // rax\n\n  result = (unsigned int)dword_61D7C0;\n  if ( !dword_61D7C0 )\n  {\n    result = a1;\n    dword_61D7C0 = a1;\n  }\n  return result;\n}\n"], [4205910, "sub_402D56", "__int64 sub_402D56()\n{\n  __int64 result; // rax\n\n  result = (unsigned int)dword_61D7C0;\n  if ( !dword_61D7C0 )\n    result = (unsigned int)++dword_61D7C4;\n  return result;\n}\n"], [4205944, "sub_402D78", "__int64 sub_402D78()\n{\n  __int64 result; // rax\n  int sig; // [rsp+8h] [rbp-88h]\n  sigset_t oset; // [rsp+10h] [rbp-80h] BYREF\n\n  while ( 1 )\n  {\n    if ( !dword_61D7C0 )\n    {\n      result = (unsigned int)dword_61D7C4;\n      if ( !dword_61D7C4 )\n        break;\n    }\n    if ( byte_61D6C1 )\n      sub_402CE3();\n    fflush_unlocked(stdout);\n    sigprocmask(0, &set, &oset);\n    sig = dword_61D7C0;\n    if ( dword_61D7C4 )\n    {\n      --dword_61D7C4;\n      raise(19);\n    }\n    else\n    {\n      signal(dword_61D7C0, 0LL);\n      raise(sig);\n    }\n    sigprocmask(2, &oset, 0LL);\n  }\n  return result;\n}\n"], [4206156, "main", "void __fastcall __noreturn main(unsigned int a1, char **a2, char **a3)\n{\n  void (*v3)(int); // rax\n  int v4; // eax\n  bool v5; // al\n  bool v6; // al\n  int v7; // eax\n  unsigned __int64 v8; // rdx\n  int v9; // eax\n  int v10; // [rsp+10h] [rbp-C0h]\n  int i; // [rsp+14h] [rbp-BCh]\n  int j; // [rsp+14h] [rbp-BCh]\n  int sig; // [rsp+18h] [rbp-B8h]\n  int siga; // [rsp+18h] [rbp-B8h]\n  int v15; // [rsp+1Ch] [rbp-B4h]\n  void **v16; // [rsp+20h] [rbp-B0h]\n  void *v17; // [rsp+28h] [rbp-A8h]\n  struct sigaction v18; // [rsp+30h] [rbp-A0h] BYREF\n\n  sub_40FC9B(*a2, a2, a3);\n  setlocale(6, &locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40256B(2u);\n  sub_415C00(sub_40B678);\n  status = 0;\n  byte_61D718 = 1;\n  qword_61D658 = 0LL;\n  qword_61D660 = 0x8000000000000000LL;\n  qword_61D668 = -1LL;\n  v10 = sub_403704(a1, a2);\n  if ( byte_61D6C0 )\n    sub_404CA9();\n  if ( byte_61D6C0 )\n  {\n    if ( sub_402C5C(0xDu) || sub_402C5C(0xEu) && byte_61D650 || sub_402C5C(0xCu) && !dword_61D69C )\n      byte_61D6D8 = 1;\n    if ( tcgetpgrp(1) >= 0 )\n    {\n      sigemptyset(&set);\n      for ( i = 0; i <= 11; ++i )\n      {\n        sigaction(::sig[i], 0LL, &v18);\n        if ( v18.sa_handler != (__sighandler_t)1 )\n          sigaddset(&set, ::sig[i]);\n      }\n      v18.sa_mask = set;\n      v18.sa_flags = 0x10000000;\n      for ( j = 0; j <= 11; ++j )\n      {\n        if ( sigismember(&set, ::sig[j]) )\n        {\n          if ( ::sig[j] == 20 )\n            v3 = (void (*)(int))sub_402D56;\n          else\n            v3 = (void (*)(int))sub_402D3A;\n          v18.sa_handler = v3;\n          sigaction(::sig[j], &v18, 0LL);\n        }\n      }\n    }\n  }\n  if ( dword_61D6DC == 1 )\n  {\n    if ( byte_61D6E1 || dword_61D6BC == 3 || !dword_61D69C )\n      v4 = 2;\n    else\n      v4 = 4;\n    dword_61D6DC = v4;\n  }\n  if ( byte_61D6E0 )\n  {\n    qword_61D620 = sub_40CBA9(30LL, 0LL, sub_402B0A, sub_402B33, sub_402B88);\n    if ( !qword_61D620 )\n      sub_414B0B();\n    _obstack_begin(&stru_61D8C0, 0, 0, (void *(*)(__int64))malloc, free);\n  }\n  v5 = dword_61D6A4 == 4 || dword_61D6A4 == 2 || !dword_61D69C || byte_61D670 || byte_61D6AB;\n  byte_61D728 = v5;\n  v6 = !v5 && (byte_61D6E0 || byte_61D6C0 || dword_61D6BC || byte_61D6E2);\n  byte_61D729 = v6;\n  if ( byte_61D6B8 )\n  {\n    _obstack_begin(&stru_61D800, 0, 0, (void *(*)(__int64))malloc, free);\n    _obstack_begin(&stru_61D860, 0, 0, (void *(*)(__int64))malloc, free);\n  }\n  qword_61D630 = 100LL;\n  qword_61D628 = sub_414840(100LL, 192LL);\n  qword_61D638 = 0LL;\n  sub_405AE7();\n  v15 = a1 - v10;\n  if ( (int)(a1 - v10) > 0 )\n  {\n    do\n    {\n      v7 = v10++;\n      sub_405BE1(a2[v7], 0LL, 0LL, 1LL, &locale);\n    }\n    while ( v10 < (int)a1 );\n  }\n  else if ( byte_61D6E1 )\n  {\n    sub_405BE1(\".\", 3LL, 0LL, 1LL, &locale);\n  }\n  else\n  {\n    sub_4050DD(\".\", 0LL, 1LL);\n  }\n  if ( qword_61D638 )\n  {\n    sub_4080A9();\n    if ( byte_61D6E1 != 1 )\n      sub_406A50(0LL, 1LL);\n  }\n  if ( qword_61D638 )\n  {\n    sub_4081E3();\n    if ( qword_61D658 )\n    {\n      putchar_unlocked(10);\n      ++qword_61D7E0;\n    }\n  }\n  else if ( v15 <= 1 && qword_61D658 && !*(_QWORD *)(qword_61D658 + 24) )\n  {\n    byte_61D718 = 0;\n  }\n  while ( qword_61D658 )\n  {\n    v16 = (void **)qword_61D658;\n    qword_61D658 = *(_QWORD *)(qword_61D658 + 24);\n    if ( !qword_61D620 || *v16 )\n    {\n      sub_40516A(*v16, v16[1], *((unsigned __int8 *)v16 + 16));\n      sub_402C23(v16);\n      byte_61D718 = 1;\n    }\n    else\n    {\n      v18.sa_handler = (__sighandler_t)sub_4027F7();\n      v18.sa_mask.__val[0] = v8;\n      v17 = (void *)sub_40D888(qword_61D620, &v18);\n      if ( !v17 )\n        __assert_fail(\"found\", \"../../src/src/ls.c\", 0x59Du, \"main\");\n      sub_402B88(v17);\n      sub_402C23(v16);\n    }\n  }\n  if ( byte_61D6C0 )\n  {\n    if ( byte_61D6C1\n      && (qword_61D3A0[0] != 2 || memcmp(s1, &unk_416068, 2uLL) || qword_61D3B0 != 1 || *(_BYTE *)off_61D3B8 != 109) )\n    {\n      sub_402CE3();\n    }\n    fflush_unlocked(stdout);\n    for ( sig = 0; sig <= 11; ++sig )\n    {\n      if ( sigismember(&set, ::sig[sig]) )\n        signal(::sig[sig], 0LL);\n    }\n    for ( siga = dword_61D7C4; siga; --siga )\n      raise(19);\n    if ( dword_61D7C0 )\n      raise(dword_61D7C0);\n  }\n  if ( byte_61D6B8 )\n  {\n    sub_4028A6(\"//DIRED//\", (__int64)&stru_61D800);\n    sub_4028A6(\"//SUBDIRED//\", (__int64)&stru_61D860);\n    v9 = sub_40FE0E(qword_61D700);\n    printf(\"//DIRED-OPTIONS// --quoting-style=%s\\n\", off_419180[v9]);\n  }\n  if ( qword_61D620 )\n  {\n    if ( sub_40C2D7(qword_61D620) )\n      __assert_fail(\"hash_get_n_entries (active_dir_set) == 0\", \"../../src/src/ls.c\", 0x5DCu, \"main\");\n    sub_40CE14(qword_61D620);\n  }\n  exit(status);\n}\n"], [4208388, "sub_403704", "__int64 __fastcall sub_403704(int a1, char *const *a2)\n{\n  __int64 v2; // rbx\n  char *v3; // rax\n  __int64 v4; // rbx\n  char *v5; // rax\n  __int64 v6; // rbx\n  char *v7; // rax\n  int v8; // eax\n  __int64 v9; // rbx\n  char *v10; // rax\n  __int64 v11; // rbx\n  char *v12; // rax\n  bool v13; // al\n  __int64 v14; // rax\n  const char *v15; // rax\n  unsigned __int64 v16; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  char *v20; // rax\n  int v21; // eax\n  char *v22; // rax\n  char *v23; // rax\n  char v24; // [rsp+27h] [rbp-89h]\n  int longind; // [rsp+28h] [rbp-88h] BYREF\n  int v26; // [rsp+2Ch] [rbp-84h]\n  int j; // [rsp+30h] [rbp-80h]\n  int v28; // [rsp+34h] [rbp-7Ch]\n  int v29; // [rsp+38h] [rbp-78h]\n  unsigned int v30; // [rsp+3Ch] [rbp-74h]\n  __int64 v31[2]; // [rsp+40h] [rbp-70h] BYREF\n  char *v32; // [rsp+50h] [rbp-60h]\n  _BYTE *i; // [rsp+58h] [rbp-58h]\n  char *s1; // [rsp+60h] [rbp-50h]\n  char *v35; // [rsp+68h] [rbp-48h]\n  char *v36; // [rsp+70h] [rbp-40h]\n  char *v37; // [rsp+78h] [rbp-38h]\n  char *v38; // [rsp+80h] [rbp-30h]\n  char *v39; // [rsp+88h] [rbp-28h]\n  char *s; // [rsp+90h] [rbp-20h]\n  _QWORD *v41; // [rsp+98h] [rbp-18h]\n\n  v32 = 0LL;\n  v24 = 0;\n  byte_61D6F8 = 0;\n  switch ( dword_61D568 )\n  {\n    case 2:\n      dword_61D69C = 2;\n      sub_40FE2C(0LL, 5LL);\n      break;\n    case 3:\n      dword_61D69C = 0;\n      sub_40FE2C(0LL, 5LL);\n      break;\n    case 1:\n      if ( isatty(1) )\n      {\n        dword_61D69C = 2;\n        byte_61D6F8 = 1;\n      }\n      else\n      {\n        dword_61D69C = 1;\n        byte_61D6F8 = 0;\n      }\n      break;\n    default:\n      abort();\n  }\n  dword_61D6A0 = 0;\n  dword_61D6A4 = 0;\n  byte_61D6A8 = 0;\n  byte_61D6AA = 0;\n  byte_61D6AB = 0;\n  dword_61D6BC = 0;\n  byte_61D6D9 = 0;\n  dword_61D6DC = 1;\n  byte_61D6E0 = 0;\n  byte_61D6E1 = 0;\n  dword_61D6E4 = 0;\n  qword_61D6E8 = 0LL;\n  qword_61D6F0 = 0LL;\n  byte_61D670 = 0;\n  v36 = getenv(\"QUOTING_STYLE\");\n  if ( v36 )\n  {\n    v28 = sub_40B252(v36, off_419180, dword_4191E0, 4LL);\n    if ( v28 < 0 )\n    {\n      v2 = sub_4111EB(v36);\n      v3 = gettext(\"ignoring invalid value of environment variable QUOTING_STYLE: %s\");\n      error(0, 0, v3, v2);\n    }\n    else\n    {\n      sub_40FE2C(0LL, (unsigned int)dword_4191E0[v28]);\n    }\n  }\n  v37 = getenv(\"LS_BLOCK_SIZE\");\n  sub_40E98E(v37, &dword_61D6AC, &qword_61D6B0);\n  if ( v37 || getenv(\"BLOCK_SIZE\") )\n    qword_61D388 = qword_61D6B0;\n  qword_61D720 = 80LL;\n  v38 = getenv(\"COLUMNS\");\n  if ( v38 && *v38 )\n  {\n    if ( (unsigned int)sub_414BE0(v38, 0LL, 0LL, v31, 0LL) || !v31[0] )\n    {\n      v4 = sub_4111EB(v38);\n      v5 = gettext(\"ignoring invalid width in environment variable COLUMNS: %s\");\n      error(0, 0, v5, v4);\n    }\n    else\n    {\n      qword_61D720 = v31[0];\n    }\n  }\n  if ( ioctl(1, 0x5413uLL, v31) != -1 && WORD1(v31[0]) )\n    qword_61D720 = WORD1(v31[0]);\n  v39 = getenv(\"TABSIZE\");\n  qword_61D710 = 8LL;\n  if ( v39 )\n  {\n    if ( (unsigned int)sub_414BE0(v39, 0LL, 0LL, v31, 0LL) )\n    {\n      v6 = sub_4111EB(v39);\n      v7 = gettext(\"ignoring invalid tab size in environment variable TABSIZE: %s\");\n      error(0, 0, v7, v6);\n    }\n    else\n    {\n      qword_61D710 = v31[0];\n    }\n  }\n  while ( 1 )\n  {\n    longind = -1;\n    v29 = getopt_long(a1, a2, \"abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1\", &longopts, &longind);\n    if ( v29 == -1 )\n      break;\n    if ( v29 == 107 )\n    {\n      dword_61D6AC = 0;\n      qword_61D6B0 = 1024LL;\n      qword_61D388 = 1024LL;\n    }\n    else if ( v29 > 107 )\n    {\n      if ( v29 == 129 )\n      {\n        v30 = sub_40E98E(optarg, &dword_61D6AC, &qword_61D6B0);\n        if ( v30 )\n          sub_415126(v30, (unsigned int)longind, 0LL, &longopts, optarg);\n        qword_61D388 = qword_61D6B0;\n      }\n      else if ( v29 > 129 )\n      {\n        if ( v29 == 136 )\n        {\n          v41 = (_QWORD *)sub_414989(16LL);\n          *v41 = optarg;\n          v41[1] = qword_61D6F0;\n          qword_61D6F0 = (__int64)v41;\n        }\n        else if ( v29 > 136 )\n        {\n          if ( v29 == 140 )\n          {\n            dword_61D6AC = 144;\n            qword_61D6B0 = 1LL;\n            qword_61D388 = 1LL;\n          }\n          else if ( v29 > 140 )\n          {\n            if ( v29 == 142 )\n            {\n              dword_61D6A0 = dword_416930[sub_40B53C(\"--time\", optarg, off_416900, dword_416930, 4LL, off_61D578)];\n            }\n            else if ( v29 < 142 )\n            {\n              dword_61D6A4 = dword_4168B0[sub_40B53C(\"--sort\", optarg, off_416880, dword_4168B0, 4LL, off_61D578)];\n              v24 = 1;\n            }\n            else\n            {\n              if ( v29 != 143 )\n                goto LABEL_197;\n              v32 = (char *)optarg;\n            }\n          }\n          else if ( v29 == 138 )\n          {\n            v14 = sub_40B53C(\"--quoting-style\", optarg, off_419180, dword_4191E0, 4LL, off_61D578);\n            sub_40FE2C(0LL, (unsigned int)dword_4191E0[v14]);\n          }\n          else if ( v29 > 138 )\n          {\n            byte_61D6F8 = 0;\n          }\n          else\n          {\n            dword_61D6BC = dword_415F30[sub_40B53C(\n                                          \"--indicator-style\",\n                                          optarg,\n                                          off_415F00,\n                                          dword_415F30,\n                                          4LL,\n                                          off_61D578)];\n          }\n        }\n        else if ( v29 == 132 )\n        {\n          dword_61D6BC = 2;\n        }\n        else if ( v29 > 132 )\n        {\n          if ( v29 == 134 )\n          {\n            dword_61D69C = 0;\n            v32 = (char *)sub_4027A7((__int64)\"full-iso\");\n          }\n          else if ( v29 > 134 )\n          {\n            byte_61D6E2 = 1;\n          }\n          else\n          {\n            dword_61D69C = dword_416840[sub_40B53C(\"--format\", optarg, off_416800, dword_416840, 4LL, off_61D578)];\n          }\n        }\n        else if ( v29 == 130 )\n        {\n          if ( optarg )\n            v26 = dword_4169E0[sub_40B53C(\"--color\", optarg, off_416980, dword_4169E0, 4LL, off_61D578)];\n          else\n            v26 = 1;\n          v13 = v26 == 1 || v26 == 2 && isatty(1);\n          byte_61D6C0 = v13;\n          if ( v13 )\n            qword_61D710 = 0LL;\n        }\n        else\n        {\n          dword_61D6DC = 4;\n        }\n      }\n      else if ( v29 == 114 )\n      {\n        byte_61D6A8 = 1;\n      }\n      else if ( v29 > 114 )\n      {\n        if ( v29 == 118 )\n        {\n          dword_61D6A4 = 3;\n          v24 = 1;\n        }\n        else if ( v29 > 118 )\n        {\n          if ( v29 == 120 )\n          {\n            dword_61D69C = 3;\n          }\n          else if ( v29 < 120 )\n          {\n            if ( (unsigned int)sub_414BE0(optarg, 0LL, 0LL, v31, 0LL) || !v31[0] )\n            {\n              v9 = sub_4111EB(optarg);\n              v10 = gettext(\"invalid line width: %s\");\n              error(2, 0, v10, v9);\n            }\n            qword_61D720 = v31[0];\n          }\n          else\n          {\n            if ( v29 != 128 )\n              goto LABEL_197;\n            byte_61D6A9 = 1;\n          }\n        }\n        else if ( v29 == 116 )\n        {\n          dword_61D6A4 = 4;\n          v24 = 1;\n        }\n        else if ( v29 > 116 )\n        {\n          dword_61D6A0 = 2;\n        }\n        else\n        {\n          byte_61D6AB = 1;\n        }\n      }\n      else if ( v29 == 110 )\n      {\n        byte_61D6AA = 1;\n        dword_61D69C = 0;\n      }\n      else if ( v29 > 110 )\n      {\n        if ( v29 == 112 )\n        {\n          dword_61D6BC = 1;\n        }\n        else if ( v29 > 112 )\n        {\n          byte_61D6F8 = 1;\n        }\n        else\n        {\n          dword_61D69C = 0;\n          byte_61D383 = 0;\n        }\n      }\n      else if ( v29 == 108 )\n      {\n        dword_61D69C = 0;\n      }\n      else\n      {\n        dword_61D69C = 4;\n      }\n    }\n    else if ( v29 == 81 )\n    {\n      sub_40FE2C(0LL, 3LL);\n    }\n    else if ( v29 > 81 )\n    {\n      if ( v29 == 97 )\n      {\n        dword_61D6E4 = 2;\n      }\n      else if ( v29 > 97 )\n      {\n        if ( v29 == 102 )\n        {\n          dword_61D6E4 = 2;\n          dword_61D6A4 = -1;\n          v24 = 1;\n          if ( !dword_61D69C )\n          {\n            if ( isatty(1) )\n              v8 = 2;\n            else\n              v8 = 1;\n            dword_61D69C = v8;\n          }\n          byte_61D6AB = 0;\n          byte_61D6C0 = 0;\n        }\n        else if ( v29 > 102 )\n        {\n          if ( v29 == 104 )\n          {\n            dword_61D6AC = 176;\n            qword_61D6B0 = 1LL;\n            qword_61D388 = 1LL;\n          }\n          else if ( v29 < 104 )\n          {\n            dword_61D69C = 0;\n            byte_61D382 = 0;\n          }\n          else\n          {\n            if ( v29 != 105 )\n              goto LABEL_197;\n            byte_61D6D9 = 1;\n          }\n        }\n        else if ( v29 == 99 )\n        {\n          dword_61D6A0 = 1;\n        }\n        else if ( v29 < 99 )\n        {\n          sub_40FE2C(0LL, 5LL);\n        }\n        else\n        {\n          if ( v29 != 100 )\n            goto LABEL_197;\n          byte_61D6E1 = 1;\n        }\n      }\n      else if ( v29 == 84 )\n      {\n        if ( (unsigned int)sub_414BE0(optarg, 0LL, 0LL, v31, 0LL) )\n        {\n          v11 = sub_4111EB(optarg);\n          v12 = gettext(\"invalid tab size: %s\");\n          error(2, 0, v12, v11);\n        }\n        qword_61D710 = v31[0];\n      }\n      else if ( v29 > 84 )\n      {\n        switch ( v29 )\n        {\n          case 'X':\n            dword_61D6A4 = 1;\n            v24 = 1;\n            break;\n          case 'Z':\n            byte_61D670 = 1;\n            break;\n          case 'U':\n            dword_61D6A4 = -1;\n            v24 = 1;\n            break;\n          default:\n            goto LABEL_197;\n        }\n      }\n      else if ( v29 == 82 )\n      {\n        byte_61D6E0 = 1;\n      }\n      else\n      {\n        dword_61D6A4 = 2;\n        v24 = 1;\n      }\n    }\n    else if ( v29 == 68 )\n    {\n      byte_61D6B8 = 1;\n    }\n    else if ( v29 > 68 )\n    {\n      if ( v29 == 72 )\n      {\n        dword_61D6DC = 3;\n      }\n      else if ( v29 > 72 )\n      {\n        switch ( v29 )\n        {\n          case 'L':\n            dword_61D6DC = 5;\n            break;\n          case 'N':\n            sub_40FE2C(0LL, 0LL);\n            break;\n          case 'I':\n            sub_40598B(optarg);\n            break;\n          default:\n            goto LABEL_197;\n        }\n      }\n      else if ( v29 == 70 )\n      {\n        dword_61D6BC = 3;\n      }\n      else\n      {\n        if ( v29 != 71 )\n          goto LABEL_197;\n        byte_61D383 = 0;\n      }\n    }\n    else if ( v29 == 49 )\n    {\n      if ( dword_61D69C )\n        dword_61D69C = 1;\n    }\n    else\n    {\n      if ( v29 <= 49 )\n      {\n        if ( v29 == -131 )\n        {\n          if ( dword_61D568 == 1 )\n          {\n            v15 = \"ls\";\n          }\n          else if ( dword_61D568 == 2 )\n          {\n            v15 = \"dir\";\n          }\n          else\n          {\n            v15 = \"vdir\";\n          }\n          sub_414721(\n            (_DWORD)stdout,\n            (_DWORD)v15,\n            (unsigned int)\"GNU coreutils\",\n            (_DWORD)off_61D570,\n            (unsigned int)\"Richard M. Stallman\",\n            (unsigned int)\"David MacKenzie\",\n            0);\n          exit(0);\n        }\n        if ( v29 == -130 )\n          sub_40ADC6(0LL);\nLABEL_197:\n        sub_40ADC6(2LL);\n      }\n      if ( v29 == 66 )\n      {\n        sub_40598B(\"*~\");\n        sub_40598B(\".*~\");\n      }\n      else if ( v29 > 66 )\n      {\n        dword_61D69C = 2;\n      }\n      else\n      {\n        if ( v29 != 65 )\n          goto LABEL_197;\n        if ( !dword_61D6E4 )\n          dword_61D6E4 = 1;\n      }\n    }\n  }\n  if ( (unsigned __int64)qword_61D720 > 2 )\n    v16 = qword_61D720 / 3uLL;\n  else\n    v16 = 1LL;\n  qword_61D7D8 = v16;\n  qword_61D700 = sub_40FDC5(0LL);\n  if ( (unsigned int)sub_40FE0E(qword_61D700) == 5 )\n    sub_40FE50(qword_61D700, 32LL, 1LL);\n  if ( (unsigned int)dword_61D6BC > 1 )\n  {\n    for ( i = (_BYTE *)((unsigned int)dword_61D6BC - 2LL + 4287784); *i; ++i )\n      sub_40FE50(qword_61D700, (unsigned int)(char)*i, 1LL);\n  }\n  qword_61D708 = sub_40FDC5(0LL);\n  sub_40FE50(qword_61D708, 58LL, 1LL);\n  if ( byte_61D6B8 && dword_61D69C )\n    byte_61D6B8 = 0;\n  if ( (dword_61D6A0 == 1 || dword_61D6A0 == 2) && v24 != 1 && dword_61D69C )\n    dword_61D6A4 = 4;\n  if ( !dword_61D69C )\n  {\n    s1 = v32;\n    if ( !v32 )\n    {\n      s1 = getenv(\"TIME_STYLE\");\n      if ( !s1 )\n        s1 = (char *)sub_4027A7((__int64)\"locale\");\n    }\n    while ( !strncmp(s1, \"posix-\", 6uLL) )\n    {\n      if ( (unsigned __int8)sub_40C23A(2LL) != 1 )\n        return (unsigned int)optind;\n      s1 += 6;\n    }\n    if ( *s1 == 43 )\n    {\n      s = s1 + 1;\n      v35 = strchr(s1 + 1, 10);\n      if ( v35 )\n      {\n        if ( strchr(v35 + 1, 10) )\n        {\n          v18 = sub_40FDA6(s);\n          v19 = gettext(\"invalid time style format %s\");\n          error(2, 0, v19, v18);\n        }\n        v20 = v35++;\n        *v20 = 0;\n      }\n      else\n      {\n        v35 = s;\n      }\n      haystack = s;\n      off_61D528 = v35;\n    }\n    else\n    {\n      v21 = dword_415ED0[sub_40B53C(\"time style\", s1, off_415EA0, dword_415ED0, 4LL, off_61D578)];\n      if ( v21 == 1 )\n      {\n        off_61D528 = \"%Y-%m-%d %H:%M\";\n        haystack = \"%Y-%m-%d %H:%M\";\n      }\n      else if ( v21 )\n      {\n        if ( v21 == 2 )\n        {\n          haystack = \"%Y-%m-%d \";\n          off_61D528 = \"%m-%d %H:%M\";\n        }\n        else if ( v21 == 3 && (unsigned __int8)sub_40C23A(2LL) )\n        {\n          for ( j = 0; j <= 1; ++j )\n          {\n            v22 = dcgettext(0LL, (&haystack)[j], 2);\n            (&haystack)[j] = v22;\n          }\n        }\n      }\n      else\n      {\n        off_61D528 = \"%Y-%m-%d %H:%M:%S.%N %z\";\n        haystack = \"%Y-%m-%d %H:%M:%S.%N %z\";\n      }\n    }\n    if ( (strstr(haystack, \"%b\") || strstr(off_61D528, \"%b\")) && !sub_402A0D() )\n    {\n      v23 = gettext(\"error initializing month strings\");\n      error(0, 0, v23);\n    }\n  }\n  return (unsigned int)optind;\n}\n"], [4212928, "sub_4048C0", "bool __fastcall sub_4048C0(char **a1, char **a2, char a3, _QWORD *a4)\n{\n  int v4; // eax\n  char *v5; // rax\n  char *v6; // rdx\n  int v7; // eax\n  char *v8; // rax\n  char *v9; // rax\n  char *v10; // rax\n  int v11; // eax\n  char *v12; // rax\n  char *v13; // rax\n  char *v14; // rax\n  char *v15; // rax\n  char *v16; // rax\n  char *v17; // rdx\n  char *v18; // rax\n  char v21; // [rsp+23h] [rbp-1Dh]\n  unsigned int v22; // [rsp+24h] [rbp-1Ch]\n  __int64 v23; // [rsp+28h] [rbp-18h]\n  char *v24; // [rsp+30h] [rbp-10h]\n  char *v25; // [rsp+38h] [rbp-8h]\n\n  v24 = *a2;\n  v25 = *a1;\n  v23 = 0LL;\n  v21 = 0;\n  v22 = 0;\n  while ( v22 <= 4 )\n  {\n    if ( v22 == 2 )\n    {\n      if ( *v24 > 47 && *v24 <= 55 )\n      {\n        v10 = v24++;\n        v21 = 8 * v21 + *v10 - 48;\n      }\n      else\n      {\n        v9 = v25++;\n        *v9 = v21;\n        ++v23;\n        v22 = 0;\n      }\n    }\n    else if ( v22 > 2 )\n    {\n      if ( v22 == 3 )\n      {\n        v11 = *v24;\n        if ( v11 > 70 )\n        {\n          if ( (unsigned int)(v11 - 97) > 5 )\n          {\nLABEL_71:\n            v15 = v25++;\n            *v15 = v21;\n            ++v23;\n            v22 = 0;\n          }\n          else\n          {\n            v13 = v24++;\n            v21 = 16 * v21 + *v13 - 87;\n          }\n        }\n        else if ( v11 >= 65 )\n        {\n          v14 = v24++;\n          v21 = 16 * v21 + *v14 - 55;\n        }\n        else\n        {\n          if ( (unsigned int)(v11 - 48) > 9 )\n            goto LABEL_71;\n          v12 = v24++;\n          v21 = 16 * v21 + *v12 - 48;\n        }\n      }\n      else\n      {\n        v22 = 0;\n        if ( *v24 <= 63 || *v24 == 127 )\n        {\n          if ( *v24 == 63 )\n          {\n            v18 = v25++;\n            *v18 = 127;\n            ++v23;\n          }\n          else\n          {\n            v22 = 6;\n          }\n        }\n        else\n        {\n          v16 = v25++;\n          v17 = v24++;\n          *v16 = *v17 & 0x1F;\n          ++v23;\n        }\n      }\n    }\n    else if ( v22 )\n    {\n      v7 = *v24;\n      if ( v7 == 98 )\n      {\n        v21 = 8;\n        goto LABEL_57;\n      }\n      if ( v7 > 98 )\n      {\n        if ( v7 == 114 )\n        {\n          v21 = 13;\n          goto LABEL_57;\n        }\n        if ( v7 > 114 )\n        {\n          switch ( v7 )\n          {\n            case 'v':\n              v21 = 11;\n              goto LABEL_57;\n            case 'x':\nLABEL_44:\n              v22 = 3;\n              v21 = 0;\n              goto LABEL_57;\n            case 't':\n              v21 = 9;\n              goto LABEL_57;\n          }\n        }\n        else\n        {\n          switch ( v7 )\n          {\n            case 'f':\n              v21 = 12;\n              goto LABEL_57;\n            case 'n':\n              v21 = 10;\n              goto LABEL_57;\n            case 'e':\n              v21 = 27;\n              goto LABEL_57;\n          }\n        }\n      }\n      else\n      {\n        if ( v7 == 63 )\n        {\n          v21 = 127;\n          goto LABEL_57;\n        }\n        if ( v7 > 63 )\n        {\n          switch ( v7 )\n          {\n            case '_':\n              v21 = 32;\n              goto LABEL_57;\n            case 'a':\n              v21 = 7;\n              goto LABEL_57;\n            case 'X':\n              goto LABEL_44;\n          }\n        }\n        else\n        {\n          if ( !*v24 )\n          {\n            v22 = 6;\n            goto LABEL_57;\n          }\n          if ( v7 >= 0 && (unsigned int)(v7 - 48) <= 7 )\n          {\n            v22 = 2;\n            v21 = *v24 - 48;\n            goto LABEL_57;\n          }\n        }\n      }\n      v21 = *v24;\nLABEL_57:\n      if ( v22 == 1 )\n      {\n        v8 = v25++;\n        *v8 = v21;\n        ++v23;\n        v22 = 0;\n      }\n      ++v24;\n    }\n    else\n    {\n      v4 = *v24;\n      if ( v4 == 61 )\n      {\n        if ( !a3 )\n          goto LABEL_21;\n        v22 = 5;\n      }\n      else if ( v4 > 61 )\n      {\n        if ( v4 == 92 )\n        {\n          v22 = 1;\n          ++v24;\n        }\n        else\n        {\n          if ( v4 != 94 )\n            goto LABEL_21;\n          v22 = 4;\n          ++v24;\n        }\n      }\n      else if ( !*v24 || v4 == 58 )\n      {\n        v22 = 5;\n      }\n      else\n      {\nLABEL_21:\n        v5 = v25++;\n        v6 = v24++;\n        *v5 = *v6;\n        ++v23;\n      }\n    }\n  }\n  *a1 = v25;\n  *a2 = v24;\n  *a4 = v23;\n  return v22 != 6;\n}\n"], [4213929, "sub_404CA9", "int sub_404CA9()\n{\n  char *v0; // rax\n  int v1; // eax\n  unsigned int v2; // eax\n  char *v3; // rax\n  char *v4; // rax\n  char *v5; // rax\n  unsigned int v6; // eax\n  __int64 v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  unsigned int v10; // eax\n  char *v11; // rax\n  char s1[16]; // [rsp+0h] [rbp-50h] BYREF\n  int i; // [rsp+10h] [rbp-40h]\n  unsigned int v15; // [rsp+14h] [rbp-3Ch]\n  char *v16; // [rsp+18h] [rbp-38h] BYREF\n  char *v17; // [rsp+20h] [rbp-30h] BYREF\n  _QWORD *v18; // [rsp+28h] [rbp-28h]\n  _QWORD *v19; // [rsp+30h] [rbp-20h]\n  void *ptr; // [rsp+38h] [rbp-18h]\n\n  v0 = getenv(\"LS_COLORS\");\n  v16 = v0;\n  if ( v0 )\n  {\n    LODWORD(v0) = (unsigned __int8)*v16;\n    if ( (_BYTE)v0 )\n    {\n      v18 = 0LL;\n      strcpy(s1, \"??\");\n      ::ptr = (void *)sub_414ADE(v16);\n      v17 = (char *)::ptr;\n      v15 = 1;\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( v15 == 3 )\n          {\n            v15 = 6;\n            v5 = v16++;\n            if ( *v5 == 61 )\n            {\n              for ( i = 0; (&off_415FA0)[i]; ++i )\n              {\n                if ( !strcmp(s1, (&off_415FA0)[i]) )\n                {\n                  *(&::s1 + 2 * i) = v17;\n                  if ( sub_4048C0(&v17, &v16, 0, &qword_61D3A0[2 * i]) )\n                    v6 = 1;\n                  else\n                    v6 = 6;\n                  v15 = v6;\n                  break;\n                }\n              }\n              if ( v15 == 6 )\n              {\n                v7 = sub_4111EB(s1);\n                v8 = gettext(\"unrecognized prefix: %s\");\n                error(0, 0, v8, v7);\n              }\n            }\n          }\n          if ( v15 > 3 )\n            break;\n          if ( v15 == 1 )\n          {\n            v1 = *v16;\n            if ( v1 == 42 )\n            {\n              v18 = (_QWORD *)sub_414989(40LL);\n              v18[4] = qword_61D6C8;\n              qword_61D6C8 = (__int64)v18;\n              ++v16;\n              v18[1] = v17;\n              if ( sub_4048C0(&v17, &v16, 1, v18) )\n                v2 = 4;\n              else\n                v2 = 6;\n              v15 = v2;\n            }\n            else if ( v1 == 58 )\n            {\n              ++v16;\n            }\n            else\n            {\n              if ( !*v16 )\n              {\n                v15 = 5;\n                goto LABEL_44;\n              }\n              v3 = v16++;\n              s1[0] = *v3;\n              v15 = 2;\n            }\n          }\n          else\n          {\n            if ( v15 != 2 )\n              goto LABEL_43;\n            if ( *v16 )\n            {\n              v4 = v16++;\n              s1[1] = *v4;\n              v15 = 3;\n            }\n            else\n            {\n              v15 = 6;\n            }\n          }\n        }\n        if ( v15 != 4 )\n          break;\n        v9 = v16++;\n        if ( *v9 == 61 )\n        {\n          v18[3] = v17;\n          if ( sub_4048C0(&v17, &v16, 0, v18 + 2) )\n            v10 = 1;\n          else\n            v10 = 6;\n          v15 = v10;\n        }\n        else\n        {\n          v15 = 6;\n        }\n      }\n      if ( v15 != 6 )\nLABEL_43:\n        abort();\nLABEL_44:\n      if ( v15 == 6 )\n      {\n        v11 = gettext(\"unparsable value for LS_COLORS environment variable\");\n        error(0, 0, v11);\n        free(::ptr);\n        v19 = (_QWORD *)qword_61D6C8;\n        while ( v19 )\n        {\n          ptr = v19;\n          v19 = (_QWORD *)v19[4];\n          free(ptr);\n        }\n        byte_61D6C0 = 0;\n      }\n      LODWORD(v0) = qword_61D410;\n      if ( qword_61D410 == 6 )\n      {\n        LODWORD(v0) = strncmp(off_61D418, \"target\", 6uLL);\n        if ( !(_DWORD)v0 )\n          byte_61D650 = 1;\n      }\n    }\n  }\n  return (int)v0;\n}\n"], [4214870, "sub_405056", "__int64 __fastcall sub_405056(unsigned int a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  if ( (_BYTE)a1 )\n  {\n    status = 2;\n  }\n  else\n  {\n    result = (unsigned int)status;\n    if ( !status )\n      status = 1;\n  }\n  return result;\n}\n"], [4214919, "sub_405087", "__int64 __fastcall sub_405087(unsigned __int8 a1, const char *a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  int *v4; // rax\n\n  v3 = sub_4113BF(a3);\n  v4 = __errno_location();\n  error(0, *v4, a2, v3);\n  return sub_405056(a1);\n}\n"], [4215005, "sub_4050DD", "__int64 __fastcall sub_4050DD(__int64 a1, __int64 a2, char a3)\n{\n  __int64 v3; // rax\n  __int64 v4; // rax\n  __int64 result; // rax\n  __int64 v7; // [rsp+28h] [rbp-8h]\n\n  v7 = sub_414989(32LL);\n  if ( a2 )\n    v3 = sub_414ADE(a2);\n  else\n    v3 = 0LL;\n  *(_QWORD *)(v7 + 8) = v3;\n  if ( a1 )\n    v4 = sub_414ADE(a1);\n  else\n    v4 = 0LL;\n  *(_QWORD *)v7 = v4;\n  *(_BYTE *)(v7 + 16) = a3;\n  *(_QWORD *)(v7 + 24) = qword_61D658;\n  result = v7;\n  qword_61D658 = v7;\n  return result;\n}\n"], [4215146, "sub_40516A", "unsigned __int64 __fastcall sub_40516A(char *a1, char *a2, unsigned __int8 a3)\n{\n  char *v3; // rax\n  unsigned int v4; // eax\n  char *v5; // rax\n  __int64 v6; // rbx\n  char *v7; // rax\n  char *v8; // rax\n  int v9; // eax\n  char *v10; // rsi\n  char *v11; // rsi\n  unsigned int v14; // [rsp+2Ch] [rbp-394h]\n  int fildes; // [rsp+30h] [rbp-390h]\n  __int64 v16; // [rsp+40h] [rbp-380h]\n  DIR *dirp; // [rsp+48h] [rbp-378h]\n  char *v18; // [rsp+58h] [rbp-368h]\n  struct dirent *v19; // [rsp+70h] [rbp-350h]\n  const char *s; // [rsp+78h] [rbp-348h]\n  char *sa; // [rsp+78h] [rbp-348h]\n  struct stat stat_buf; // [rsp+80h] [rbp-340h] BYREF\n  char v23[664]; // [rsp+110h] [rbp-2B0h] BYREF\n  unsigned __int64 v24; // [rsp+3A8h] [rbp-18h]\n\n  v24 = __readfsqword(0x28u);\n  v16 = 0LL;\n  *__errno_location() = 0;\n  dirp = opendir(a1);\n  if ( dirp )\n  {\n    if ( qword_61D620 )\n    {\n      fildes = dirfd(dirp);\n      if ( fildes < 0 )\n        v4 = (unsigned int)sub_415C20(a1, &stat_buf) >> 31;\n      else\n        v4 = (unsigned int)sub_415C30(fildes, &stat_buf) >> 31;\n      if ( (_BYTE)v4 )\n      {\n        v5 = gettext(\"cannot determine device and inode of %s\");\n        sub_405087(a3, v5, (__int64)a1);\n        closedir(dirp);\n        return __readfsqword(0x28u) ^ v24;\n      }\n      if ( sub_402BA2(stat_buf.st_dev, stat_buf.st_ino) )\n      {\n        v6 = sub_4113BF(a1);\n        v7 = gettext(\"%s: not listing already-listed directory\");\n        error(0, 0, v7, v6);\n        closedir(dirp);\n        sub_405056(1u);\n        return __readfsqword(0x28u) ^ v24;\n      }\n      if ( stru_61D8C0.chunk_limit - stru_61D8C0.next_free < 16 )\n        _obstack_newchunk(&stru_61D8C0, 16);\n      stru_61D8C0.next_free += 16;\n      v18 = stru_61D8C0.next_free - 16;\n      *((_QWORD *)stru_61D8C0.next_free - 1) = stat_buf.st_dev;\n      *(_QWORD *)v18 = stat_buf.st_ino;\n    }\n    if ( byte_61D6E0 || byte_61D718 )\n    {\n      if ( byte_61D530 != 1 )\n      {\n        putchar_unlocked(10);\n        ++qword_61D7E0;\n      }\n      byte_61D530 = 0;\n      if ( byte_61D6B8 )\n      {\n        fwrite_unlocked(\"  \", 1uLL, 2uLL, stdout);\n        qword_61D7E0 += 2LL;\n      }\n      if ( byte_61D6B8 )\n      {\n        if ( stru_61D860.next_free + 8 > stru_61D860.chunk_limit )\n          _obstack_newchunk(&stru_61D860, 8);\n        memcpy(stru_61D860.next_free, &qword_61D7E0, 8uLL);\n        stru_61D860.next_free += 8;\n      }\n      if ( a2 )\n        v8 = a2;\n      else\n        v8 = a1;\n      qword_61D7E0 += sub_4092DE(stdout, v8, qword_61D708, 0LL);\n      if ( byte_61D6B8 )\n      {\n        if ( stru_61D860.next_free + 8 > stru_61D860.chunk_limit )\n          _obstack_newchunk(&stru_61D860, 8);\n        memcpy(stru_61D860.next_free, &qword_61D7E0, 8uLL);\n        stru_61D860.next_free += 8;\n      }\n      fwrite_unlocked(\":\\n\", 1uLL, 2uLL, stdout);\n      qword_61D7E0 += 2LL;\n    }\n    sub_405AE7();\n    do\n    {\n      while ( 1 )\n      {\n        *__errno_location() = 0;\n        v19 = readdir(dirp);\n        if ( !v19 )\n          break;\n        if ( (unsigned __int8)sub_405A26(v19->d_name) != 1 )\n        {\n          v14 = 0;\n          v9 = v19->d_type;\n          if ( v9 == 6 )\n          {\n            v14 = 4;\n          }\n          else if ( v19->d_type > 6u )\n          {\n            if ( v9 == 10 )\n            {\n              v14 = 6;\n            }\n            else if ( v19->d_type > 0xAu )\n            {\n              if ( v9 == 12 )\n              {\n                v14 = 7;\n              }\n              else if ( v9 == 14 )\n              {\n                v14 = 8;\n              }\n            }\n            else if ( v9 == 8 )\n            {\n              v14 = 5;\n            }\n          }\n          else\n          {\n            switch ( v9 )\n            {\n              case 2:\n                v14 = 2;\n                break;\n              case 4:\n                v14 = 3;\n                break;\n              case 1:\n                v14 = 1;\n                break;\n            }\n          }\n          v16 += sub_405BE1(v19->d_name, v14, 0LL, 0LL, a1);\n          if ( dword_61D69C == 1 && dword_61D6A4 == -1 && byte_61D6AB != 1 && byte_61D6E0 != 1 )\n          {\n            sub_4080A9();\n            sub_4081E3();\n            sub_405AE7();\n          }\n        }\n      }\n      if ( !*__errno_location() )\n        break;\n      v10 = gettext(\"reading directory %s\");\n      sub_405087(a3, v10, (__int64)a1);\n    }\n    while ( *__errno_location() == 75 );\n    if ( closedir(dirp) )\n    {\n      v11 = gettext(\"closing directory %s\");\n      sub_405087(a3, v11, (__int64)a1);\n    }\n    sub_4080A9();\n    if ( byte_61D6E0 )\n      sub_406A50(a1, a3);\n    if ( !dword_61D69C || byte_61D6AB )\n    {\n      if ( byte_61D6B8 )\n      {\n        fwrite_unlocked(\"  \", 1uLL, 2uLL, stdout);\n        qword_61D7E0 += 2LL;\n      }\n      s = gettext(\"total\");\n      fputs_unlocked(s, stdout);\n      qword_61D7E0 += strlen(s);\n      putchar_unlocked(32);\n      ++qword_61D7E0;\n      sa = (char *)sub_40DD65(v16, v23, (unsigned int)dword_61D6AC, 512LL, qword_61D6B0);\n      fputs_unlocked(sa, stdout);\n      qword_61D7E0 += strlen(sa);\n      putchar_unlocked(10);\n      ++qword_61D7E0;\n    }\n    if ( qword_61D638 )\n      sub_4081E3();\n  }\n  else\n  {\n    v3 = gettext(\"cannot open directory %s\");\n    sub_405087(a3, v3, (__int64)a1);\n  }\n  return __readfsqword(0x28u) ^ v24;\n}\n"], [4217227, "sub_40598B", "_QWORD *__fastcall sub_40598B(__int64 a1)\n{\n  _QWORD *result; // rax\n\n  result = (_QWORD *)sub_414989(16LL);\n  *result = a1;\n  result[1] = qword_61D6E8;\n  qword_61D6E8 = (__int64)result;\n  return result;\n}\n"], [4217292, "sub_4059CC", "__int64 __fastcall sub_4059CC(__int64 a1, const char *a2)\n{\n  while ( a1 )\n  {\n    if ( !fnmatch(*(const char **)a1, a2, 4) )\n      return 1LL;\n    a1 = *(_QWORD *)(a1 + 8);\n  }\n  return 0LL;\n}\n"], [4217382, "sub_405A26", "_BOOL8 __fastcall sub_405A26(__int64 a1)\n{\n  __int64 v1; // rax\n  bool v2; // al\n\n  v2 = dword_61D6E4 != 2\n    && *(_BYTE *)a1 == 46\n    && (!dword_61D6E4 || (*(_BYTE *)(a1 + 1) != 46 ? (v1 = 1LL) : (v1 = 2LL), !*(_BYTE *)(a1 + v1)))\n    || !dword_61D6E4 && (unsigned __int8)sub_4059CC(qword_61D6F0, (const char *)a1)\n    || (unsigned __int8)sub_4059CC(qword_61D6E8, (const char *)a1);\n  return v2;\n}\n"], [4217546, "sub_405ACA", "__int64 __fastcall sub_405ACA(__int64 a1)\n{\n  return a1;\n}\n"], [4217560, "sub_405AD8", "__int64 sub_405AD8()\n{\n  return 0LL;\n}\n"], [4217575, "sub_405AE7", "__int64 sub_405AE7()\n{\n  __int64 result; // rax\n  unsigned __int64 i; // [rsp+0h] [rbp-10h]\n  void **v2; // [rsp+8h] [rbp-8h]\n\n  for ( i = 0LL; ; ++i )\n  {\n    result = qword_61D638;\n    if ( i >= qword_61D638 )\n      break;\n    v2 = (void **)*((_QWORD *)qword_61D640 + i);\n    free(*v2);\n    free(v2[1]);\n    if ( v2[21] != &unk_61D380 )\n      sub_40251D();\n  }\n  qword_61D638 = 0LL;\n  byte_61D671 = 0;\n  dword_61D674 = 0;\n  dword_61D678 = 0;\n  dword_61D67C = 0;\n  dword_61D684 = 0;\n  dword_61D688 = 0;\n  dword_61D68C = 0;\n  dword_61D680 = 0;\n  dword_61D690 = 0;\n  dword_61D694 = 0;\n  dword_61D698 = 0;\n  return result;\n}\n"], [4217825, "sub_405BE1", "__int64 __fastcall sub_405BE1(char *a1, int a2, __int64 a3, unsigned __int8 a4, const char *a5)\n{\n  size_t v5; // rbx\n  void *v6; // rsp\n  char v7; // al\n  char *v8; // rax\n  __int64 v10; // rax\n  char v11; // al\n  int v12; // eax\n  int v13; // eax\n  const char *v14; // rbx\n  int *v15; // rax\n  __int64 v16; // rax\n  const char *v17; // rax\n  unsigned int v18; // eax\n  const char *v19; // rax\n  unsigned int v20; // eax\n  const char *v21; // rax\n  __int64 v22; // rax\n  const char *v23; // rax\n  __int64 v24; // rax\n  __int64 v26; // [rsp+8h] [rbp-3D8h] BYREF\n  unsigned __int8 v27; // [rsp+10h] [rbp-3D0h]\n  int v28; // [rsp+14h] [rbp-3CCh]\n  char *v29; // [rsp+18h] [rbp-3C8h]\n  char v30; // [rsp+24h] [rbp-3BCh]\n  bool v31; // [rsp+25h] [rbp-3BBh]\n  bool v32; // [rsp+26h] [rbp-3BAh]\n  char v33; // [rsp+27h] [rbp-3B9h]\n  int v34; // [rsp+28h] [rbp-3B8h]\n  int v35; // [rsp+2Ch] [rbp-3B4h]\n  int v36; // [rsp+30h] [rbp-3B0h]\n  int v37; // [rsp+34h] [rbp-3ACh]\n  int v38; // [rsp+38h] [rbp-3A8h]\n  int v39; // [rsp+3Ch] [rbp-3A4h]\n  int v40; // [rsp+40h] [rbp-3A0h]\n  int v41; // [rsp+44h] [rbp-39Ch]\n  int v42; // [rsp+48h] [rbp-398h]\n  int v43; // [rsp+4Ch] [rbp-394h]\n  int v44; // [rsp+50h] [rbp-390h]\n  int v45; // [rsp+54h] [rbp-38Ch]\n  __int64 v46; // [rsp+58h] [rbp-388h]\n  char *filename; // [rsp+60h] [rbp-380h]\n  void *s; // [rsp+68h] [rbp-378h]\n  void *ptr; // [rsp+70h] [rbp-370h]\n  __int64 v50; // [rsp+78h] [rbp-368h]\n  struct stat stat_buf; // [rsp+80h] [rbp-360h] BYREF\n  char v52[32]; // [rsp+110h] [rbp-2D0h] BYREF\n  char v53[664]; // [rsp+130h] [rbp-2B0h] BYREF\n  unsigned __int64 v54; // [rsp+3C8h] [rbp-18h]\n\n  v29 = a1;\n  v28 = a2;\n  v26 = a3;\n  v27 = a4;\n  v54 = __readfsqword(0x28u);\n  v46 = 0LL;\n  if ( a4 && v26 )\n    __assert_fail(\"! command_line_arg || inode == NOT_AN_INODE_NUMBER\", \"../../src/src/ls.c\", 0xABCu, \"gobble_file\");\n  if ( qword_61D638 == qword_61D630 )\n  {\n    qword_61D628 = sub_41487E(qword_61D628, qword_61D630, 384LL);\n    qword_61D630 *= 2LL;\n  }\n  s = (void *)(qword_61D628 + 192 * qword_61D638);\n  memset(s, 0, 0xC0uLL);\n  *((_QWORD *)s + 3) = v26;\n  *((_DWORD *)s + 40) = v28;\n  if ( !v27\n    && !byte_61D728\n    && (v28 != 3 || !byte_61D6C0 || !sub_402C5C(0x13u) && !sub_402C5C(0x12u) && !sub_402C5C(0x14u))\n    && (!byte_61D6D9 && !byte_61D729 || v28 != 6 && v28 || dword_61D6DC != 5 && !byte_61D650 && !byte_61D6D8)\n    && (!byte_61D6D9 || v26)\n    && (!byte_61D729\n     || v28\n     && (v28 != 5\n      || dword_61D6BC != 3\n      && (!byte_61D6C0 || !sub_402C5C(0xEu) && !sub_402C5C(0x10u) && !sub_402C5C(0x11u) && !sub_402C5C(0x15u)))) )\n  {\n    goto LABEL_132;\n  }\n  if ( *v29 != 47 && *a5 )\n  {\n    v5 = strlen(v29);\n    v6 = alloca(16 * ((v5 + strlen(a5) + 32) / 0x10));\n    filename = (char *)(16 * (((unsigned __int64)&v26 + 7) >> 4));\n    sub_40A844(filename, a5, v29);\n  }\n  else\n  {\n    filename = v29;\n  }\n  if ( (unsigned int)dword_61D6DC < 3 )\n    goto LABEL_45;\n  if ( (unsigned int)dword_61D6DC <= 4 )\n  {\n    if ( v27 )\n    {\n      v34 = sub_415C20(filename, (struct stat *)((char *)s + 16));\n      v30 = 1;\n      if ( dword_61D6DC == 3 )\n        goto LABEL_46;\n      v7 = v34 >= 0 ? (*((_DWORD *)s + 10) & 0xF000) != 0x4000 : *__errno_location() == 2;\n      v33 = v7;\n      if ( v7 != 1 )\n        goto LABEL_46;\n    }\n    goto LABEL_45;\n  }\n  if ( dword_61D6DC != 5 )\n  {\nLABEL_45:\n    v34 = sub_415C40(filename, (struct stat *)((char *)s + 16));\n    v30 = 0;\n    goto LABEL_46;\n  }\n  v34 = sub_415C20(filename, (struct stat *)((char *)s + 16));\n  v30 = 1;\nLABEL_46:\n  if ( v34 )\n  {\n    v8 = gettext(\"cannot access %s\");\n    sub_405087(v27, v8, (__int64)filename);\n    if ( !v27 )\n    {\n      v10 = sub_414ADE(v29);\n      *(_QWORD *)s = v10;\n      ++qword_61D638;\n    }\n    return 0LL;\n  }\n  *((_BYTE *)s + 176) = 1;\n  if ( (v28 == 5 || (*((_DWORD *)s + 10) & 0xF000) == 0x8000) && byte_61D6C0 && sub_402C5C(0x15u) )\n  {\n    v11 = sub_405AD8(filename);\n    *((_BYTE *)s + 184) = v11;\n  }\n  if ( !dword_61D69C || byte_61D670 )\n  {\n    v31 = 0;\n    v32 = 0;\n    if ( v30 )\n      v12 = sub_402527(filename, (char *)s + 168);\n    else\n      v12 = sub_402549(filename, (char *)s + 168);\n    v35 = v12;\n    v34 = v12 < 0;\n    if ( v12 < 0 )\n    {\n      *((_QWORD *)s + 21) = &unk_61D380;\n      if ( *__errno_location() == 95 || *__errno_location() == 95 || *__errno_location() == 61 )\n        v34 = 0;\n    }\n    else\n    {\n      v31 = strcmp(\"unlabeled\", *((const char **)s + 21)) != 0;\n    }\n    if ( !v34 && !dword_61D69C )\n    {\n      v36 = sub_40B0E0(filename, (char *)s + 16);\n      v34 = v36 < 0;\n      v32 = v36 > 0;\n    }\n    if ( v31 || v32 )\n    {\n      if ( v31 && !v32 )\n        v13 = 1;\n      else\n        v13 = 2;\n    }\n    else\n    {\n      v13 = 0;\n    }\n    *((_DWORD *)s + 45) = v13;\n    byte_61D671 = ((unsigned __int8)byte_61D671 | (*((_DWORD *)s + 45) != 0)) != 0;\n    if ( v34 )\n    {\n      v14 = (const char *)sub_4113BF(filename);\n      v15 = __errno_location();\n      error(0, *v15, \"%s\", v14);\n    }\n  }\n  if ( (*((_DWORD *)s + 10) & 0xF000) == 40960 && (!dword_61D69C || byte_61D6D8) )\n  {\n    sub_4068EA(filename, s, v27);\n    ptr = (void *)sub_40694F(filename, *((_QWORD *)s + 1));\n    if ( ptr && ((unsigned int)dword_61D6BC > 1 || byte_61D6D8) && !(unsigned int)sub_415C20((char *)ptr, &stat_buf) )\n    {\n      *((_BYTE *)s + 177) = 1;\n      if ( v27 != 1 || !dword_61D69C || (stat_buf.st_mode & 0xF000) != 0x4000 )\n        *((_DWORD *)s + 41) = stat_buf.st_mode;\n    }\n    free(ptr);\n  }\n  if ( (*((_DWORD *)s + 10) & 0xF000) == 40960 && byte_61D6D8 != 1 )\n    *((_BYTE *)s + 177) = 1;\n  if ( (*((_DWORD *)s + 10) & 0xF000) == 40960 )\n  {\n    *((_DWORD *)s + 40) = 6;\n  }\n  else if ( (*((_DWORD *)s + 10) & 0xF000) == 0x4000 )\n  {\n    if ( v27 && byte_61D6E1 != 1 )\n      *((_DWORD *)s + 40) = 9;\n    else\n      *((_DWORD *)s + 40) = 3;\n  }\n  else\n  {\n    *((_DWORD *)s + 40) = 5;\n  }\n  v46 = *((_QWORD *)s + 10);\n  if ( !dword_61D69C || byte_61D6AB )\n  {\n    v16 = sub_40DD65(v46, v53, (unsigned int)dword_61D6AC, 512LL, qword_61D6B0);\n    v37 = sub_40F59D(v16, 0LL);\n    if ( dword_61D678 < v37 )\n      dword_61D678 = v37;\n  }\n  if ( !dword_61D69C )\n  {\n    if ( byte_61D382 )\n    {\n      v38 = sub_40877B(*((unsigned int *)s + 11));\n      if ( dword_61D684 < v38 )\n        dword_61D684 = v38;\n    }\n    if ( byte_61D383 )\n    {\n      v39 = sub_4087B8(*((unsigned int *)s + 12));\n      if ( dword_61D688 < v39 )\n        dword_61D688 = v39;\n    }\n    if ( byte_61D6A9 )\n    {\n      v40 = sub_40877B(*((unsigned int *)s + 11));\n      if ( dword_61D68C < v40 )\n        dword_61D68C = v40;\n    }\n  }\n  if ( byte_61D670 )\n  {\n    v41 = strlen(*((const char **)s + 21));\n    if ( dword_61D680 < v41 )\n      dword_61D680 = v41;\n  }\n  if ( !dword_61D69C )\n  {\n    v17 = (const char *)sub_40EF8A(*((_QWORD *)s + 4), v52);\n    v42 = strlen(v17);\n    if ( dword_61D67C < v42 )\n      dword_61D67C = v42;\n    if ( (*((_DWORD *)s + 10) & 0xF000) == 0x2000 || (*((_DWORD *)s + 10) & 0xF000) == 24576 )\n    {\n      v18 = gnu_dev_major(*((_QWORD *)s + 7));\n      v19 = (const char *)sub_40EF8A(v18, v53);\n      v44 = strlen(v19);\n      if ( dword_61D690 < v44 )\n        dword_61D690 = v44;\n      v20 = gnu_dev_minor(*((_QWORD *)s + 7));\n      v21 = (const char *)sub_40EF8A(v20, v53);\n      v44 = strlen(v21);\n      if ( dword_61D694 < v44 )\n        dword_61D694 = v44;\n      v44 = dword_61D690 + 2 + dword_61D694;\n      if ( dword_61D698 < v44 )\n        dword_61D698 = v44;\n    }\n    else\n    {\n      v50 = sub_405ACA(*((_QWORD *)s + 8));\n      v22 = sub_40DD65(v50, v53, (unsigned int)dword_61D6AC, 1LL, qword_61D388);\n      v43 = sub_40F59D(v22, 0LL);\n      if ( dword_61D698 < v43 )\n        dword_61D698 = v43;\n    }\n  }\nLABEL_132:\n  if ( byte_61D6D9 )\n  {\n    v23 = (const char *)sub_40EF8A(*((_QWORD *)s + 3), v53);\n    v45 = strlen(v23);\n    if ( dword_61D674 < v45 )\n      dword_61D674 = v45;\n  }\n  v24 = sub_414ADE(v29);\n  *(_QWORD *)s = v24;\n  ++qword_61D638;\n  return v46;\n}\n"], [4221107, "sub_4068B3", "_BOOL8 __fastcall sub_4068B3(__int64 a1)\n{\n  return *(_DWORD *)(a1 + 160) == 3 || *(_DWORD *)(a1 + 160) == 9;\n}\n"], [4221162, "sub_4068EA", "__int64 __fastcall sub_4068EA(__int64 a1, __int64 a2, unsigned __int8 a3)\n{\n  __int64 result; // rax\n  char *v4; // rax\n\n  *(_QWORD *)(a2 + 8) = sub_40B0F3(a1, *(_QWORD *)(a2 + 64));\n  result = *(_QWORD *)(a2 + 8);\n  if ( !result )\n  {\n    v4 = gettext(\"cannot read symbolic link %s\");\n    result = sub_405087(a3, v4, a1);\n  }\n  return result;\n}\n"], [4221263, "sub_40694F", "__int64 __fastcall sub_40694F(const char *a1, const char *a2)\n{\n  size_t v3; // rax\n  char *dest; // [rsp+10h] [rbp-10h]\n  char *desta; // [rsp+10h] [rbp-10h]\n  __int64 n; // [rsp+18h] [rbp-8h]\n\n  if ( !a2 )\n    return 0LL;\n  if ( *a2 == 47 )\n    return sub_414ADE(a2);\n  dest = strrchr(a1, 47);\n  if ( !dest )\n    return sub_414ADE(a2);\n  n = dest - a1 + 1;\n  v3 = strlen(a2);\n  desta = (char *)sub_414989(n + v3 + 1);\n  strncpy(desta, a1, n);\n  strcpy(&desta[n], a2);\n  return (__int64)desta;\n}\n"], [4221478, "sub_406A26", "_BOOL8 __fastcall sub_406A26(__int64 a1)\n{\n  _BYTE *v2; // [rsp+18h] [rbp-8h]\n\n  v2 = (_BYTE *)sub_40B763(a1);\n  return sub_4025ED(v2);\n}\n"], [4221520, "sub_406A50", "__int64 __fastcall sub_406A50(__int64 a1, char a2)\n{\n  __int64 result; // rax\n  __int64 v4; // [rsp+18h] [rbp-28h]\n  unsigned __int64 v5; // [rsp+18h] [rbp-28h]\n  __int64 v6; // [rsp+20h] [rbp-20h]\n  __int64 *v7; // [rsp+28h] [rbp-18h]\n  void *ptr; // [rsp+30h] [rbp-10h]\n  __int64 v9; // [rsp+38h] [rbp-8h]\n\n  if ( a1 && qword_61D620 )\n    sub_4050DD(0LL, a1, 0);\n  v4 = qword_61D638;\n  while ( v4-- )\n  {\n    v7 = (__int64 *)*((_QWORD *)qword_61D640 + v4);\n    if ( sub_4068B3((__int64)v7) && (!a1 || !sub_406A26(*v7)) )\n    {\n      if ( a1 && *(_BYTE *)*v7 != 47 )\n      {\n        ptr = (void *)sub_40BAB3(a1, *v7, 0LL);\n        sub_4050DD((__int64)ptr, v7[1], a2);\n        free(ptr);\n      }\n      else\n      {\n        sub_4050DD(*v7, v7[1], a2);\n      }\n      if ( *((_DWORD *)v7 + 40) == 9 )\n        free((void *)*v7);\n    }\n  }\n  v5 = 0LL;\n  v6 = 0LL;\n  while ( v5 < qword_61D638 )\n  {\n    v9 = *((_QWORD *)qword_61D640 + v5);\n    *((_QWORD *)qword_61D640 + v6) = v9;\n    v6 += *(_DWORD *)(v9 + 160) != 9;\n    ++v5;\n  }\n  result = v6;\n  qword_61D638 = v6;\n  return result;\n}\n"], [4221983, "sub_406C1F", "__int64 __fastcall sub_406C1F(const char *a1, const char *a2)\n{\n  __int64 v2; // r13\n  __int64 v3; // r12\n  char *v4; // rbx\n  int *v5; // rax\n  unsigned int v7; // [rsp+1Ch] [rbp-24h]\n\n  *__errno_location() = 0;\n  v7 = strcoll(a1, a2);\n  if ( *__errno_location() )\n  {\n    v2 = sub_40FD82(1LL, a2);\n    v3 = sub_40FD82(0LL, a1);\n    v4 = gettext(\"cannot compare file names %s and %s\");\n    v5 = __errno_location();\n    error(0, *v5, v4, v3, v2);\n    sub_405056(0);\n    longjmp(env, 1);\n  }\n  return v7;\n}\n"], [4222173, "sub_406CDD", "__int64 __fastcall sub_406CDD(_QWORD *a1, _QWORD *a2, __int64 (__fastcall *a3)(_QWORD, _QWORD))\n{\n  __int64 v3; // r12\n  int v4; // edx\n  int v5; // er13\n  __int64 v6; // rax\n  int v7; // edx\n  __int64 result; // rax\n  unsigned int v10; // [rsp+2Ch] [rbp-24h]\n\n  v3 = sub_4027CB((__int64)(a1 + 2));\n  v5 = v4;\n  v6 = sub_4027CB((__int64)(a2 + 2));\n  v10 = sub_402583(v6, v7, v3, v5);\n  if ( v10 )\n    result = v10;\n  else\n    result = a3(*a1, *a2);\n  return result;\n}\n"], [4222316, "sub_406D6C", "__int64 __fastcall sub_406D6C(_QWORD *a1, _QWORD *a2, __int64 (__fastcall *a3)(_QWORD, _QWORD))\n{\n  __int64 v3; // r12\n  int v4; // edx\n  int v5; // er13\n  __int64 v6; // rax\n  int v7; // edx\n  __int64 result; // rax\n  unsigned int v10; // [rsp+2Ch] [rbp-24h]\n\n  v3 = sub_4027E1((__int64)(a1 + 2));\n  v5 = v4;\n  v6 = sub_4027E1((__int64)(a2 + 2));\n  v10 = sub_402583(v6, v7, v3, v5);\n  if ( v10 )\n    result = v10;\n  else\n    result = a3(*a1, *a2);\n  return result;\n}\n"], [4222459, "sub_406DFB", "__int64 __fastcall sub_406DFB(_QWORD *a1, _QWORD *a2, __int64 (__fastcall *a3)(_QWORD, _QWORD))\n{\n  __int64 v3; // r12\n  int v4; // edx\n  int v5; // er13\n  __int64 v6; // rax\n  int v7; // edx\n  __int64 result; // rax\n  unsigned int v10; // [rsp+2Ch] [rbp-24h]\n\n  v3 = sub_4027B5((__int64)(a1 + 2));\n  v5 = v4;\n  v6 = sub_4027B5((__int64)(a2 + 2));\n  v10 = sub_402583(v6, v7, v3, v5);\n  if ( v10 )\n    result = v10;\n  else\n    result = a3(*a1, *a2);\n  return result;\n}\n"], [4222602, "sub_406E8A", "__int64 __fastcall sub_406E8A(_QWORD *a1, _QWORD *a2, __int64 (__fastcall *a3)(_QWORD, _QWORD))\n{\n  __int64 result; // rax\n\n  if ( a2[8] < a1[8] )\n    LODWORD(result) = -1;\n  else\n    LODWORD(result) = a2[8] > a1[8];\n  if ( (_DWORD)result )\n    result = (unsigned int)result;\n  else\n    result = a3(*a1, *a2);\n  return result;\n}\n"], [4222717, "sub_406EFD", "__int64 __fastcall sub_406EFD(_QWORD *a1, _QWORD *a2, __int64 (__fastcall *a3)(_QWORD, _QWORD))\n{\n  return a3(*a1, *a2);\n}\n"], [4222765, "sub_406F2D", "__int64 __fastcall sub_406F2D(const char **a1, const char **a2, __int64 (__fastcall *a3)(const char *, const char *))\n{\n  const char *v3; // rdx\n  const char *v4; // rax\n  __int64 result; // rax\n  unsigned int v7; // [rsp+2Ch] [rbp-14h]\n  char *v8; // [rsp+30h] [rbp-10h]\n  char *v9; // [rsp+38h] [rbp-8h]\n\n  v8 = strrchr(*a1, 46);\n  v9 = strrchr(*a2, 46);\n  if ( v9 )\n    v3 = v9;\n  else\n    v3 = &locale;\n  if ( v8 )\n    v4 = v8;\n  else\n    v4 = &locale;\n  v7 = a3(v4, v3);\n  if ( v7 )\n    result = v7;\n  else\n    result = a3(*a1, *a2);\n  return result;\n}\n"], [4222923, "sub_406FCB", "__int64 __fastcall sub_406FCB(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406CDD(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4222965, "sub_406FF5", "__int64 __fastcall sub_406FF5(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406CDD(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4223007, "sub_40701F", "__int64 __fastcall sub_40701F(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406CDD(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4223049, "sub_407049", "__int64 __fastcall sub_407049(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406CDD(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4223091, "sub_407073", "__int64 __fastcall sub_407073(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406CDD(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4223211, "sub_4070EB", "__int64 __fastcall sub_4070EB(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406CDD(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4223331, "sub_407163", "__int64 __fastcall sub_407163(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406CDD(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4223451, "sub_4071DB", "__int64 __fastcall sub_4071DB(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406CDD(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4223571, "sub_407253", "__int64 __fastcall sub_407253(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406D6C(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4223613, "sub_40727D", "__int64 __fastcall sub_40727D(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406D6C(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4223655, "sub_4072A7", "__int64 __fastcall sub_4072A7(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406D6C(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4223697, "sub_4072D1", "__int64 __fastcall sub_4072D1(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406D6C(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4223739, "sub_4072FB", "__int64 __fastcall sub_4072FB(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406D6C(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4223859, "sub_407373", "__int64 __fastcall sub_407373(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406D6C(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4223979, "sub_4073EB", "__int64 __fastcall sub_4073EB(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406D6C(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4224099, "sub_407463", "__int64 __fastcall sub_407463(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406D6C(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4224219, "sub_4074DB", "__int64 __fastcall sub_4074DB(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406DFB(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4224261, "sub_407505", "__int64 __fastcall sub_407505(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406DFB(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4224303, "sub_40752F", "__int64 __fastcall sub_40752F(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406DFB(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4224345, "sub_407559", "__int64 __fastcall sub_407559(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406DFB(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4224387, "sub_407583", "__int64 __fastcall sub_407583(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406DFB(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4224507, "sub_4075FB", "__int64 __fastcall sub_4075FB(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406DFB(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4224627, "sub_407673", "__int64 __fastcall sub_407673(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406DFB(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4224747, "sub_4076EB", "__int64 __fastcall sub_4076EB(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406DFB(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4224867, "sub_407763", "__int64 __fastcall sub_407763(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406E8A(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4224909, "sub_40778D", "__int64 __fastcall sub_40778D(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406E8A(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4224951, "sub_4077B7", "__int64 __fastcall sub_4077B7(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406E8A(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4224993, "sub_4077E1", "__int64 __fastcall sub_4077E1(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406E8A(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4225035, "sub_40780B", "__int64 __fastcall sub_40780B(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406E8A(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4225155, "sub_407883", "__int64 __fastcall sub_407883(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406E8A(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4225275, "sub_4078FB", "__int64 __fastcall sub_4078FB(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406E8A(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4225395, "sub_407973", "__int64 __fastcall sub_407973(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406E8A(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4225515, "sub_4079EB", "__int64 __fastcall sub_4079EB(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406EFD(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4225557, "sub_407A15", "__int64 __fastcall sub_407A15(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406EFD(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4225599, "sub_407A3F", "__int64 __fastcall sub_407A3F(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406EFD(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4225641, "sub_407A69", "__int64 __fastcall sub_407A69(_QWORD *a1, _QWORD *a2)\n{\n  return sub_406EFD(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4225683, "sub_407A93", "__int64 __fastcall sub_407A93(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406EFD(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4225803, "sub_407B0B", "__int64 __fastcall sub_407B0B(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406EFD(a1, a2, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4225923, "sub_407B83", "__int64 __fastcall sub_407B83(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406EFD(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))sub_406C1F);\n}\n"], [4226043, "sub_407BFB", "__int64 __fastcall sub_407BFB(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406EFD(a2, a1, (__int64 (__fastcall *)(_QWORD, _QWORD))strcmp);\n}\n"], [4226163, "sub_407C73", "__int64 __fastcall sub_407C73(const char **a1, const char **a2)\n{\n  return sub_406F2D(a1, a2, sub_406C1F);\n}\n"], [4226205, "sub_407C9D", "__int64 __fastcall sub_407C9D(const char **a1, const char **a2)\n{\n  return sub_406F2D(a1, a2, (__int64 (__fastcall *)(const char *, const char *))strcmp);\n}\n"], [4226247, "sub_407CC7", "__int64 __fastcall sub_407CC7(const char **a1, const char **a2)\n{\n  return sub_406F2D(a2, a1, sub_406C1F);\n}\n"], [4226289, "sub_407CF1", "__int64 __fastcall sub_407CF1(const char **a1, const char **a2)\n{\n  return sub_406F2D(a2, a1, (__int64 (__fastcall *)(const char *, const char *))strcmp);\n}\n"], [4226331, "sub_407D1B", "__int64 __fastcall sub_407D1B(const char **a1, const char **a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406F2D(a1, a2, sub_406C1F);\n}\n"], [4226451, "sub_407D93", "__int64 __fastcall sub_407D93(const char **a1, const char **a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406F2D(a1, a2, (__int64 (__fastcall *)(const char *, const char *))strcmp);\n}\n"], [4226571, "sub_407E0B", "__int64 __fastcall sub_407E0B(const char **a1, const char **a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406F2D(a2, a1, sub_406C1F);\n}\n"], [4226691, "sub_407E83", "__int64 __fastcall sub_407E83(const char **a1, const char **a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_406F2D(a2, a1, (__int64 (__fastcall *)(const char *, const char *))strcmp);\n}\n"], [4226811, "sub_407EFB", "__int64 __fastcall sub_407EFB(_QWORD *a1, _QWORD *a2)\n{\n  return sub_40BFAE(*a1, *a2);\n}\n"], [4226854, "sub_407F26", "__int64 __fastcall sub_407F26(_QWORD *a1, _QWORD *a2)\n{\n  return sub_407EFB(a1, a2);\n}\n"], [4226891, "sub_407F4B", "__int64 __fastcall sub_407F4B(_QWORD *a1, _QWORD *a2)\n{\n  return sub_407EFB(a2, a1);\n}\n"], [4226928, "sub_407F70", "__int64 __fastcall sub_407F70(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_407EFB(a1, a2);\n}\n"], [4227043, "sub_407FE3", "__int64 __fastcall sub_407FE3(_QWORD *a1, _QWORD *a2)\n{\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v3 = sub_4068B3((__int64)a1);\n  v4 = sub_4068B3((__int64)a2);\n  if ( v3 && !v4 )\n    return 0xFFFFFFFFLL;\n  if ( !v3 && v4 )\n    return 1LL;\n  return sub_407EFB(a2, a1);\n}\n"], [4227158, "sub_408056", "__int64 sub_408056()\n{\n  __int64 result; // rax\n  unsigned __int64 i; // [rsp+0h] [rbp-8h]\n\n  for ( i = 0LL; ; ++i )\n  {\n    result = qword_61D638;\n    if ( i >= qword_61D638 )\n      break;\n    *((_QWORD *)qword_61D640 + i) = qword_61D628 + 192 * i;\n  }\n  return result;\n}\n"], [4227241, "sub_4080A9", "__int64 sub_4080A9()\n{\n  __int64 result; // rax\n  int v1; // eax\n  unsigned __int8 v2; // [rsp+Fh] [rbp-1h]\n\n  if ( qword_61D638 + ((unsigned __int64)qword_61D638 >> 1) > qword_61D648 )\n  {\n    free(qword_61D640);\n    qword_61D640 = (void *)sub_414840(qword_61D638, 24LL);\n    qword_61D648 = 3 * qword_61D638;\n  }\n  sub_408056();\n  result = (unsigned int)dword_61D6A4;\n  if ( dword_61D6A4 != -1 )\n  {\n    if ( _setjmp(env) )\n    {\n      v2 = 1;\n      if ( dword_61D6A4 == 3 )\n        __assert_fail(\"sort_type != sort_version\", \"../../src/src/ls.c\", 0xD63u, \"sort_files\");\n      sub_408056();\n    }\n    else\n    {\n      v2 = 0;\n    }\n    if ( dword_61D6A4 == 4 )\n      v1 = dword_61D6A0;\n    else\n      v1 = 0;\n    result = sub_40FC57(\n               qword_61D640,\n               qword_61D638,\n               *(&off_416F80[8 * (unsigned int)(v1 + dword_61D6A4)]\n               + 4 * v2\n               + 2 * (unsigned __int8)byte_61D6A8\n               + (unsigned __int8)byte_61D6E2));\n  }\n  return result;\n}\n"], [4227555, "sub_4081E3", "__int64 sub_4081E3()\n{\n  __int64 result; // rax\n  unsigned __int64 i; // [rsp+8h] [rbp-8h]\n  unsigned __int64 j; // [rsp+8h] [rbp-8h]\n\n  result = (unsigned int)dword_61D69C;\n  if ( dword_61D69C == 2 )\n    return sub_40A418();\n  if ( (unsigned int)dword_61D69C > 2 )\n  {\n    if ( dword_61D69C == 3 )\n    {\n      result = sub_40A56F();\n    }\n    else if ( dword_61D69C == 4 )\n    {\n      result = sub_40A6C8();\n    }\n  }\n  else if ( dword_61D69C )\n  {\n    if ( dword_61D69C == 1 )\n    {\n      for ( i = 0LL; ; ++i )\n      {\n        result = qword_61D638;\n        if ( i >= qword_61D638 )\n          break;\n        sub_409A65(*((_QWORD *)qword_61D640 + i), 0LL);\n        putchar_unlocked(10);\n      }\n    }\n  }\n  else\n  {\n    for ( j = 0LL; ; ++j )\n    {\n      result = qword_61D638;\n      if ( j >= qword_61D638 )\n        break;\n      sub_402CFD();\n      sub_408865(*((_QWORD *)qword_61D640 + j));\n      putchar_unlocked(10);\n      ++qword_61D7E0;\n    }\n  }\n  return result;\n}\n"], [4227796, "sub_4082D4", "__int64 __fastcall sub_4082D4(__int64 a1, __int64 a2, const char *a3, __int64 a4, unsigned int a5, unsigned int a6)\n{\n  char *v6; // rax\n  char *haystack; // [rsp+18h] [rbp-158h]\n  char *v12; // [rsp+30h] [rbp-140h]\n  char *v13; // [rsp+38h] [rbp-138h]\n  char *dest; // [rsp+40h] [rbp-130h]\n  char v15[264]; // [rsp+50h] [rbp-120h] BYREF\n  unsigned __int64 v16; // [rsp+158h] [rbp-18h]\n\n  haystack = (char *)a3;\n  v16 = __readfsqword(0x28u);\n  v12 = (char *)a3;\n  if ( qword_61E0B0 )\n  {\n    v13 = strstr(a3, \"%b\");\n    if ( v13 )\n    {\n      if ( strlen(haystack) <= 0x65 )\n      {\n        v12 = v15;\n        v6 = (char *)mempcpy(v15, haystack, v13 - haystack);\n        dest = stpcpy(v6, &byte_61D920[161 * *(int *)(a4 + 16)]);\n        strcpy(dest, v13 + 2);\n      }\n    }\n  }\n  return sub_413FA0(a1, a2, v12, a4, a5, a6);\n}\n"], [4228234, "sub_40848A", "__int64 sub_40848A()\n{\n  time_t timer; // [rsp+8h] [rbp-428h] BYREF\n  struct tm *v2; // [rsp+10h] [rbp-420h]\n  __int64 v3; // [rsp+18h] [rbp-418h]\n  char v4[1016]; // [rsp+20h] [rbp-410h] BYREF\n  unsigned __int64 v5; // [rsp+418h] [rbp-18h]\n\n  v5 = __readfsqword(0x28u);\n  if ( dword_61D534 < 0 )\n  {\n    timer = 0LL;\n    v2 = localtime(&timer);\n    if ( v2 )\n    {\n      v3 = sub_4082D4((__int64)v4, 1001LL, haystack, (__int64)v2, 0, 0);\n      if ( v3 )\n        dword_61D534 = sub_40F5CF(v4, v3, 0LL);\n    }\n    if ( dword_61D534 < 0 )\n      dword_61D534 = 0;\n  }\n  return (unsigned int)dword_61D534;\n}\n"], [4228473, "sub_408579", "__int64 __fastcall sub_408579(const char *a1, __int64 a2, int a3)\n{\n  int v3; // eax\n  __int64 result; // rax\n  int v7; // [rsp+20h] [rbp-10h]\n  int v8; // [rsp+24h] [rbp-Ch]\n  size_t v9; // [rsp+28h] [rbp-8h]\n\n  if ( a1 )\n  {\n    v8 = a3 - sub_40F59D(a1, 0LL);\n    v3 = 0;\n    if ( v8 >= 0 )\n      v3 = v8;\n    v7 = v3;\n    fputs_unlocked(a1, stdout);\n    v9 = v7 + strlen(a1);\n    do\n      putchar_unlocked(32);\n    while ( v7-- );\n  }\n  else\n  {\n    printf(\"%*lu \", a3, a2);\n    v9 = a3;\n  }\n  result = qword_61D7E0 + v9 + 1;\n  qword_61D7E0 = result;\n  return result;\n}\n"], [4228674, "sub_408642", "__int64 __fastcall sub_408642(unsigned int a1, int a2, char a3)\n{\n  const char *v3; // rax\n\n  if ( a3 != 1 )\n  {\n    v3 = \"?\";\n  }\n  else if ( byte_61D6AA )\n  {\n    v3 = 0LL;\n  }\n  else\n  {\n    v3 = (const char *)sub_40E9E0(a1);\n  }\n  return sub_408579(v3, a1, a2);\n}\n"], [4228764, "sub_40869C", "__int64 __fastcall sub_40869C(unsigned int a1, int a2, char a3)\n{\n  const char *v3; // rax\n\n  if ( a3 != 1 )\n  {\n    v3 = \"?\";\n  }\n  else if ( byte_61D6AA )\n  {\n    v3 = 0LL;\n  }\n  else\n  {\n    v3 = (const char *)sub_40EC1C(a1);\n  }\n  return sub_408579(v3, a1, a2);\n}\n"], [4228854, "sub_4086F6", "size_t __fastcall sub_4086F6(__int64 a1, __int64 a2)\n{\n  size_t result; // rax\n  int v3; // [rsp+1Ch] [rbp-24h]\n  char s[24]; // [rsp+20h] [rbp-20h] BYREF\n  unsigned __int64 v5; // [rsp+38h] [rbp-8h]\n\n  v5 = __readfsqword(0x28u);\n  if ( a1 )\n  {\n    v3 = sub_40F59D(a1, 0LL);\n    result = 0LL;\n    if ( v3 >= 0 )\n      result = (unsigned int)v3;\n  }\n  else\n  {\n    sprintf(s, \"%lu\", a2);\n    result = strlen(s);\n  }\n  return result;\n}\n"], [4228987, "sub_40877B", "size_t __fastcall sub_40877B(unsigned int a1)\n{\n  __int64 v1; // rax\n\n  if ( byte_61D6AA )\n    v1 = 0LL;\n  else\n    v1 = sub_40E9E0(a1);\n  return sub_4086F6(v1, a1);\n}\n"], [4229048, "sub_4087B8", "size_t __fastcall sub_4087B8(unsigned int a1)\n{\n  __int64 v1; // rax\n\n  if ( byte_61D6AA )\n    v1 = 0LL;\n  else\n    v1 = sub_40EC1C(a1);\n  return sub_4086F6(v1, a1);\n}\n"], [4229109, "sub_4087F5", "const char *__fastcall sub_4087F5(__int64 a1, unsigned __int64 a2, __int64 a3)\n{\n  const char *result; // rax\n\n  if ( a2 <= 0x14 )\n    __assert_fail(\n      \"(((((sizeof (uintmax_t) * 8 - (! ((__typeof__ (uintmax_t)) 0 < (__typeof__ (uintmax_t)) -1))) * 146 + 484) / 485) \"\n      \"+ (! ((__typeof__ (uintmax_t)) 0 < (__typeof__ (uintmax_t)) -1))) + 1) <= buflen\",\n      \"../../src/src/ls.c\",\n      0xE2Eu,\n      \"format_inode\");\n  if ( *(_BYTE *)(a3 + 176) && *(_QWORD *)(a3 + 24) )\n    result = (const char *)sub_40EF8A(*(_QWORD *)(a3 + 24), a1);\n  else\n    result = \"?\";\n  return result;\n}\n"], [4229221, "sub_408865", "unsigned __int64 __fastcall sub_408865(__int64 a1)\n{\n  __int64 v1; // rdx\n  __int64 v2; // rdx\n  __int64 v3; // rdx\n  const char *v4; // rax\n  const char *v5; // rax\n  int v6; // ebx\n  char *v7; // rax\n  char *v8; // rax\n  char *v9; // rdx\n  const char *v10; // rax\n  unsigned int v11; // eax\n  const char *v12; // rbx\n  int v13; // er12\n  unsigned int v14; // eax\n  const char *v15; // rdx\n  int v16; // eax\n  const char *v17; // rax\n  __int64 v18; // r12\n  unsigned int v19; // ebx\n  __int64 v20; // rax\n  int v21; // ebx\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rdx\n  bool v25; // al\n  char *v26; // rax\n  const char *v27; // rbx\n  int v28; // eax\n  int i; // [rsp+1Ch] [rbp-1184h]\n  int j; // [rsp+20h] [rbp-1180h]\n  int v32; // [rsp+24h] [rbp-117Ch]\n  __int64 v33; // [rsp+28h] [rbp-1178h]\n  char *s; // [rsp+30h] [rbp-1170h]\n  char *sa; // [rsp+30h] [rbp-1170h]\n  char *sb; // [rsp+30h] [rbp-1170h]\n  const char *v37; // [rsp+38h] [rbp-1168h]\n  const char *v38; // [rsp+40h] [rbp-1160h]\n  struct tm *v39; // [rsp+48h] [rbp-1158h]\n  __int64 v40; // [rsp+58h] [rbp-1148h]\n  time_t timer; // [rsp+60h] [rbp-1140h] BYREF\n  __int64 v42; // [rsp+68h] [rbp-1138h]\n  __int64 v43; // [rsp+70h] [rbp-1130h]\n  __int64 v44; // [rsp+78h] [rbp-1128h]\n  char v45; // [rsp+80h] [rbp-1120h] BYREF\n  _BYTE v46[7]; // [rsp+81h] [rbp-111Fh] BYREF\n  char v47; // [rsp+8Ah] [rbp-1116h]\n  char v48; // [rsp+8Bh] [rbp-1115h]\n  char v49[32]; // [rsp+90h] [rbp-1110h] BYREF\n  char v50[656]; // [rsp+B0h] [rbp-10F0h] BYREF\n  char v51[3656]; // [rsp+340h] [rbp-E60h] BYREF\n  unsigned __int64 v52; // [rsp+1188h] [rbp-18h]\n\n  v52 = __readfsqword(0x28u);\n  if ( *(_BYTE *)(a1 + 176) )\n  {\n    sub_40BA8C(a1 + 16, &v45);\n  }\n  else\n  {\n    v45 = byte_415E69[*(unsigned int *)(a1 + 160)];\n    memset(v46, 63, 0xAuLL);\n    v48 = 0;\n  }\n  if ( byte_61D671 != 1 )\n  {\n    v47 = 0;\n  }\n  else if ( *(_DWORD *)(a1 + 180) == 1 )\n  {\n    v47 = 46;\n  }\n  else if ( *(_DWORD *)(a1 + 180) == 2 )\n  {\n    v47 = 43;\n  }\n  if ( dword_61D6A0 == 1 )\n  {\n    timer = sub_4027CB(a1 + 16);\n    v42 = v1;\n  }\n  else if ( dword_61D6A0 )\n  {\n    if ( dword_61D6A0 != 2 )\n      abort();\n    timer = sub_4027B5(a1 + 16);\n    v42 = v3;\n  }\n  else\n  {\n    timer = sub_4027E1(a1 + 16);\n    v42 = v2;\n  }\n  s = v51;\n  if ( byte_61D6D9 )\n  {\n    v4 = sub_4087F5((__int64)v50, 0x15uLL, a1);\n    sprintf(v51, \"%*s \", dword_61D674, v4);\n    s = &v51[strlen(v51)];\n  }\n  if ( byte_61D6AB )\n  {\n    if ( *(_BYTE *)(a1 + 176) != 1 )\n      v5 = \"?\";\n    else\n      v5 = (const char *)sub_40DD65(*(_QWORD *)(a1 + 80), v50, (unsigned int)dword_61D6AC, 512LL, qword_61D6B0);\n    v37 = v5;\n    v6 = dword_61D678;\n    for ( i = v6 - sub_40F59D(v5, 0LL); i > 0; --i )\n    {\n      v7 = s++;\n      *v7 = 32;\n    }\n    do\n    {\n      v8 = s++;\n      v9 = (char *)v37++;\n      *v8 = *v9;\n    }\n    while ( *v8 );\n    *(s - 1) = 32;\n  }\n  if ( *(_BYTE *)(a1 + 176) != 1 )\n    v10 = \"?\";\n  else\n    v10 = (const char *)sub_40EF8A(*(_QWORD *)(a1 + 32), v50);\n  sprintf(s, \"%s %*s \", &v45, dword_61D67C, v10);\n  sa = &s[strlen(s)];\n  if ( byte_61D6B8 )\n  {\n    fwrite_unlocked(\"  \", 1uLL, 2uLL, stdout);\n    qword_61D7E0 += 2LL;\n  }\n  if ( byte_61D382 || byte_61D383 || byte_61D6A9 || byte_61D670 )\n  {\n    fputs_unlocked(v51, stdout);\n    qword_61D7E0 += sa - v51;\n    if ( byte_61D382 )\n      sub_408642(*(_DWORD *)(a1 + 44), dword_61D684, *(_BYTE *)(a1 + 176));\n    if ( byte_61D383 )\n      sub_40869C(*(_DWORD *)(a1 + 48), dword_61D688, *(_BYTE *)(a1 + 176));\n    if ( byte_61D6A9 )\n      sub_408642(*(_DWORD *)(a1 + 44), dword_61D68C, *(_BYTE *)(a1 + 176));\n    if ( byte_61D670 )\n      sub_408579(*(const char **)(a1 + 168), 0LL, dword_61D680);\n    sa = v51;\n  }\n  if ( *(_BYTE *)(a1 + 176) && ((*(_DWORD *)(a1 + 40) & 0xF000) == 0x2000 || (*(_DWORD *)(a1 + 40) & 0xF000) == 24576) )\n  {\n    v32 = -2 - dword_61D690 - dword_61D694 + dword_61D698;\n    v11 = gnu_dev_minor(*(_QWORD *)(a1 + 56));\n    v12 = (const char *)sub_40EF8A(v11, v50);\n    v13 = dword_61D694;\n    v14 = gnu_dev_major(*(_QWORD *)(a1 + 56));\n    v15 = (const char *)sub_40EF8A(v14, v49);\n    v16 = 0;\n    if ( v32 >= 0 )\n      v16 = v32;\n    sprintf(sa, \"%*s, %*s \", v16 + dword_61D690, v15, v13, v12);\n    sa += dword_61D698 + 1;\n  }\n  else\n  {\n    if ( *(_BYTE *)(a1 + 176) != 1 )\n    {\n      v17 = \"?\";\n    }\n    else\n    {\n      v18 = qword_61D388;\n      v19 = dword_61D6AC;\n      v20 = sub_405ACA(*(_QWORD *)(a1 + 64));\n      v17 = (const char *)sub_40DD65(v20, v50, v19, 1LL, v18);\n    }\n    v38 = v17;\n    v21 = dword_61D698;\n    for ( j = v21 - sub_40F59D(v17, 0LL); j > 0; --j )\n    {\n      v22 = sa++;\n      *v22 = 32;\n    }\n    do\n    {\n      v23 = sa++;\n      v24 = (char *)v38++;\n      *v23 = *v24;\n    }\n    while ( *v23 );\n    *(sa - 1) = 32;\n  }\n  v39 = localtime(&timer);\n  v33 = 0LL;\n  *sa = 1;\n  if ( *(_BYTE *)(a1 + 176) && v39 )\n  {\n    if ( (int)sub_402583(qword_61D660, qword_61D668, timer, v42) < 0 )\n      sub_40C1E6(&qword_61D660);\n    v43 = qword_61D660 - 15778476;\n    v44 = qword_61D668;\n    v25 = (int)sub_402583(qword_61D660 - 15778476, qword_61D668, timer, v42) < 0\n       && (int)sub_402583(timer, v42, qword_61D660, qword_61D668) < 0;\n    v33 = sub_4082D4((__int64)sa, 1001LL, (&haystack)[v25], (__int64)v39, 0, v42);\n  }\n  if ( !v33 && *sa )\n  {\n    if ( *(_BYTE *)(a1 + 176) != 1 )\n      v27 = \"?\";\n    else\n      v27 = (const char *)sub_402782(timer, (__int64)v50);\n    v28 = sub_40848A();\n    sprintf(sa, \"%*s \", v28, v27);\n    sb = &sa[strlen(sa)];\n  }\n  else\n  {\n    v26 = &sa[v33];\n    sb = &sa[v33 + 1];\n    *v26 = 32;\n    *sb = 0;\n  }\n  fputs_unlocked(v51, stdout);\n  qword_61D7E0 += sb - v51;\n  v40 = sub_409818(a1, 0LL, &stru_61D800, sb - v51);\n  if ( *(_DWORD *)(a1 + 160) == 6 )\n  {\n    if ( *(_QWORD *)(a1 + 8) )\n    {\n      fwrite_unlocked(\" -> \", 1uLL, 4uLL, stdout);\n      qword_61D7E0 += 4LL;\n      sub_409818(a1, 1LL, 0LL, sb - v51 + v40 + 4);\n      if ( dword_61D6BC )\n        sub_409D72(1LL, *(unsigned int *)(a1 + 164), 0LL);\n    }\n  }\n  else if ( dword_61D6BC )\n  {\n    sub_409D72(*(unsigned __int8 *)(a1 + 176), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 160));\n  }\n  return __readfsqword(0x28u) ^ v52;\n}\n"], [4231902, "sub_4092DE", "size_t __fastcall sub_4092DE(FILE *a1, __int64 a2, __int64 a3, size_t *a4)\n{\n  void *v4; // rsp\n  int v5; // eax\n  char *v6; // rax\n  char *v7; // rdx\n  char *v8; // rax\n  char *v9; // rax\n  char *v10; // rax\n  char *v11; // rdx\n  char *v12; // rax\n  const unsigned __int16 *v13; // rbx\n  const unsigned __int16 *v14; // rbx\n  __int64 v17; // [rsp+8h] [rbp-20A8h] BYREF\n  __int64 v18; // [rsp+10h] [rbp-20A0h]\n  FILE *stream; // [rsp+18h] [rbp-2098h]\n  wchar_t pwc; // [rsp+20h] [rbp-2090h] BYREF\n  int v21; // [rsp+24h] [rbp-208Ch]\n  size_t n; // [rsp+28h] [rbp-2088h]\n  void *ptr; // [rsp+30h] [rbp-2080h]\n  size_t v24; // [rsp+38h] [rbp-2078h]\n  char *s; // [rsp+40h] [rbp-2070h]\n  char *v26; // [rsp+48h] [rbp-2068h]\n  size_t v27; // [rsp+50h] [rbp-2060h]\n  unsigned __int8 *v28; // [rsp+58h] [rbp-2058h]\n  unsigned __int8 *v29; // [rsp+60h] [rbp-2050h]\n  char *v30; // [rsp+68h] [rbp-2048h]\n  unsigned __int64 v31; // [rsp+70h] [rbp-2040h]\n  unsigned __int64 v32; // [rsp+78h] [rbp-2038h]\n  mbstate_t p; // [rsp+80h] [rbp-2030h] BYREF\n  char v34[8200]; // [rsp+90h] [rbp-2020h] BYREF\n  unsigned __int64 v35; // [rsp+2098h] [rbp-18h]\n\n  stream = a1;\n  v18 = a2;\n  v17 = a3;\n  v35 = __readfsqword(0x28u);\n  n = sub_410C65(v34, 0x2000LL, a2, -1LL, a3);\n  if ( n > 0x1FFF )\n  {\n    v4 = alloca(16 * ((n + 31) / 0x10));\n    ptr = (void *)(16 * (((unsigned __int64)&v17 + 7) >> 4));\n    sub_410C65(ptr, n + 1, v18, -1LL, v17);\n  }\n  else\n  {\n    ptr = v34;\n  }\n  if ( byte_61D6F8 )\n  {\n    if ( __ctype_get_mb_cur_max() > 1 )\n    {\n      s = (char *)ptr;\n      v30 = (char *)ptr + n;\n      v26 = (char *)ptr;\n      v24 = 0LL;\n      while ( 1 )\n      {\nLABEL_29:\n        if ( s >= v30 )\n        {\n          n = v26 - (_BYTE *)ptr;\n          goto LABEL_45;\n        }\n        v5 = *s;\n        if ( v5 > 63 )\n        {\n          if ( v5 < 65 || v5 > 95 && (unsigned int)(v5 - 97) > 0x1D )\n            goto LABEL_15;\nLABEL_14:\n          v6 = v26++;\n          v7 = s++;\n          *v6 = *v7;\n          ++v24;\n        }\n        else\n        {\n          if ( v5 >= 37 || (unsigned int)(v5 - 32) <= 3 )\n            goto LABEL_14;\nLABEL_15:\n          p = 0LL;\n          while ( 1 )\n          {\n            v27 = mbrtowc(&pwc, s, v30 - s, &p);\n            if ( v27 == -1LL )\n            {\n              ++s;\n              v8 = v26++;\n              *v8 = 63;\n              ++v24;\n              goto LABEL_29;\n            }\n            if ( v27 == -2LL )\n              break;\n            if ( !v27 )\n              v27 = 1LL;\n            v21 = wcwidth(pwc);\n            if ( v21 < 0 )\n            {\n              s += v27;\n              v12 = v26++;\n              *v12 = 63;\n              ++v24;\n            }\n            else\n            {\n              while ( v27 )\n              {\n                v10 = v26++;\n                v11 = s++;\n                *v10 = *v11;\n                --v27;\n              }\n              v24 += v21;\n            }\n            if ( mbsinit(&p) )\n              goto LABEL_29;\n          }\n          s = v30;\n          v9 = v26++;\n          *v9 = 63;\n          ++v24;\n        }\n      }\n    }\n    v28 = (unsigned __int8 *)ptr;\n    v31 = (unsigned __int64)ptr + n;\n    while ( (unsigned __int64)v28 < v31 )\n    {\n      v13 = *__ctype_b_loc();\n      if ( (v13[(unsigned __int8)sub_4025DE(*v28)] & 0x4000) == 0 )\n        *v28 = 63;\n      ++v28;\n    }\n    v24 = n;\n  }\n  else if ( a4 )\n  {\n    if ( __ctype_get_mb_cur_max() <= 1 )\n    {\n      v29 = (unsigned __int8 *)ptr;\n      v32 = (unsigned __int64)ptr + n;\n      v24 = 0LL;\n      while ( (unsigned __int64)v29 < v32 )\n      {\n        v14 = *__ctype_b_loc();\n        if ( (v14[(unsigned __int8)sub_4025DE(*v29)] & 0x4000) != 0 )\n          ++v24;\n        ++v29;\n      }\n    }\n    else\n    {\n      v24 = (int)sub_40F5CF(ptr, n, 0LL);\n    }\n  }\nLABEL_45:\n  if ( stream )\n    fwrite_unlocked(ptr, 1uLL, n, stream);\n  if ( a4 )\n    *a4 = v24;\n  return n;\n}\n"], [4233240, "sub_409818", "size_t __fastcall sub_409818(__int64 *a1, unsigned __int8 a2, struct obstack *a3, unsigned __int64 a4)\n{\n  __int64 v4; // rax\n  bool v5; // al\n  bool v9; // [rsp+27h] [rbp-39h]\n  __int64 v10; // [rsp+30h] [rbp-30h]\n  size_t v11; // [rsp+40h] [rbp-20h]\n\n  if ( a2 )\n    v4 = a1[1];\n  else\n    v4 = *a1;\n  v10 = v4;\n  v5 = byte_61D6C0 && ((unsigned __int8)sub_409DC7(a1, a2) || sub_402C5C(4u));\n  v9 = v5;\n  if ( a3 && byte_61D6B8 )\n  {\n    if ( a3->next_free + 8 > a3->chunk_limit )\n      _obstack_newchunk(a3, 8);\n    memcpy(a3->next_free, &qword_61D7E0, 8uLL);\n    a3->next_free += 8;\n  }\n  v11 = sub_4092DE(stdout, v10, qword_61D700, 0LL);\n  qword_61D7E0 += v11;\n  if ( a3 && byte_61D6B8 )\n  {\n    if ( a3->next_free + 8 > a3->chunk_limit )\n      _obstack_newchunk(a3, 8);\n    memcpy(a3->next_free, &qword_61D7E0, 8uLL);\n    a3->next_free += 8;\n  }\n  if ( v9 )\n  {\n    sub_402D78();\n    sub_409A29();\n    if ( a4 / qword_61D720 != (a4 + v11 - 1) / qword_61D720 )\n      sub_40A1D5(&unk_61D510);\n  }\n  return v11;\n}\n"], [4233769, "sub_409A29", "__int64 sub_409A29()\n{\n  if ( qword_61D3C8 )\n    return sub_40A1D5(&unk_61D3C0);\n  sub_40A1D5(qword_61D3A0);\n  sub_40A1D5(&unk_61D3D0);\n  return sub_40A1D5(&qword_61D3B0);\n}\n"], [4233829, "sub_409A65", "size_t __fastcall sub_409A65(__int64 a1, unsigned __int64 a2)\n{\n  const char *v2; // rdx\n  int v3; // eax\n  const char *v4; // rdx\n  int v5; // eax\n  int v6; // eax\n  size_t v8; // [rsp+18h] [rbp-2B8h]\n  char v9[664]; // [rsp+20h] [rbp-2B0h] BYREF\n  unsigned __int64 v10; // [rsp+2B8h] [rbp-18h]\n\n  v10 = __readfsqword(0x28u);\n  sub_402CFD();\n  if ( byte_61D6D9 )\n  {\n    v2 = sub_4087F5((__int64)v9, 0x28CuLL, a1);\n    if ( dword_61D69C == 4 )\n      v3 = 0;\n    else\n      v3 = dword_61D674;\n    printf(\"%*s \", v3, v2);\n  }\n  if ( byte_61D6AB )\n  {\n    if ( *(_BYTE *)(a1 + 176) != 1 )\n      v4 = \"?\";\n    else\n      v4 = (const char *)sub_40DD65(*(_QWORD *)(a1 + 80), v9, (unsigned int)dword_61D6AC, 512LL, qword_61D6B0);\n    if ( dword_61D69C == 4 )\n      v5 = 0;\n    else\n      v5 = dword_61D678;\n    printf(\"%*s \", v5, v4);\n  }\n  if ( byte_61D670 )\n  {\n    if ( dword_61D69C == 4 )\n      v6 = 0;\n    else\n      v6 = dword_61D680;\n    printf(\"%*s \", v6, *(const char **)(a1 + 168));\n  }\n  v8 = sub_409818((__int64 *)a1, 0, 0LL, a2);\n  if ( dword_61D6BC )\n    v8 += (unsigned __int8)sub_409D72(\n                             *(unsigned __int8 *)(a1 + 176),\n                             *(unsigned int *)(a1 + 40),\n                             *(unsigned int *)(a1 + 160));\n  return v8;\n}\n"], [4234301, "sub_409C3D", "__int64 __fastcall sub_409C3D(char a1, __int16 a2, int a3)\n{\n  bool v3; // al\n  bool v4; // al\n  bool v5; // al\n  bool v6; // al\n  bool v7; // al\n  bool v8; // al\n  unsigned __int8 v10; // [rsp+1Bh] [rbp-1h]\n\n  if ( a1 )\n    v3 = (a2 & 0xF000) == 0x8000;\n  else\n    v3 = a3 == 5;\n  if ( v3 )\n  {\n    if ( a1 && dword_61D6BC == 3 && (a2 & 0x49) != 0 )\n      v10 = 42;\n    else\n      v10 = 0;\n  }\n  else\n  {\n    if ( a1 )\n    {\n      v4 = (a2 & 0xF000) == 0x4000;\n    }\n    else\n    {\n      v5 = a3 == 3 || a3 == 9;\n      v4 = v5;\n    }\n    if ( v4 )\n    {\n      v10 = 47;\n    }\n    else if ( dword_61D6BC == 1 )\n    {\n      v10 = 0;\n    }\n    else\n    {\n      if ( a1 )\n        v6 = (a2 & 0xF000) == 40960;\n      else\n        v6 = a3 == 6;\n      if ( v6 )\n      {\n        v10 = 64;\n      }\n      else\n      {\n        if ( a1 )\n          v7 = (a2 & 0xF000) == 4096;\n        else\n          v7 = a3 == 1;\n        if ( v7 )\n        {\n          v10 = 124;\n        }\n        else\n        {\n          if ( a1 )\n            v8 = (a2 & 0xF000) == 49152;\n          else\n            v8 = a3 == 7;\n          if ( v8 )\n            v10 = 61;\n          else\n            v10 = 0;\n        }\n      }\n    }\n  }\n  return v10;\n}\n"], [4234610, "sub_409D72", "bool __fastcall sub_409D72(char a1, __int16 a2, int a3)\n{\n  char v4; // [rsp+1Fh] [rbp-1h]\n\n  v4 = sub_409C3D(a1, a2, a3);\n  if ( v4 )\n  {\n    putchar_unlocked(v4);\n    ++qword_61D7E0;\n  }\n  return v4 != 0;\n}\n"], [4234695, "sub_409DC7", "__int64 __fastcall sub_409DC7(__int64 a1, char a2)\n{\n  int v2; // eax\n  int v3; // eax\n  int v4; // eax\n  __int64 v5; // rax\n  unsigned int v7; // [rsp+14h] [rbp-2Ch]\n  int v8; // [rsp+18h] [rbp-28h]\n  int v9; // [rsp+1Ch] [rbp-24h]\n  __int64 i; // [rsp+20h] [rbp-20h]\n  char *s; // [rsp+28h] [rbp-18h]\n  char *sa; // [rsp+28h] [rbp-18h]\n  size_t v13; // [rsp+30h] [rbp-10h]\n  __int64 v14; // [rsp+38h] [rbp-8h]\n\n  if ( a2 )\n  {\n    s = *(char **)(a1 + 8);\n    v8 = *(_DWORD *)(a1 + 164);\n    if ( *(_BYTE *)(a1 + 177) )\n      v2 = 0;\n    else\n      v2 = -1;\n    v9 = v2;\n  }\n  else\n  {\n    s = *(char **)a1;\n    if ( byte_61D650 && *(_BYTE *)(a1 + 177) )\n      v3 = *(_DWORD *)(a1 + 164);\n    else\n      v3 = *(_DWORD *)(a1 + 40);\n    LOWORD(v8) = v3;\n    v9 = *(unsigned __int8 *)(a1 + 177);\n  }\n  if ( v9 == -1 && qword_61D468 )\n  {\n    v7 = 12;\n  }\n  else if ( *(_BYTE *)(a1 + 176) != 1 )\n  {\n    v7 = dword_61D540[*(unsigned int *)(a1 + 160)];\n  }\n  else\n  {\n    switch ( v8 & 0xF000 )\n    {\n      case 32768:\n        v7 = 5;\n        if ( (v8 & 0x800) != 0 && sub_402C5C(0x10u) )\n        {\n          v7 = 16;\n        }\n        else if ( (v8 & 0x400) != 0 && sub_402C5C(0x11u) )\n        {\n          v7 = 17;\n        }\n        else if ( sub_402C5C(0x15u) && *(_BYTE *)(a1 + 184) )\n        {\n          v7 = 21;\n        }\n        else if ( (v8 & 0x49) != 0 && sub_402C5C(0xEu) )\n        {\n          v7 = 14;\n        }\n        else if ( *(_QWORD *)(a1 + 32) > 1uLL && sub_402C5C(0x16u) )\n        {\n          v7 = 22;\n        }\n        break;\n      case 16384:\n        v7 = 6;\n        if ( (v8 & 0x200) != 0 && (v8 & 2) != 0 && sub_402C5C(0x14u) )\n        {\n          v7 = 20;\n        }\n        else if ( (v8 & 2) != 0 && sub_402C5C(0x13u) )\n        {\n          v7 = 19;\n        }\n        else if ( (v8 & 0x200) != 0 && sub_402C5C(0x12u) )\n        {\n          v7 = 18;\n        }\n        break;\n      case 40960:\n        if ( !v9 && (!strncmp(off_61D418, \"target\", 6uLL) || qword_61D478) )\n          v4 = 13;\n        else\n          v4 = 7;\n        v7 = v4;\n        break;\n      case 4096:\n        v7 = 8;\n        break;\n      case 49152:\n        v7 = 9;\n        break;\n      case 24576:\n        v7 = 10;\n        break;\n      case 8192:\n        v7 = 11;\n        break;\n      default:\n        v7 = 13;\n        break;\n    }\n  }\n  i = 0LL;\n  if ( v7 == 5 )\n  {\n    v13 = strlen(s);\n    sa = &s[v13];\n    for ( i = qword_61D6C8;\n          i && (*(_QWORD *)i > v13 || strncmp(&sa[-*(_QWORD *)i], *(const char **)(i + 8), *(_QWORD *)i));\n          i = *(_QWORD *)(i + 32) )\n    {\n      ;\n    }\n  }\n  if ( i )\n    v5 = i + 16;\n  else\n    v5 = 16LL * v7 + 6411168;\n  v14 = v5;\n  if ( !*(_QWORD *)(v5 + 8) )\n    return 0LL;\n  if ( sub_402C5C(4u) )\n    sub_402CE3();\n  sub_40A1D5(qword_61D3A0);\n  sub_40A1D5(v14);\n  sub_40A1D5(&qword_61D3B0);\n  return 1LL;\n}\n"], [4235733, "sub_40A1D5", "size_t __fastcall sub_40A1D5(__int64 a1)\n{\n  if ( byte_61D6C1 != 1 )\n  {\n    byte_61D6C1 = 1;\n    sub_409A29();\n  }\n  return fwrite_unlocked(*(const void **)(a1 + 8), *(_QWORD *)a1, 1uLL, stdout);\n}\n"], [4235811, "sub_40A223", "__int64 __fastcall sub_40A223(__int64 a1)\n{\n  const char *v1; // rax\n  __int64 v2; // rax\n  const char *v3; // rax\n  __int64 v4; // rax\n  __int64 v5; // rax\n  char v7; // [rsp+1Fh] [rbp-2C1h]\n  size_t v8; // [rsp+20h] [rbp-2C0h] BYREF\n  __int64 v9; // [rsp+28h] [rbp-2B8h]\n  char v10[664]; // [rsp+30h] [rbp-2B0h] BYREF\n  unsigned __int64 v11; // [rsp+2C8h] [rbp-18h]\n\n  v11 = __readfsqword(0x28u);\n  v9 = 0LL;\n  if ( byte_61D6D9 )\n  {\n    if ( dword_61D69C == 4 )\n    {\n      v1 = (const char *)sub_40EF8A(*(_QWORD *)(a1 + 24), v10);\n      v2 = strlen(v1) + 1;\n    }\n    else\n    {\n      v2 = dword_61D674 + 1LL;\n    }\n    v9 += v2;\n  }\n  if ( byte_61D6AB )\n  {\n    if ( dword_61D69C == 4 )\n    {\n      if ( *(_BYTE *)(a1 + 176) != 1 )\n        v3 = \"?\";\n      else\n        v3 = (const char *)sub_40DD65(*(_QWORD *)(a1 + 80), v10, (unsigned int)dword_61D6AC, 512LL, qword_61D6B0);\n      v4 = strlen(v3) + 1;\n    }\n    else\n    {\n      v4 = dword_61D678 + 1LL;\n    }\n    v9 += v4;\n  }\n  if ( byte_61D670 )\n  {\n    if ( dword_61D69C == 4 )\n      v5 = strlen(*(const char **)(a1 + 168)) + 1;\n    else\n      v5 = dword_61D680 + 1LL;\n    v9 += v5;\n  }\n  sub_4092DE(0LL, *(_QWORD *)a1, qword_61D700, &v8);\n  v9 += v8;\n  if ( dword_61D6BC )\n  {\n    v7 = sub_409C3D(*(_BYTE *)(a1 + 176), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 160));\n    v9 += v7 != 0;\n  }\n  return v9;\n}\n"], [4236312, "sub_40A418", "unsigned __int64 sub_40A418()\n{\n  __int64 v0; // rax\n  unsigned __int64 result; // rax\n  unsigned __int64 i; // [rsp+0h] [rbp-50h]\n  __int64 v3; // [rsp+8h] [rbp-48h]\n  unsigned __int64 v4; // [rsp+10h] [rbp-40h]\n  unsigned __int64 j; // [rsp+18h] [rbp-38h]\n  unsigned __int64 v6; // [rsp+20h] [rbp-30h]\n  __int64 v7; // [rsp+28h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+30h] [rbp-20h]\n  __int64 v9; // [rsp+38h] [rbp-18h]\n  __int64 v10; // [rsp+40h] [rbp-10h]\n  __int64 v11; // [rsp+48h] [rbp-8h]\n\n  v6 = sub_40AB25(1LL);\n  v7 = qword_61D7D0 + 24 * v6 - 24;\n  v8 = qword_61D638 / v6 + (qword_61D638 % v6 != 0);\n  for ( i = 0LL; ; ++i )\n  {\n    result = i;\n    if ( i >= v8 )\n      break;\n    v3 = 0LL;\n    v4 = i;\n    for ( j = 0LL; ; j += v11 )\n    {\n      v9 = *((_QWORD *)qword_61D640 + v4);\n      v10 = sub_40A223(v9);\n      v0 = v3++;\n      v11 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v0);\n      sub_409A65(v9, j);\n      v4 += v8;\n      if ( v4 >= qword_61D638 )\n        break;\n      sub_40A799(j + v10, v11 + j);\n    }\n    putchar_unlocked(10);\n  }\n  return result;\n}\n"], [4236655, "sub_40A56F", "int sub_40A56F()\n{\n  unsigned __int64 i; // [rsp+0h] [rbp-40h]\n  unsigned __int64 v2; // [rsp+8h] [rbp-38h]\n  __int64 v3; // [rsp+10h] [rbp-30h]\n  __int64 v4; // [rsp+18h] [rbp-28h]\n  unsigned __int64 v5; // [rsp+20h] [rbp-20h]\n  __int64 v6; // [rsp+28h] [rbp-18h]\n  __int64 v7; // [rsp+30h] [rbp-10h]\n  __int64 v8; // [rsp+30h] [rbp-10h]\n\n  v2 = 0LL;\n  v5 = sub_40AB25(0LL);\n  v6 = qword_61D7D0 + 24 * v5 - 24;\n  v7 = *(_QWORD *)qword_61D640;\n  v3 = sub_40A223(*(_QWORD *)qword_61D640);\n  v4 = **(_QWORD **)(v6 + 16);\n  sub_409A65(v7, 0LL);\n  for ( i = 1LL; i < qword_61D638; ++i )\n  {\n    if ( i % v5 )\n    {\n      sub_40A799(v2 + v3, v4 + v2);\n      v2 += v4;\n    }\n    else\n    {\n      putchar_unlocked(10);\n      v2 = 0LL;\n    }\n    v8 = *((_QWORD *)qword_61D640 + i);\n    sub_409A65(v8, v2);\n    v3 = sub_40A223(v8);\n    v4 = *(_QWORD *)(8 * (i % v5) + *(_QWORD *)(v6 + 16));\n  }\n  return putchar_unlocked(10);\n}\n"], [4237000, "sub_40A6C8", "int sub_40A6C8()\n{\n  char v1; // [rsp+Fh] [rbp-21h]\n  unsigned __int64 i; // [rsp+10h] [rbp-20h]\n  unsigned __int64 v3; // [rsp+18h] [rbp-18h]\n  __int64 v4; // [rsp+20h] [rbp-10h]\n  __int64 v5; // [rsp+28h] [rbp-8h]\n\n  v3 = 0LL;\n  for ( i = 0LL; i < qword_61D638; ++i )\n  {\n    v4 = *((_QWORD *)qword_61D640 + i);\n    v5 = sub_40A223(v4);\n    if ( i )\n    {\n      if ( v3 + v5 + 2 >= qword_61D720 )\n      {\n        v3 = 0LL;\n        v1 = 10;\n      }\n      else\n      {\n        v3 += 2LL;\n        v1 = 32;\n      }\n      putchar_unlocked(44);\n      putchar_unlocked(v1);\n    }\n    sub_409A65(v4, v3);\n    v3 += v5;\n  }\n  return putchar_unlocked(10);\n}\n"], [4237209, "sub_40A799", "unsigned __int64 __fastcall sub_40A799(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  while ( 1 )\n  {\n    result = a1;\n    if ( a1 >= a2 )\n      break;\n    if ( qword_61D710 && a2 / qword_61D710 > (a1 + 1) / qword_61D710 )\n    {\n      putchar_unlocked(9);\n      a1 += qword_61D710 - a1 % qword_61D710;\n    }\n    else\n    {\n      putchar_unlocked(32);\n      ++a1;\n    }\n  }\n  return result;\n}\n"], [4237380, "sub_40A844", "_BYTE *__fastcall sub_40A844(_BYTE *a1, _BYTE *a2, _BYTE *a3)\n{\n  _BYTE *v3; // rax\n  _BYTE *v4; // rdx\n  _BYTE *v5; // rax\n  _BYTE *v6; // rax\n  _BYTE *v7; // rdx\n  _BYTE *result; // rax\n  _BYTE *v11; // [rsp+20h] [rbp-8h]\n\n  v11 = a2;\n  if ( *a2 != 46 || a2[1] )\n  {\n    while ( *v11 )\n    {\n      v3 = a1++;\n      v4 = v11++;\n      *v3 = *v4;\n    }\n    if ( v11 > a2 && *(v11 - 1) != 47 )\n    {\n      v5 = a1++;\n      *v5 = 47;\n    }\n  }\n  while ( *a3 )\n  {\n    v6 = a1++;\n    v7 = a3++;\n    *v6 = *v7;\n  }\n  result = a1;\n  *a1 = 0;\n  return result;\n}\n"], [4237565, "sub_40A8FD", "unsigned __int64 sub_40A8FD()\n{\n  unsigned __int64 v0; // rax\n  unsigned __int64 result; // rax\n  unsigned __int64 i; // [rsp+0h] [rbp-40h]\n  unsigned __int64 j; // [rsp+0h] [rbp-40h]\n  unsigned __int64 v4; // [rsp+8h] [rbp-38h]\n  __int64 v5; // [rsp+10h] [rbp-30h]\n  unsigned __int64 k; // [rsp+18h] [rbp-28h]\n  unsigned __int64 v7; // [rsp+20h] [rbp-20h]\n  unsigned __int64 v8; // [rsp+38h] [rbp-8h]\n\n  v0 = qword_61D7D8;\n  if ( qword_61D638 <= (unsigned __int64)qword_61D7D8 )\n    v0 = qword_61D638;\n  v7 = v0;\n  if ( qword_61E188 < v0 )\n  {\n    if ( (unsigned __int64)qword_61D7D8 >> 1 <= v0 )\n    {\n      qword_61D7D0 = sub_41487E(qword_61D7D0, qword_61D7D8, 24LL);\n      v4 = qword_61D7D8;\n    }\n    else\n    {\n      qword_61D7D0 = sub_41487E(qword_61D7D0, v0, 48LL);\n      v4 = 2 * v7;\n    }\n    v8 = (v4 - qword_61E188) * (qword_61E188 + v4 + 1);\n    if ( qword_61E188 + v4 + 1 < v4 || v8 / (v4 - qword_61E188) != qword_61E188 + v4 + 1 )\n      sub_414B0B();\n    v5 = sub_414840(v8 >> 1, 8LL);\n    for ( i = qword_61E188; i < v4; ++i )\n    {\n      *(_QWORD *)(qword_61D7D0 + 24 * i + 16) = v5;\n      v5 += 8 * (i + 1);\n    }\n    qword_61E188 = v4;\n  }\n  for ( j = 0LL; ; ++j )\n  {\n    result = j;\n    if ( j >= v7 )\n      break;\n    *(_BYTE *)(qword_61D7D0 + 24 * j) = 1;\n    *(_QWORD *)(24 * j + qword_61D7D0 + 8) = 3 * (j + 1);\n    for ( k = 0LL; k <= j; ++k )\n      *(_QWORD *)(8 * k + *(_QWORD *)(qword_61D7D0 + 24 * j + 16)) = 3LL;\n  }\n  return result;\n}\n"], [4238117, "sub_40AB25", "unsigned __int64 __fastcall sub_40AB25(char a1)\n{\n  __int64 v1; // rax\n  unsigned __int64 v2; // rax\n  __int64 v3; // rax\n  unsigned __int64 i; // [rsp+10h] [rbp-50h]\n  unsigned __int64 k; // [rsp+18h] [rbp-48h]\n  unsigned __int64 j; // [rsp+20h] [rbp-40h]\n  unsigned __int64 v8; // [rsp+28h] [rbp-38h]\n  __int64 v9; // [rsp+38h] [rbp-28h]\n  unsigned __int64 v10; // [rsp+40h] [rbp-20h]\n  __int64 v11; // [rsp+48h] [rbp-18h]\n\n  v1 = qword_61D7D8;\n  if ( qword_61D638 <= (unsigned __int64)qword_61D7D8 )\n    v1 = qword_61D638;\n  v8 = v1;\n  sub_40A8FD();\n  for ( i = 0LL; i < qword_61D638; ++i )\n  {\n    v9 = sub_40A223(*((_QWORD *)qword_61D640 + i));\n    for ( j = 0LL; j < v8; ++j )\n    {\n      if ( *(_BYTE *)(qword_61D7D0 + 24 * j) )\n      {\n        v2 = a1 ? i / ((qword_61D638 + j) / (j + 1)) : i % (j + 1);\n        v10 = v2;\n        v3 = v2 == j ? 0LL : 2LL;\n        v11 = v9 + v3;\n        if ( *(_QWORD *)(8 * v10 + *(_QWORD *)(qword_61D7D0 + 24 * j + 16)) < (unsigned __int64)(v9 + v3) )\n        {\n          *(_QWORD *)(24 * j + qword_61D7D0 + 8) = *(_QWORD *)(qword_61D7D0 + 24 * j + 8)\n                                                 + v11\n                                                 - *(_QWORD *)(8 * v10 + *(_QWORD *)(qword_61D7D0 + 24 * j + 16));\n          *(_QWORD *)(*(_QWORD *)(qword_61D7D0 + 24 * j + 16) + 8 * v10) = v11;\n          *(_BYTE *)(24 * j + qword_61D7D0) = *(_QWORD *)(qword_61D7D0 + 24 * j + 8) < (unsigned __int64)qword_61D720;\n        }\n      }\n    }\n  }\n  for ( k = v8; k > 1 && !*(_BYTE *)(qword_61D7D0 + 24 * k - 24); --k )\n    ;\n  return k;\n}\n"], [4238790, "sub_40ADC6", "void __fastcall __noreturn sub_40ADC6(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbx\n  char *v5; // rax\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rbx\n  char *v9; // rax\n  FILE *v10; // rbx\n  char *v11; // rax\n  FILE *v12; // rbx\n  char *v13; // rax\n  FILE *v14; // rbx\n  char *v15; // rax\n  FILE *v16; // rbx\n  char *v17; // rax\n  FILE *v18; // rbx\n  char *v19; // rax\n  FILE *v20; // rbx\n  char *v21; // rax\n  FILE *v22; // rbx\n  char *v23; // rax\n  FILE *v24; // rbx\n  char *v25; // rax\n  FILE *v26; // rbx\n  char *v27; // rax\n  FILE *v28; // rbx\n  char *v29; // rax\n  FILE *v30; // rbx\n  char *v31; // rax\n  FILE *v32; // rbx\n  char *v33; // rax\n  FILE *v34; // rbx\n  char *v35; // rax\n  FILE *v36; // rbx\n  char *v37; // rax\n  FILE *v38; // rbx\n  char *v39; // rax\n  FILE *v40; // rbx\n  char *v41; // rax\n  FILE *v42; // rbx\n  char *v43; // rax\n  FILE *v44; // rbx\n  char *v45; // rax\n  FILE *v46; // rbx\n  char *v47; // rax\n  FILE *v48; // rbx\n  char *v49; // rax\n  FILE *v50; // rbx\n  char *v51; // rax\n\n  v1 = qword_61E1C0;\n  if ( a1 )\n  {\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = gettext(\"Usage: %s [OPTION]... [FILE]...\\n\");\n    printf(v3, v1);\n    v4 = stdout;\n    v5 = gettext(\n           \"List information about the FILEs (the current directory by default).\\n\"\n           \"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\\n\"\n           \"\\n\");\n    fputs_unlocked(v5, v4);\n    v6 = stdout;\n    v7 = gettext(\"Mandatory arguments to long options are mandatory for short options too.\\n\");\n    fputs_unlocked(v7, v6);\n    v8 = stdout;\n    v9 = gettext(\n           \"  -a, --all                  do not ignore entries starting with .\\n\"\n           \"  -A, --almost-all           do not list implied . and ..\\n\"\n           \"      --author               with -l, print the author of each file\\n\"\n           \"  -b, --escape               print C-style escapes for nongraphic characters\\n\");\n    fputs_unlocked(v9, v8);\n    v10 = stdout;\n    v11 = gettext(\n            \"      --block-size=SIZE      scale sizes by SIZE before printing them.  E.g.,\\n\"\n            \"                               `--block-size=M' prints sizes in units of\\n\"\n            \"                               1,048,576 bytes.  See SIZE format below.\\n\"\n            \"  -B, --ignore-backups       do not list implied entries ending with ~\\n\"\n            \"  -c                         with -lt: sort by, and show, ctime (time of last\\n\"\n            \"                               modification of file status information)\\n\"\n            \"                               with -l: show ctime and sort by name\\n\"\n            \"                               otherwise: sort by ctime, newest first\\n\");\n    fputs_unlocked(v11, v10);\n    v12 = stdout;\n    v13 = gettext(\n            \"  -C                         list entries by columns\\n\"\n            \"      --color[=WHEN]         colorize the output.  WHEN defaults to `always'\\n\"\n            \"                               or can be `never' or `auto'.  More info below\\n\"\n            \"  -d, --directory            list directory entries instead of contents,\\n\"\n            \"                               and do not dereference symbolic links\\n\"\n            \"  -D, --dired                generate output designed for Emacs' dired mode\\n\");\n    fputs_unlocked(v13, v12);\n    v14 = stdout;\n    v15 = gettext(\n            \"  -f                         do not sort, enable -aU, disable -ls --color\\n\"\n            \"  -F, --classify             append indicator (one of */=>@|) to entries\\n\"\n            \"      --file-type            likewise, except do not append `*'\\n\"\n            \"      --format=WORD          across -x, commas -m, horizontal -x, long -l,\\n\"\n            \"                               single-column -1, verbose -l, vertical -C\\n\"\n            \"      --full-time            like -l --time-style=full-iso\\n\");\n    fputs_unlocked(v15, v14);\n    v16 = stdout;\n    v17 = gettext(\"  -g                         like -l, but do not list owner\\n\");\n    fputs_unlocked(v17, v16);\n    v18 = stdout;\n    v19 = gettext(\n            \"      --group-directories-first\\n\"\n            \"                             group directories before files.\\n\"\n            \"                               augment with a --sort option, but any\\n\"\n            \"                               use of --sort=none (-U) disables grouping\\n\");\n    fputs_unlocked(v19, v18);\n    v20 = stdout;\n    v21 = gettext(\n            \"  -G, --no-group             in a long listing, don't print group names\\n\"\n            \"  -h, --human-readable       with -l, print sizes in human readable format\\n\"\n            \"                               (e.g., 1K 234M 2G)\\n\"\n            \"      --si                   likewise, but use powers of 1000 not 1024\\n\");\n    fputs_unlocked(v21, v20);\n    v22 = stdout;\n    v23 = gettext(\n            \"  -H, --dereference-command-line\\n\"\n            \"                             follow symbolic links listed on the command line\\n\"\n            \"      --dereference-command-line-symlink-to-dir\\n\"\n            \"                             follow each command line symbolic link\\n\"\n            \"                             that points to a directory\\n\"\n            \"      --hide=PATTERN         do not list implied entries matching shell PATTERN\\n\"\n            \"                               (overridden by -a or -A)\\n\");\n    fputs_unlocked(v23, v22);\n    v24 = stdout;\n    v25 = gettext(\n            \"      --indicator-style=WORD  append indicator with style WORD to entry names:\\n\"\n            \"                               none (default), slash (-p),\\n\"\n            \"                               file-type (--file-type), classify (-F)\\n\"\n            \"  -i, --inode                print the index number of each file\\n\"\n            \"  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\\n\"\n            \"  -k                         like --block-size=1K\\n\");\n    fputs_unlocked(v25, v24);\n    v26 = stdout;\n    v27 = gettext(\n            \"  -l                         use a long listing format\\n\"\n            \"  -L, --dereference          when showing file information for a symbolic\\n\"\n            \"                               link, show information for the file the link\\n\"\n            \"                               references rather than for the link itself\\n\"\n            \"  -m                         fill width with a comma separated list of entries\\n\");\n    fputs_unlocked(v27, v26);\n    v28 = stdout;\n    v29 = gettext(\n            \"  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\\n\"\n            \"  -N, --literal              print raw entry names (don't treat e.g. control\\n\"\n            \"                               characters specially)\\n\"\n            \"  -o                         like -l, but do not list group information\\n\"\n            \"  -p, --indicator-style=slash\\n\"\n            \"                             append / indicator to directories\\n\");\n    fputs_unlocked(v29, v28);\n    v30 = stdout;\n    v31 = gettext(\n            \"  -q, --hide-control-chars   print ? instead of non graphic characters\\n\"\n            \"      --show-control-chars   show non graphic characters as-is (default\\n\"\n            \"                             unless program is `ls' and output is a terminal)\\n\"\n            \"  -Q, --quote-name           enclose entry names in double quotes\\n\"\n            \"      --quoting-style=WORD   use quoting style WORD for entry names:\\n\"\n            \"                               literal, locale, shell, shell-always, c, escape\\n\");\n    fputs_unlocked(v31, v30);\n    v32 = stdout;\n    v33 = gettext(\n            \"  -r, --reverse              reverse order while sorting\\n\"\n            \"  -R, --recursive            list subdirectories recursively\\n\"\n            \"  -s, --size                 print the allocated size of each file, in blocks\\n\");\n    fputs_unlocked(v33, v32);\n    v34 = stdout;\n    v35 = gettext(\n            \"  -S                         sort by file size\\n\"\n            \"      --sort=WORD            sort by WORD instead of name: none -U,\\n\"\n            \"                             extension -X, size -S, time -t, version -v\\n\"\n            \"      --time=WORD            with -l, show time as WORD instead of modification\\n\"\n            \"                             time: atime -u, access -u, use -u, ctime -c,\\n\"\n            \"                             or status -c; use specified time as sort key\\n\"\n            \"                             if --sort=time\\n\");\n    fputs_unlocked(v35, v34);\n    v36 = stdout;\n    v37 = gettext(\n            \"      --time-style=STYLE     with -l, show times using style STYLE:\\n\"\n            \"                             full-iso, long-iso, iso, locale, +FORMAT.\\n\"\n            \"                             FORMAT is interpreted like `date'; if FORMAT is\\n\"\n            \"                             FORMAT1<newline>FORMAT2, FORMAT1 applies to\\n\"\n            \"                             non-recent files and FORMAT2 to recent files;\\n\"\n            \"                             if STYLE is prefixed with `posix-', STYLE\\n\"\n            \"                             takes effect only outside the POSIX locale\\n\");\n    fputs_unlocked(v37, v36);\n    v38 = stdout;\n    v39 = gettext(\n            \"  -t                         sort by modification time, newest first\\n\"\n            \"  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\\n\");\n    fputs_unlocked(v39, v38);\n    v40 = stdout;\n    v41 = gettext(\n            \"  -u                         with -lt: sort by, and show, access time\\n\"\n            \"                               with -l: show access time and sort by name\\n\"\n            \"                               otherwise: sort by access time\\n\"\n            \"  -U                         do not sort; list entries in directory order\\n\"\n            \"  -v                         natural sort of (version) numbers within text\\n\");\n    fputs_unlocked(v41, v40);\n    v42 = stdout;\n    v43 = gettext(\n            \"  -w, --width=COLS           assume screen width instead of current value\\n\"\n            \"  -x                         list entries by lines instead of by columns\\n\"\n            \"  -X                         sort alphabetically by entry extension\\n\"\n            \"  -Z, --context              print any SELinux security context of each file\\n\"\n            \"  -1                         list one file per line\\n\");\n    fputs_unlocked(v43, v42);\n    v44 = stdout;\n    v45 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v45, v44);\n    v46 = stdout;\n    v47 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v47, v46);\n    sub_40264C();\n    v48 = stdout;\n    v49 = gettext(\n            \"\\n\"\n            \"Using color to distinguish file types is disabled both by default and\\n\"\n            \"with --color=never.  With --color=auto, ls emits color codes only when\\n\"\n            \"standard output is connected to a terminal.  The LS_COLORS environment\\n\"\n            \"variable can change the settings.  Use the dircolors command to set it.\\n\");\n    fputs_unlocked(v49, v48);\n    v50 = stdout;\n    v51 = gettext(\n            \"\\n\"\n            \"Exit status:\\n\"\n            \" 0  if OK,\\n\"\n            \" 1  if minor problems (e.g., cannot access subdirectory),\\n\"\n            \" 2  if serious trouble (e.g., cannot access command-line argument).\\n\");\n    fputs_unlocked(v51, v50);\n    sub_402678();\n  }\n  exit(a1);\n}\n"], [4239584, "sub_40B0E0", "__int64 sub_40B0E0()\n{\n  return 0LL;\n}\n"], [4239603, "sub_40B0F3", "char *__fastcall sub_40B0F3(const char *a1, unsigned __int64 a2)\n{\n  __int64 v2; // rax\n  char *i; // rax\n  int v5; // [rsp+14h] [rbp-3Ch]\n  size_t size; // [rsp+18h] [rbp-38h]\n  char *buf; // [rsp+38h] [rbp-18h]\n  ssize_t v8; // [rsp+48h] [rbp-8h]\n\n  if ( a2 >= 0x401 )\n    v2 = 1025LL;\n  else\n    v2 = a2 + 1;\n  size = v2;\nLABEL_5:\n  for ( i = (char *)malloc(size); ; i = (char *)malloc(0x7FFFFFFFFFFFFFFFuLL) )\n  {\n    buf = i;\n    if ( !i )\n      return 0LL;\n    v8 = readlink(a1, i, size);\n    if ( v8 < 0 && *__errno_location() != 34 )\n    {\n      v5 = *__errno_location();\n      free(buf);\n      *__errno_location() = v5;\n      return 0LL;\n    }\n    if ( v8 < size )\n    {\n      buf[v8] = 0;\n      return buf;\n    }\n    free(buf);\n    if ( size <= 0x3FFFFFFFFFFFFFFFLL )\n    {\n      size *= 2LL;\n      goto LABEL_5;\n    }\n    if ( size > 0x7FFFFFFFFFFFFFFELL )\n      break;\n    size = 0x7FFFFFFFFFFFFFFFLL;\n  }\n  *__errno_location() = 12;\n  return 0LL;\n}\n"], [4239938, "sub_40B242", "void __noreturn sub_40B242()\n{\n  sub_40ADC6(1);\n}\n"], [4239954, "sub_40B252", "__int64 __fastcall sub_40B252(const char *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 result; // rax\n  char v7; // [rsp+27h] [rbp-19h]\n  __int64 i; // [rsp+28h] [rbp-18h]\n  __int64 v9; // [rsp+30h] [rbp-10h]\n  size_t n; // [rsp+38h] [rbp-8h]\n\n  v9 = -1LL;\n  v7 = 0;\n  n = strlen(a1);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !strncmp(*(const char **)(8 * i + a2), a1, n) )\n    {\n      if ( strlen(*(const char **)(8 * i + a2)) == n )\n        return i;\n      if ( v9 == -1 )\n      {\n        v9 = i;\n      }\n      else if ( !a3 || memcmp((const void *)(a4 * v9 + a3), (const void *)(i * a4 + a3), a4) )\n      {\n        v7 = 1;\n      }\n    }\n  }\n  if ( v7 )\n    result = -2LL;\n  else\n    result = v9;\n  return result;\n}\n"], [4240257, "sub_40B381", "void __fastcall sub_40B381(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  __int64 v4; // rbx\n  __int64 v5; // rax\n  char *format; // [rsp+28h] [rbp-18h]\n\n  if ( a3 == -1 )\n    v3 = gettext(\"invalid argument %s for %s\");\n  else\n    v3 = gettext(\"ambiguous argument %s for %s\");\n  format = v3;\n  v4 = sub_40FD82(1LL, a1);\n  v5 = sub_411231(0LL, 6LL, a2);\n  error(0, 0, format, v5, v4);\n}\n"], [4240396, "sub_40B40C", "int __fastcall sub_40B40C(__int64 a1, __int64 a2, size_t a3)\n{\n  char *v3; // rax\n  __int64 i; // [rsp+20h] [rbp-10h]\n  void *s1; // [rsp+28h] [rbp-8h]\n\n  s1 = 0LL;\n  v3 = gettext(\"Valid arguments are:\");\n  fprintf(stderr, v3);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a1); ++i )\n  {\n    if ( i && !memcmp(s1, (const void *)(i * a3 + a2), a3) )\n    {\n      fprintf(stderr, \", `%s'\", *(const char **)(8 * i + a1));\n    }\n    else\n    {\n      fprintf(stderr, \"\\n  - `%s'\", *(const char **)(8 * i + a1));\n      s1 = (void *)(i * a3 + a2);\n    }\n  }\n  return putc_unlocked(10, stderr);\n}\n"], [4240700, "sub_40B53C", "__int64 __fastcall sub_40B53C(__int64 a1, const char *a2, __int64 a3, __int64 a4, size_t a5, void (*a6)(void))\n{\n  __int64 v11; // [rsp+38h] [rbp-8h]\n\n  v11 = sub_40B252(a2, a3, a4, a5);\n  if ( v11 >= 0 )\n    return v11;\n  sub_40B381(a1, (__int64)a2, v11);\n  sub_40B40C(a3, a4, a5);\n  a6();\n  return -1LL;\n}\n"], [4240834, "sub_40B5C2", "__int64 __fastcall sub_40B5C2(const void *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 i; // [rsp+28h] [rbp-8h]\n\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !memcmp(a1, (const void *)(i * a4 + a3), a4) )\n      return *(_QWORD *)(8 * i + a2);\n  }\n  return 0LL;\n}\n"], [4240974, "sub_40B64E", "__int64 __fastcall sub_40B64E(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_61E190 = a1;\n  return result;\n}\n"], [4240995, "sub_40B663", "__int64 __fastcall sub_40B663(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_61E198 = a1;\n  return result;\n}\n"], [4241016, "sub_40B678", "__int64 sub_40B678()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_415900(stdout) && (byte_61E198 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_61E190 )\n    {\n      v0 = (const char *)sub_4113BF(qword_61E190);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(dword_61D580);\n  }\n  result = sub_415900(stderr);\n  if ( (_DWORD)result )\n    _exit(dword_61D580);\n  return result;\n}\n"], [4241251, "sub_40B763", "_BYTE *__fastcall sub_40B763(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4241356, "sub_40B7CC", "size_t __fastcall sub_40B7CC(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4241434, "sub_40B81A", "__int64 __fastcall sub_40B81A(__int16 a1)\n{\n  switch ( a1 & 0xF000 )\n  {\n    case 32768:\n      return 45LL;\n    case 16384:\n      return 100LL;\n    case 24576:\n      return 98LL;\n    case 8192:\n      return 99LL;\n    case 40960:\n      return 108LL;\n    case 4096:\n      return 112LL;\n    case 49152:\n      return 115LL;\n  }\n  return 63LL;\n}\n"], [4241605, "sub_40B8C5", "_BYTE *__fastcall sub_40B8C5(__int16 a1, _BYTE *a2)\n{\n  char v2; // al\n  char v3; // al\n  char v4; // al\n  char v5; // al\n  char v6; // al\n  char v7; // al\n  char v8; // al\n  char v9; // al\n  char v10; // al\n  _BYTE *result; // rax\n\n  *a2 = sub_40B81A(a1);\n  if ( (a1 & 0x100) != 0 )\n    v2 = 114;\n  else\n    v2 = 45;\n  a2[1] = v2;\n  if ( (a1 & 0x80) != 0 )\n    v3 = 119;\n  else\n    v3 = 45;\n  a2[2] = v3;\n  if ( (a1 & 0x800) != 0 )\n  {\n    if ( (a1 & 0x40) != 0 )\n      v4 = 115;\n    else\n      v4 = 83;\n  }\n  else if ( (a1 & 0x40) != 0 )\n  {\n    v4 = 120;\n  }\n  else\n  {\n    v4 = 45;\n  }\n  a2[3] = v4;\n  if ( (a1 & 0x20) != 0 )\n    v5 = 114;\n  else\n    v5 = 45;\n  a2[4] = v5;\n  if ( (a1 & 0x10) != 0 )\n    v6 = 119;\n  else\n    v6 = 45;\n  a2[5] = v6;\n  if ( (a1 & 0x400) != 0 )\n  {\n    if ( (a1 & 8) != 0 )\n      v7 = 115;\n    else\n      v7 = 83;\n  }\n  else if ( (a1 & 8) != 0 )\n  {\n    v7 = 120;\n  }\n  else\n  {\n    v7 = 45;\n  }\n  a2[6] = v7;\n  if ( (a1 & 4) != 0 )\n    v8 = 114;\n  else\n    v8 = 45;\n  a2[7] = v8;\n  if ( (a1 & 2) != 0 )\n    v9 = 119;\n  else\n    v9 = 45;\n  a2[8] = v9;\n  if ( (a1 & 0x200) != 0 )\n  {\n    if ( (a1 & 1) != 0 )\n      v10 = 116;\n    else\n      v10 = 84;\n  }\n  else if ( (a1 & 1) != 0 )\n  {\n    v10 = 120;\n  }\n  else\n  {\n    v10 = 45;\n  }\n  a2[9] = v10;\n  a2[10] = 32;\n  result = a2 + 11;\n  a2[11] = 0;\n  return result;\n}\n"], [4242060, "sub_40BA8C", "_BYTE *__fastcall sub_40BA8C(__int64 a1, _BYTE *a2)\n{\n  return sub_40B8C5(*(_DWORD *)(a1 + 24), a2);\n}\n"], [4242099, "sub_40BAB3", "__int64 __fastcall sub_40BAB3(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  v4 = sub_40BB14(a1, a2, a3);\n  if ( !v4 )\n    sub_414B0B();\n  return v4;\n}\n"], [4242164, "sub_40BAF4", "_BYTE *__fastcall sub_40BAF4(_BYTE *a1)\n{\n  while ( *a1 == 47 )\n    ++a1;\n  return a1;\n}\n"], [4242196, "sub_40BB14", "void *__fastcall sub_40BB14(_BYTE *a1, _BYTE *a2, _QWORD *a3)\n{\n  _BOOL4 v3; // eax\n  const char *v6; // [rsp+20h] [rbp-40h]\n  size_t v7; // [rsp+28h] [rbp-38h]\n  size_t n; // [rsp+30h] [rbp-30h]\n  _BOOL8 v9; // [rsp+38h] [rbp-28h]\n  char *s; // [rsp+40h] [rbp-20h]\n  size_t v11; // [rsp+48h] [rbp-18h]\n  void *dest; // [rsp+50h] [rbp-10h]\n  _BYTE *v13; // [rsp+58h] [rbp-8h]\n  char *v14; // [rsp+58h] [rbp-8h]\n\n  v6 = sub_40B763(a1);\n  v7 = sub_40B7CC(v6);\n  n = v6 - a1 + v7;\n  v3 = v7 && v6[v7 - 1] != 47;\n  v9 = v3;\n  s = sub_40BAF4(a2);\n  v11 = strlen(s);\n  dest = malloc(v9 + n + v11 + 1);\n  if ( !dest )\n    return 0LL;\n  v13 = mempcpy(dest, a1, n);\n  *v13 = 47;\n  v14 = &v13[v9];\n  if ( a3 )\n    *a3 = &v14[-(*a2 == 47)];\n  *(_BYTE *)mempcpy(v14, s, v11) = 0;\n  return dest;\n}\n"], [4242529, "sub_40BC61", "_BYTE *__fastcall sub_40BC61(_BYTE **a1)\n{\n  char v2; // [rsp+17h] [rbp-9h]\n  _BYTE *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = 0LL;\n  v2 = 0;\n  while ( **a1 )\n  {\n    if ( v2 )\n    {\n      v2 = 0;\n      if ( (unsigned __int8)sub_4156D6((unsigned int)(char)**a1) != 1 && **a1 != 126 )\n        v3 = 0LL;\n    }\n    else if ( **a1 == 46 )\n    {\n      v2 = 1;\n      if ( !v3 )\n        v3 = *a1;\n    }\n    else if ( (unsigned __int8)sub_41569C((unsigned int)(char)**a1) != 1 && **a1 != 126 )\n    {\n      v3 = 0LL;\n    }\n    ++*a1;\n  }\n  return v3;\n}\n"], [4242748, "sub_40BD3C", "__int64 __fastcall sub_40BD3C(unsigned __int8 a1)\n{\n  if ( (unsigned __int8)sub_415750(a1) )\n    return 0LL;\n  if ( (unsigned __int8)sub_4156D6(a1) )\n    return a1;\n  if ( a1 == 126 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)a1 + 256;\n}\n"], [4242828, "sub_40BD8C", "__int64 __fastcall sub_40BD8C(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)\n{\n  int v4; // eax\n  int v5; // eax\n  unsigned int v9; // [rsp+24h] [rbp-1Ch]\n  int v10; // [rsp+28h] [rbp-18h]\n  unsigned __int64 v11; // [rsp+30h] [rbp-10h]\n  unsigned __int64 v12; // [rsp+38h] [rbp-8h]\n\n  v11 = 0LL;\n  v12 = 0LL;\n  while ( v11 < a2 || v12 < a4 )\n  {\n    v9 = 0;\n    while ( v11 < a2 && (unsigned __int8)sub_415750((unsigned int)*(char *)(a1 + v11)) != 1\n         || v12 < a4 && (unsigned __int8)sub_415750((unsigned int)*(char *)(a3 + v12)) != 1 )\n    {\n      if ( v11 == a2 )\n        v4 = 0;\n      else\n        v4 = sub_40BD3C(*(_BYTE *)(a1 + v11));\n      v10 = v4;\n      if ( v12 == a4 )\n        v5 = 0;\n      else\n        v5 = sub_40BD3C(*(_BYTE *)(a3 + v12));\n      if ( v10 != v5 )\n        return (unsigned int)(v10 - v5);\n      ++v11;\n      ++v12;\n    }\n    while ( *(_BYTE *)(a1 + v11) == 48 )\n      ++v11;\n    while ( *(_BYTE *)(a3 + v12) == 48 )\n      ++v12;\n    while ( (unsigned __int8)sub_415750((unsigned int)*(char *)(a1 + v11))\n         && (unsigned __int8)sub_415750((unsigned int)*(char *)(a3 + v12)) )\n    {\n      if ( !v9 )\n        v9 = *(char *)(a1 + v11) - *(char *)(a3 + v12);\n      ++v11;\n      ++v12;\n    }\n    if ( (unsigned __int8)sub_415750((unsigned int)*(char *)(a1 + v11)) )\n      return 1LL;\n    if ( (unsigned __int8)sub_415750((unsigned int)*(char *)(a3 + v12)) )\n      return 0xFFFFFFFFLL;\n    if ( v9 )\n      return v9;\n  }\n  return 0LL;\n}\n"], [4243374, "sub_40BFAE", "__int64 __fastcall sub_40BFAE(const char *a1, const char *a2)\n{\n  __int64 result; // rax\n  _BYTE *v3; // rax\n  _BYTE *v4; // rax\n  __int64 s2; // [rsp+0h] [rbp-50h]\n  __int64 s1; // [rsp+8h] [rbp-48h]\n  unsigned int v7; // [rsp+18h] [rbp-38h]\n  unsigned int v8; // [rsp+1Ch] [rbp-34h]\n  _BYTE *v9; // [rsp+20h] [rbp-30h] BYREF\n  _BYTE *v10; // [rsp+28h] [rbp-28h] BYREF\n  size_t n; // [rsp+30h] [rbp-20h]\n  _BYTE *v12; // [rsp+38h] [rbp-18h]\n  _BYTE *v13; // [rsp+40h] [rbp-10h]\n  _BYTE *v14; // [rsp+48h] [rbp-8h]\n\n  s1 = (__int64)a1;\n  s2 = (__int64)a2;\n  v7 = strcmp(a1, a2);\n  if ( !v7 )\n    return 0LL;\n  if ( !*a1 )\n    return 0xFFFFFFFFLL;\n  if ( !*a2 )\n    return 1LL;\n  if ( !strcmp(\".\", a1) )\n    return 0xFFFFFFFFLL;\n  if ( !strcmp(\".\", a2) )\n    return 1LL;\n  if ( !strcmp(\"..\", a1) )\n    return 0xFFFFFFFFLL;\n  if ( !strcmp(\"..\", a2) )\n    return 1LL;\n  if ( *a1 == 46 && *a2 != 46 )\n    return 0xFFFFFFFFLL;\n  if ( *a1 != 46 && *a2 == 46 )\n    return 1LL;\n  if ( *a1 == 46 && *a2 == 46 )\n  {\n    s1 = (__int64)(a1 + 1);\n    s2 = (__int64)(a2 + 1);\n  }\n  v9 = (_BYTE *)s1;\n  v10 = (_BYTE *)s2;\n  v13 = sub_40BC61(&v9);\n  v14 = sub_40BC61(&v10);\n  if ( v13 )\n    v3 = v13;\n  else\n    v3 = v9;\n  n = (size_t)&v3[-s1];\n  if ( v14 )\n    v4 = v14;\n  else\n    v4 = v10;\n  v12 = &v4[-s2];\n  if ( (v13 || v14) && (_BYTE *)n == v12 && !strncmp((const char *)s1, (const char *)s2, n) )\n  {\n    n = (size_t)&v9[-s1];\n    v12 = &v10[-s2];\n  }\n  v8 = sub_40BD8C(s1, n, s2, (unsigned __int64)v12);\n  if ( v8 )\n    result = v8;\n  else\n    result = v7;\n  return result;\n}\n"], [4243942, "sub_40C1E6", "int __fastcall sub_40C1E6(struct timespec *a1)\n{\n  int result; // eax\n  struct timeval tv; // [rsp+10h] [rbp-10h] BYREF\n\n  result = clock_gettime(0, a1);\n  if ( result )\n  {\n    gettimeofday(&tv, 0LL);\n    a1->tv_sec = tv.tv_sec;\n    result = (int)a1;\n    a1->tv_nsec = 1000 * tv.tv_usec;\n  }\n  return result;\n}\n"], [4244026, "sub_40C23A", "__int64 __fastcall sub_40C23A(int a1)\n{\n  unsigned __int8 v2; // [rsp+17h] [rbp-9h]\n  const char *s1; // [rsp+18h] [rbp-8h]\n\n  v2 = 1;\n  s1 = setlocale(a1, 0LL);\n  if ( s1 && (!strcmp(s1, \"C\") || !strcmp(s1, \"POSIX\")) )\n    v2 = 0;\n  return v2;\n}\n"], [4244119, "sub_40C297", "__int64 __fastcall sub_40C297(__int64 a1, char a2)\n{\n  return __ROR8__(a1, a2);\n}\n"], [4244147, "sub_40C2B3", "__int64 __fastcall sub_40C2B3(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 16);\n}\n"], [4244165, "sub_40C2C5", "__int64 __fastcall sub_40C2C5(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 24);\n}\n"], [4244183, "sub_40C2D7", "__int64 __fastcall sub_40C2D7(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 32);\n}\n"], [4244201, "sub_40C2E9", "unsigned __int64 __fastcall sub_40C2E9(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  unsigned __int64 v3; // [rsp+10h] [rbp-18h]\n  _QWORD *v4; // [rsp+18h] [rbp-10h]\n  unsigned __int64 j; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v4 = i;\n      for ( j = 1LL; ; ++j )\n      {\n        v4 = (_QWORD *)v4[1];\n        if ( !v4 )\n          break;\n      }\n      if ( j > v3 )\n        v3 = j;\n    }\n  }\n  return v3;\n}\n"], [4244327, "sub_40C367", "_BOOL8 __fastcall sub_40C367(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  __int64 v3; // [rsp+10h] [rbp-18h]\n  __int64 v4; // [rsp+18h] [rbp-10h]\n  _QWORD *v5; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  v4 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v5 = i;\n      ++v3;\n      ++v4;\n      while ( 1 )\n      {\n        v5 = (_QWORD *)v5[1];\n        if ( !v5 )\n          break;\n        ++v4;\n      }\n    }\n  }\n  return *(_QWORD *)(a1 + 24) == v3 && *(_QWORD *)(a1 + 32) == v4;\n}\n"], [4244481, "sub_40C401", "int __fastcall sub_40C401(__int64 a1, FILE *a2)\n{\n  double v2; // xmm0_8\n  double v3; // xmm1_8\n  double v4; // xmm0_8\n  __int64 v6; // [rsp+10h] [rbp-20h]\n  __int64 v7; // [rsp+18h] [rbp-18h]\n  __int64 v8; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v9; // [rsp+28h] [rbp-8h]\n\n  v6 = sub_40C2D7(a1);\n  v7 = sub_40C2B3(a1);\n  v8 = sub_40C2C5(a1);\n  v9 = sub_40C2E9(a1);\n  fprintf(a2, \"# entries:         %lu\\n\", v6);\n  fprintf(a2, \"# buckets:         %lu\\n\", v7);\n  if ( v8 < 0 )\n    v2 = (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1)) + (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1));\n  else\n    v2 = (double)(int)v8;\n  v3 = 100.0 * v2;\n  if ( v7 < 0 )\n    v4 = (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1)) + (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1));\n  else\n    v4 = (double)(int)v7;\n  fprintf(a2, \"# buckets used:    %lu (%.2f%%)\\n\", v8, v3 / v4);\n  return fprintf(a2, \"max bucket length: %lu\\n\", v9);\n}\n"], [4244761, "sub_40C519", "__int64 __fastcall sub_40C519(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v3 )\n    abort();\n  return 16 * v3 + *(_QWORD *)a1;\n}\n"], [4244848, "sub_40C570", "__int64 __fastcall sub_40C570(__int64 a1, __int64 a2)\n{\n  _QWORD *i; // [rsp+10h] [rbp-10h]\n  _QWORD *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = (_QWORD *)sub_40C519(a1, a2);\n  if ( !*v4 )\n    return 0LL;\n  for ( i = v4; i; i = (_QWORD *)i[1] )\n  {\n    if ( *i == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *i) )\n      return *i;\n  }\n  return 0LL;\n}\n"], [4244995, "sub_40C603", "__int64 __fastcall sub_40C603(unsigned __int64 *a1)\n{\n  unsigned __int64 i; // [rsp+18h] [rbp-8h]\n\n  if ( !a1[4] )\n    return 0LL;\n  for ( i = *a1; ; i += 16LL )\n  {\n    if ( a1[1] <= i )\n      abort();\n    if ( *(_QWORD *)i )\n      break;\n  }\n  return *(_QWORD *)i;\n}\n"], [4245087, "sub_40C65F", "__int64 __fastcall sub_40C65F(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_40C519(a1, a2);\n  v4 = v3;\n  do\n  {\n    if ( *(_QWORD *)v4 == a2 && *(_QWORD *)(v4 + 8) )\n      return **(_QWORD **)(v4 + 8);\n    v4 = *(_QWORD *)(v4 + 8);\n  }\n  while ( v4 );\n  while ( 1 )\n  {\n    v3 += 16LL;\n    if ( v3 >= *(_QWORD *)(a1 + 8) )\n      break;\n    if ( *(_QWORD *)v3 )\n      return *(_QWORD *)v3;\n  }\n  return 0LL;\n}\n"], [4245241, "sub_40C6F9", "unsigned __int64 __fastcall sub_40C6F9(__int64 a1, __int64 a2, unsigned __int64 a3)\n{\n  __int64 v4; // rax\n  unsigned __int64 v5; // [rsp+20h] [rbp-18h]\n  _QWORD *i; // [rsp+28h] [rbp-10h]\n  _QWORD *j; // [rsp+30h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( v5 >= a3 )\n          return v5;\n        v4 = v5++;\n        *(_QWORD *)(a2 + 8 * v4) = *j;\n      }\n    }\n  }\n  return v5;\n}\n"], [4245397, "sub_40C795", "__int64 __fastcall sub_40C795(__int64 a1, unsigned __int8 (__fastcall *a2)(_QWORD, __int64), __int64 a3)\n{\n  __int64 v5; // [rsp+28h] [rbp-18h]\n  _QWORD *i; // [rsp+30h] [rbp-10h]\n  _QWORD *j; // [rsp+38h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( a2(*j, a3) != 1 )\n          return v5;\n        ++v5;\n      }\n    }\n  }\n  return v5;\n}\n"], [4245545, "sub_40C829", "unsigned __int64 __fastcall sub_40C829(_BYTE *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = 0LL;\n  while ( *a1 )\n    v4 = (31 * v4 + (unsigned __int8)*a1++) % a2;\n  return v4;\n}\n"], [4245631, "sub_40C87F", "bool __fastcall sub_40C87F(unsigned __int64 a1)\n{\n  unsigned __int64 v2; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+10h] [rbp-8h]\n\n  v2 = 3LL;\n  v4 = 9LL;\n  while ( v4 < a1 && a1 % v2 )\n  {\n    v3 = v2 + 1;\n    v4 += 4 * v3;\n    v2 = v3 + 1;\n  }\n  return a1 % v2 != 0;\n}\n"], [4245739, "sub_40C8EB", "__int64 __fastcall sub_40C8EB(unsigned __int64 a1)\n{\n  __int64 v2; // [rsp+0h] [rbp-8h]\n  __int64 i; // [rsp+0h] [rbp-8h]\n\n  v2 = a1;\n  if ( a1 <= 9 )\n    v2 = 10LL;\n  for ( i = v2 | 1; i != -1 && !sub_40C87F(i); i += 2LL )\n    ;\n  return i;\n}\n"], [4245810, "sub_40C932", "__int64 __fastcall sub_40C932(__int64 a1)\n{\n  __int64 result; // rax\n\n  *(_DWORD *)a1 = 0;\n  *(_DWORD *)(a1 + 4) = 1065353216;\n  *(_DWORD *)(a1 + 8) = 1061997773;\n  *(_DWORD *)(a1 + 12) = 1068826100;\n  result = a1;\n  *(_BYTE *)(a1 + 16) = 0;\n  return result;\n}\n"], [4245879, "sub_40C977", "unsigned __int64 __fastcall sub_40C977(__int64 a1, unsigned __int64 a2)\n{\n  return sub_40C297(a1, 3) % a2;\n}\n"], [4245934, "sub_40C9AE", "bool __fastcall sub_40C9AE(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"], [4245959, "sub_40C9C7", "__int64 __fastcall sub_40C9C7(__int64 a1)\n{\n  __int64 v2; // [rsp+10h] [rbp-8h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( (_UNKNOWN *)v2 == &unk_418F70 )\n    return 1LL;\n  if ( *(float *)(v2 + 8) > 0.1\n    && (float)(1.0 - 0.1) > *(float *)(v2 + 8)\n    && *(float *)(v2 + 12) > (float)(0.1 + 1.0)\n    && *(float *)v2 >= 0.0\n    && *(float *)(v2 + 4) > (float)(*(float *)v2 + 0.1)\n    && *(float *)(v2 + 4) <= 1.0\n    && *(float *)(v2 + 8) > (float)(*(float *)v2 + 0.1) )\n  {\n    return 1LL;\n  }\n  *(_QWORD *)(a1 + 40) = &unk_418F70;\n  return 0LL;\n}\n"], [4246207, "sub_40CABF", "unsigned __int64 __fastcall sub_40CABF(__int64 a1, __int64 a2)\n{\n  float v2; // xmm0_4\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // [rsp+8h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-18h]\n  float v6; // [rsp+1Ch] [rbp-4h]\n\n  v4 = a1;\n  if ( *(_BYTE *)(a2 + 16) != 1 )\n  {\n    if ( a1 < 0 )\n      v2 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n         + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n    else\n      v2 = (float)(int)a1;\n    v6 = v2 / *(float *)(a2 + 8);\n    if ( v6 >= 1.8446744e19 )\n      return 0LL;\n    if ( v6 >= 9.223372e18 )\n      v4 = (unsigned int)(int)(float)(v6 - 9.223372e18) ^ 0x8000000000000000LL;\n    else\n      v4 = (unsigned int)(int)v6;\n  }\n  v5 = sub_40C8EB(v4);\n  if ( v5 <= 0x1FFFFFFFFFFFFFFFLL )\n    result = v5;\n  else\n    result = 0LL;\n  return result;\n}\n"], [4246441, "sub_40CBA9", "size_t *__fastcall sub_40CBA9(__int64 a1, void *a2, unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2), bool (__fastcall *a4)(__int64 a1, __int64 a2), size_t a5)\n{\n  size_t *result; // rax\n  bool (__fastcall *v7)(__int64, __int64); // [rsp+10h] [rbp-30h]\n  unsigned __int64 (__fastcall *v8)(__int64, unsigned __int64); // [rsp+18h] [rbp-28h]\n  void *v9; // [rsp+20h] [rbp-20h]\n  size_t *ptr; // [rsp+38h] [rbp-8h]\n\n  v9 = a2;\n  v8 = a3;\n  v7 = a4;\n  if ( !a3 )\n    v8 = sub_40C977;\n  if ( !a4 )\n    v7 = sub_40C9AE;\n  ptr = (size_t *)malloc(0x50uLL);\n  if ( !ptr )\n    return 0LL;\n  if ( !a2 )\n    v9 = &unk_418F70;\n  ptr[5] = (size_t)v9;\n  if ( (unsigned __int8)sub_40C9C7((__int64)ptr) == 1\n    && (ptr[2] = sub_40CABF(a1, (__int64)v9)) != 0\n    && (*ptr = (size_t)calloc(ptr[2], 0x10uLL)) != 0 )\n  {\n    ptr[1] = 16 * ptr[2] + *ptr;\n    ptr[3] = 0LL;\n    ptr[4] = 0LL;\n    ptr[6] = (size_t)v8;\n    ptr[7] = (size_t)v7;\n    ptr[8] = a5;\n    ptr[9] = 0LL;\n    result = ptr;\n  }\n  else\n  {\n    free(ptr);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4246798, "sub_40CD0E", "__int64 __fastcall sub_40CD0E(__int64 a1)\n{\n  __int64 result; // rax\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+20h] [rbp-10h]\n  _QWORD *v4; // [rsp+28h] [rbp-8h]\n\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (_QWORD *)i[1]; j; j = v4 )\n      {\n        if ( *(_QWORD *)(a1 + 64) )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*j);\n        *j = 0LL;\n        v4 = (_QWORD *)j[1];\n        j[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = j;\n      }\n      if ( *(_QWORD *)(a1 + 64) )\n        (*(void (__fastcall **)(_QWORD))(a1 + 64))(*i);\n      *i = 0LL;\n      i[1] = 0LL;\n    }\n  }\n  *(_QWORD *)(a1 + 24) = 0LL;\n  result = a1;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  return result;\n}\n"], [4247060, "sub_40CE14", "void __fastcall sub_40CE14(__int64 a1)\n{\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+18h] [rbp-18h]\n  _QWORD *ptr; // [rsp+20h] [rbp-10h]\n  _QWORD *ptra; // [rsp+20h] [rbp-10h]\n  _QWORD *ptrb; // [rsp+20h] [rbp-10h]\n  _QWORD *v6; // [rsp+28h] [rbp-8h]\n  _QWORD *v7; // [rsp+28h] [rbp-8h]\n\n  if ( *(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 32) )\n  {\n    for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n    {\n      if ( *i )\n      {\n        for ( ptr = i; ptr; ptr = (_QWORD *)ptr[1] )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*ptr);\n      }\n    }\n  }\n  for ( j = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)j; j += 2 )\n  {\n    for ( ptra = (_QWORD *)j[1]; ptra; ptra = v6 )\n    {\n      v6 = (_QWORD *)ptra[1];\n      free(ptra);\n    }\n  }\n  for ( ptrb = *(_QWORD **)(a1 + 72); ptrb; ptrb = v7 )\n  {\n    v7 = (_QWORD *)ptrb[1];\n    free(ptrb);\n  }\n  free(*(void **)a1);\n  free((void *)a1);\n}\n"], [4247358, "sub_40CF3E", "void *__fastcall sub_40CF3E(__int64 a1)\n{\n  __int64 v2; // [rsp+18h] [rbp-8h]\n\n  if ( !*(_QWORD *)(a1 + 72) )\n    return malloc(0x10uLL);\n  v2 = *(_QWORD *)(a1 + 72);\n  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v2 + 8);\n  return (void *)v2;\n}\n"], [4247433, "sub_40CF89", "__int64 __fastcall sub_40CF89(__int64 a1, _QWORD *a2)\n{\n  __int64 result; // rax\n\n  *a2 = 0LL;\n  a2[1] = *(_QWORD *)(a1 + 72);\n  result = a1;\n  *(_QWORD *)(a1 + 72) = a2;\n  return result;\n}\n"], [4247486, "sub_40CFBE", "__int64 __fastcall sub_40CFBE(__int64 a1, __int64 a2, _QWORD *a3, char a4)\n{\n  __int64 result; // rax\n  __int64 v5; // rdx\n  _QWORD *i; // [rsp+20h] [rbp-30h]\n  _QWORD *v9; // [rsp+28h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-20h]\n  _QWORD *v11; // [rsp+38h] [rbp-18h]\n  __int64 v12; // [rsp+40h] [rbp-10h]\n  _QWORD *v13; // [rsp+48h] [rbp-8h]\n\n  v9 = (_QWORD *)sub_40C519(a1, a2);\n  *a3 = v9;\n  if ( !*v9 )\n    return 0LL;\n  if ( *v9 == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *v9) )\n  {\n    v12 = *v9;\n    if ( a4 )\n    {\n      if ( v9[1] )\n      {\n        v13 = (_QWORD *)v9[1];\n        v5 = v13[1];\n        *v9 = *v13;\n        v9[1] = v5;\n        sub_40CF89(a1, v13);\n      }\n      else\n      {\n        *v9 = 0LL;\n      }\n    }\n    result = v12;\n  }\n  else\n  {\n    for ( i = v9; ; i = (_QWORD *)i[1] )\n    {\n      if ( !i[1] )\n        return 0LL;\n      if ( *(_QWORD *)i[1] == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *(_QWORD *)i[1]) )\n        break;\n    }\n    v10 = *(_QWORD *)i[1];\n    if ( a4 )\n    {\n      v11 = (_QWORD *)i[1];\n      i[1] = v11[1];\n      sub_40CF89(a1, v11);\n    }\n    result = v10;\n  }\n  return result;\n}\n"], [4247891, "sub_40D153", "__int64 __fastcall sub_40D153(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *i; // [rsp+20h] [rbp-30h]\n  __int64 *j; // [rsp+28h] [rbp-28h]\n  __int64 v7; // [rsp+30h] [rbp-20h]\n  __int64 v8; // [rsp+30h] [rbp-20h]\n  _QWORD *v9; // [rsp+38h] [rbp-18h]\n  _QWORD *v10; // [rsp+38h] [rbp-18h]\n  __int64 *v11; // [rsp+40h] [rbp-10h]\n  _QWORD *v12; // [rsp+48h] [rbp-8h]\n\n  for ( i = *(__int64 **)a2; *(_QWORD *)(a2 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (__int64 *)i[1]; j; j = v11 )\n      {\n        v7 = *j;\n        v9 = (_QWORD *)sub_40C519(a1, *j);\n        v11 = (__int64 *)j[1];\n        if ( *v9 )\n        {\n          j[1] = v9[1];\n          v9[1] = j;\n        }\n        else\n        {\n          *v9 = v7;\n          ++*(_QWORD *)(a1 + 24);\n          sub_40CF89(a1, j);\n        }\n      }\n      v8 = *i;\n      i[1] = 0LL;\n      if ( !a3 )\n      {\n        v10 = (_QWORD *)sub_40C519(a1, v8);\n        if ( *v10 )\n        {\n          v12 = sub_40CF3E(a1);\n          if ( !v12 )\n            return 0LL;\n          *v12 = v8;\n          v12[1] = v10[1];\n          v10[1] = v12;\n        }\n        else\n        {\n          *v10 = v8;\n          ++*(_QWORD *)(a1 + 24);\n        }\n        *i = 0LL;\n        --*(_QWORD *)(a2 + 24);\n      }\n    }\n  }\n  return 1LL;\n}\n"], [4248353, "sub_40D321", "__int64 __fastcall sub_40D321(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 nmemb; // [rsp+10h] [rbp-60h]\n  void *v4; // [rsp+20h] [rbp-50h] BYREF\n  __int64 v5; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v6; // [rsp+30h] [rbp-40h]\n  __int64 v7; // [rsp+38h] [rbp-38h]\n  __int64 v8; // [rsp+40h] [rbp-30h]\n  __int64 v9; // [rsp+48h] [rbp-28h]\n  __int64 v10; // [rsp+50h] [rbp-20h]\n  __int64 v11; // [rsp+58h] [rbp-18h]\n  __int64 v12; // [rsp+60h] [rbp-10h]\n  __int64 v13; // [rsp+68h] [rbp-8h]\n\n  nmemb = sub_40CABF(a2, *(_QWORD *)(a1 + 40));\n  if ( !nmemb )\n    return 0LL;\n  if ( *(_QWORD *)(a1 + 16) == nmemb )\n    return 1LL;\n  v4 = calloc(nmemb, 0x10uLL);\n  if ( !v4 )\n    return 0LL;\n  v6 = nmemb;\n  v5 = (__int64)v4 + 16 * nmemb;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = *(_QWORD *)(a1 + 40);\n  v10 = *(_QWORD *)(a1 + 48);\n  v11 = *(_QWORD *)(a1 + 56);\n  v12 = *(_QWORD *)(a1 + 64);\n  v13 = *(_QWORD *)(a1 + 72);\n  if ( (unsigned __int8)sub_40D153((__int64)&v4, a1, 0) )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = v4;\n    *(_QWORD *)(a1 + 8) = v5;\n    *(_QWORD *)(a1 + 16) = v6;\n    *(_QWORD *)(a1 + 24) = v7;\n    *(_QWORD *)(a1 + 72) = v13;\n    result = 1LL;\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 72) = v13;\n    if ( (unsigned __int8)sub_40D153(a1, (__int64)&v4, 1) != 1 || (unsigned __int8)sub_40D153(a1, (__int64)&v4, 0) != 1 )\n      abort();\n    free(v4);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4248869, "sub_40D525", "__int64 __fastcall sub_40D525(_QWORD *a1, __int64 a2, _QWORD *a3)\n{\n  __int64 result; // rax\n  __int64 v4; // rax\n  float v5; // xmm0_4\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  float v8; // xmm1_4\n  __int64 v9; // rdx\n  __int64 v10; // rax\n  float v11; // xmm0_4\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  float v14; // xmm1_4\n  __int64 v15; // rdx\n  __int64 v16; // rax\n  float v17; // xmm0_4\n  __int64 v18; // rdx\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  __int64 v23; // rax\n  __int64 *v25; // [rsp+30h] [rbp-20h] BYREF\n  __int64 v26; // [rsp+38h] [rbp-18h]\n  __int64 v27; // [rsp+40h] [rbp-10h]\n  _QWORD *v28; // [rsp+48h] [rbp-8h]\n\n  if ( !a2 )\n    abort();\n  v26 = sub_40CFBE((__int64)a1, a2, &v25, 0);\n  if ( v26 )\n  {\n    if ( a3 )\n      *a3 = v26;\n    result = 0LL;\n  }\n  else\n  {\n    v4 = a1[3];\n    if ( v4 < 0 )\n    {\n      v6 = a1[3] & 1LL | ((unsigned __int64)v4 >> 1);\n      v5 = (float)(int)v6 + (float)(int)v6;\n    }\n    else\n    {\n      v5 = (float)(int)v4;\n    }\n    v7 = a1[2];\n    if ( v7 < 0 )\n    {\n      v9 = a1[2] & 1LL | ((unsigned __int64)v7 >> 1);\n      v8 = (float)(int)v9 + (float)(int)v9;\n    }\n    else\n    {\n      v8 = (float)(int)v7;\n    }\n    if ( v5 > (float)(v8 * *(float *)(a1[5] + 8LL)) )\n    {\n      sub_40C9C7((__int64)a1);\n      v10 = a1[3];\n      if ( v10 < 0 )\n      {\n        v12 = a1[3] & 1LL | ((unsigned __int64)v10 >> 1);\n        v11 = (float)(int)v12 + (float)(int)v12;\n      }\n      else\n      {\n        v11 = (float)(int)v10;\n      }\n      v13 = a1[2];\n      if ( v13 < 0 )\n      {\n        v15 = a1[2] & 1LL | ((unsigned __int64)v13 >> 1);\n        v14 = (float)(int)v15 + (float)(int)v15;\n      }\n      else\n      {\n        v14 = (float)(int)v13;\n      }\n      if ( v11 > (float)(v14 * *(float *)(a1[5] + 8LL)) )\n      {\n        v27 = a1[5];\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v16 = a1[2];\n          if ( v16 < 0 )\n          {\n            v18 = a1[2] & 1LL | ((unsigned __int64)v16 >> 1);\n            v17 = (float)(int)v18 + (float)(int)v18;\n          }\n          else\n          {\n            v17 = (float)(int)v16;\n          }\n          v19 = v17 * *(float *)(v27 + 12);\n        }\n        else\n        {\n          v20 = a1[2];\n          if ( v20 < 0 )\n          {\n            v22 = a1[2] & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v19 = (float)(v21 * *(float *)(v27 + 12)) * *(float *)(v27 + 8);\n        }\n        if ( v19 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        if ( v19 >= 9.223372e18 )\n          v23 = (unsigned int)(int)(float)(v19 - 9.223372e18) ^ 0x8000000000000000LL;\n        else\n          v23 = (unsigned int)(int)v19;\n        if ( (unsigned __int8)sub_40D321((__int64)a1, v23) != 1 )\n          return 0xFFFFFFFFLL;\n        if ( sub_40CFBE((__int64)a1, a2, &v25, 0) )\n          abort();\n      }\n    }\n    if ( *v25 )\n    {\n      v28 = sub_40CF3E((__int64)a1);\n      if ( v28 )\n      {\n        *v28 = a2;\n        v28[1] = v25[1];\n        v25[1] = (__int64)v28;\n        ++a1[4];\n        result = 1LL;\n      }\n      else\n      {\n        result = 0xFFFFFFFFLL;\n      }\n    }\n    else\n    {\n      *v25 = a2;\n      ++a1[4];\n      ++a1[3];\n      result = 1LL;\n    }\n  }\n  return result;\n}\n"], [4249663, "sub_40D83F", "__int64 __fastcall sub_40D83F(_QWORD *a1, __int64 a2)\n{\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h] BYREF\n\n  v3 = sub_40D525(a1, a2, &v4);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( v3 )\n    return a2;\n  return v4;\n}\n"], [4249736, "sub_40D888", "__int64 __fastcall sub_40D888(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rax\n  float v4; // xmm0_4\n  __int64 v5; // rdx\n  __int64 v6; // rax\n  float v7; // xmm1_4\n  __int64 v8; // rdx\n  __int64 v9; // rax\n  float v10; // xmm0_4\n  __int64 v11; // rdx\n  __int64 v12; // rax\n  float v13; // xmm1_4\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  float v16; // xmm0_4\n  __int64 v17; // rdx\n  float v18; // xmm0_4\n  __int64 v19; // rax\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  float v23; // xmm0_4\n  _QWORD *v24; // [rsp+10h] [rbp-30h] BYREF\n  void *ptr; // [rsp+18h] [rbp-28h]\n  __int64 v26; // [rsp+20h] [rbp-20h]\n  __int64 v27; // [rsp+28h] [rbp-18h]\n  __int64 v28; // [rsp+30h] [rbp-10h]\n  void *v29; // [rsp+38h] [rbp-8h]\n\n  v26 = sub_40CFBE(a1, a2, &v24, 1);\n  if ( !v26 )\n    return 0LL;\n  --*(_QWORD *)(a1 + 32);\n  if ( !*v24 )\n  {\n    v3 = --*(_QWORD *)(a1 + 24);\n    if ( v3 < 0 )\n    {\n      v5 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v3 >> 1);\n      v4 = (float)(int)v5 + (float)(int)v5;\n    }\n    else\n    {\n      v4 = (float)(int)v3;\n    }\n    v6 = *(_QWORD *)(a1 + 16);\n    if ( v6 < 0 )\n    {\n      v8 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v6 >> 1);\n      v7 = (float)(int)v8 + (float)(int)v8;\n    }\n    else\n    {\n      v7 = (float)(int)v6;\n    }\n    if ( (float)(v7 * **(float **)(a1 + 40)) > v4 )\n    {\n      sub_40C9C7(a1);\n      v9 = *(_QWORD *)(a1 + 24);\n      if ( v9 < 0 )\n      {\n        v11 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v9 >> 1);\n        v10 = (float)(int)v11 + (float)(int)v11;\n      }\n      else\n      {\n        v10 = (float)(int)v9;\n      }\n      v12 = *(_QWORD *)(a1 + 16);\n      if ( v12 < 0 )\n      {\n        v14 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v12 >> 1);\n        v13 = (float)(int)v14 + (float)(int)v14;\n      }\n      else\n      {\n        v13 = (float)(int)v12;\n      }\n      if ( (float)(v13 * **(float **)(a1 + 40)) > v10 )\n      {\n        v27 = *(_QWORD *)(a1 + 40);\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v15 = *(_QWORD *)(a1 + 16);\n          if ( v15 < 0 )\n          {\n            v17 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v15 >> 1);\n            v16 = (float)(int)v17 + (float)(int)v17;\n          }\n          else\n          {\n            v16 = (float)(int)v15;\n          }\n          v18 = v16 * *(float *)(v27 + 4);\n          if ( v18 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v18;\n        }\n        else\n        {\n          v20 = *(_QWORD *)(a1 + 16);\n          if ( v20 < 0 )\n          {\n            v22 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v23 = (float)(v21 * *(float *)(v27 + 4)) * *(float *)(v27 + 8);\n          if ( v23 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v23 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v23;\n        }\n        v28 = v19;\n        if ( (unsigned __int8)sub_40D321(a1, v19) != 1 )\n        {\n          for ( ptr = *(void **)(a1 + 72); ptr; ptr = v29 )\n          {\n            v29 = (void *)*((_QWORD *)ptr + 1);\n            free(ptr);\n          }\n          *(_QWORD *)(a1 + 72) = 0LL;\n        }\n      }\n    }\n  }\n  return v26;\n}\n"], [4250423, "sub_40DB37", "long double __fastcall sub_40DB37(int a1, long double a2)\n{\n  _BOOL4 v7; // eax\n  long double v9; // [rsp+0h] [rbp-30h]\n  unsigned __int64 v10; // [rsp+28h] [rbp-8h]\n\n  if ( a1 != 1 && a2 < 1.8446744073709551615e19 )\n  {\n    if ( a2 >= 9.223372036854775808e18 )\n      v10 = (__int64)(a2 - 9.223372036854775808e18) ^ 0x8000000000000000LL;\n    else\n      v10 = (__int64)a2;\n    v7 = !a1 && a2 != (long double)v10;\n    a2 = (long double)(v7 + v10);\n  }\n  *(_QWORD *)&v9 = *(_QWORD *)&a2;\n  DWORD2(v9) = DWORD2(a2);\n  return v9;\n}\n"], [4250670, "sub_40DC2E", "char *__fastcall sub_40DC2E(char *a1, size_t a2, unsigned __int8 *a3, const char *a4)\n{\n  char *i; // rbx\n  size_t v5; // rax\n  char *v6; // rbx\n  unsigned __int8 v10; // [rsp+27h] [rbp-69h]\n  size_t v11; // [rsp+28h] [rbp-68h]\n  size_t v12; // [rsp+30h] [rbp-60h]\n  size_t v13; // [rsp+38h] [rbp-58h]\n  char dest[56]; // [rsp+40h] [rbp-50h] BYREF\n  unsigned __int64 v15; // [rsp+78h] [rbp-18h]\n\n  v15 = __readfsqword(0x28u);\n  v11 = -1LL;\n  v13 = strlen(a4);\n  v12 = a2;\n  memcpy(dest, a1, a2);\n  for ( i = &a1[a2]; ; memcpy(i, a4, v13) )\n  {\n    v10 = *a3;\n    if ( *a3 )\n    {\n      if ( v10 > 0x7Eu )\n        v5 = v12;\n      else\n        v5 = v10;\n      v11 = v5;\n      ++a3;\n    }\n    if ( v12 < v11 )\n      v11 = v12;\n    v6 = &i[-v11];\n    v12 -= v11;\n    memcpy(v6, &dest[v12], v11);\n    if ( !v12 )\n      break;\n    i = &v6[-v13];\n  }\n  return v6;\n}\n"], [4250981, "sub_40DD65", "char *__fastcall sub_40DD65(unsigned __int64 a1, char *a2, __int16 a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  int v5; // eax\n  int v6; // eax\n  long double v7; // fst7\n  long double v8; // fst7\n  long double v9; // fst7\n  int v10; // eax\n  bool v11; // al\n  bool v12; // al\n  bool v13; // al\n  bool v14; // al\n  char *v15; // rax\n  char v16; // dl\n  char *v17; // rax\n  char *v18; // rax\n  long double v20; // [rsp+0h] [rbp-130h]\n  int v24; // [rsp+44h] [rbp-ECh]\n  int v25; // [rsp+48h] [rbp-E8h]\n  int v26; // [rsp+4Ch] [rbp-E4h]\n  int v27; // [rsp+50h] [rbp-E0h]\n  unsigned int v28; // [rsp+54h] [rbp-DCh]\n  unsigned int v29; // [rsp+5Ch] [rbp-D4h]\n  unsigned int v30; // [rsp+60h] [rbp-D0h]\n  unsigned __int64 v31; // [rsp+68h] [rbp-C8h]\n  char *dest; // [rsp+70h] [rbp-C0h]\n  char *desta; // [rsp+70h] [rbp-C0h]\n  char *v34; // [rsp+78h] [rbp-B8h]\n  char *v35; // [rsp+80h] [rbp-B0h]\n  char *src; // [rsp+88h] [rbp-A8h]\n  size_t v37; // [rsp+90h] [rbp-A0h]\n  const char *v38; // [rsp+98h] [rbp-98h]\n  unsigned __int64 n; // [rsp+A0h] [rbp-90h]\n  size_t v40; // [rsp+A8h] [rbp-88h]\n  unsigned __int64 i; // [rsp+B0h] [rbp-80h]\n  unsigned __int8 *v42; // [rsp+B8h] [rbp-78h]\n  struct lconv *v43; // [rsp+C0h] [rbp-70h]\n  size_t v44; // [rsp+C8h] [rbp-68h]\n  unsigned __int64 v45; // [rsp+E8h] [rbp-48h]\n  long double v46; // [rsp+F0h] [rbp-40h]\n  long double v47; // [rsp+110h] [rbp-20h]\n  long double v48; // [rsp+110h] [rbp-20h]\n\n  v27 = a3 & 3;\n  if ( (a3 & 0x20) != 0 )\n    v5 = 1024;\n  else\n    v5 = 1000;\n  v28 = v5;\n  v25 = -1;\n  src = \".\";\n  v37 = 1LL;\n  v38 = (const char *)&unk_41902B;\n  v43 = localeconv();\n  v44 = strlen(v43->decimal_point);\n  if ( v44 && v44 <= 0x10 )\n  {\n    src = v43->decimal_point;\n    v37 = v44;\n  }\n  v42 = (unsigned __int8 *)v43->grouping;\n  if ( strlen(v43->thousands_sep) <= 0x10 )\n    v38 = v43->thousands_sep;\n  v34 = a2 + 648;\n  dest = a2 + 648;\n  if ( a5 > a4 )\n  {\n    if ( a4 && !(a5 % a4) )\n    {\n      v45 = 2 * (10 * (a1 % (a5 / a4)) % (a5 / a4));\n      v31 = a1 / (a5 / a4);\n      v24 = 10 * (a1 % (a5 / a4)) / (a5 / a4);\n      if ( v45 >= a5 / a4 )\n      {\n        if ( a5 / a4 >= v45 )\n          v6 = 2;\n        else\n          v6 = 3;\n      }\n      else\n      {\n        v6 = v45 != 0;\n      }\n      v26 = v6;\nLABEL_32:\n      if ( (a3 & 0x10) != 0 )\n      {\n        v25 = 0;\n        if ( v28 <= v31 )\n        {\n          do\n          {\n            v29 = 10 * (v31 % v28) + v24;\n            v30 = 2 * (v29 % v28) + (v26 >> 1);\n            v31 /= v28;\n            v24 = v29 / v28;\n            if ( v30 >= v28 )\n            {\n              if ( v26 + v30 <= v28 )\n                v10 = 2;\n              else\n                v10 = 3;\n            }\n            else\n            {\n              v10 = v26 + v30 != 0;\n            }\n            v26 = v10;\n            ++v25;\n          }\n          while ( v28 <= v31 && v25 < 8 );\n          if ( v31 <= 9 )\n          {\n            if ( v27 == 1 )\n            {\n              v11 = (int)(((v29 / v28) & 1) + v10) > 2;\n            }\n            else\n            {\n              v12 = !v27 && v10 > 0;\n              v11 = v12;\n            }\n            if ( v11 )\n            {\n              ++v24;\n              v26 = 0;\n              if ( v24 == 10 )\n              {\n                ++v31;\n                v24 = 0;\n              }\n            }\n            if ( v31 <= 9 && (v24 || (a3 & 8) == 0) )\n            {\n              a2[647] = v24 + 48;\n              dest = &a2[-v37 + 647];\n              memcpy(dest, src, v37);\n              v26 = 0;\n              v24 = 0;\n            }\n          }\n        }\n      }\n      if ( v27 == 1 )\n      {\n        v13 = ((v31 & 1) + v26 != 0) + v24 > 5;\n      }\n      else\n      {\n        v14 = !v27 && v24 + v26 > 0;\n        v13 = v14;\n      }\n      if ( v13 )\n      {\n        ++v31;\n        if ( (a3 & 0x10) != 0 && v28 == v31 && v25 < 8 )\n        {\n          ++v25;\n          if ( (a3 & 8) == 0 )\n          {\n            desta = dest - 1;\n            *desta = 48;\n            dest = &desta[-v37];\n            memcpy(dest, src, v37);\n          }\n          v31 = 1LL;\n        }\n      }\n      v35 = dest;\n      do\n      {\n        *--dest = v31 % 0xA + 48;\n        v31 /= 0xAuLL;\n      }\n      while ( v31 );\n      goto LABEL_72;\n    }\n  }\n  else if ( !(a4 % a5) )\n  {\n    v31 = a4 / a5 * a1;\n    if ( v31 / (a4 / a5) == a1 )\n    {\n      v24 = 0;\n      v26 = 0;\n      goto LABEL_32;\n    }\n  }\n  v47 = (long double)a1 * ((long double)a4 / (long double)a5);\n  if ( (a3 & 0x10) != 0 )\n  {\n    *(_QWORD *)&v46 = 0x8000000000000000LL;\n    DWORD2(v46) = 0x3FFF;\n    v25 = 0;\n    do\n    {\n      v46 = (long double)v28 * v46;\n      ++v25;\n    }\n    while ( v47 >= (long double)v28 * v46 && v25 < 8 );\n    v48 = v47 / v46;\n    *(_QWORD *)&v20 = *(_QWORD *)&v48;\n    DWORD2(v20) = DWORD2(v48);\n    v8 = sub_40DB37(v27, v20);\n    sprintf(a2, \"%.1Lf\", v8);\n    n = strlen(a2);\n    v40 = v37 + 1;\n    if ( ((a3 & 0x20) == 0) + v37 + 1 + 1 < n || (a3 & 8) != 0 && a2[n - 1] == 48 )\n    {\n      v9 = sub_40DB37(v27, v48 * 10.0);\n      sprintf(a2, \"%.0Lf\", v9 / 10.0);\n      n = strlen(a2);\n      v40 = 0LL;\n    }\n  }\n  else\n  {\n    *(_QWORD *)&v20 = *(_QWORD *)&v47;\n    DWORD2(v20) = DWORD2(v47);\n    v7 = sub_40DB37(v27, v20);\n    sprintf(a2, \"%.0Lf\", v7);\n    n = strlen(a2);\n    v40 = 0LL;\n  }\n  dest = &v34[-n];\n  memmove(&v34[-n], a2, n);\n  v35 = &v34[-v40];\nLABEL_72:\n  if ( (a3 & 4) != 0 )\n    dest = sub_40DC2E(dest, v35 - dest, v42, v38);\n  if ( (a3 & 0x80) != 0 )\n  {\n    if ( v25 < 0 )\n    {\n      v25 = 0;\n      for ( i = 1LL; i < a5; i *= v28 )\n      {\n        if ( ++v25 == 8 )\n          break;\n      }\n    }\n    if ( v25 | a3 & 0x100 && (a3 & 0x40) != 0 )\n    {\n      v34 = a2 + 649;\n      a2[648] = 32;\n    }\n    if ( v25 )\n    {\n      v15 = v34++;\n      if ( (a3 & 0x20) == 0 && v25 == 1 )\n        v16 = 107;\n      else\n        v16 = byte_419020[v25];\n      *v15 = v16;\n    }\n    if ( (a3 & 0x100) != 0 )\n    {\n      if ( (a3 & 0x20) != 0 && v25 )\n      {\n        v17 = v34++;\n        *v17 = 105;\n      }\n      v18 = v34++;\n      *v18 = 66;\n    }\n  }\n  *v34 = 0;\n  return dest;\n}\n"], [4253699, "sub_40E803", "__int64 sub_40E803()\n{\n  __int64 result; // rax\n\n  if ( getenv(\"POSIXLY_CORRECT\") )\n    result = 512LL;\n  else\n    result = 1024LL;\n  return result;\n}\n"], [4253732, "sub_40E824", "__int64 __fastcall sub_40E824(char *a1, _QWORD *a2, int *a3)\n{\n  char *v5; // [rsp+18h] [rbp-28h]\n  int v6; // [rsp+2Ch] [rbp-14h]\n  int v7; // [rsp+30h] [rbp-10h]\n  unsigned int v8; // [rsp+34h] [rbp-Ch]\n  char *v9; // [rsp+38h] [rbp-8h] BYREF\n\n  v5 = a1;\n  v6 = 0;\n  if ( a1 || (v5 = getenv(\"BLOCK_SIZE\")) != 0LL || (v5 = getenv(\"BLOCKSIZE\")) != 0LL )\n  {\n    if ( *v5 == 39 )\n    {\n      v6 = 4;\n      ++v5;\n    }\n    v7 = sub_40B252(v5, (__int64)off_419050, (__int64)dword_419068, 4uLL);\n    if ( v7 < 0 )\n    {\n      v8 = sub_41520C(v5, &v9, 0LL, a2, \"eEgGkKmMpPtTyYzZ0\");\n      if ( v8 )\n      {\n        *a3 = 0;\n        return v8;\n      }\n      while ( *v5 <= 47 || *v5 > 57 )\n      {\n        if ( v5 == v9 )\n        {\n          v6 |= 0x80u;\n          if ( *(v9 - 1) == 66 )\n            v6 |= 0x100u;\n          if ( *(v9 - 1) != 66 || *(v9 - 2) == 105 )\n            v6 |= 0x20u;\n          break;\n        }\n        ++v5;\n      }\n    }\n    else\n    {\n      v6 |= dword_419068[v7];\n      *a2 = 1LL;\n    }\n  }\n  else\n  {\n    *a2 = sub_40E803();\n  }\n  *a3 = v6;\n  return 0LL;\n}\n"], [4254094, "sub_40E98E", "__int64 __fastcall sub_40E98E(char *a1, int *a2, _QWORD *a3)\n{\n  unsigned int v5; // [rsp+2Ch] [rbp-4h]\n\n  v5 = sub_40E824(a1, a3, a2);\n  if ( !*a3 )\n  {\n    *a3 = sub_40E803();\n    v5 = 4;\n  }\n  return v5;\n}\n"], [4254176, "sub_40E9E0", "__int64 __fastcall sub_40E9E0(__uid_t a1)\n{\n  const char *v1; // rax\n  size_t v2; // rax\n  __int64 result; // rax\n  __int64 i; // [rsp+10h] [rbp-20h]\n  __int64 v5; // [rsp+18h] [rbp-18h]\n  struct passwd *v6; // [rsp+20h] [rbp-10h]\n  char *s; // [rsp+28h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = qword_61E1A0; i; i = *(_QWORD *)(i + 8) )\n  {\n    if ( *(_DWORD *)i == a1 )\n    {\n      v5 = i;\n      break;\n    }\n  }\n  if ( !v5 )\n  {\n    v6 = getpwuid(a1);\n    if ( v6 )\n      v1 = v6->pw_name;\n    else\n      v1 = (const char *)&unk_4190F0;\n    s = (char *)v1;\n    v2 = strlen(v1);\n    v5 = sub_414989(v2 + 17);\n    *(_DWORD *)v5 = a1;\n    strcpy((char *)(v5 + 16), s);\n    *(_QWORD *)(v5 + 8) = qword_61E1A0;\n    qword_61E1A0 = v5;\n  }\n  if ( *(_BYTE *)(v5 + 16) )\n    result = v5 + 16;\n  else\n    result = 0LL;\n  return result;\n}\n"], [4254409, "sub_40EAC9", "__int64 __fastcall sub_40EAC9(const char *a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 i; // [rsp+10h] [rbp-10h]\n  __int64 j; // [rsp+10h] [rbp-10h]\n  __int64 v5; // [rsp+10h] [rbp-10h]\n  struct passwd *v6; // [rsp+18h] [rbp-8h]\n\n  for ( i = qword_61E1A0; i; i = *(_QWORD *)(i + 8) )\n  {\n    if ( *(_BYTE *)(i + 16) == *a1 && !strcmp((const char *)(i + 16), a1) )\n      return i;\n  }\n  for ( j = qword_61E1A8; j; j = *(_QWORD *)(j + 8) )\n  {\n    if ( *(_BYTE *)(j + 16) == *a1 && !strcmp((const char *)(j + 16), a1) )\n      return 0LL;\n  }\n  v6 = getpwnam(a1);\n  v2 = strlen(a1);\n  v5 = sub_414989(v2 + 17);\n  strcpy((char *)(v5 + 16), a1);\n  if ( v6 )\n  {\n    *(_DWORD *)v5 = v6->pw_uid;\n    *(_QWORD *)(v5 + 8) = qword_61E1A0;\n    qword_61E1A0 = v5;\n    result = v5;\n  }\n  else\n  {\n    *(_QWORD *)(v5 + 8) = qword_61E1A8;\n    qword_61E1A8 = v5;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4254748, "sub_40EC1C", "__int64 __fastcall sub_40EC1C(__gid_t a1)\n{\n  const char *v1; // rax\n  size_t v2; // rax\n  __int64 result; // rax\n  __int64 i; // [rsp+10h] [rbp-20h]\n  __int64 v5; // [rsp+18h] [rbp-18h]\n  struct group *v6; // [rsp+20h] [rbp-10h]\n  char *s; // [rsp+28h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = qword_61E1B0; i; i = *(_QWORD *)(i + 8) )\n  {\n    if ( *(_DWORD *)i == a1 )\n    {\n      v5 = i;\n      break;\n    }\n  }\n  if ( !v5 )\n  {\n    v6 = getgrgid(a1);\n    if ( v6 )\n      v1 = v6->gr_name;\n    else\n      v1 = (const char *)&unk_4190F0;\n    s = (char *)v1;\n    v2 = strlen(v1);\n    v5 = sub_414989(v2 + 17);\n    *(_DWORD *)v5 = a1;\n    strcpy((char *)(v5 + 16), s);\n    *(_QWORD *)(v5 + 8) = qword_61E1B0;\n    qword_61E1B0 = v5;\n  }\n  if ( *(_BYTE *)(v5 + 16) )\n    result = v5 + 16;\n  else\n    result = 0LL;\n  return result;\n}\n"], [4254981, "sub_40ED05", "__int64 __fastcall sub_40ED05(const char *a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 i; // [rsp+10h] [rbp-10h]\n  __int64 j; // [rsp+10h] [rbp-10h]\n  __int64 v5; // [rsp+10h] [rbp-10h]\n  struct group *v6; // [rsp+18h] [rbp-8h]\n\n  for ( i = qword_61E1B0; i; i = *(_QWORD *)(i + 8) )\n  {\n    if ( *(_BYTE *)(i + 16) == *a1 && !strcmp((const char *)(i + 16), a1) )\n      return i;\n  }\n  for ( j = qword_61E1B8; j; j = *(_QWORD *)(j + 8) )\n  {\n    if ( *(_BYTE *)(j + 16) == *a1 && !strcmp((const char *)(j + 16), a1) )\n      return 0LL;\n  }\n  v6 = getgrnam(a1);\n  v2 = strlen(a1);\n  v5 = sub_414989(v2 + 17);\n  strcpy((char *)(v5 + 16), a1);\n  if ( v6 )\n  {\n    *(_DWORD *)v5 = v6->gr_gid;\n    *(_QWORD *)(v5 + 8) = qword_61E1B0;\n    qword_61E1B0 = v5;\n    result = v5;\n  }\n  else\n  {\n    *(_QWORD *)(v5 + 8) = qword_61E1B8;\n    qword_61E1B8 = v5;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4255320, "sub_40EE58", "__int64 __fastcall sub_40EE58(__int64 a1, __int64 a2)\n{\n  __int64 v3; // [rsp+8h] [rbp-18h]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = a1;\n  v4 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  if ( a1 >= 0 )\n  {\n    do\n    {\n      *(_BYTE *)--v4 = (char)v3 % 10 + 48;\n      v3 /= 10LL;\n    }\n    while ( v3 );\n  }\n  else\n  {\n    do\n    {\n      *(_BYTE *)--v4 = 48 - (char)v3 % 10;\n      v3 /= 10LL;\n    }\n    while ( v3 );\n    *(_BYTE *)--v4 = 45;\n  }\n  return v4;\n}\n"], [4255626, "sub_40EF8A", "__int64 __fastcall sub_40EF8A(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  do\n  {\n    *(_BYTE *)--v4 = a1 % 0xA + 48;\n    a1 /= 0xAuLL;\n  }\n  while ( a1 );\n  return v4;\n}\n"], [4255759, "sub_40F00F", "__int64 __fastcall sub_40F00F(wint_t *a1)\n{\n  unsigned __int8 v2; // [rsp+17h] [rbp-9h]\n\n  v2 = 0;\n  while ( *a1 )\n  {\n    if ( !iswprint(*a1) )\n    {\n      *a1 = 65533;\n      v2 = 1;\n    }\n    ++a1;\n  }\n  return v2;\n}\n"], [4255837, "sub_40F05D", "__int64 __fastcall sub_40F05D(wchar_t *a1, unsigned __int64 a2)\n{\n  int v4; // [rsp+14h] [rbp-Ch]\n  __int64 v5; // [rsp+18h] [rbp-8h]\n\n  v5 = 0LL;\n  while ( *a1 )\n  {\n    v4 = wcwidth(*a1);\n    if ( v4 == -1 )\n    {\n      *a1 = 65533;\n      v4 = 1;\n    }\n    if ( v4 + v5 > a2 )\n      break;\n    v5 += v4;\n    ++a1;\n  }\n  *a1 = 0;\n  return v5;\n}\n"], [4255970, "sub_40F0E2", "_BYTE *__fastcall sub_40F0E2(_BYTE *a1, unsigned __int64 a2, __int64 a3)\n{\n  _BYTE *v3; // rax\n  __int64 v4; // rax\n\n  while ( 1 )\n  {\n    v4 = a3--;\n    if ( !v4 || (unsigned __int64)a1 >= a2 )\n      break;\n    v3 = a1++;\n    *v3 = 32;\n  }\n  *a1 = 0;\n  return a1;\n}\n"], [4256043, "sub_40F12B", "__int64 __fastcall sub_40F12B(const char *a1, _BYTE *a2, __int64 a3, unsigned __int64 *a4, int a5, char a6)\n{\n  size_t v6; // rax\n  _BYTE *v7; // rax\n  size_t v8; // rax\n  void *dest; // [rsp+20h] [rbp-80h]\n  _BYTE *desta; // [rsp+20h] [rbp-80h]\n  char v16; // [rsp+36h] [rbp-6Ah]\n  char v17; // [rsp+37h] [rbp-69h]\n  __int64 v18; // [rsp+38h] [rbp-68h]\n  size_t size; // [rsp+40h] [rbp-60h]\n  char *v20; // [rsp+48h] [rbp-58h]\n  wchar_t *pwcs; // [rsp+50h] [rbp-50h]\n  void *src; // [rsp+58h] [rbp-48h]\n  unsigned __int64 v23; // [rsp+60h] [rbp-40h]\n  size_t v24; // [rsp+68h] [rbp-38h]\n  unsigned __int64 v25; // [rsp+70h] [rbp-30h]\n  __int64 v26; // [rsp+80h] [rbp-20h]\n  size_t n; // [rsp+88h] [rbp-18h]\n  size_t na; // [rsp+88h] [rbp-18h]\n  unsigned __int64 v29; // [rsp+90h] [rbp-10h]\n  size_t v30; // [rsp+98h] [rbp-8h]\n\n  v18 = -1LL;\n  v6 = strlen(a1);\n  size = v6 + 1;\n  v20 = 0LL;\n  pwcs = 0LL;\n  src = (void *)a1;\n  v23 = v6;\n  v24 = v6;\n  v25 = 0LL;\n  v16 = 0;\n  v17 = 0;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    n = mbstowcs(0LL, a1, 0LL);\n    if ( n == -1LL )\n    {\n      if ( (a6 & 1) == 0 )\n        goto LABEL_32;\n      goto LABEL_19;\n    }\n    na = n + 1;\n    pwcs = (wchar_t *)malloc(4 * na);\n    if ( !pwcs )\n    {\n      if ( (a6 & 1) == 0 )\n        goto LABEL_32;\n      goto LABEL_19;\n    }\n    if ( mbstowcs(pwcs, a1, na) )\n    {\n      pwcs[na - 1] = 0;\n      v17 = 1;\n      v16 = sub_40F00F((wint_t *)pwcs);\n      v23 = wcswidth(pwcs, na);\n    }\n  }\n  if ( v17 && (v16 || *a4 < v23) )\n  {\n    if ( v16 )\n      size = wcstombs(0LL, pwcs, 0LL) + 1;\n    v20 = (char *)malloc(size);\n    if ( v20 )\n    {\n      src = v20;\n      v23 = sub_40F05D(pwcs, *a4);\n      v24 = wcstombs(v20, pwcs, size);\n    }\n    else if ( (a6 & 1) == 0 )\n    {\n      goto LABEL_32;\n    }\n  }\nLABEL_19:\n  if ( *a4 < v23 )\n  {\n    v23 = *a4;\n    v24 = *a4;\n  }\n  if ( *a4 > v23 )\n    v25 = *a4 - v23;\n  *a4 = v23;\n  v18 = v24 + v25;\n  if ( a3 )\n  {\n    v29 = (unsigned __int64)&a2[a3 - 1];\n    if ( a5 )\n    {\n      if ( a5 == 1 )\n      {\n        v26 = 0LL;\n        v7 = sub_40F0E2(a2, v29, v25);\n      }\n      else\n      {\n        v26 = v25 >> 1;\n        v7 = sub_40F0E2(a2, v29, (v25 >> 1) + (v25 & 1));\n      }\n    }\n    else\n    {\n      v26 = v25;\n      v7 = sub_40F0E2(a2, v29, 0LL);\n    }\n    dest = v7;\n    v30 = v29 - (_QWORD)v7;\n    v8 = v24;\n    if ( v30 <= v24 )\n      v8 = v30;\n    desta = mempcpy(dest, src, v8);\n    sub_40F0E2(desta, v29, v26);\n  }\nLABEL_32:\n  free(pwcs);\n  free(v20);\n  return v18;\n}\n"], [4256943, "sub_40F4AF", "void *__fastcall sub_40F4AF(const char *a1, unsigned __int64 *a2, int a3, char a4)\n{\n  unsigned __int64 size; // [rsp+28h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+30h] [rbp-20h]\n  void *ptr; // [rsp+38h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+40h] [rbp-10h]\n  _BYTE *v11; // [rsp+48h] [rbp-8h]\n\n  v10 = *a2;\n  size = *a2;\n  v8 = *a2;\n  ptr = 0LL;\n  while ( v8 >= size )\n  {\n    size = v8 + 1;\n    v11 = realloc(ptr, v8 + 1);\n    if ( !v11 )\n    {\n      free(ptr);\n      return 0LL;\n    }\n    ptr = v11;\n    *a2 = v10;\n    v8 = sub_40F12B(a1, v11, size, a2, a3, a4);\n    if ( v8 == -1LL )\n    {\n      free(v11);\n      return 0LL;\n    }\n  }\n  return ptr;\n}\n"], [4257181, "sub_40F59D", "__int64 __fastcall sub_40F59D(const char *a1, unsigned int a2)\n{\n  size_t v2; // rax\n\n  v2 = strlen(a1);\n  return sub_40F5CF(a1, v2, a2);\n}\n"], [4257231, "sub_40F5CF", "__int64 __fastcall sub_40F5CF(char *a1, __int64 a2, char a3)\n{\n  int v3; // eax\n  char *v5; // rax\n  unsigned __int8 v7; // [rsp+2Bh] [rbp-45h]\n  wchar_t pwc; // [rsp+2Ch] [rbp-44h] BYREF\n  unsigned int v9; // [rsp+30h] [rbp-40h]\n  int v10; // [rsp+34h] [rbp-3Ch]\n  char *v11; // [rsp+38h] [rbp-38h]\n  size_t v12; // [rsp+40h] [rbp-30h]\n  char *v13; // [rsp+48h] [rbp-28h]\n  mbstate_t s[4]; // [rsp+50h] [rbp-20h] BYREF\n\n  s[1] = (mbstate_t)__readfsqword(0x28u);\n  v11 = a1;\n  v13 = &a1[a2];\n  v9 = 0;\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    while ( 1 )\n    {\n      do\n      {\n        while ( 1 )\n        {\n          if ( v11 >= v13 )\n            return v9;\n          v5 = v11++;\n          v7 = *v5;\n          if ( ((*__ctype_b_loc())[v7] & 0x4000) == 0 )\n            break;\n          if ( v9 == 0x7FFFFFFF )\n            return 0x7FFFFFFFLL;\n          ++v9;\n        }\n        if ( (a3 & 2) != 0 )\n          return 0xFFFFFFFFLL;\n      }\n      while ( ((*__ctype_b_loc())[v7] & 2) != 0 );\n      if ( v9 == 0x7FFFFFFF )\n        return 0x7FFFFFFFLL;\n      ++v9;\n    }\n  }\n  while ( 1 )\n  {\nLABEL_31:\n    if ( v11 >= v13 )\n      return v9;\n    v3 = *v11;\n    if ( v3 > 63 )\n      break;\n    if ( v3 < 37 && (unsigned int)(v3 - 32) > 3 )\n      goto LABEL_11;\nLABEL_10:\n    ++v11;\n    ++v9;\n  }\n  if ( v3 >= 65 && (v3 <= 95 || (unsigned int)(v3 - 97) <= 0x1D) )\n    goto LABEL_10;\nLABEL_11:\n  memset(s, 0, 8uLL);\n  while ( 1 )\n  {\n    v12 = mbrtowc(&pwc, v11, v13 - v11, s);\n    if ( v12 == -1LL )\n    {\n      if ( (a3 & 1) == 0 )\n      {\n        ++v11;\n        ++v9;\n        goto LABEL_31;\n      }\n      return 0xFFFFFFFFLL;\n    }\n    if ( v12 == -2LL )\n      break;\n    if ( !v12 )\n      v12 = 1LL;\n    v10 = wcwidth(pwc);\n    if ( v10 < 0 )\n    {\n      if ( (a3 & 2) != 0 )\n        return 0xFFFFFFFFLL;\n      if ( !iswcntrl(pwc) )\n      {\n        if ( v9 == 0x7FFFFFFF )\n          return 0x7FFFFFFFLL;\n        ++v9;\n      }\n    }\n    else\n    {\n      if ( (int)(0x7FFFFFFF - v9) < v10 )\n        return 0x7FFFFFFFLL;\n      v9 += v10;\n    }\n    v11 += v12;\n    if ( mbsinit(s) )\n      goto LABEL_31;\n  }\n  if ( (a3 & 1) == 0 )\n  {\n    v11 = v13;\n    ++v9;\n    goto LABEL_31;\n  }\n  return 0xFFFFFFFFLL;\n}\n"], [4257883, "sub_40F85B", "void *__fastcall sub_40F85B(__int64 *a1, unsigned __int64 a2, _QWORD *a3, __int64 (__fastcall *a4)(__int64, __int64))\n{\n  int i; // eax\n  _QWORD *v5; // rax\n  _QWORD *v6; // rax\n  _QWORD *dest; // [rsp+8h] [rbp-58h]\n  unsigned __int64 v10; // [rsp+20h] [rbp-40h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-38h]\n  unsigned __int64 v12; // [rsp+30h] [rbp-30h]\n  __int64 v13; // [rsp+38h] [rbp-28h]\n  __int64 v14; // [rsp+40h] [rbp-20h]\n\n  dest = a3;\n  v10 = 0LL;\n  v11 = a2 >> 1;\n  v12 = a2 >> 1;\n  sub_40FA09(&a1[a2 >> 1], a2 - (a2 >> 1), a3, a4);\n  sub_40FA09(a1, a2 >> 1, dest, a4);\n  v13 = *a1;\n  v14 = a1[a2 >> 1];\n  for ( i = a4(*a1, v14); ; i = a4(v13, v14) )\n  {\n    while ( i > 0 )\n    {\n      v6 = dest++;\n      *v6 = v14;\n      if ( ++v12 == a2 )\n        return memcpy(dest, &a1[v10], 8 * (v11 - v10));\n      v14 = a1[v12];\n      i = a4(v13, v14);\n    }\n    v5 = dest++;\n    *v5 = v13;\n    if ( ++v10 == v11 )\n      break;\n    v13 = a1[v10];\n  }\n  v10 = v12;\n  v11 = a2;\n  return memcpy(dest, &a1[v10], 8 * (v11 - v10));\n}\n"], [4258313, "sub_40FA09", "void __fastcall sub_40FA09(__int64 *a1, unsigned __int64 a2, __int64 *a3, __int64 (__fastcall *a4)(__int64, __int64))\n{\n  int i; // eax\n  __int64 v5; // rax\n  __int64 v6; // rax\n  __int64 v9; // [rsp+28h] [rbp-58h]\n  __int64 v10; // [rsp+30h] [rbp-50h]\n  unsigned __int64 v11; // [rsp+38h] [rbp-48h]\n  __int64 v12; // [rsp+40h] [rbp-40h]\n  __int64 v13; // [rsp+48h] [rbp-38h]\n  __int64 v14; // [rsp+50h] [rbp-30h]\n  __int64 v15; // [rsp+58h] [rbp-28h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-10h]\n\n  if ( a2 > 2 )\n  {\n    v10 = 0LL;\n    v16 = a2 >> 1;\n    v11 = a2 >> 1;\n    sub_40FA09(&a1[a2 >> 1], a2 - (a2 >> 1), a3, a4);\n    if ( a2 >> 1 > 1 )\n      sub_40F85B(a1, a2 >> 1, a3, a4);\n    else\n      *a3 = *a1;\n    v13 = *a3;\n    v12 = a1[v11];\n    v9 = 0LL;\n    for ( i = a4(*a3, v12); ; i = a4(v13, v12) )\n    {\n      while ( i <= 0 )\n      {\n        v5 = v9++;\n        a1[v5] = v13;\n        if ( ++v10 == v16 )\n          return;\n        v13 = a3[v10];\n        i = a4(v13, v12);\n      }\n      v6 = v9++;\n      a1[v6] = v12;\n      if ( ++v11 == a2 )\n        break;\n      v12 = a1[v11];\n    }\n    memcpy(&a1[v9], &a3[v10], 8 * (v16 - v10));\n  }\n  else if ( a2 == 2 )\n  {\n    v14 = *a1;\n    v15 = a1[1];\n    if ( (int)a4(*a1, v15) > 0 )\n    {\n      *a1 = v15;\n      a1[1] = v14;\n    }\n  }\n}\n"], [4258903, "sub_40FC57", "void __fastcall sub_40FC57(__int64 *a1, unsigned __int64 a2, __int64 (__fastcall *a3)(__int64, __int64))\n{\n  sub_40FA09(a1, a2, &a1[a2], a3);\n}\n"], [4258971, "sub_40FC9B", "char *__fastcall sub_40FC9B(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_61E1C0 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4259202, "sub_40FD82", "__int64 __fastcall sub_40FD82(unsigned int a1, __int64 a2)\n{\n  return sub_411231(a1, 6LL, a2);\n}\n"], [4259238, "sub_40FDA6", "__int64 __fastcall sub_40FDA6(__int64 a1)\n{\n  return sub_40FD82(0, a1);\n}\n"], [4259269, "sub_40FDC5", "__int64 __fastcall sub_40FDC5(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_61E1E0;\n  v4 = sub_414AAD(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4259342, "sub_40FE0E", "__int64 __fastcall sub_40FE0E(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_61E1E0;\n  return *(unsigned int *)v1;\n}\n"], [4259372, "sub_40FE2C", "__int64 *__fastcall sub_40FE2C(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_61E1E0;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4259408, "sub_40FE50", "__int64 __fastcall sub_40FE50(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_61E1E0;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4259544, "sub_40FED8", "__int64 __fastcall sub_40FED8(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_61E1E0;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4259595, "sub_40FF0B", "__int64 *__fastcall sub_40FF0B(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_61E1E0;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4259685, "sub_40FF65", "_QWORD *__fastcall sub_40FF65(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4259805, "sub_40FFDD", "char *__fastcall sub_40FFDD(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)asc_419200;\n  return v3;\n}\n"], [4259866, "sub_41001A", "unsigned __int64 __fastcall sub_41001A(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_40FFDD((const char *)&asc_419200[1], a5);\n        a9 = sub_40FFDD((const char *)&asc_419200[2], a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)asc_419200;\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(asc_419200 + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_41001A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4263013, "sub_410C65", "unsigned __int64 __fastcall sub_410C65(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_61E1E0;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_41001A(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4263173, "sub_410D05", "__int64 __fastcall sub_410D05(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_410D37(a1, a2, 0LL, a3);\n}\n"], [4263223, "sub_410D37", "__int64 __fastcall sub_410D37(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_61E1E0;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_41001A(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_41496F(v10);\n  sub_41001A(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4263523, "sub_410E63", "void sub_410E63()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_61D5B0;\n  for ( i = 1; i < dword_61D590; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_61E220 )\n  {\n    free(ptr[1]);\n    qword_61D5A0 = 256LL;\n    off_61D5A8 = &unk_61E220;\n  }\n  if ( ptr != (void **)&qword_61D5A0 )\n  {\n    free(ptr);\n    off_61D5B0 = &qword_61D5A0;\n  }\n  dword_61D590 = 1;\n}\n"], [4263694, "sub_410F0E", "void *__fastcall sub_410F0E(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_61D5B0;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_61D590 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_61D5B0 == &qword_61D5A0;\n    if ( off_61D5B0 == &qword_61D5A0 )\n      v4 = 0LL;\n    else\n      v4 = off_61D5B0;\n    v12 = (__int64 *)sub_4149BE(v4, 16 * v14);\n    off_61D5B0 = v12;\n    if ( v9 )\n    {\n      v5 = off_61D5A8;\n      *v12 = qword_61D5A0;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_61D590], 0, 16 * (v14 - (unsigned int)dword_61D590));\n    dword_61D590 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_41001A((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_61E220 )\n      free(ptr);\n    ptr = (void *)sub_41496F(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_41001A((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4264340, "sub_411194", "void *__fastcall sub_411194(int a1, __int64 a2)\n{\n  return sub_410F0E(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_61E1E0);\n}\n"], [4264383, "sub_4111BF", "void *__fastcall sub_4111BF(int a1, __int64 a2, size_t a3)\n{\n  return sub_410F0E(a1, a2, a3, (__int64)&qword_61E1E0);\n}\n"], [4264427, "sub_4111EB", "void *__fastcall sub_4111EB(__int64 a1)\n{\n  return sub_411194(0, a1);\n}\n"], [4264458, "sub_41120A", "void *__fastcall sub_41120A(__int64 a1, size_t a2)\n{\n  return sub_4111BF(0, a1, a2);\n}\n"], [4264497, "sub_411231", "void *__fastcall sub_411231(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_40FF65(v5, a2);\n  return sub_410F0E(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4264562, "sub_411272", "void *__fastcall sub_411272(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_40FF65(v7, a2);\n  return sub_410F0E(a1, a3, a4, (__int64)v7);\n}\n"], [4264625, "sub_4112B1", "void *__fastcall sub_4112B1(int a1, __int64 a2)\n{\n  return sub_411231(0, a1, a2);\n}\n"], [4264661, "sub_4112D5", "void *__fastcall sub_4112D5(int a1, __int64 a2, size_t a3)\n{\n  return sub_411272(0, a1, a2, a3);\n}\n"], [4264705, "sub_411301", "void *__fastcall sub_411301(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_61E1E0;\n  v4[1] = qword_61E1E8;\n  v4[2] = qword_61E1F0;\n  v4[3] = qword_61E1F8;\n  v4[4] = qword_61E200;\n  v4[5] = qword_61E208;\n  v4[6] = qword_61E210;\n  sub_40FE50(v4, a3, 1);\n  return sub_410F0E(0, a1, a2, (__int64)v4);\n}\n"], [4264853, "sub_411395", "void *__fastcall sub_411395(__int64 a1, unsigned __int8 a2)\n{\n  return sub_411301(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4264895, "sub_4113BF", "void *__fastcall sub_4113BF(__int64 a1)\n{\n  return sub_411395(a1, 0x3Au);\n}\n"], [4264926, "sub_4113DE", "void *__fastcall sub_4113DE(__int64 a1, size_t a2)\n{\n  return sub_411301(a1, a2, 0x3Au);\n}\n"], [4264968, "sub_411408", "__int64 __fastcall sub_411408(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_41143E(a1, a2, a3, a4, -1LL);\n}\n"], [4265022, "sub_41143E", "void *__fastcall sub_41143E(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_61E1E0;\n  v8[1] = qword_61E1E8;\n  v8[2] = qword_61E1F0;\n  v8[3] = qword_61E1F8;\n  v8[4] = qword_61E200;\n  v8[5] = qword_61E208;\n  v8[6] = qword_61E210;\n  sub_40FF0B(v8, a2, a3);\n  return sub_410F0E(a1, a4, a5, (__int64)v8);\n}\n"], [4265173, "sub_4114D5", "__int64 __fastcall sub_4114D5(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_411408(0, a1, a2, a3);\n}\n"], [4265220, "sub_411504", "void *__fastcall sub_411504(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_41143E(0, a1, a2, a3, a4);\n}\n"], [4265278, "sub_41153E", "__int64 __fastcall sub_41153E(__int64 a1, __int64 a2, __int64 a3)\n{\n  while ( a3-- )\n    *(_BYTE *)(a1 + a3) = tolower(*(unsigned __int8 *)(a2 + a3));\n  return a1;\n}\n"], [4265367, "sub_411597", "__int64 __fastcall sub_411597(__int64 a1, __int64 a2, __int64 a3)\n{\n  while ( a3-- )\n    *(_BYTE *)(a1 + a3) = toupper(*(unsigned __int8 *)(a2 + a3));\n  return a1;\n}\n"], [4265456, "sub_4115F0", "__int64 __fastcall sub_4115F0(int a1, int a2)\n{\n  return (unsigned int)(a1 - (a1 - a2 + 382) % 7 + 3);\n}\n"], [4265537, "sub_411641", "__int64 __fastcall sub_411641(unsigned __int8 a1, char *a2, __int64 a3, char *a4, const struct tm *a5, int a6, int a7)\n{\n  __int64 result; // rax\n  int v8; // eax\n  int v9; // eax\n  char *v10; // rax\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  size_t v13; // rax\n  _BOOL4 v14; // eax\n  char v15; // al\n  unsigned __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rax\n  unsigned __int64 v19; // rax\n  unsigned __int64 v20; // rax\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  char v23; // al\n  unsigned __int64 v24; // rax\n  int v25; // eax\n  _BOOL4 v26; // eax\n  _BOOL4 v27; // eax\n  int v28; // eax\n  int v29; // eax\n  int v30; // eax\n  unsigned __int64 v31; // rax\n  unsigned __int64 v32; // rax\n  bool v36; // [rsp+32h] [rbp-6CEh]\n  char v37; // [rsp+33h] [rbp-6CDh]\n  char v38; // [rsp+34h] [rbp-6CCh]\n  unsigned __int8 v39; // [rsp+35h] [rbp-6CBh]\n  char v40; // [rsp+36h] [rbp-6CAh]\n  char v41; // [rsp+37h] [rbp-6C9h]\n  int v42; // [rsp+38h] [rbp-6C8h]\n  int v43; // [rsp+3Ch] [rbp-6C4h]\n  int v44; // [rsp+40h] [rbp-6C0h]\n  int v45; // [rsp+44h] [rbp-6BCh]\n  int v46; // [rsp+48h] [rbp-6B8h]\n  unsigned int v47; // [rsp+4Ch] [rbp-6B4h]\n  int v48; // [rsp+50h] [rbp-6B0h]\n  int v49; // [rsp+54h] [rbp-6ACh]\n  int v50; // [rsp+58h] [rbp-6A8h]\n  int j; // [rsp+5Ch] [rbp-6A4h]\n  int v52; // [rsp+60h] [rbp-6A0h]\n  int v53; // [rsp+64h] [rbp-69Ch]\n  int v54; // [rsp+68h] [rbp-698h]\n  int i; // [rsp+6Ch] [rbp-694h]\n  int v56; // [rsp+70h] [rbp-690h]\n  int v57; // [rsp+74h] [rbp-68Ch]\n  int v58; // [rsp+78h] [rbp-688h]\n  int v59; // [rsp+7Ch] [rbp-684h]\n  int v60; // [rsp+80h] [rbp-680h]\n  int v61; // [rsp+84h] [rbp-67Ch]\n  int v62; // [rsp+88h] [rbp-678h]\n  int v63; // [rsp+8Ch] [rbp-674h]\n  int v64; // [rsp+90h] [rbp-670h]\n  int v65; // [rsp+94h] [rbp-66Ch]\n  char *v66; // [rsp+98h] [rbp-668h]\n  __int64 v67; // [rsp+A0h] [rbp-660h]\n  const char *v70; // [rsp+B8h] [rbp-648h]\n  __int64 src; // [rsp+C0h] [rbp-640h]\n  __int64 k; // [rsp+C8h] [rbp-638h]\n  char *v73; // [rsp+D0h] [rbp-630h]\n  time_t v74; // [rsp+D8h] [rbp-628h]\n  unsigned __int64 v75; // [rsp+108h] [rbp-5F8h]\n  unsigned __int64 v76; // [rsp+110h] [rbp-5F0h]\n  __int64 v77; // [rsp+118h] [rbp-5E8h]\n  unsigned __int64 v78; // [rsp+128h] [rbp-5D8h]\n  unsigned __int64 v79; // [rsp+130h] [rbp-5D0h]\n  __int64 v80; // [rsp+138h] [rbp-5C8h]\n  unsigned __int64 v81; // [rsp+148h] [rbp-5B8h]\n  unsigned __int64 v82; // [rsp+150h] [rbp-5B0h]\n  unsigned __int64 v83; // [rsp+158h] [rbp-5A8h]\n  size_t v84; // [rsp+160h] [rbp-5A0h]\n  unsigned __int64 v85; // [rsp+170h] [rbp-590h]\n  unsigned __int64 v86; // [rsp+178h] [rbp-588h]\n  __int64 v87; // [rsp+180h] [rbp-580h]\n  unsigned __int64 v88; // [rsp+188h] [rbp-578h]\n  unsigned __int64 v89; // [rsp+190h] [rbp-570h]\n  unsigned __int64 v90; // [rsp+198h] [rbp-568h]\n  size_t v91; // [rsp+1A0h] [rbp-560h]\n  unsigned __int64 v92; // [rsp+1B0h] [rbp-550h]\n  unsigned __int64 v93; // [rsp+1B8h] [rbp-548h]\n  __int64 v94; // [rsp+1C0h] [rbp-540h]\n  unsigned __int64 v95; // [rsp+1D0h] [rbp-530h]\n  unsigned __int64 v96; // [rsp+1D8h] [rbp-528h]\n  __int64 v97; // [rsp+1E0h] [rbp-520h]\n  unsigned __int64 v98; // [rsp+1F0h] [rbp-510h]\n  unsigned __int64 v99; // [rsp+1F8h] [rbp-508h]\n  __int64 v100; // [rsp+200h] [rbp-500h]\n  unsigned __int64 v101; // [rsp+210h] [rbp-4F0h]\n  unsigned __int64 v102; // [rsp+218h] [rbp-4E8h]\n  __int64 v103; // [rsp+220h] [rbp-4E0h]\n  unsigned __int64 v104; // [rsp+228h] [rbp-4D8h]\n  unsigned __int64 v105; // [rsp+230h] [rbp-4D0h]\n  unsigned __int64 v106; // [rsp+238h] [rbp-4C8h]\n  size_t v107; // [rsp+240h] [rbp-4C0h]\n  size_t v108; // [rsp+248h] [rbp-4B8h]\n  unsigned __int64 v109; // [rsp+250h] [rbp-4B0h]\n  unsigned __int64 v110; // [rsp+258h] [rbp-4A8h]\n  size_t v111; // [rsp+260h] [rbp-4A0h]\n  size_t v112; // [rsp+268h] [rbp-498h]\n  unsigned __int64 v113; // [rsp+278h] [rbp-488h]\n  unsigned __int64 v114; // [rsp+280h] [rbp-480h]\n  __int64 v115; // [rsp+288h] [rbp-478h]\n  struct tm v116; // [rsp+290h] [rbp-470h] BYREF\n  char format[2]; // [rsp+2D0h] [rbp-430h] BYREF\n  char v118; // [rsp+2D2h] [rbp-42Eh] BYREF\n  _BYTE v119[5]; // [rsp+2D3h] [rbp-42Dh] BYREF\n  char v120; // [rsp+2E0h] [rbp-420h] BYREF\n  _BYTE v121[22]; // [rsp+2E1h] [rbp-41Fh] BYREF\n  _BYTE v122[1033]; // [rsp+2F7h] [rbp-409h] BYREF\n  __int64 savedregs; // [rsp+700h] [rbp+0h] BYREF\n\n  *(_QWORD *)&v122[1009] = __readfsqword(0x28u);\n  v42 = a5->tm_hour;\n  v67 = 0LL;\n  v66 = (char *)a5->tm_zone;\n  if ( v42 <= 12 )\n  {\n    if ( !v42 )\n      v42 = 12;\n  }\n  else\n  {\n    v42 -= 12;\n  }\n  while ( 2 )\n  {\n    if ( !*a4 )\n    {\n      if ( a2 )\n      {\n        if ( a3 )\n          *a2 = 0;\n      }\n      return v67;\n    }\n    v43 = 0;\n    v45 = 0;\n    v49 = -1;\n    v38 = 0;\n    v39 = a1;\n    v40 = 0;\n    if ( *a4 != 37 )\n    {\n      if ( (unsigned __int64)(a3 - v67) <= 1 )\n        return 0LL;\n      if ( a2 )\n        *a2++ = *a4;\n      ++v67;\n      goto LABEL_477;\n    }\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v8 = *++a4;\n        if ( v8 == 48 )\n          goto LABEL_19;\n        if ( v8 > 48 )\n          break;\n        if ( v8 == 35 )\n        {\n          v40 = 1;\n        }\n        else\n        {\n          if ( v8 != 45 )\n            goto LABEL_22;\nLABEL_19:\n          v43 = *a4;\n        }\n      }\n      if ( v8 != 94 )\n        break;\n      v39 = 1;\n    }\n    if ( v8 == 95 )\n      goto LABEL_19;\nLABEL_22:\n    if ( (unsigned int)(*a4 - 48) <= 9 )\n    {\n      v49 = 0;\n      do\n      {\n        if ( v49 > 214748364 || v49 == 214748364 && *a4 - 48 > 7 )\n          v49 = 0x7FFFFFFF;\n        else\n          v49 = *a4 - 48 + 10 * v49;\n        ++a4;\n      }\n      while ( (unsigned int)(*a4 - 48) <= 9 );\n    }\n    v9 = *a4;\n    if ( v9 == 69 || v9 == 79 )\n    {\n      v10 = a4++;\n      v44 = *v10;\n    }\n    else\n    {\n      v44 = 0;\n    }\n    v50 = *a4;\n    if ( v50 == 89 )\n    {\n      if ( v44 == 69 )\n        goto LABEL_152;\n      if ( v44 == 79 )\n        goto LABEL_457;\n      v45 = 4;\n      v36 = a5->tm_year < -1900;\n      v47 = a5->tm_year + 1900;\n      goto LABEL_196;\n    }\n    if ( v50 > 89 )\n    {\n      if ( v50 == 108 )\n      {\n        if ( v44 == 69 )\n          goto LABEL_457;\n        v45 = 2;\n        v46 = v42;\n      }\n      else\n      {\n        if ( v50 > 108 )\n        {\n          if ( v50 == 116 )\n          {\n            LODWORD(v24) = 0;\n            if ( v49 >= 0 )\n              LODWORD(v24) = v49;\n            v85 = (int)v24;\n            v24 = (int)v24;\n            if ( (unsigned __int64)(int)v24 <= 1 )\n              v24 = 1LL;\n            v86 = v24;\n            if ( a3 - v67 > v24 )\n            {\n              if ( a2 )\n              {\n                if ( v85 > 1 )\n                {\n                  v87 = v49 - 1LL;\n                  if ( v43 == 48 )\n                    memset(a2, 48, v87);\n                  else\n                    memset(a2, 32, v87);\n                  a2 += v87;\n                }\n                *a2++ = 9;\n              }\n              v67 += v86;\n              goto LABEL_477;\n            }\n            return 0LL;\n          }\n          if ( v50 > 116 )\n          {\n            if ( v50 == 120 )\n            {\n              if ( v44 == 79 )\n                goto LABEL_457;\n              goto LABEL_152;\n            }\n            if ( v50 > 120 )\n            {\n              if ( v50 != 121 )\n              {\n                if ( v50 != 122 )\n                  goto LABEL_457;\n                k = 0LL;\n                goto LABEL_444;\n              }\n              if ( v44 == 69 )\n                goto LABEL_152;\n              v54 = a5->tm_year % 100;\n              if ( v54 < 0 )\n              {\n                if ( a5->tm_year >= -1900 )\n                  v30 = v54 + 100;\n                else\n                  v30 = -v54;\n                v54 = v30;\n              }\n              v45 = 2;\n              v46 = v54;\n            }\n            else if ( v50 == 117 )\n            {\n              v45 = 1;\n              v46 = (a5->tm_wday + 6) % 7 + 1;\n            }\n            else\n            {\n              if ( v50 != 119 || v44 == 69 )\n                goto LABEL_457;\n              v45 = 1;\n              v46 = a5->tm_wday;\n            }\n            goto LABEL_195;\n          }\n          if ( v50 != 112 )\n          {\n            if ( v50 > 112 )\n            {\n              if ( v50 == 114 )\n                goto LABEL_152;\n              if ( v50 != 115 )\n                goto LABEL_457;\n              v116 = *a5;\n              v74 = mktime(&v116);\n              src = (__int64)v122;\n              v36 = v74 < 0;\n              do\n              {\n                v57 = (int)v74 % 10;\n                v74 /= 10LL;\n                --src;\n                if ( v36 )\n                  v23 = 48 - v57;\n                else\n                  v23 = v57 + 48;\n                *(_BYTE *)src = v23;\n              }\n              while ( v74 );\n              v45 = 1;\n              v37 = 0;\n              goto LABEL_205;\n            }\n            if ( v50 != 109 )\n            {\n              if ( v50 != 110 )\n                goto LABEL_457;\n              LODWORD(v22) = 0;\n              if ( v49 >= 0 )\n                LODWORD(v22) = v49;\n              v78 = (int)v22;\n              v22 = (int)v22;\n              if ( (unsigned __int64)(int)v22 <= 1 )\n                v22 = 1LL;\n              v79 = v22;\n              if ( a3 - v67 > v22 )\n              {\n                if ( a2 )\n                {\n                  if ( v78 > 1 )\n                  {\n                    v80 = v49 - 1LL;\n                    if ( v43 == 48 )\n                      memset(a2, 48, v80);\n                    else\n                      memset(a2, 32, v80);\n                    a2 += v80;\n                  }\n                  *a2++ = 10;\n                }\n                v67 += v79;\n                goto LABEL_477;\n              }\n              return 0LL;\n            }\n            if ( v44 == 69 )\n              goto LABEL_457;\n            v45 = 2;\n            v36 = a5->tm_mon < -1;\n            v47 = a5->tm_mon + 1;\n            goto LABEL_196;\n          }\n          goto LABEL_341;\n        }\n        if ( v50 == 100 )\n        {\n          if ( v44 == 69 )\n            goto LABEL_457;\n          v45 = 2;\n          v46 = a5->tm_mday;\n          goto LABEL_195;\n        }\n        if ( v50 <= 100 )\n        {\n          if ( v50 == 97 )\n          {\n            if ( v44 )\n              goto LABEL_457;\n            if ( v40 )\n            {\n              v39 = 1;\n              v38 = 0;\n            }\n            goto LABEL_152;\n          }\n          if ( v50 <= 97 )\n          {\n            if ( v50 != 90 )\n              goto LABEL_457;\n            if ( v40 )\n            {\n              v39 = 0;\n              v38 = 1;\n            }\n            if ( !v66 )\n              v66 = (char *)&unk_419227;\n            v88 = strlen(v66);\n            LODWORD(v31) = 0;\n            if ( v49 >= 0 )\n              LODWORD(v31) = v49;\n            v89 = (int)v31;\n            v31 = (int)v31;\n            if ( v88 >= (int)v31 )\n              v31 = v88;\n            v90 = v31;\n            if ( a3 - v67 > v31 )\n            {\n              if ( a2 )\n              {\n                if ( v88 < v89 )\n                {\n                  v91 = v49 - v88;\n                  if ( v43 == 48 )\n                    memset(a2, 48, v91);\n                  else\n                    memset(a2, 32, v91);\n                  a2 += v91;\n                }\n                if ( v38 )\n                {\n                  sub_41153E((__int64)a2, (__int64)v66, v88);\n                }\n                else if ( v39 )\n                {\n                  sub_411597((__int64)a2, (__int64)v66, v88);\n                }\n                else\n                {\n                  memcpy(a2, v66, v88);\n                }\n                a2 += v88;\n              }\n              v67 += v90;\n              goto LABEL_477;\n            }\n            return 0LL;\n          }\n          if ( v50 != 98 )\n          {\n            if ( v44 == 79 )\n              goto LABEL_457;\n            goto LABEL_152;\n          }\nLABEL_128:\n          if ( v40 )\n          {\n            v39 = 1;\n            v38 = 0;\n          }\n          if ( !v44 )\n            goto LABEL_152;\nLABEL_457:\n          for ( i = 1; a4[1 - i] != 37; ++i )\n            ;\n          LODWORD(v32) = 0;\n          if ( v49 >= 0 )\n            LODWORD(v32) = v49;\n          v113 = (int)v32;\n          v32 = (int)v32;\n          if ( i >= (unsigned __int64)(int)v32 )\n            v32 = i;\n          v114 = v32;\n          if ( a3 - v67 > v32 )\n          {\n            if ( a2 )\n            {\n              if ( i < v113 )\n              {\n                v115 = v49 - (__int64)i;\n                if ( v43 == 48 )\n                  memset(a2, 48, v115);\n                else\n                  memset(a2, 32, v115);\n                a2 += v115;\n              }\n              if ( v39 )\n                sub_411597((__int64)a2, (__int64)&a4[1 - i], i);\n              else\n                memcpy(a2, &a4[1 - i], i);\n              a2 += i;\n            }\n            v67 += v114;\n            goto LABEL_477;\n          }\n          return 0LL;\n        }\n        if ( v50 == 104 )\n          goto LABEL_128;\n        if ( v50 > 104 )\n        {\n          if ( v50 == 106 )\n          {\n            if ( v44 == 69 )\n              goto LABEL_457;\n            v45 = 3;\n            v36 = a5->tm_yday < -1;\n            v47 = a5->tm_yday + 1;\n            goto LABEL_196;\n          }\n          if ( v50 != 107 || v44 == 69 )\n            goto LABEL_457;\n          v45 = 2;\n          v46 = a5->tm_hour;\n        }\n        else\n        {\n          if ( v50 != 101 )\n          {\n            if ( v50 != 103 )\n              goto LABEL_457;\n            goto LABEL_373;\n          }\n          if ( v44 == 69 )\n            goto LABEL_457;\n          v45 = 2;\n          v46 = a5->tm_mday;\n        }\n      }\n      if ( v43 != 48 && v43 != 45 )\n        v43 = 95;\n      goto LABEL_195;\n    }\n    if ( v50 == 73 )\n    {\n      if ( v44 == 69 )\n        goto LABEL_457;\n      v45 = 2;\n      v46 = v42;\n      goto LABEL_195;\n    }\n    if ( v50 > 73 )\n    {\n      if ( v50 == 83 )\n      {\n        if ( v44 == 69 )\n          goto LABEL_457;\n        v45 = 2;\n        v46 = a5->tm_sec;\n      }\n      else if ( v50 > 83 )\n      {\n        if ( v50 == 86 )\n          goto LABEL_373;\n        if ( v50 > 86 )\n        {\n          if ( v50 != 87 )\n          {\n            if ( v44 == 79 )\n              goto LABEL_457;\n            goto LABEL_152;\n          }\n          if ( v44 == 69 )\n            goto LABEL_457;\n          v45 = 2;\n          v46 = (a5->tm_yday - (a5->tm_wday + 6) % 7 + 7) / 7;\n          goto LABEL_195;\n        }\n        if ( v50 == 84 )\n        {\n          v70 = \"%H:%M:%S\";\n          v12 = sub_411641(v39, 0, -1, (unsigned int)\"%H:%M:%S\", (_DWORD)a5, a6, a7);\n          goto LABEL_138;\n        }\n        if ( v44 == 69 )\n          goto LABEL_457;\n        v45 = 2;\n        v46 = (a5->tm_yday - a5->tm_wday + 7) / 7;\n      }\n      else\n      {\n        if ( v50 != 78 )\n        {\n          if ( v50 <= 78 )\n          {\n            if ( v50 != 77 || v44 == 69 )\n              goto LABEL_457;\n            v45 = 2;\n            v46 = a5->tm_min;\n            goto LABEL_195;\n          }\n          if ( v50 != 80 )\n          {\n            if ( v50 != 82 )\n              goto LABEL_457;\n            v70 = \"%H:%M\";\n            v12 = sub_411641(v39, 0, -1, (unsigned int)\"%H:%M\", (_DWORD)a5, a6, a7);\n            goto LABEL_138;\n          }\n          v38 = 1;\n          LOBYTE(v50) = 112;\nLABEL_341:\n          if ( v40 )\n          {\n            v39 = 0;\n            v38 = 1;\n          }\n          goto LABEL_152;\n        }\n        if ( v44 == 69 )\n          goto LABEL_457;\n        v46 = a7;\n        if ( v49 == -1 )\n        {\n          v49 = 9;\n        }\n        else\n        {\n          for ( j = v49; j <= 8; ++j )\n            v46 /= 10;\n        }\n        v45 = v49;\n      }\nLABEL_195:\n      v36 = v46 < 0;\n      v47 = v46;\n      goto LABEL_196;\n    }\n    if ( v50 == 66 )\n    {\n      if ( v44 )\n        goto LABEL_457;\n      if ( v40 )\n      {\n        v39 = 1;\n        v38 = 0;\n      }\n      goto LABEL_152;\n    }\n    if ( v50 > 66 )\n    {\n      if ( v50 != 70 )\n      {\n        if ( v50 <= 70 )\n        {\n          if ( v50 != 67 )\n          {\n            if ( v50 != 68 || v44 )\n              goto LABEL_457;\n            v70 = \"%m/%d/%y\";\n            v12 = sub_411641(v39, 0, -1, (unsigned int)\"%m/%d/%y\", (_DWORD)a5, a6, a7);\n            goto LABEL_138;\n          }\n          if ( v44 == 79 )\n            goto LABEL_457;\n          if ( v44 == 69 )\n            goto LABEL_152;\n          v56 = a5->tm_year / 100 + 19;\n          v14 = a5->tm_year % 100 < 0 && v56 > 0;\n          v45 = 2;\n          v36 = a5->tm_year < -1900;\n          v47 = v56 - v14;\nLABEL_196:\n          v37 = 0;\n          v48 = 0;\n          goto LABEL_197;\n        }\n        if ( v50 != 71 )\n        {\n          if ( v44 == 69 )\n            goto LABEL_457;\n          v45 = 2;\n          v46 = a5->tm_hour;\n          goto LABEL_195;\n        }\nLABEL_373:\n        if ( v44 == 69 )\n          goto LABEL_457;\n        if ( a5->tm_year >= 0 )\n          v25 = -100;\n        else\n          v25 = 300;\n        v58 = a5->tm_year + v25;\n        v52 = 0;\n        v53 = sub_4115F0(a5->tm_yday, a5->tm_wday);\n        if ( v53 >= 0 )\n        {\n          v27 = (v58 & 3) == 0 && (v58 % 100 || !(v58 % 400));\n          v59 = sub_4115F0(a5->tm_yday + -365 - v27, a5->tm_wday);\n          if ( v59 >= 0 )\n          {\n            v52 = 1;\n            v53 = v59;\n          }\n        }\n        else\n        {\n          v52 = -1;\n          v26 = (((_BYTE)v58 - 1) & 3) == 0 && ((v58 - 1) % 100 || !((v58 - 1) % 400));\n          v53 = sub_4115F0(a5->tm_yday + v26 + 365, a5->tm_wday);\n        }\n        v28 = *a4;\n        if ( v28 == 71 )\n        {\n          v45 = 4;\n          v36 = a5->tm_year < -1900 - v52;\n          v47 = a5->tm_year + v52 + 1900;\n          goto LABEL_196;\n        }\n        if ( v28 == 103 )\n        {\n          v60 = (a5->tm_year % 100 + v52) % 100;\n          v45 = 2;\n          if ( v60 >= 0 )\n          {\n            v29 = (a5->tm_year % 100 + v52) % 100;\n          }\n          else if ( a5->tm_year >= -1900 - v52 )\n          {\n            v29 = v60 + 100;\n          }\n          else\n          {\n            v29 = -v60;\n          }\n          v46 = v29;\n        }\n        else\n        {\n          v45 = 2;\n          v46 = v53 / 7 + 1;\n        }\n        goto LABEL_195;\n      }\n      if ( v44 )\n        goto LABEL_457;\n      v70 = \"%Y-%m-%d\";\n      v12 = sub_411641(v39, 0, -1, (unsigned int)\"%Y-%m-%d\", (_DWORD)a5, a6, a7);\nLABEL_138:\n      v81 = v12;\n      LODWORD(v12) = 0;\n      if ( v49 >= 0 )\n        LODWORD(v12) = v49;\n      v82 = (int)v12;\n      v12 = (int)v12;\n      if ( v81 >= (int)v12 )\n        v12 = v81;\n      v83 = v12;\n      if ( a3 - v67 <= v12 )\n        return 0LL;\n      if ( a2 )\n      {\n        if ( v81 < v82 )\n        {\n          v84 = v49 - v81;\n          if ( v43 == 48 )\n            memset(a2, 48, v84);\n          else\n            memset(a2, 32, v84);\n          a2 += v84;\n        }\n        sub_411641(v39, (_DWORD)a2, a3 - v67, (_DWORD)v70, (_DWORD)a5, a6, a7);\n        a2 += v81;\n      }\n      v67 += v83;\n      goto LABEL_477;\n    }\n    if ( v50 == 37 )\n    {\n      if ( v44 )\n        goto LABEL_457;\n      LODWORD(v11) = 0;\n      if ( v49 >= 0 )\n        LODWORD(v11) = v49;\n      v75 = (int)v11;\n      v11 = (int)v11;\n      if ( (unsigned __int64)(int)v11 <= 1 )\n        v11 = 1LL;\n      v76 = v11;\n      if ( a3 - v67 <= v11 )\n        return 0LL;\n      if ( a2 )\n      {\n        if ( v75 > 1 )\n        {\n          v77 = v49 - 1LL;\n          if ( v43 == 48 )\n            memset(a2, 48, v77);\n          else\n            memset(a2, 32, v77);\n          a2 += v77;\n        }\n        *a2++ = *a4;\n      }\n      v67 += v76;\n      goto LABEL_477;\n    }\n    if ( v50 <= 37 )\n    {\n      if ( !*a4 )\n        --a4;\n      goto LABEL_457;\n    }\n    if ( v50 != 58 )\n    {\n      if ( v50 != 65 || v44 )\n        goto LABEL_457;\n      if ( v40 )\n      {\n        v39 = 1;\n        v38 = 0;\n      }\nLABEL_152:\n      format[0] = 32;\n      v73 = &v118;\n      format[1] = 37;\n      if ( v44 )\n      {\n        v73 = v119;\n        v118 = v44;\n      }\n      *v73 = v50;\n      v73[1] = 0;\n      v108 = strftime(&v120, 0x400uLL, format, a5);\n      if ( v108 )\n      {\n        v109 = v108 - 1;\n        LODWORD(v13) = 0;\n        if ( v49 >= 0 )\n          LODWORD(v13) = v49;\n        v110 = (int)v13;\n        v13 = (int)v13;\n        if ( v109 >= (int)v13 )\n          v13 = v108 - 1;\n        v111 = v13;\n        if ( a3 - v67 <= v13 )\n          return 0LL;\n        if ( a2 )\n        {\n          if ( !v45 && v109 < v110 )\n          {\n            v112 = v49 - v109;\n            if ( v43 == 48 )\n              memset(a2, 48, v112);\n            else\n              memset(a2, 32, v112);\n            a2 += v112;\n          }\n          if ( v38 )\n          {\n            sub_41153E((__int64)a2, (__int64)v121, v109);\n          }\n          else if ( v39 )\n          {\n            sub_411597((__int64)a2, (__int64)v121, v109);\n          }\n          else\n          {\n            memcpy(a2, v121, v109);\n          }\n          a2 += v109;\n        }\n        v67 += v111;\n      }\nLABEL_477:\n      ++a4;\n      continue;\n    }\n    break;\n  }\n  for ( k = 1LL; a4[k] == 58; ++k )\n    ;\n  if ( a4[k] != 122 )\n    goto LABEL_457;\n  a4 += k;\nLABEL_444:\n  if ( a5->tm_isdst < 0 )\n    goto LABEL_477;\n  v61 = a5->tm_gmtoff;\n  v62 = v61 / 3600;\n  v63 = v61 / 60 % 60;\n  v64 = v61 % 60;\n  switch ( k )\n  {\n    case 1LL:\n      goto LABEL_451;\n    case 0LL:\n      v45 = 5;\n      v36 = v61 < 0;\n      v48 = 0;\n      v47 = 100 * v62 + v63;\n      goto LABEL_191;\n    case 2LL:\n      goto LABEL_452;\n  }\n  if ( k != 3 )\n    goto LABEL_457;\n  if ( v64 )\n  {\nLABEL_452:\n    v45 = 9;\n    v36 = v61 < 0;\n    v48 = 20;\n    v47 = 100 * v63 + 10000 * v62 + v64;\n    goto LABEL_191;\n  }\n  if ( v63 )\n  {\nLABEL_451:\n    v45 = 6;\n    v36 = v61 < 0;\n    v48 = 4;\n    v47 = 100 * v62 + v63;\n    goto LABEL_191;\n  }\n  v45 = 3;\n  v36 = v61 < 0;\n  v48 = 0;\n  v47 = v61 / 3600;\nLABEL_191:\n  v37 = 1;\nLABEL_197:\n  if ( v44 == 79 && !v36 )\n    goto LABEL_152;\n  src = (__int64)v122;\n  if ( v36 )\n    v47 = -v47;\n  do\n  {\n    if ( (v48 & 1) != 0 )\n      *(_BYTE *)--src = 58;\n    v48 >>= 1;\n    *(_BYTE *)--src = v47 % 0xA + 48;\n    v47 /= 0xAu;\n  }\n  while ( v47 || v48 );\nLABEL_205:\n  if ( v45 < v49 )\n    v45 = v49;\n  if ( v36 )\n  {\n    v15 = 45;\n  }\n  else if ( v37 )\n  {\n    v15 = 43;\n  }\n  else\n  {\n    v15 = 0;\n  }\n  v41 = v15;\n  if ( v43 == 45 )\n  {\n    if ( v15 )\n    {\n      LODWORD(v16) = 0;\n      if ( v49 >= 0 )\n        LODWORD(v16) = v49;\n      v92 = (int)v16;\n      v16 = (int)v16;\n      if ( (unsigned __int64)(int)v16 <= 1 )\n        v16 = 1LL;\n      v93 = v16;\n      if ( a3 - v67 <= v16 )\n        return 0LL;\n      if ( a2 )\n      {\n        if ( !v45 && v92 > 1 )\n        {\n          v94 = v49 - 1LL;\n          memset(a2, 32, v94);\n          a2 += v94;\n        }\n        *a2++ = v41;\n      }\n      v67 += v93;\n    }\nLABEL_285:\n    v104 = (unsigned __int64)&v122[-src];\n    LODWORD(v21) = 0;\n    if ( v49 >= 0 )\n      LODWORD(v21) = v49;\n    v105 = (int)v21;\n    v21 = (int)v21;\n    if ( v104 >= (int)v21 )\n      v21 = (unsigned __int64)&v122[-src];\n    v106 = v21;\n    if ( a3 - v67 > v21 )\n    {\n      if ( a2 )\n      {\n        if ( !v45 && v104 < v105 )\n        {\n          v107 = v49 - v104;\n          if ( v43 == 48 )\n            memset(a2, 48, v107);\n          else\n            memset(a2, 32, v107);\n          a2 += v107;\n        }\n        if ( v39 )\n          sub_411597((__int64)a2, src, v104);\n        else\n          memcpy(a2, (const void *)src, v104);\n        a2 += v104;\n      }\n      v67 += v106;\n      goto LABEL_477;\n    }\n    result = 0LL;\n  }\n  else\n  {\n    v65 = v45 + src - ((unsigned int)&savedregs - 1056 + 23) - (v15 != 0);\n    if ( v65 <= 0 )\n    {\n      if ( !v15 )\n        goto LABEL_285;\n      LODWORD(v20) = 0;\n      if ( v49 >= 0 )\n        LODWORD(v20) = v49;\n      v101 = (int)v20;\n      v20 = (int)v20;\n      if ( (unsigned __int64)(int)v20 <= 1 )\n        v20 = 1LL;\n      v102 = v20;\n      if ( a3 - v67 > v20 )\n      {\n        if ( a2 )\n        {\n          if ( !v45 && v101 > 1 )\n          {\n            v103 = v49 - 1LL;\n            if ( v43 == 48 )\n              memset(a2, 48, v103);\n            else\n              memset(a2, 32, v103);\n            a2 += v103;\n          }\n          *a2++ = v41;\n        }\n        v67 += v102;\n        goto LABEL_285;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      if ( v43 != 95 )\n      {\n        if ( v45 >= (unsigned __int64)(a3 - v67) )\n          return 0LL;\n        if ( v15 )\n        {\n          LODWORD(v19) = 0;\n          if ( v49 >= 0 )\n            LODWORD(v19) = v49;\n          v98 = (int)v19;\n          v19 = (int)v19;\n          if ( (unsigned __int64)(int)v19 <= 1 )\n            v19 = 1LL;\n          v99 = v19;\n          if ( a3 - v67 <= v19 )\n            return 0LL;\n          if ( a2 )\n          {\n            if ( !v45 && v98 > 1 )\n            {\n              v100 = v49 - 1LL;\n              if ( v43 == 48 )\n                memset(a2, 48, v100);\n              else\n                memset(a2, 32, v100);\n              a2 += v100;\n            }\n            *a2++ = v41;\n          }\n          v67 += v99;\n        }\n        if ( a2 )\n        {\n          memset(a2, 48, v65);\n          a2 += v65;\n        }\n        v67 += v65;\n        v49 = 0;\n        goto LABEL_285;\n      }\n      if ( v65 < (unsigned __int64)(a3 - v67) )\n      {\n        if ( a2 )\n        {\n          memset(a2, 32, v65);\n          a2 += v65;\n        }\n        v67 += v65;\n        if ( v49 <= v65 )\n          v17 = 0;\n        else\n          v17 = v49 - v65;\n        v49 = v17;\n        if ( !v41 )\n          goto LABEL_285;\n        LODWORD(v18) = 0;\n        if ( v49 >= 0 )\n          LODWORD(v18) = v49;\n        v95 = (int)v18;\n        v18 = (int)v18;\n        if ( (unsigned __int64)(int)v18 <= 1 )\n          v18 = 1LL;\n        v96 = v18;\n        if ( a3 - v67 > v18 )\n        {\n          if ( a2 )\n          {\n            if ( !v45 && v95 > 1 )\n            {\n              v97 = v49 - 1LL;\n              memset(a2, 32, v97);\n              a2 += v97;\n            }\n            *a2++ = v41;\n          }\n          v67 += v96;\n          goto LABEL_285;\n        }\n        result = 0LL;\n      }\n      else\n      {\n        result = 0LL;\n      }\n    }\n  }\n  return result;\n}\n"], [4276128, "sub_413FA0", "__int64 __fastcall sub_413FA0(char *a1, __int64 a2, char *a3, const struct tm *a4, int a5, int a6)\n{\n  return sub_411641(0, a1, a2, a3, a4, a5, a6);\n}\n"], [4276207, "sub_413FEF", "int __fastcall sub_413FEF(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4277722, "sub_4145DA", "int __fastcall sub_4145DA(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_413FEF(a1, a2, a3, a4, a5, i);\n}\n"], [4277832, "sub_414648", "int __fastcall sub_414648(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_413FEF(a1, a2, a3, a4, v8, i);\n}\n"], [4278049, "sub_414721", "int sub_414721(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_414648(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4278231, "sub_4147D7", "int sub_4147D7()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4278336, "sub_414840", "__int64 __fastcall sub_414840(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_414B0B(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_414989(a2 * a1);\n}\n"], [4278398, "sub_41487E", "__int64 __fastcall sub_41487E(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_414B0B(a1, a2, v4);\n  return sub_4149BE(a1, a3 * a2);\n}\n"], [4278474, "sub_4148CA", "__int64 __fastcall sub_4148CA(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_414B0B(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_4149BE(a1, a3 * v6);\n}\n"], [4278639, "sub_41496F", "__int64 __fastcall sub_41496F(__int64 a1)\n{\n  return sub_414989(a1);\n}\n"], [4278665, "sub_414989", "void *__fastcall sub_414989(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_414B0B(a1, a2, v2);\n  return v4;\n}\n"], [4278718, "sub_4149BE", "void *__fastcall sub_4149BE(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_414B0B(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4278815, "sub_414A1F", "__int64 __fastcall sub_414A1F(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_4148CA(a1, a2, 1uLL);\n}\n"], [4278857, "sub_414A49", "void *__fastcall sub_414A49(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_414989(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4278900, "sub_414A74", "void *__fastcall sub_414A74(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_414B0B(a1, a2, v2);\n  return v4;\n}\n"], [4278957, "sub_414AAD", "void *__fastcall sub_414AAD(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_414989(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4279006, "sub_414ADE", "void *__fastcall sub_414ADE(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_414AAD(a1, v1 + 1);\n}\n"], [4279051, "sub_414B0B", "void __noreturn sub_414B0B()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(dword_61D580, 0, \"%s\", v0);\n  abort();\n}\n"], [4279104, "sub_414B40", "__int64 __fastcall sub_414B40(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4279199, "sub_414B9F", "__int64 __fastcall sub_414B9F(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_414B40(a1, a2) )\n    ;\n  return i;\n}\n"], [4279264, "sub_414BE0", "__int64 __fastcall sub_414BE0(const char *a1, char **a2, int a3, _QWORD *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  unsigned __int64 v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoul\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoul(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_414B9F(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_414B40(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_414B9F(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_414B40(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_414B9F(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_414B9F(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_414B40(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_414B9F(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_414B9F(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_414B9F(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_414B9F(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4280396, "sub_41504C", "void __fastcall sub_41504C(unsigned int a1, int a2, char a3, __int64 a4, __int64 a5, int a6)\n{\n  char *v6; // rax\n  char v9[8]; // [rsp+20h] [rbp-20h] BYREF\n  const char *v10; // [rsp+28h] [rbp-18h]\n  char *msgid; // [rsp+30h] [rbp-10h]\n  char *v12; // [rsp+38h] [rbp-8h]\n\n  v10 = \"--\";\n  if ( a1 > 3 )\n  {\n    if ( a1 != 4 )\n      goto LABEL_6;\n    msgid = \"invalid %s%s argument `%s'\";\n  }\n  else if ( a1 >= 2 )\n  {\n    msgid = \"invalid suffix in %s%s argument `%s'\";\n  }\n  else\n  {\n    if ( a1 != 1 )\nLABEL_6:\n      abort();\n    msgid = \"%s%s argument `%s' too large\";\n  }\n  if ( a2 >= 0 )\n  {\n    v12 = *(char **)(32LL * a2 + a4);\n  }\n  else\n  {\n    v10 -= a2;\n    v9[0] = a3;\n    v9[1] = 0;\n    v12 = v9;\n  }\n  v6 = gettext(msgid);\n  error(a6, 0, v6, v10, v12, a5);\n}\n"], [4280614, "sub_415126", "void __fastcall __noreturn sub_415126(unsigned int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  sub_41504C(a1, a2, a3, a4, a5, dword_61D580);\n  abort();\n}\n"], [4280684, "sub_41516C", "__int64 __fastcall sub_41516C(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4280779, "sub_4151CB", "__int64 __fastcall sub_4151CB(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_41516C(a1, a2) )\n    ;\n  return i;\n}\n"], [4280844, "sub_41520C", "__int64 __fastcall sub_41520C(const char *a1, char **a2, int a3, uintmax_t *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  uintmax_t v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoumax\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoumax(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_4151CB(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_41516C(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_4151CB(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_41516C(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_4151CB(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_4151CB(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_41516C(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_4151CB(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_4151CB(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_4151CB(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_4151CB(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4281976, "sub_415678", "_BOOL8 __fastcall sub_415678(int a1)\n{\n  return a1 >= 0 && a1 <= 127;\n}\n"], [4282012, "sub_41569C", "_BOOL8 __fastcall sub_41569C(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4282070, "sub_4156D6", "_BOOL8 __fastcall sub_4156D6(int a1)\n{\n  return (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4282116, "sub_415704", "_BOOL8 __fastcall sub_415704(int a1)\n{\n  return a1 == 32 || a1 == 9;\n}\n"], [4282152, "sub_415728", "_BOOL8 __fastcall sub_415728(int a1)\n{\n  return (a1 & 0xFFFFFFE0) == 0 || a1 == 127;\n}\n"], [4282192, "sub_415750", "_BOOL8 __fastcall sub_415750(int a1)\n{\n  return a1 > 47 && a1 <= 57;\n}\n"], [4282228, "sub_415774", "_BOOL8 __fastcall sub_415774(int a1)\n{\n  return a1 > 96 && a1 <= 122;\n}\n"], [4282264, "sub_415798", "_BOOL8 __fastcall sub_415798(int a1)\n{\n  return a1 > 32 && a1 <= 126;\n}\n"], [4282300, "sub_4157BC", "_BOOL8 __fastcall sub_4157BC(int a1)\n{\n  return a1 > 31 && a1 <= 126;\n}\n"], [4282336, "sub_4157E0", "_BOOL8 __fastcall sub_4157E0(int a1)\n{\n  return a1 > 32 && a1 <= 126 && (a1 <= 47 || a1 > 57) && ((int)(a1 & 0xFFFFFFDF) <= 64 || (int)(a1 & 0xFFFFFFDF) > 90);\n}\n"], [4282406, "sub_415826", "_BOOL8 __fastcall sub_415826(int a1)\n{\n  return a1 == 32 || a1 == 9 || a1 == 10 || a1 == 11 || a1 == 12 || a1 == 13;\n}\n"], [4282466, "sub_415862", "_BOOL8 __fastcall sub_415862(int a1)\n{\n  return a1 > 64 && a1 <= 90;\n}\n"], [4282502, "sub_415886", "_BOOL8 __fastcall sub_415886(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 70;\n}\n"], [4282560, "sub_4158C0", "__int64 __fastcall sub_4158C0(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 64 || a1 > 90 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 + 32);\n  return result;\n}\n"], [4282592, "sub_4158E0", "__int64 __fastcall sub_4158E0(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 96 || a1 > 122 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 - 32);\n  return result;\n}\n"], [4282624, "sub_415900", "__int64 __fastcall sub_415900(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = (unsigned int)sub_41598B(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4282763, "sub_41598B", "int __fastcall sub_41598B(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_415A73(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4282944, "sub_415A40", "__int64 __fastcall sub_415A40(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_415ABE(a1, 0LL, 1LL);\n  return result;\n}\n"], [4282995, "sub_415A73", "int __fastcall sub_415A73(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_415A40(a1);\n  return fflush(a1);\n}\n"], [4283070, "sub_415ABE", "int __fastcall sub_415ABE(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4283264, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_61CE18 - off_61CE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_61CE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4283376, "fini", "void fini(void)\n{\n  ;\n}\n"], [4283392, "sub_415C00", "int __fastcall sub_415C00(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( qword_61D368 )\n    v1 = (void *)qword_61D368[0];\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4283424, "sub_415C20", "int __fastcall sub_415C20(char *filename, struct stat *stat_buf)\n{\n  return __xstat(1, filename, stat_buf);\n}\n"], [4283440, "sub_415C30", "int __fastcall sub_415C30(int fildes, struct stat *stat_buf)\n{\n  return __fxstat(1, fildes, stat_buf);\n}\n"], [4283456, "sub_415C40", "int __fastcall sub_415C40(char *filename, struct stat *stat_buf)\n{\n  return __lxstat(1, filename, stat_buf);\n}\n"], [4283472, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]