[[4199352, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4199392, "sub_4013E0", "__int64 sub_4013E0()\n{\n  return qword_613010();\n}\n"], [4199408, ".getenv", "// attributes: thunk\nchar *getenv(const char *name)\n{\n  return getenv(name);\n}\n"], [4199424, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4199440, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4199456, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4199472, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4199488, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4199504, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4199520, ".fcntl", "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\n  return fcntl(fd, cmd);\n}\n"], [4199536, ".cfgetispeed", "// attributes: thunk\nspeed_t cfgetispeed(const struct termios *termios_p)\n{\n  return cfgetispeed(termios_p);\n}\n"], [4199552, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4199568, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4199584, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4199600, ".cfsetospeed", "// attributes: thunk\nint cfsetospeed(struct termios *termios_p, speed_t speed)\n{\n  return cfsetospeed(termios_p, speed);\n}\n"], [4199616, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4199632, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4199648, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4199664, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4199680, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4199696, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4199712, ".dup2", "// attributes: thunk\nint dup2(int fd, int fd2)\n{\n  return dup2(fd, fd2);\n}\n"], [4199728, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4199744, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4199760, ".snprintf", "// attributes: thunk\nint snprintf(char *s, size_t maxlen, const char *format, ...)\n{\n  return snprintf(s, maxlen, format);\n}\n"], [4199776, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4199792, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4199808, ".__assert_fail", "// attributes: thunk\nvoid __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\n{\n  _assert_fail(assertion, file, line, function);\n}\n"], [4199824, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4199840, ".ioctl", "// attributes: thunk\nint ioctl(int fd, unsigned __int64 request, ...)\n{\n  return ioctl(fd, request);\n}\n"], [4199856, ".close", "// attributes: thunk\nint close(int fd)\n{\n  return close(fd);\n}\n"], [4199872, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4199888, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4199904, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4199920, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4199936, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4199952, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4199968, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4199984, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4200000, ".strtol", "// attributes: thunk\n__int64 strtol(const char *nptr, char **endptr, int base)\n{\n  return strtol(nptr, endptr, base);\n}\n"], [4200016, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4200032, ".putchar_unlocked", "// attributes: thunk\nint putchar_unlocked(int c)\n{\n  return putchar_unlocked(c);\n}\n"], [4200048, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4200064, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4200080, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4200096, ".nl_langinfo", "// attributes: thunk\nchar *nl_langinfo(nl_item item)\n{\n  return nl_langinfo(item);\n}\n"], [4200112, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4200128, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4200144, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4200160, ".cfgetospeed", "// attributes: thunk\nspeed_t cfgetospeed(const struct termios *termios_p)\n{\n  return cfgetospeed(termios_p);\n}\n"], [4200176, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4200192, ".tcgetattr", "// attributes: thunk\nint tcgetattr(int fd, struct termios *termios_p)\n{\n  return tcgetattr(fd, termios_p);\n}\n"], [4200208, ".tcsetattr", "// attributes: thunk\nint tcsetattr(int fd, int optional_actions, const struct termios *termios_p)\n{\n  return tcsetattr(fd, optional_actions, termios_p);\n}\n"], [4200224, ".open", "// attributes: thunk\nint open(const char *file, int oflag, ...)\n{\n  return open(file, oflag);\n}\n"], [4200240, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4200256, ".cfsetispeed", "// attributes: thunk\nint cfsetispeed(struct termios *termios_p, speed_t speed)\n{\n  return cfsetispeed(termios_p, speed);\n}\n"], [4200272, ".strtoul", "// attributes: thunk\nunsigned __int64 strtoul(const char *nptr, char **endptr, int base)\n{\n  return strtoul(nptr, endptr, base);\n}\n"], [4200288, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4200304, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4200320, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4200336, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4200352, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4200368, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4200384, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4200432, "sub_4017F0", "signed __int64 sub_4017F0()\n{\n  signed __int64 result; // rax\n\n  result = &unk_61324F - &unk_613248;\n  if ( (unsigned __int64)(&unk_61324F - &unk_613248) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4200480, "sub_401820", "__int64 sub_401820()\n{\n  return 0LL;\n}\n"], [4200544, "sub_401860", "signed __int64 sub_401860()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_6132C0 )\n  {\n    result = sub_4017F0();\n    byte_6132C0 = 1;\n  }\n  return result;\n}\n"], [4200576, "sub_401880", "__int64 sub_401880()\n{\n  return sub_401820();\n}\n"], [4200621, "sub_4018AD", "__int64 __fastcall sub_4018AD(unsigned __int8 a1)\n{\n  return a1;\n}\n"], [4200636, "sub_4018BC", "int sub_4018BC()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_40478B(qword_6132E8);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_40478B(qword_6132E8);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_40478B(qword_6132E8);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4200902, "sub_4019C6", "__int64 sub_4019C6(__int64 a1, ...)\n{\n  __int64 result; // rax\n  int v2; // [rsp+1Ch] [rbp-D4h]\n  char *s; // [rsp+20h] [rbp-D0h] BYREF\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a1);\n  v2 = sub_4078F5(&s, a1, va);\n  if ( v2 < 0 )\n    sub_406C01();\n  if ( dword_6132C8 > 0 )\n  {\n    if ( dword_6132C4 - dword_6132C8 >= v2 )\n    {\n      putchar_unlocked(32);\n      ++dword_6132C8;\n    }\n    else\n    {\n      putchar_unlocked(10);\n      dword_6132C8 = 0;\n    }\n  }\n  fputs_unlocked(s, stdout);\n  free(s);\n  result = (unsigned int)(dword_6132C8 + v2);\n  dword_6132C8 += v2;\n  return result;\n}\n"], [4201231, "sub_401B0F", "void __fastcall __noreturn sub_401B0F(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  __int64 v3; // r13\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  char *v6; // rax\n  FILE *v7; // rbx\n  char *v8; // rax\n  FILE *v9; // rbx\n  char *v10; // rax\n  FILE *v11; // rbx\n  char *v12; // rax\n  FILE *v13; // rbx\n  char *v14; // rax\n  FILE *v15; // rbx\n  char *v16; // rax\n  FILE *v17; // rbx\n  char *v18; // rax\n  FILE *v19; // rbx\n  char *v20; // rax\n  FILE *v21; // rbx\n  char *v22; // rax\n  FILE *v23; // rbx\n  char *v24; // rax\n  FILE *v25; // rbx\n  char *v26; // rax\n  FILE *v27; // rbx\n  char *v28; // rax\n  FILE *v29; // rbx\n  char *v30; // rax\n  FILE *v31; // rbx\n  char *v32; // rax\n  FILE *v33; // rbx\n  char *v34; // rax\n  FILE *v35; // rbx\n  char *v36; // rax\n  FILE *v37; // rbx\n  char *v38; // rax\n  FILE *v39; // rbx\n  char *v40; // rax\n  FILE *v41; // rbx\n  char *v42; // rax\n  FILE *v43; // rbx\n  char *v44; // rax\n  FILE *v45; // rbx\n  char *v46; // rax\n  FILE *v47; // rbx\n  char *v48; // rax\n  FILE *v49; // rbx\n  char *v50; // rax\n  FILE *v51; // rbx\n  char *v52; // rax\n  FILE *v53; // rbx\n  char *v54; // rax\n  FILE *v55; // rbx\n  char *v56; // rax\n  FILE *v57; // rbx\n  char *v58; // rax\n  FILE *v59; // rbx\n  char *v60; // rax\n  FILE *v61; // rbx\n  char *v62; // rax\n  FILE *v63; // rbx\n  char *v64; // rax\n  FILE *v65; // rbx\n  char *v66; // rax\n  FILE *v67; // rbx\n  char *v68; // rax\n  FILE *v69; // rbx\n  char *v70; // rax\n\n  if ( a1 )\n  {\n    v1 = qword_6132E8;\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = qword_6132E8;\n    v4 = qword_6132E8;\n    v5 = qword_6132E8;\n    v6 = gettext(\n           \"Usage: %s [-F DEVICE | --file=DEVICE] [SETTING]...\\n\"\n           \"  or:  %s [-F DEVICE | --file=DEVICE] [-a|--all]\\n\"\n           \"  or:  %s [-F DEVICE | --file=DEVICE] [-g|--save]\\n\");\n    printf(v6, v5, v4, v3);\n    v7 = stdout;\n    v8 = gettext(\n           \"Print or change terminal characteristics.\\n\"\n           \"\\n\"\n           \"  -a, --all          print all current settings in human-readable form\\n\"\n           \"  -g, --save         print all current settings in a stty-readable form\\n\"\n           \"  -F, --file=DEVICE  open and use the specified DEVICE instead of stdin\\n\");\n    fputs_unlocked(v8, v7);\n    v9 = stdout;\n    v10 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v10, v9);\n    v11 = stdout;\n    v12 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v12, v11);\n    v13 = stdout;\n    v14 = gettext(\n            \"\\n\"\n            \"Optional - before SETTING indicates negation.  An * marks non-POSIX\\n\"\n            \"settings.  The underlying system defines which settings are available.\\n\");\n    fputs_unlocked(v14, v13);\n    v15 = stdout;\n    v16 = gettext(\n            \"\\n\"\n            \"Special characters:\\n\"\n            \" * dsusp CHAR    CHAR will send a terminal stop signal once input flushed\\n\"\n            \"   eof CHAR      CHAR will send an end of file (terminate the input)\\n\"\n            \"   eol CHAR      CHAR will end the line\\n\");\n    fputs_unlocked(v16, v15);\n    v17 = stdout;\n    v18 = gettext(\n            \" * eol2 CHAR     alternate CHAR for ending the line\\n\"\n            \"   erase CHAR    CHAR will erase the last character typed\\n\"\n            \"   intr CHAR     CHAR will send an interrupt signal\\n\"\n            \"   kill CHAR     CHAR will erase the current line\\n\");\n    fputs_unlocked(v18, v17);\n    v19 = stdout;\n    v20 = gettext(\n            \" * lnext CHAR    CHAR will enter the next character quoted\\n\"\n            \"   quit CHAR     CHAR will send a quit signal\\n\"\n            \" * rprnt CHAR    CHAR will redraw the current line\\n\"\n            \"   start CHAR    CHAR will restart the output after stopping it\\n\");\n    fputs_unlocked(v20, v19);\n    v21 = stdout;\n    v22 = gettext(\n            \"   stop CHAR     CHAR will stop the output\\n\"\n            \"   susp CHAR     CHAR will send a terminal stop signal\\n\"\n            \" * swtch CHAR    CHAR will switch to a different shell layer\\n\"\n            \" * werase CHAR   CHAR will erase the last word typed\\n\");\n    fputs_unlocked(v22, v21);\n    v23 = stdout;\n    v24 = gettext(\n            \"\\n\"\n            \"Special settings:\\n\"\n            \"   N             set the input and output speeds to N bauds\\n\"\n            \" * cols N        tell the kernel that the terminal has N columns\\n\"\n            \" * columns N     same as cols N\\n\");\n    fputs_unlocked(v24, v23);\n    v25 = stdout;\n    v26 = gettext(\n            \"   ispeed N      set the input speed to N\\n\"\n            \" * line N        use line discipline N\\n\"\n            \"   min N         with -icanon, set N characters minimum for a completed read\\n\"\n            \"   ospeed N      set the output speed to N\\n\");\n    fputs_unlocked(v26, v25);\n    v27 = stdout;\n    v28 = gettext(\n            \" * rows N        tell the kernel that the terminal has N rows\\n\"\n            \" * size          print the number of rows and columns according to the kernel\\n\"\n            \"   speed         print the terminal speed\\n\"\n            \"   time N        with -icanon, set read timeout of N tenths of a second\\n\");\n    fputs_unlocked(v28, v27);\n    v29 = stdout;\n    v30 = gettext(\n            \"\\n\"\n            \"Control settings:\\n\"\n            \"   [-]clocal     disable modem control signals\\n\"\n            \"   [-]cread      allow input to be received\\n\"\n            \" * [-]crtscts    enable RTS/CTS handshaking\\n\"\n            \"   csN           set character size to N bits, N in [5..8]\\n\");\n    fputs_unlocked(v30, v29);\n    v31 = stdout;\n    v32 = gettext(\n            \"   [-]cstopb     use two stop bits per character (one with `-')\\n\"\n            \"   [-]hup        send a hangup signal when the last process closes the tty\\n\"\n            \"   [-]hupcl      same as [-]hup\\n\"\n            \"   [-]parenb     generate parity bit in output and expect parity bit in input\\n\"\n            \"   [-]parodd     set odd parity (even with `-')\\n\");\n    fputs_unlocked(v32, v31);\n    v33 = stdout;\n    v34 = gettext(\n            \"\\n\"\n            \"Input settings:\\n\"\n            \"   [-]brkint     breaks cause an interrupt signal\\n\"\n            \"   [-]icrnl      translate carriage return to newline\\n\"\n            \"   [-]ignbrk     ignore break characters\\n\"\n            \"   [-]igncr      ignore carriage return\\n\");\n    fputs_unlocked(v34, v33);\n    v35 = stdout;\n    v36 = gettext(\n            \"   [-]ignpar     ignore characters with parity errors\\n\"\n            \" * [-]imaxbel    beep and do not flush a full input buffer on a character\\n\"\n            \"   [-]inlcr      translate newline to carriage return\\n\"\n            \"   [-]inpck      enable input parity checking\\n\"\n            \"   [-]istrip     clear high (8th) bit of input characters\\n\");\n    fputs_unlocked(v36, v35);\n    v37 = stdout;\n    v38 = gettext(\" * [-]iutf8      assume input characters are UTF-8 encoded\\n\");\n    fputs_unlocked(v38, v37);\n    v39 = stdout;\n    v40 = gettext(\n            \" * [-]iuclc      translate uppercase characters to lowercase\\n\"\n            \" * [-]ixany      let any character restart output, not only start character\\n\"\n            \"   [-]ixoff      enable sending of start/stop characters\\n\"\n            \"   [-]ixon       enable XON/XOFF flow control\\n\"\n            \"   [-]parmrk     mark parity errors (with a 255-0-character sequence)\\n\"\n            \"   [-]tandem     same as [-]ixoff\\n\");\n    fputs_unlocked(v40, v39);\n    v41 = stdout;\n    v42 = gettext(\n            \"\\n\"\n            \"Output settings:\\n\"\n            \" * bsN           backspace delay style, N in [0..1]\\n\"\n            \" * crN           carriage return delay style, N in [0..3]\\n\"\n            \" * ffN           form feed delay style, N in [0..1]\\n\"\n            \" * nlN           newline delay style, N in [0..1]\\n\");\n    fputs_unlocked(v42, v41);\n    v43 = stdout;\n    v44 = gettext(\n            \" * [-]ocrnl      translate carriage return to newline\\n\"\n            \" * [-]ofdel      use delete characters for fill instead of null characters\\n\"\n            \" * [-]ofill      use fill (padding) characters instead of timing for delays\\n\"\n            \" * [-]olcuc      translate lowercase characters to uppercase\\n\"\n            \" * [-]onlcr      translate newline to carriage return-newline\\n\"\n            \" * [-]onlret     newline performs a carriage return\\n\");\n    fputs_unlocked(v44, v43);\n    v45 = stdout;\n    v46 = gettext(\n            \" * [-]onocr      do not print carriage returns in the first column\\n\"\n            \"   [-]opost      postprocess output\\n\"\n            \" * tabN          horizontal tab delay style, N in [0..3]\\n\"\n            \" * tabs          same as tab0\\n\"\n            \" * -tabs         same as tab3\\n\"\n            \" * vtN           vertical tab delay style, N in [0..1]\\n\");\n    fputs_unlocked(v46, v45);\n    v47 = stdout;\n    v48 = gettext(\n            \"\\n\"\n            \"Local settings:\\n\"\n            \"   [-]crterase   echo erase characters as backspace-space-backspace\\n\"\n            \" * crtkill       kill all line by obeying the echoprt and echoe settings\\n\"\n            \" * -crtkill      kill all line by obeying the echoctl and echok settings\\n\");\n    fputs_unlocked(v48, v47);\n    v49 = stdout;\n    v50 = gettext(\n            \" * [-]ctlecho    echo control characters in hat notation (`^c')\\n\"\n            \"   [-]echo       echo input characters\\n\"\n            \" * [-]echoctl    same as [-]ctlecho\\n\"\n            \"   [-]echoe      same as [-]crterase\\n\"\n            \"   [-]echok      echo a newline after a kill character\\n\");\n    fputs_unlocked(v50, v49);\n    v51 = stdout;\n    v52 = gettext(\n            \" * [-]echoke     same as [-]crtkill\\n\"\n            \"   [-]echonl     echo newline even if not echoing other characters\\n\"\n            \" * [-]echoprt    echo erased characters backward, between `\\\\' and '/'\\n\"\n            \"   [-]icanon     enable erase, kill, werase, and rprnt special characters\\n\"\n            \"   [-]iexten     enable non-POSIX special characters\\n\");\n    fputs_unlocked(v52, v51);\n    v53 = stdout;\n    v54 = gettext(\n            \"   [-]isig       enable interrupt, quit, and suspend special characters\\n\"\n            \"   [-]noflsh     disable flushing after interrupt and quit special characters\\n\"\n            \" * [-]prterase   same as [-]echoprt\\n\"\n            \" * [-]tostop     stop background jobs that try to write to the terminal\\n\"\n            \" * [-]xcase      with icanon, escape with `\\\\' for uppercase characters\\n\");\n    fputs_unlocked(v54, v53);\n    v55 = stdout;\n    v56 = gettext(\n            \"\\n\"\n            \"Combination settings:\\n\"\n            \" * [-]LCASE      same as [-]lcase\\n\"\n            \"   cbreak        same as -icanon\\n\"\n            \"   -cbreak       same as icanon\\n\");\n    fputs_unlocked(v56, v55);\n    v57 = stdout;\n    v58 = gettext(\n            \"   cooked        same as brkint ignpar istrip icrnl ixon opost isig\\n\"\n            \"                 icanon, eof and eol characters to their default values\\n\"\n            \"   -cooked       same as raw\\n\"\n            \"   crt           same as echoe echoctl echoke\\n\");\n    fputs_unlocked(v58, v57);\n    v59 = stdout;\n    v60 = gettext(\n            \"   dec           same as echoe echoctl echoke -ixany intr ^c erase 0177\\n\"\n            \"                 kill ^u\\n\"\n            \" * [-]decctlq    same as [-]ixany\\n\"\n            \"   ek            erase and kill characters to their default values\\n\"\n            \"   evenp         same as parenb -parodd cs7\\n\");\n    fputs_unlocked(v60, v59);\n    v61 = stdout;\n    v62 = gettext(\n            \"   -evenp        same as -parenb cs8\\n\"\n            \" * [-]lcase      same as xcase iuclc olcuc\\n\"\n            \"   litout        same as -parenb -istrip -opost cs8\\n\"\n            \"   -litout       same as parenb istrip opost cs7\\n\"\n            \"   nl            same as -icrnl -onlcr\\n\"\n            \"   -nl           same as icrnl -inlcr -igncr onlcr -ocrnl -onlret\\n\");\n    fputs_unlocked(v62, v61);\n    v63 = stdout;\n    v64 = gettext(\n            \"   oddp          same as parenb parodd cs7\\n\"\n            \"   -oddp         same as -parenb cs8\\n\"\n            \"   [-]parity     same as [-]evenp\\n\"\n            \"   pass8         same as -parenb -istrip cs8\\n\"\n            \"   -pass8        same as parenb istrip cs7\\n\");\n    fputs_unlocked(v64, v63);\n    v65 = stdout;\n    v66 = gettext(\n            \"   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -istrip\\n\"\n            \"                 -inlcr -igncr -icrnl  -ixon  -ixoff  -iuclc  -ixany\\n\"\n            \"                 -imaxbel -opost -isig -icanon -xcase min 1 time 0\\n\"\n            \"   -raw          same as cooked\\n\");\n    fputs_unlocked(v66, v65);\n    v67 = stdout;\n    v68 = gettext(\n            \"   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl -iutf8\\n\"\n            \"                 -ixoff -iuclc -ixany imaxbel opost -olcuc -ocrnl onlcr\\n\"\n            \"                 -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0\\n\"\n            \"                 isig icanon iexten echo echoe echok -echonl -noflsh\\n\"\n            \"                 -xcase -tostop -echoprt echoctl echoke, all special\\n\"\n            \"                 characters to their default values\\n\");\n    fputs_unlocked(v68, v67);\n    v69 = stdout;\n    v70 = gettext(\n            \"\\n\"\n            \"Handle the tty line connected to standard input.  Without arguments,\\n\"\n            \"prints baud rate, line discipline, and deviations from stty sane.  In\\n\"\n            \"settings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or\\n\"\n            \"127; special values ^- or undef used to disable special characters.\\n\");\n    fputs_unlocked(v70, v69);\n    sub_4018BC();\n  }\n  exit(a1);\n}\n"], [4202268, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  char *v3; // rax\n  int v4; // eax\n  char *v5; // rax\n  char *v6; // rax\n  int v7; // edx\n  int v8; // ecx\n  int v9; // er8\n  int v10; // er9\n  int *v11; // rax\n  int v12; // ecx\n  int v13; // er8\n  int v14; // er9\n  int v15; // eax\n  char *v16; // rbx\n  int *v17; // rax\n  int *v18; // rax\n  __int64 v19; // rbx\n  char *v20; // rax\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  unsigned int v29; // eax\n  __int64 v30; // rbx\n  char *v31; // rax\n  unsigned int v32; // eax\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // rbx\n  char *v36; // rax\n  __int64 v37; // rbx\n  char *v38; // rax\n  int *v39; // rax\n  int *v40; // rax\n  char *v41; // rax\n  char v43; // [rsp+1Dh] [rbp-E3h]\n  char v44; // [rsp+1Eh] [rbp-E2h]\n  char v45; // [rsp+1Fh] [rbp-E1h]\n  char v46; // [rsp+20h] [rbp-E0h]\n  char v47; // [rsp+21h] [rbp-DFh]\n  char v48; // [rsp+22h] [rbp-DEh]\n  unsigned __int8 v49; // [rsp+23h] [rbp-DDh]\n  unsigned int v50; // [rsp+24h] [rbp-DCh]\n  int v51; // [rsp+28h] [rbp-D8h]\n  int v52; // [rsp+2Ch] [rbp-D4h]\n  int i; // [rsp+30h] [rbp-D0h]\n  int j; // [rsp+34h] [rbp-CCh]\n  int k; // [rsp+34h] [rbp-CCh]\n  int v56; // [rsp+38h] [rbp-C8h]\n  int v57; // [rsp+3Ch] [rbp-C4h]\n  const char *v58; // [rsp+40h] [rbp-C0h]\n  char *v59; // [rsp+48h] [rbp-B8h]\n  char *s1; // [rsp+50h] [rbp-B0h]\n  __int64 v61; // [rsp+58h] [rbp-A8h]\n  struct termios termios_p; // [rsp+60h] [rbp-A0h] BYREF\n  int v63; // [rsp+9Ch] [rbp-64h] BYREF\n  struct termios s2; // [rsp+A0h] [rbp-60h] BYREF\n  unsigned __int64 v65; // [rsp+E8h] [rbp-18h]\n\n  v65 = __readfsqword(0x28u);\n  memset(&termios_p, 0, 0x38uLL);\n  termios_p.c_ospeed = 0;\n  v51 = 0;\n  v52 = 1;\n  v47 = 1;\n  v58 = 0LL;\n  sub_404842(*a2, a2, &v63);\n  setlocale(6, locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40D4B0(sub_4046A0);\n  v50 = 0;\n  v45 = 0;\n  v46 = 0;\n  opterr = 0;\n  while ( 1 )\n  {\n    v56 = getopt_long(a1 - v51, &a2[v51], \"-agF:\", &longopts, 0LL);\n    if ( v56 == -1 )\n    {\n      if ( v45 && v46 )\n      {\n        v5 = gettext(\"the options for verbose and stty-readable output styles are\\nmutually exclusive\");\n        error(1, 0, v5);\n      }\n      if ( v47 != 1 && (v45 || v46) )\n      {\n        v6 = gettext(\"when specifying an output style, modes may not be set\");\n        error(1, 0, v6);\n      }\n      if ( v58 )\n      {\n        v59 = (char *)v58;\n        if ( (int)sub_40796F(0LL, v58, 2048LL, 0LL) < 0 )\n        {\n          v11 = __errno_location();\n          error(1, *v11, \"%s\", v58);\n        }\n        v57 = sub_40763B(0, 3, v7, v8, v9, v10, (char)a2);\n        if ( v57 == -1\n          || (v15 = v57, BYTE1(v15) = BYTE1(v57) & 0xF7, (int)sub_40763B(0, 4, v15, v12, v13, v14, (char)a2) < 0) )\n        {\n          v16 = gettext(\"%s: couldn't reset non-blocking mode\");\n          v17 = __errno_location();\n          error(1, *v17, v16, v58);\n        }\n      }\n      else\n      {\n        v59 = gettext(\"standard input\");\n      }\n      if ( tcgetattr(0, &termios_p) )\n      {\n        v18 = __errno_location();\n        error(1, *v18, \"%s\", v59);\n      }\n      if ( v45 || v46 || v47 )\n      {\n        dword_6132C4 = sub_4036C1();\n        dword_6132C8 = 0;\n        sub_4037B4(v50, &termios_p, v59);\n        exit(0);\n      }\n      v44 = 0;\n      v43 = 0;\n      for ( i = 1; ; ++i )\n      {\n        if ( i >= a1 )\n        {\n          if ( v43 )\n          {\n            memset(&s2, 0, 0x38uLL);\n            s2.c_ospeed = 0;\n            if ( tcsetattr(0, 1, &termios_p) )\n            {\n              v39 = __errno_location();\n              error(1, *v39, \"%s\", v59);\n            }\n            if ( tcgetattr(0, &s2) )\n            {\n              v40 = __errno_location();\n              error(1, *v40, \"%s\", v59);\n            }\n            if ( memcmp(&termios_p, &s2, 0x3CuLL) )\n            {\n              s2.c_cflag &= 0xEFF0FFFF;\n              if ( v44 || memcmp(&termios_p, &s2, 0x3CuLL) )\n              {\n                v41 = gettext(\"%s: unable to perform all requested operations\");\n                error(1, 0, v41, v59);\n              }\n            }\n          }\n          exit(0);\n        }\n        s1 = a2[i];\n        v48 = 0;\n        v49 = 0;\n        if ( s1 )\n        {\n          if ( *s1 == 45 )\n          {\n            ++s1;\n            v49 = 1;\n          }\n          for ( j = 0; ; ++j )\n          {\n            if ( !(&off_40D860)[4 * j] )\n              goto LABEL_51;\n            if ( !strcmp(s1, (&off_40D860)[4 * j]) )\n              break;\n          }\n          v48 = sub_402CD7(&(&off_40D860)[4 * j], v49, &termios_p);\n          v43 = 1;\nLABEL_51:\n          if ( v48 != 1 && v49 )\n          {\n            v19 = sub_40494D(s1 - 1);\n            v20 = gettext(\"invalid argument %s\");\n            error(0, 0, v20, v19);\n            sub_401B0F(1);\n          }\n          if ( v48 != 1 )\n          {\n            for ( k = 0; ; ++k )\n            {\n              if ( !(&off_40E3A0)[3 * k] )\n                goto LABEL_62;\n              if ( !strcmp(s1, (&off_40E3A0)[3 * k]) )\n                break;\n            }\n            if ( a1 - 1 == i )\n            {\n              v21 = sub_40494D(s1);\n              v22 = gettext(\"missing argument to %s\");\n              error(0, 0, v22, v21);\n              sub_401B0F(1);\n            }\n            v48 = 1;\n            sub_40334B(&(&off_40E3A0)[3 * k], a2[++i], &termios_p);\n            v43 = 1;\n          }\nLABEL_62:\n          if ( v48 != 1 )\n          {\n            if ( !strcmp(s1, \"ispeed\") )\n            {\n              if ( a1 - 1 == i )\n              {\n                v23 = sub_40494D(s1);\n                v24 = gettext(\"missing argument to %s\");\n                error(0, 0, v24, v23);\n                sub_401B0F(1);\n              }\n              sub_403497(0LL, a2[++i], &termios_p);\n              v44 = 1;\n              v43 = 1;\n            }\n            else if ( !strcmp(s1, \"ospeed\") )\n            {\n              if ( a1 - 1 == i )\n              {\n                v25 = sub_40494D(s1);\n                v26 = gettext(\"missing argument to %s\");\n                error(0, 0, v26, v25);\n                sub_401B0F(1);\n              }\n              sub_403497(1LL, a2[++i], &termios_p);\n              v44 = 1;\n              v43 = 1;\n            }\n            else if ( !strcmp(s1, \"rows\") )\n            {\n              if ( a1 - 1 == i )\n              {\n                v27 = sub_40494D(s1);\n                v28 = gettext(\"missing argument to %s\");\n                error(0, 0, v28, v27);\n                sub_401B0F(1);\n              }\n              v29 = sub_4045EC(a2[++i], 0x7FFFFFFFLL);\n              sub_403524(v29, 0xFFFFFFFFLL, v59);\n            }\n            else if ( !strcmp(s1, \"cols\") || !strcmp(s1, \"columns\") )\n            {\n              if ( a1 - 1 == i )\n              {\n                v30 = sub_40494D(s1);\n                v31 = gettext(\"missing argument to %s\");\n                error(0, 0, v31, v30);\n                sub_401B0F(1);\n              }\n              v32 = sub_4045EC(a2[++i], 0x7FFFFFFFLL);\n              sub_403524(0xFFFFFFFFLL, v32, v59);\n            }\n            else if ( !strcmp(s1, \"size\") )\n            {\n              dword_6132C4 = sub_4036C1();\n              dword_6132C8 = 0;\n              sub_4035F0(0LL, v59);\n            }\n            else if ( !strcmp(s1, \"line\") )\n            {\n              if ( a1 - 1 == i )\n              {\n                v33 = sub_40494D(s1);\n                v34 = gettext(\"missing argument to %s\");\n                error(0, 0, v34, v33);\n                sub_401B0F(1);\n              }\n              v61 = sub_4045EC(a2[++i], -1LL);\n              termios_p.c_line = v61;\n              if ( (unsigned __int8)v61 != v61 )\n              {\n                v35 = sub_40494D(a2[i]);\n                v36 = gettext(\"invalid line discipline %s\");\n                error(0, 0, v36, v35);\n              }\n              v43 = 1;\n            }\n            else if ( !strcmp(s1, \"speed\") )\n            {\n              dword_6132C4 = sub_4036C1();\n              sub_403E6E(&termios_p, 0LL);\n            }\n            else if ( (unsigned int)sub_404219(s1) == -1 )\n            {\n              if ( (unsigned __int8)sub_404102(s1, &termios_p) != 1 )\n              {\n                v37 = sub_40494D(s1);\n                v38 = gettext(\"invalid argument %s\");\n                error(0, 0, v38, v37);\n                sub_401B0F(1);\n              }\n              v43 = 1;\n            }\n            else\n            {\n              sub_403497(2LL, s1, &termios_p);\n              v44 = 1;\n              v43 = 1;\n            }\n          }\n        }\n      }\n    }\n    if ( v56 == 70 )\n    {\n      if ( v58 )\n      {\n        v3 = gettext(\"only one device may be specified\");\n        error(1, 0, v3);\n      }\n      v58 = (const char *)optarg;\n    }\n    else\n    {\n      if ( v56 <= 70 )\n      {\n        if ( v56 == -131 )\n        {\n          sub_406817(\n            (_DWORD)stdout,\n            (unsigned int)\"stty\",\n            (unsigned int)\"GNU coreutils\",\n            (_DWORD)off_613210,\n            (unsigned int)\"David MacKenzie\",\n            0,\n            (char)a2);\n          exit(0);\n        }\n        if ( v56 == -130 )\n          sub_401B0F(0);\nLABEL_17:\n        v47 = 0;\n        v51 += v52;\n        v52 = 1;\n        optind = 0;\n        goto LABEL_19;\n      }\n      if ( v56 == 97 )\n      {\n        v45 = 1;\n        v50 = 1;\n      }\n      else\n      {\n        if ( v56 != 103 )\n          goto LABEL_17;\n        v46 = 1;\n        v50 = 2;\n      }\n    }\nLABEL_19:\n    while ( v52 < optind )\n    {\n      v4 = v52++;\n      (&a2[v51])[v4] = 0LL;\n    }\n  }\n}\n"], [4205783, "sub_402CD7", "__int64 __fastcall sub_402CD7(__int64 a1, char a2, unsigned int *a3)\n{\n  unsigned int v4; // edx\n  unsigned int v5; // edx\n  unsigned int v6; // eax\n  unsigned int v7; // edx\n  unsigned int v8; // eax\n  unsigned int v9; // edx\n  unsigned int v10; // edx\n  unsigned int v11; // edx\n  unsigned int v12; // eax\n  unsigned int v13; // eax\n  unsigned int v14; // eax\n  unsigned int v15; // edx\n  unsigned int v16; // eax\n  unsigned int v17; // eax\n  unsigned int v18; // edx\n  unsigned int *v20; // [rsp+28h] [rbp-8h]\n\n  if ( a2 && (*(_BYTE *)(a1 + 12) & 4) == 0 )\n    return 0LL;\n  v20 = (unsigned int *)sub_40374F(*(unsigned int *)(a1 + 8), a3);\n  if ( v20 )\n  {\n    if ( a2 )\n      v18 = ~(unsigned int)*(_QWORD *)(a1 + 16) & ~(unsigned int)*(_QWORD *)(a1 + 24) & *v20;\n    else\n      v18 = *(_QWORD *)(a1 + 16) | ~(unsigned int)*(_QWORD *)(a1 + 24) & *v20;\n    *v20 = v18;\n  }\n  else if ( !strcmp(*(const char **)a1, \"evenp\") || !strcmp(*(const char **)a1, \"parity\") )\n  {\n    if ( a2 )\n      v4 = a3[2] & 0xFFFFFECF | 0x30;\n    else\n      v4 = a3[2] & 0xFFFFFCCF | 0x120;\n    a3[2] = v4;\n  }\n  else if ( !strcmp(*(const char **)a1, \"oddp\") )\n  {\n    if ( a2 )\n      v5 = a3[2] & 0xFFFFFECF | 0x30;\n    else\n      v5 = a3[2] & 0xFFFFFCCF | 0x320;\n    a3[2] = v5;\n  }\n  else if ( !strcmp(*(const char **)a1, \"nl\") )\n  {\n    if ( a2 )\n    {\n      v6 = *a3 & 0xFFFFFE3F;\n      BYTE1(v6) |= 1u;\n      *a3 = v6;\n      v7 = a3[1] & 0xFFFFFFD3 | 4;\n    }\n    else\n    {\n      v8 = *a3;\n      BYTE1(v8) = BYTE1(*a3) & 0xFE;\n      *a3 = v8;\n      v7 = a3[1] & 0xFFFFFFFB;\n    }\n    a3[1] = v7;\n  }\n  else if ( !strcmp(*(const char **)a1, \"ek\") )\n  {\n    *((_BYTE *)a3 + 19) = 127;\n    *((_BYTE *)a3 + 20) = 21;\n  }\n  else if ( !strcmp(*(const char **)a1, \"sane\") )\n  {\n    sub_404322(a3);\n  }\n  else if ( !strcmp(*(const char **)a1, \"cbreak\") )\n  {\n    if ( a2 )\n      v9 = a3[3] | 2;\n    else\n      v9 = a3[3] & 0xFFFFFFFD;\n    a3[3] = v9;\n  }\n  else if ( !strcmp(*(const char **)a1, \"pass8\") )\n  {\n    if ( a2 )\n    {\n      a3[2] = a3[2] & 0xFFFFFECF | 0x120;\n      v10 = *a3 | 0x20;\n    }\n    else\n    {\n      a3[2] = a3[2] & 0xFFFFFECF | 0x30;\n      v10 = *a3 & 0xFFFFFFDF;\n    }\n    *a3 = v10;\n  }\n  else if ( !strcmp(*(const char **)a1, \"litout\") )\n  {\n    if ( a2 )\n    {\n      a3[2] = a3[2] & 0xFFFFFECF | 0x120;\n      *a3 |= 0x20u;\n      v11 = a3[1] | 1;\n    }\n    else\n    {\n      a3[2] = a3[2] & 0xFFFFFECF | 0x30;\n      *a3 &= 0xFFFFFFDF;\n      v11 = a3[1] & 0xFFFFFFFE;\n    }\n    a3[1] = v11;\n  }\n  else if ( !strcmp(*(const char **)a1, \"raw\") || !strcmp(*(const char **)a1, \"cooked\") )\n  {\n    if ( **(_BYTE **)a1 == 114 && a2 || **(_BYTE **)a1 == 99 && a2 != 1 )\n    {\n      *a3 |= 0x526u;\n      a3[1] |= 1u;\n      a3[3] |= 3u;\n    }\n    else\n    {\n      *a3 = 0;\n      a3[1] &= 0xFFFFFFFE;\n      a3[3] &= 0xFFFFFFF8;\n      *((_BYTE *)a3 + 23) = 1;\n      *((_BYTE *)a3 + 22) = 0;\n    }\n  }\n  else if ( !strcmp(*(const char **)a1, \"decctlq\") )\n  {\n    v12 = *a3;\n    if ( a2 )\n      BYTE1(v12) = BYTE1(*a3) | 8;\n    else\n      BYTE1(v12) = BYTE1(*a3) & 0xF7;\n    *a3 = v12;\n  }\n  else if ( !strcmp(*(const char **)a1, \"tabs\") )\n  {\n    v13 = a3[1];\n    if ( a2 )\n      BYTE1(v13) |= 0x18u;\n    else\n      BYTE1(v13) &= 0xE7u;\n    a3[1] = v13;\n  }\n  else if ( !strcmp(*(const char **)a1, \"lcase\") || !strcmp(*(const char **)a1, \"LCASE\") )\n  {\n    if ( a2 )\n    {\n      a3[3] &= 0xFFFFFFFB;\n      v14 = *a3;\n      BYTE1(v14) = BYTE1(*a3) & 0xFD;\n      *a3 = v14;\n      v15 = a3[1] & 0xFFFFFFFD;\n    }\n    else\n    {\n      a3[3] |= 4u;\n      v16 = *a3;\n      BYTE1(v16) = BYTE1(*a3) | 2;\n      *a3 = v16;\n      v15 = a3[1] | 2;\n    }\n    a3[1] = v15;\n  }\n  else if ( !strcmp(*(const char **)a1, \"crt\") )\n  {\n    a3[3] |= 0xA10u;\n  }\n  else if ( !strcmp(*(const char **)a1, \"dec\") )\n  {\n    *((_BYTE *)a3 + 17) = 3;\n    *((_BYTE *)a3 + 19) = 127;\n    *((_BYTE *)a3 + 20) = 21;\n    a3[3] |= 0xA10u;\n    v17 = *a3;\n    BYTE1(v17) = BYTE1(*a3) & 0xF7;\n    *a3 = v17;\n  }\n  return 1LL;\n}\n"], [4207435, "sub_40334B", "__int64 __fastcall sub_40334B(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 result; // rax\n  __int64 v5; // [rsp+28h] [rbp-8h]\n\n  if ( !strcmp(*(const char **)a1, \"min\") || !strcmp(*(const char **)a1, \"time\") )\n    goto LABEL_15;\n  if ( *(_BYTE *)a2 && *(_BYTE *)(a2 + 1) )\n  {\n    if ( !strcmp((const char *)a2, \"^-\") || !strcmp((const char *)a2, \"undef\") )\n    {\n      LOBYTE(v5) = 0;\n    }\n    else\n    {\n      if ( *(_BYTE *)a2 != 94 || !*(_BYTE *)(a2 + 1) )\n      {\nLABEL_15:\n        LOBYTE(v5) = sub_4045EC(a2, 255LL);\n        goto LABEL_16;\n      }\n      if ( *(_BYTE *)(a2 + 1) == 63 )\n        LOBYTE(v5) = 127;\n      else\n        v5 = sub_4018AD(*(_BYTE *)(a2 + 1)) & 0x9F;\n    }\n  }\n  else\n  {\n    LOBYTE(v5) = sub_4018AD(*(_BYTE *)a2);\n  }\nLABEL_16:\n  result = *(_QWORD *)(a1 + 16);\n  *(_BYTE *)(a3 + result + 17) = v5;\n  return result;\n}\n"], [4207767, "sub_403497", "int __fastcall sub_403497(int a1, __int64 a2, struct termios *a3)\n{\n  int result; // eax\n  speed_t speed; // [rsp+2Ch] [rbp-4h]\n\n  result = sub_404219(a2);\n  speed = result;\n  if ( !a1 || a1 == 2 )\n    result = cfsetispeed(a3, result);\n  if ( a1 == 1 || a1 == 2 )\n    result = cfsetospeed(a3, speed);\n  return result;\n}\n"], [4207861, "sub_4034F5", "__int64 __fastcall sub_4034F5(int a1, __int64 a2)\n{\n  return (unsigned int)ioctl(a1, 0x5413uLL, a2);\n}\n"], [4207908, "sub_403524", "void __fastcall sub_403524(int a1, int a2, const char *a3)\n{\n  int *v3; // rax\n  int *v4; // rax\n  __int16 s[8]; // [rsp+10h] [rbp-10h] BYREF\n\n  if ( (unsigned int)sub_4034F5(0, (__int64)s) )\n  {\n    if ( *__errno_location() != 22 )\n    {\n      v3 = __errno_location();\n      error(1, *v3, \"%s\", a3);\n    }\n    memset(s, 0, 8uLL);\n  }\n  if ( a1 >= 0 )\n    s[0] = a1;\n  if ( a2 >= 0 )\n    s[1] = a2;\n  if ( ioctl(0, 0x5414uLL, s) )\n  {\n    v4 = __errno_location();\n    error(1, *v4, \"%s\", a3);\n  }\n}\n"], [4208112, "sub_4035F0", "void __fastcall sub_4035F0(char a1, const char *a2)\n{\n  int *v2; // rax\n  char *v3; // rax\n  unsigned __int16 v4; // [rsp+10h] [rbp-10h] BYREF\n  unsigned __int16 v5; // [rsp+12h] [rbp-Eh]\n\n  if ( (unsigned int)sub_4034F5(0, (__int64)&v4) )\n  {\n    if ( *__errno_location() != 22 )\n    {\n      v2 = __errno_location();\n      error(1, *v2, \"%s\", a2);\n    }\n    if ( a1 != 1 )\n    {\n      v3 = gettext(\"%s: no size information for this device\");\n      error(1, 0, v3, a2);\n    }\n  }\n  else\n  {\n    if ( a1 )\n      sub_4019C6((__int64)\"rows %d; columns %d;\", v4, v5);\n    else\n      sub_4019C6((__int64)\"%d %d\\n\", v4, v5);\n    if ( a1 != 1 )\n      dword_6132C8 = 0;\n  }\n}\n"], [4208321, "sub_4036C1", "__int64 sub_4036C1()\n{\n  char v1[2]; // [rsp+0h] [rbp-20h] BYREF\n  unsigned __int16 v2; // [rsp+2h] [rbp-1Eh]\n  __int64 v3; // [rsp+10h] [rbp-10h] BYREF\n  char *v4; // [rsp+18h] [rbp-8h]\n\n  if ( !(unsigned int)sub_4034F5(1, (__int64)v1) && v2 )\n    return v2;\n  v4 = getenv(\"COLUMNS\");\n  if ( !v4 || (unsigned int)sub_406D17(v4, 0LL, 0LL, &v3, locale) || v3 <= 0 || v3 > 0x7FFFFFFF )\n    v3 = 80LL;\n  return v3;\n}\n"], [4208463, "sub_40374F", "__int64 __fastcall sub_40374F(unsigned int a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 == 2 )\n    return a2 + 4;\n  if ( a1 > 2 )\n  {\n    if ( a1 == 3 )\n    {\n      result = a2 + 12;\n    }\n    else\n    {\n      if ( a1 != 4 )\n        abort();\n      result = 0LL;\n    }\n  }\n  else if ( a1 )\n  {\n    result = a2;\n  }\n  else\n  {\n    result = a2 + 8;\n  }\n  return result;\n}\n"], [4208564, "sub_4037B4", "__int64 __fastcall sub_4037B4(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 result; // rax\n\n  result = a1;\n  switch ( a1 )\n  {\n    case 1u:\n      return sub_403B87(a2, a3);\n    case 0u:\n      return sub_40380D(a2);\n    case 2u:\n      result = sub_403F55(a2);\n      break;\n  }\n  return result;\n}\n"], [4208653, "sub_40380D", "int __fastcall sub_40380D(__int64 a1)\n{\n  const char *v1; // rax\n  __int64 v2; // rax\n  int result; // eax\n  char v4; // [rsp+17h] [rbp-19h]\n  unsigned __int8 v5; // [rsp+17h] [rbp-19h]\n  int i; // [rsp+18h] [rbp-18h]\n  int j; // [rsp+18h] [rbp-18h]\n  int v8; // [rsp+1Ch] [rbp-14h]\n  _DWORD *v9; // [rsp+20h] [rbp-10h]\n\n  v8 = 0;\n  sub_403E6E(a1, 1LL);\n  sub_4019C6((__int64)\"line = %d;\", *(unsigned __int8 *)(a1 + 16));\n  putchar_unlocked(10);\n  dword_6132C8 = 0;\n  v4 = 1;\n  for ( i = 0; strcmp((&off_40E3A0)[3 * i], \"min\"); ++i )\n  {\n    if ( *(_BYTE *)(a1 + *(_QWORD *)&byte_40E3A8[24 * i + 8] + 17) != byte_40E3A8[24 * i] )\n    {\n      v4 = 0;\n      v1 = (const char *)sub_4044C2(*(unsigned __int8 *)(a1 + *(_QWORD *)&byte_40E3A8[24 * i + 8] + 17));\n      sub_4019C6((__int64)\"%s = %s;\", (&off_40E3A0)[3 * i], v1);\n    }\n  }\n  if ( (*(_DWORD *)(a1 + 12) & 2) != 0 )\n  {\n    if ( v4 != 1 )\n      putchar_unlocked(10);\n  }\n  else\n  {\n    sub_4019C6((__int64)\"min = %lu; time = %lu;\\n\", *(unsigned __int8 *)(a1 + 23), *(unsigned __int8 *)(a1 + 22));\n  }\n  dword_6132C8 = 0;\n  v5 = 1;\n  for ( j = 0; (&off_40D860)[4 * j]; ++j )\n  {\n    if ( (dword_40D868[8 * j + 1] & 8) == 0 )\n    {\n      if ( dword_40D868[8 * j] != v8 )\n      {\n        if ( v5 != 1 )\n        {\n          putchar_unlocked(10);\n          dword_6132C8 = 0;\n          v5 = 1;\n        }\n        v8 = dword_40D868[8 * j];\n      }\n      v9 = (_DWORD *)sub_40374F(dword_40D868[8 * j], a1);\n      if ( *(_QWORD *)&dword_40D868[8 * j + 4] )\n        v2 = *(_QWORD *)&dword_40D868[8 * j + 4];\n      else\n        v2 = *(_QWORD *)&dword_40D868[8 * j + 2];\n      if ( ((unsigned int)v2 & *v9) == *(_QWORD *)&dword_40D868[8 * j + 2] )\n      {\n        if ( (dword_40D868[8 * j + 1] & 2) != 0 )\n        {\n          sub_4019C6((__int64)\"%s\", (&off_40D860)[4 * j]);\n          v5 = 0;\n        }\n      }\n      else if ( (dword_40D868[8 * j + 1] & 5) == 5 )\n      {\n        sub_4019C6((__int64)\"-%s\", (&off_40D860)[4 * j]);\n        v5 = 0;\n      }\n    }\n  }\n  result = v5 ^ 1;\n  if ( v5 != 1 )\n    result = putchar_unlocked(10);\n  dword_6132C8 = 0;\n  return result;\n}\n"], [4209543, "sub_403B87", "int __fastcall sub_403B87(unsigned __int8 *a1, const char *a2)\n{\n  const char *v2; // rax\n  __int64 v3; // rax\n  int result; // eax\n  int i; // [rsp+18h] [rbp-18h]\n  int j; // [rsp+18h] [rbp-18h]\n  int v7; // [rsp+1Ch] [rbp-14h]\n  _DWORD *v8; // [rsp+20h] [rbp-10h]\n\n  v7 = 0;\n  sub_403E6E(a1, 1LL);\n  sub_4035F0(1, a2);\n  sub_4019C6((__int64)\"line = %d;\", a1[16]);\n  putchar_unlocked(10);\n  dword_6132C8 = 0;\n  for ( i = 0; strcmp((&off_40E3A0)[3 * i], \"min\"); ++i )\n  {\n    v2 = (const char *)sub_4044C2(a1[*(_QWORD *)&byte_40E3A8[24 * i + 8] + 17]);\n    sub_4019C6((__int64)\"%s = %s;\", (&off_40E3A0)[3 * i], v2);\n  }\n  sub_4019C6((__int64)\"min = %lu; time = %lu;\", a1[23], a1[22]);\n  if ( dword_6132C8 )\n    putchar_unlocked(10);\n  dword_6132C8 = 0;\n  for ( j = 0; (&off_40D860)[4 * j]; ++j )\n  {\n    if ( (dword_40D868[8 * j + 1] & 8) == 0 )\n    {\n      if ( dword_40D868[8 * j] != v7 )\n      {\n        putchar_unlocked(10);\n        dword_6132C8 = 0;\n        v7 = dword_40D868[8 * j];\n      }\n      v8 = (_DWORD *)sub_40374F(dword_40D868[8 * j], (__int64)a1);\n      if ( *(_QWORD *)&dword_40D868[8 * j + 4] )\n        v3 = *(_QWORD *)&dword_40D868[8 * j + 4];\n      else\n        v3 = *(_QWORD *)&dword_40D868[8 * j + 2];\n      if ( ((unsigned int)v3 & *v8) == *(_QWORD *)&dword_40D868[8 * j + 2] )\n      {\n        sub_4019C6((__int64)\"%s\", (&off_40D860)[4 * j]);\n      }\n      else if ( (dword_40D868[8 * j + 1] & 4) != 0 )\n      {\n        sub_4019C6((__int64)\"-%s\", (&off_40D860)[4 * j]);\n      }\n    }\n  }\n  result = putchar_unlocked(10);\n  dword_6132C8 = 0;\n  return result;\n}\n"], [4210286, "sub_403E6E", "__int64 __fastcall sub_403E6E(const struct termios *a1, unsigned __int8 a2)\n{\n  speed_t v2; // ebx\n  speed_t v3; // eax\n  __int64 v4; // rdx\n  speed_t v5; // eax\n  __int64 v6; // rbx\n  speed_t v7; // eax\n  __int64 v8; // rcx\n  __int64 result; // rax\n\n  if ( cfgetispeed(a1) && (v2 = cfgetispeed(a1), v2 != cfgetospeed(a1)) )\n  {\n    v5 = cfgetospeed(a1);\n    v6 = sub_4042A7(v5);\n    v7 = cfgetispeed(a1);\n    v8 = sub_4042A7(v7);\n    if ( a2 )\n      sub_4019C6((__int64)\"ispeed %lu baud; ospeed %lu baud;\", v8, v6);\n    else\n      sub_4019C6((__int64)\"%lu %lu\\n\", v8, v6);\n  }\n  else\n  {\n    v3 = cfgetospeed(a1);\n    v4 = sub_4042A7(v3);\n    if ( a2 )\n      sub_4019C6((__int64)\"speed %lu baud;\", v4);\n    else\n      sub_4019C6((__int64)\"%lu\\n\", v4);\n  }\n  result = a2 ^ 1u;\n  if ( a2 != 1 )\n    dword_6132C8 = 0;\n  return result;\n}\n"], [4210517, "sub_403F55", "int __fastcall sub_403F55(unsigned int *a1)\n{\n  unsigned __int64 i; // [rsp+18h] [rbp-8h]\n\n  printf(\"%lx:%lx:%lx:%lx\", *a1, a1[1], a1[2], a1[3]);\n  for ( i = 0LL; i <= 0x1F; ++i )\n    printf(\":%lx\", *((unsigned __int8 *)a1 + i + 17));\n  return putchar_unlocked(10);\n}\n"], [4210659, "sub_403FE3", "__int64 __fastcall sub_403FE3(const char *a1, int a2, char **a3, _DWORD *a4, char a5)\n{\n  unsigned __int64 v9; // [rsp+28h] [rbp-8h]\n\n  *__errno_location() = 0;\n  v9 = strtoul(a1, a3, a2);\n  if ( *__errno_location() || **a3 != a5 || *a3 == a1 || (unsigned int)v9 != v9 )\n    return 0xFFFFFFFFLL;\n  *a4 = v9;\n  return 0LL;\n}\n"], [4210802, "sub_404072", "__int64 __fastcall sub_404072(const char *a1, int a2, char **a3, _BYTE *a4, char a5)\n{\n  unsigned __int64 v9; // [rsp+28h] [rbp-8h]\n\n  *__errno_location() = 0;\n  v9 = strtoul(a1, a3, a2);\n  if ( *__errno_location() || **a3 != a5 || *a3 == a1 || (unsigned __int8)v9 != v9 )\n    return 0xFFFFFFFFLL;\n  *a4 = v9;\n  return 0LL;\n}\n"], [4210946, "sub_404102", "__int64 __fastcall sub_404102(const char *a1, _DWORD *a2)\n{\n  char v3; // al\n  char *v4; // [rsp+18h] [rbp-28h] BYREF\n  const char *v5; // [rsp+20h] [rbp-20h]\n  unsigned __int64 i; // [rsp+28h] [rbp-18h]\n  int v7[4]; // [rsp+30h] [rbp-10h] BYREF\n\n  v5 = a1;\n  for ( i = 0LL; i <= 3; ++i )\n  {\n    if ( (unsigned int)sub_403FE3(v5, 16, &v4, &v7[i], 58) )\n      return 0LL;\n    v5 = v4 + 1;\n  }\n  *a2 = v7[0];\n  a2[1] = v7[1];\n  a2[2] = v7[2];\n  a2[3] = v7[3];\n  for ( i = 0LL; i <= 0x1F; ++i )\n  {\n    if ( i > 0x1E )\n      v3 = 0;\n    else\n      v3 = 58;\n    if ( (unsigned int)sub_404072(v5, 16, &v4, (_BYTE *)a2 + i + 17, v3) )\n      return 0LL;\n    v5 = v4 + 1;\n  }\n  return 1LL;\n}\n"], [4211225, "sub_404219", "__int64 __fastcall sub_404219(const char *a1)\n{\n  int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; (&off_4107E0)[3 * i]; ++i )\n  {\n    if ( !strcmp(a1, (&off_4107E0)[3 * i]) )\n      return dword_4107E8[6 * i];\n  }\n  return 0xFFFFFFFFLL;\n}\n"], [4211367, "sub_4042A7", "__int64 __fastcall sub_4042A7(int a1)\n{\n  int i; // [rsp+10h] [rbp-4h]\n\n  for ( i = 0; (&off_4107E0)[3 * i]; ++i )\n  {\n    if ( dword_4107E8[6 * i] == a1 )\n      return *(_QWORD *)&dword_4107E8[6 * i + 2];\n  }\n  return 0LL;\n}\n"], [4211490, "sub_404322", "char *__fastcall sub_404322(__int64 a1)\n{\n  char *result; // rax\n  int i; // [rsp+14h] [rbp-Ch]\n  int j; // [rsp+14h] [rbp-Ch]\n  _DWORD *v4; // [rsp+18h] [rbp-8h]\n  _DWORD *v5; // [rsp+18h] [rbp-8h]\n\n  for ( i = 0; (&off_40E3A0)[3 * i]; ++i )\n    *(_BYTE *)(a1 + *(_QWORD *)&byte_40E3A8[24 * i + 8] + 17) = byte_40E3A8[24 * i];\n  for ( j = 0; ; ++j )\n  {\n    result = (&off_40D860)[4 * j];\n    if ( !result )\n      break;\n    if ( (dword_40D868[8 * j + 1] & 1) != 0 )\n    {\n      v4 = (_DWORD *)sub_40374F(dword_40D868[8 * j], a1);\n      *v4 = *(_QWORD *)&dword_40D868[8 * j + 2] | *v4 & ~(unsigned int)*(_QWORD *)&dword_40D868[8 * j + 4];\n    }\n    else if ( (dword_40D868[8 * j + 1] & 2) != 0 )\n    {\n      v5 = (_DWORD *)sub_40374F(dword_40D868[8 * j], a1);\n      *v5 &= ~(unsigned int)*(_QWORD *)&dword_40D868[8 * j + 2] & ~(unsigned int)*(_QWORD *)&dword_40D868[8 * j + 4];\n    }\n  }\n  return result;\n}\n"], [4211906, "sub_4044C2", "const char *__fastcall sub_4044C2(unsigned __int8 a1)\n{\n  _BYTE *v2; // [rsp+Ch] [rbp-8h]\n  _BYTE *v3; // [rsp+Ch] [rbp-8h]\n\n  if ( !a1 )\n    return \"<undef>\";\n  if ( a1 <= 0x1Fu )\n  {\n    byte_6132CC[0] = 94;\n    v2 = &byte_6132CC[2];\n    byte_6132CC[1] = a1 + 64;\n  }\n  else if ( a1 > 0x7Eu )\n  {\n    if ( a1 == 127 )\n    {\n      byte_6132CC[0] = 94;\n      v2 = &byte_6132CC[2];\n      byte_6132CC[1] = 63;\n    }\n    else\n    {\n      byte_6132CC[0] = 77;\n      v3 = &byte_6132CC[2];\n      byte_6132CC[1] = 45;\n      if ( a1 <= 0x9Fu )\n      {\n        *v3 = 94;\n        v2 = &byte_6132CC[4];\n        byte_6132CC[3] = a1 - 64;\n      }\n      else if ( a1 == 0xFF )\n      {\n        *v3 = 94;\n        v2 = &byte_6132CC[4];\n        byte_6132CC[3] = 63;\n      }\n      else\n      {\n        v2 = &byte_6132CC[3];\n        byte_6132CC[2] = a1 + 0x80;\n      }\n    }\n  }\n  else\n  {\n    v2 = &byte_6132CC[1];\n    byte_6132CC[0] = a1;\n  }\n  *v2 = 0;\n  return byte_6132CC;\n}\n"], [4212204, "sub_4045EC", "unsigned __int64 __fastcall sub_4045EC(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // rbx\n  char *v3; // rax\n  unsigned __int64 v5[3]; // [rsp+18h] [rbp-18h] BYREF\n\n  if ( (unsigned int)sub_4071CF(a1, 0LL, 0LL, v5, \"bB\") || a2 < v5[0] )\n  {\n    v2 = sub_40494D(a1);\n    v3 = gettext(\"invalid integer argument %s\");\n    error(0, 0, v3, v2);\n    sub_401B0F(1);\n  }\n  return v5[0];\n}\n"], [4212342, "sub_404676", "__int64 __fastcall sub_404676(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_6132D8 = a1;\n  return result;\n}\n"], [4212363, "sub_40468B", "__int64 __fastcall sub_40468B(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_6132E0 = a1;\n  return result;\n}\n"], [4212384, "sub_4046A0", "__int64 sub_4046A0()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_4079E8(stdout) && (byte_6132E0 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_6132D8 )\n    {\n      v0 = (const char *)sub_405F66(qword_6132D8);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_4079E8(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4212619, "sub_40478B", "_BYTE *__fastcall sub_40478B(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4212724, "sub_4047F4", "size_t __fastcall sub_4047F4(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4212802, "sub_404842", "char *__fastcall sub_404842(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_6132E8 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4213033, "sub_404929", "__int64 __fastcall sub_404929(unsigned int a1, __int64 a2)\n{\n  return sub_405DD8(a1, 6LL, a2);\n}\n"], [4213069, "sub_40494D", "__int64 __fastcall sub_40494D(__int64 a1)\n{\n  return sub_404929(0, a1);\n}\n"], [4213100, "sub_40496C", "__int64 __fastcall sub_40496C(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_613300;\n  v4 = sub_406BA3(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4213173, "sub_4049B5", "__int64 __fastcall sub_4049B5(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_613300;\n  return *(unsigned int *)v1;\n}\n"], [4213203, "sub_4049D3", "__int64 *__fastcall sub_4049D3(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_613300;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4213239, "sub_4049F7", "__int64 __fastcall sub_4049F7(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_613300;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4213375, "sub_404A7F", "__int64 __fastcall sub_404A7F(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_613300;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4213426, "sub_404AB2", "__int64 *__fastcall sub_404AB2(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_613300;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4213516, "sub_404B0C", "_QWORD *__fastcall sub_404B0C(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4213636, "sub_404B84", "char *__fastcall sub_404B84(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'\";\n  return v3;\n}\n"], [4213697, "sub_404BC1", "unsigned __int64 __fastcall sub_404BC1(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_404B84((const char *)L\"`'\", a5);\n        a9 = sub_404B84((const char *)L\"'\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_404BC1(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4216844, "sub_40580C", "unsigned __int64 __fastcall sub_40580C(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_613300;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_404BC1(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4217004, "sub_4058AC", "__int64 __fastcall sub_4058AC(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_4058DE(a1, a2, 0LL, a3);\n}\n"], [4217054, "sub_4058DE", "__int64 __fastcall sub_4058DE(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_613300;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_404BC1(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_406A65(v10);\n  sub_404BC1(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4217354, "sub_405A0A", "void sub_405A0A()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_613240;\n  for ( i = 1; i < dword_613220; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_613340 )\n  {\n    free(ptr[1]);\n    qword_613230 = 256LL;\n    off_613238 = &unk_613340;\n  }\n  if ( ptr != (void **)&qword_613230 )\n  {\n    free(ptr);\n    off_613240 = &qword_613230;\n  }\n  dword_613220 = 1;\n}\n"], [4217525, "sub_405AB5", "void *__fastcall sub_405AB5(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_613240;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_613220 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_613240 == &qword_613230;\n    if ( off_613240 == &qword_613230 )\n      v4 = 0LL;\n    else\n      v4 = off_613240;\n    v12 = (__int64 *)sub_406AB4(v4, 16 * v14);\n    off_613240 = v12;\n    if ( v9 )\n    {\n      v5 = off_613238;\n      *v12 = qword_613230;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_613220], 0, 16 * (v14 - (unsigned int)dword_613220));\n    dword_613220 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_404BC1((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_613340 )\n      free(ptr);\n    ptr = (void *)sub_406A65(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_404BC1((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4218171, "sub_405D3B", "void *__fastcall sub_405D3B(int a1, __int64 a2)\n{\n  return sub_405AB5(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_613300);\n}\n"], [4218214, "sub_405D66", "void *__fastcall sub_405D66(int a1, __int64 a2, size_t a3)\n{\n  return sub_405AB5(a1, a2, a3, (__int64)&qword_613300);\n}\n"], [4218258, "sub_405D92", "void *__fastcall sub_405D92(__int64 a1)\n{\n  return sub_405D3B(0, a1);\n}\n"], [4218289, "sub_405DB1", "void *__fastcall sub_405DB1(__int64 a1, size_t a2)\n{\n  return sub_405D66(0, a1, a2);\n}\n"], [4218328, "sub_405DD8", "void *__fastcall sub_405DD8(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_404B0C(v5, a2);\n  return sub_405AB5(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4218393, "sub_405E19", "void *__fastcall sub_405E19(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_404B0C(v7, a2);\n  return sub_405AB5(a1, a3, a4, (__int64)v7);\n}\n"], [4218456, "sub_405E58", "void *__fastcall sub_405E58(int a1, __int64 a2)\n{\n  return sub_405DD8(0, a1, a2);\n}\n"], [4218492, "sub_405E7C", "void *__fastcall sub_405E7C(int a1, __int64 a2, size_t a3)\n{\n  return sub_405E19(0, a1, a2, a3);\n}\n"], [4218536, "sub_405EA8", "void *__fastcall sub_405EA8(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_613300;\n  v4[1] = qword_613308;\n  v4[2] = qword_613310;\n  v4[3] = qword_613318;\n  v4[4] = qword_613320;\n  v4[5] = qword_613328;\n  v4[6] = qword_613330;\n  sub_4049F7(v4, a3, 1);\n  return sub_405AB5(0, a1, a2, (__int64)v4);\n}\n"], [4218684, "sub_405F3C", "void *__fastcall sub_405F3C(__int64 a1, unsigned __int8 a2)\n{\n  return sub_405EA8(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4218726, "sub_405F66", "void *__fastcall sub_405F66(__int64 a1)\n{\n  return sub_405F3C(a1, 0x3Au);\n}\n"], [4218757, "sub_405F85", "void *__fastcall sub_405F85(__int64 a1, size_t a2)\n{\n  return sub_405EA8(a1, a2, 0x3Au);\n}\n"], [4218799, "sub_405FAF", "__int64 __fastcall sub_405FAF(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_405FE5(a1, a2, a3, a4, -1LL);\n}\n"], [4218853, "sub_405FE5", "void *__fastcall sub_405FE5(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_613300;\n  v8[1] = qword_613308;\n  v8[2] = qword_613310;\n  v8[3] = qword_613318;\n  v8[4] = qword_613320;\n  v8[5] = qword_613328;\n  v8[6] = qword_613330;\n  sub_404AB2(v8, a2, a3);\n  return sub_405AB5(a1, a4, a5, (__int64)v8);\n}\n"], [4219004, "sub_40607C", "__int64 __fastcall sub_40607C(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_405FAF(0, a1, a2, a3);\n}\n"], [4219051, "sub_4060AB", "void *__fastcall sub_4060AB(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_405FE5(0, a1, a2, a3, a4);\n}\n"], [4219109, "sub_4060E5", "int __fastcall sub_4060E5(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4220624, "sub_4066D0", "int __fastcall sub_4066D0(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_4060E5(a1, a2, a3, a4, a5, i);\n}\n"], [4220734, "sub_40673E", "int __fastcall sub_40673E(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_4060E5(a1, a2, a3, a4, v8, i);\n}\n"], [4220951, "sub_406817", "int sub_406817(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_40673E(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4221133, "sub_4068CD", "int sub_4068CD()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4221238, "sub_406936", "__int64 __fastcall sub_406936(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rdx\n\n  v2 = 0xFFFFFFFFFFFFFFFFLL % a2;\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_406C01(a1, a2, v2);\n  return sub_406A7F(a2 * a1, a2, v2);\n}\n"], [4221300, "sub_406974", "__int64 __fastcall sub_406974(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_406C01(a1, a2, v4);\n  return sub_406AB4(a1, a3 * a2);\n}\n"], [4221376, "sub_4069C0", "__int64 __fastcall sub_4069C0(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_406C01(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_406AB4(a1, a3 * v6);\n}\n"], [4221541, "sub_406A65", "__int64 __fastcall sub_406A65(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_406A7F(a1, a2, a3);\n}\n"], [4221567, "sub_406A7F", "void *__fastcall sub_406A7F(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_406C01(a1, a2, v2);\n  return v4;\n}\n"], [4221620, "sub_406AB4", "void *__fastcall sub_406AB4(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_406C01(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4221717, "sub_406B15", "__int64 __fastcall sub_406B15(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_4069C0(a1, a2, 1uLL);\n}\n"], [4221759, "sub_406B3F", "void *__fastcall sub_406B3F(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_406A7F(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4221802, "sub_406B6A", "void *__fastcall sub_406B6A(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_406C01(a1, a2, v2);\n  return v4;\n}\n"], [4221859, "sub_406BA3", "void *__fastcall sub_406BA3(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_406A7F(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4221908, "sub_406BD4", "void *__fastcall sub_406BD4(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_406BA3(a1, v1 + 1);\n}\n"], [4221953, "sub_406C01", "void __noreturn sub_406C01()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4222006, "sub_406C36", "__int64 __fastcall sub_406C36(__int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( *a1 >= (__int64)0x8000000000000000LL / a2 )\n  {\n    if ( 0x7FFFFFFFFFFFFFFFLL / a2 >= *a1 )\n    {\n      *a1 *= a2;\n      result = 0LL;\n    }\n    else\n    {\n      *a1 = 0x7FFFFFFFFFFFFFFFLL;\n      result = 1LL;\n    }\n  }\n  else\n  {\n    *a1 = 0x8000000000000000LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4222166, "sub_406CD6", "__int64 __fastcall sub_406CD6(__int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_406C36(a1, a2) )\n    ;\n  return i;\n}\n"], [4222231, "sub_406D17", "__int64 __fastcall sub_406D17(const char *a1, char **a2, int a3, _QWORD *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned int v12; // [rsp+38h] [rbp-28h]\n  int v13; // [rsp+3Ch] [rbp-24h]\n  int v14; // [rsp+40h] [rbp-20h]\n  int v15; // [rsp+44h] [rbp-1Ch]\n  char v16; // [rsp+48h] [rbp-18h] BYREF\n  __int64 v17; // [rsp+50h] [rbp-10h] BYREF\n  char **endptr; // [rsp+58h] [rbp-8h]\n\n  v12 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtol\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v16;\n  endptr = v5;\n  *__errno_location() = 0;\n  v17 = strtol(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v17 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v12 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v17;\n    return v12;\n  }\n  if ( !**endptr )\n    goto LABEL_71;\n  v13 = 1024;\n  v14 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v17;\n    return v12 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_30;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_31;\nLABEL_30:\n      v13 = 1000;\n      v14 = 2;\n      goto LABEL_31;\n    }\n    if ( (*endptr)[2] == 66 )\n      v14 = 3;\n  }\nLABEL_31:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_60:\n        v15 = sub_406CD6(&v17, v13, 3);\n        goto LABEL_69;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v15 = sub_406C36(&v17, 512);\n            break;\n          case 'c':\n            v15 = 0;\n            break;\n          case 'Z':\n            v15 = sub_406CD6(&v17, v13, 7);\n            break;\n          default:\n            goto LABEL_68;\n        }\n        goto LABEL_69;\n      }\n      if ( v8 == 109 )\n        goto LABEL_62;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_68;\n          v15 = sub_406C36(&v17, 2);\n          goto LABEL_69;\n        }\nLABEL_64:\n        v15 = sub_406CD6(&v17, v13, 4);\n        goto LABEL_69;\n      }\n      if ( v8 != 107 )\n        goto LABEL_68;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v15 = sub_406CD6(&v17, v13, 6);\n          goto LABEL_69;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_68:\n            *a4 = v17;\n            return v12 | 2;\n          }\n          v15 = sub_406C36(&v17, 1024);\n          goto LABEL_69;\n        }\n        goto LABEL_60;\n      }\n      if ( v8 == 80 )\n      {\n        v15 = sub_406CD6(&v17, v13, 5);\n        goto LABEL_69;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_68;\nLABEL_62:\n        v15 = sub_406CD6(&v17, v13, 2);\n        goto LABEL_69;\n      }\n      goto LABEL_64;\n    }\n    v15 = sub_406CD6(&v17, v13, 1);\n    goto LABEL_69;\n  }\n  v15 = sub_406CD6(&v17, v13, 8);\nLABEL_69:\n  v12 |= v15;\n  *endptr += v14;\n  if ( **endptr )\n    v12 |= 2u;\nLABEL_71:\n  *a4 = v17;\n  return v12;\n}\n"], [4223279, "sub_40712F", "__int64 __fastcall sub_40712F(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4223374, "sub_40718E", "__int64 __fastcall sub_40718E(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_40712F(a1, a2) )\n    ;\n  return i;\n}\n"], [4223439, "sub_4071CF", "__int64 __fastcall sub_4071CF(const char *a1, char **a2, int a3, _QWORD *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  unsigned __int64 v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoul\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoul(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_40718E(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_40712F(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_40718E(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_40712F(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_40718E(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_40718E(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_40712F(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_40718E(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_40718E(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_40718E(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_40718E(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4224571, "sub_40763B", "__int64 __fastcall sub_40763B(int a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128 a7, __m128 a8, __m128 a9, __m128 a10, __m128 a11, __m128 a12, __m128 a13, __m128 a14)\n{\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  int v18; // [rsp+10h] [rbp-E0h]\n  int v19; // [rsp+14h] [rbp-DCh]\n  int v20; // [rsp+18h] [rbp-D8h]\n  int v21; // [rsp+1Ch] [rbp-D4h]\n  __int64 v22; // [rsp+50h] [rbp-A0h]\n  __int64 v23; // [rsp+58h] [rbp-98h]\n  __int64 v24; // [rsp+60h] [rbp-90h]\n  __int64 v25; // [rsp+68h] [rbp-88h]\n  __m128 v26; // [rsp+70h] [rbp-80h]\n  __m128 v27; // [rsp+80h] [rbp-70h]\n  __m128 v28; // [rsp+90h] [rbp-60h]\n  __m128 v29; // [rsp+A0h] [rbp-50h]\n  __m128 v30; // [rsp+B0h] [rbp-40h]\n  __m128 v31; // [rsp+C0h] [rbp-30h]\n  __m128 v32; // [rsp+D0h] [rbp-20h]\n  __m128 v33; // [rsp+E0h] [rbp-10h]\n\n  v22 = a3;\n  v23 = a4;\n  v24 = a5;\n  v25 = a6;\n  v26 = a7;\n  v27 = a8;\n  v28 = a9;\n  v29 = a10;\n  v30 = a11;\n  v31 = a12;\n  v32 = a13;\n  v33 = a14;\n  if ( a2 != 1030 )\n    return (unsigned int)fcntl(a1, a2, v22);\n  v19 = v22;\n  if ( dword_613440 < 0 )\n  {\n    v18 = sub_40763B(a1, 0, v22, a4, a5, a6);\n  }\n  else\n  {\n    v18 = fcntl(a1, 1030, (unsigned int)v22);\n    if ( v18 < 0 && *__errno_location() == 22 )\n    {\n      v18 = sub_40763B(a1, 0, v19, v14, v15, v16);\n      if ( v18 < 0 )\n        return (unsigned int)v18;\n      dword_613440 = -1;\n    }\n    else\n    {\n      dword_613440 = 1;\n    }\n  }\n  if ( v18 >= 0 && dword_613440 == -1 )\n  {\n    v20 = fcntl(v18, 1);\n    if ( v20 < 0 || fcntl(v18, 2, v20 | 1u) == -1 )\n    {\n      v21 = *__errno_location();\n      close(v18);\n      *__errno_location() = v21;\n      v18 = -1;\n    }\n  }\n  return (unsigned int)v18;\n}\n"], [4225269, "sub_4078F5", "unsigned __int64 __fastcall sub_4078F5(void **a1, __int64 a2, __int64 a3)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // [rsp+20h] [rbp-10h] BYREF\n  void *ptr; // [rsp+28h] [rbp-8h]\n\n  ptr = (void *)sub_407D6E(0LL, &v4, a2, a3);\n  if ( !ptr )\n    return 0xFFFFFFFFLL;\n  if ( v4 <= 0x7FFFFFFF )\n  {\n    *a1 = ptr;\n    result = v4;\n  }\n  else\n  {\n    free(ptr);\n    *__errno_location() = 75;\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"], [4225391, "sub_40796F", "__int64 __fastcall sub_40796F(int a1, const char *a2, int a3, unsigned int a4)\n{\n  int fd; // [rsp+24h] [rbp-Ch]\n  unsigned int v6; // [rsp+28h] [rbp-8h]\n  int v7; // [rsp+2Ch] [rbp-4h]\n\n  fd = open(a2, a3, a4);\n  if ( fd == a1 || fd < 0 )\n    return (unsigned int)fd;\n  v6 = dup2(fd, a1);\n  v7 = *__errno_location();\n  close(fd);\n  *__errno_location() = v7;\n  return v6;\n}\n"], [4225512, "sub_4079E8", "__int64 __fastcall sub_4079E8(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = (unsigned int)sub_407A73(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4225651, "sub_407A73", "int __fastcall sub_407A73(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_407B5B(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4225832, "sub_407B28", "__int64 __fastcall sub_407B28(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_407BA6(a1, 0LL, 1LL);\n  return result;\n}\n"], [4225883, "sub_407B5B", "int __fastcall sub_407B5B(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_407B28(a1);\n  return fflush(a1);\n}\n"], [4225958, "sub_407BA6", "int __fastcall sub_407BA6(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4226142, "sub_407C5E", "__int64 __fastcall sub_407C5E(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4226194, "sub_407C92", "__int64 __fastcall sub_407C92(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  __int64 v5; // rax\n\n  v4 = sub_407C5E(a1, a2);\n  v5 = sub_407C5E(v4, a3);\n  return sub_407C5E(v5, a4);\n}\n"], [4226269, "sub_407CDD", "unsigned __int64 __fastcall sub_407CDD(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = a2;\n  if ( a1 >= a2 )\n    result = a1;\n  return result;\n}\n"], [4226296, "sub_407CF8", "__int64 sub_407CF8()\n{\n  __int64 result; // rax\n  char *v1; // [rsp+8h] [rbp-8h]\n\n  v1 = nl_langinfo(0x10000);\n  if ( *v1 )\n    result = (unsigned __int8)*v1;\n  else\n    result = 46LL;\n  return result;\n}\n"], [4226345, "sub_407D29", "_BOOL8 __fastcall sub_407D29(int a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, __int64 a11, int a12, int a13, int a14, long double a15)\n{\n  return (unsigned int)sub_40B529(a1, a2, DWORD2(a15), a12, a13, a14, *(__int64 *)&a15, DWORD2(a15)) || a15 == a15 + a15;\n}\n"], [4226414, "sub_407D6E", "void *__fastcall sub_407D6E(void *a1, unsigned __int64 *a2, void *a3, __int64 a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)\n{\n  int v13; // esi\n  int v14; // edi\n  int v15; // ecx\n  int v16; // er8\n  int v17; // er9\n  double v18; // xmm4_8\n  double v19; // xmm5_8\n  void *v20; // rsp\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  unsigned __int64 v23; // rax\n  unsigned int v24; // eax\n  char *v25; // rax\n  char *v26; // rax\n  __int64 v27; // rcx\n  unsigned __int64 v28; // rax\n  char *v29; // rax\n  __int64 v30; // rcx\n  unsigned __int64 v31; // rax\n  int v32; // edi\n  int v33; // ecx\n  int v34; // er8\n  int v35; // er9\n  char *v36; // rax\n  int v37; // edx\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  char *v41; // rax\n  char *v42; // rax\n  char *v43; // rax\n  __int16 v44; // ax\n  __int16 v45; // fps\n  char *v47; // rax\n  char *v48; // rax\n  char *v49; // rax\n  char *v50; // rax\n  char *v51; // rax\n  char *v52; // rax\n  char *v53; // rax\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rbx\n  char *v58; // rax\n  char *v59; // rax\n  char *v60; // rbx\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rax\n  char *v64; // rax\n  char *v65; // rax\n  char *v66; // rax\n  __int64 v67; // rax\n  char *v68; // rbx\n  char *v69; // rax\n  char *v70; // rax\n  char *v71; // rax\n  char *v72; // rax\n  char *v73; // rbx\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  unsigned __int64 v81; // rax\n  _BYTE *v82; // rax\n  _BYTE *v83; // rax\n  _BYTE *v84; // rax\n  _BYTE *v85; // rax\n  _BYTE *v86; // rax\n  _BYTE *v87; // rax\n  _BYTE *v88; // rax\n  _BYTE *v89; // rax\n  _BYTE *v90; // rax\n  _BYTE *v91; // rax\n  unsigned int v92; // eax\n  unsigned int v93; // eax\n  unsigned __int64 v94; // rax\n  __int64 v95; // rax\n  unsigned __int64 v96; // rax\n  char *v97; // rax\n  int v98; // edx\n  int *v99; // rdx\n  int v100; // eax\n  unsigned __int64 v101; // rbx\n  __int64 v102; // rax\n  unsigned __int64 v103; // rax\n  __int64 v104; // rax\n  unsigned __int64 v105; // rax\n  long double v106; // [rsp+0h] [rbp-8E0h]\n  __int64 v107; // [rsp+18h] [rbp-8C8h] BYREF\n  __int64 v108; // [rsp+20h] [rbp-8C0h]\n  void *v109; // [rsp+28h] [rbp-8B8h]\n  unsigned __int64 *v110; // [rsp+30h] [rbp-8B0h]\n  void *v111; // [rsp+38h] [rbp-8A8h]\n  __int16 v112; // [rsp+4Ah] [rbp-896h]\n  int v113; // [rsp+4Ch] [rbp-894h] BYREF\n  int v114; // [rsp+50h] [rbp-890h]\n  int v115; // [rsp+54h] [rbp-88Ch]\n  int v116; // [rsp+58h] [rbp-888h]\n  int v117; // [rsp+5Ch] [rbp-884h]\n  unsigned int v118; // [rsp+60h] [rbp-880h]\n  int v119; // [rsp+64h] [rbp-87Ch]\n  int v120; // [rsp+68h] [rbp-878h]\n  int v121; // [rsp+6Ch] [rbp-874h]\n  unsigned int v122; // [rsp+70h] [rbp-870h]\n  int v123; // [rsp+74h] [rbp-86Ch]\n  int v124; // [rsp+78h] [rbp-868h]\n  unsigned int v125; // [rsp+7Ch] [rbp-864h]\n  unsigned int v126; // [rsp+80h] [rbp-860h]\n  unsigned int v127; // [rsp+84h] [rbp-85Ch]\n  unsigned int v128; // [rsp+88h] [rbp-858h]\n  unsigned int v129; // [rsp+8Ch] [rbp-854h]\n  unsigned int v130; // [rsp+90h] [rbp-850h]\n  unsigned int v131; // [rsp+94h] [rbp-84Ch]\n  unsigned int v132; // [rsp+98h] [rbp-848h]\n  int v133; // [rsp+9Ch] [rbp-844h]\n  unsigned int v134; // [rsp+A0h] [rbp-840h]\n  unsigned int v135; // [rsp+A4h] [rbp-83Ch]\n  char *format; // [rsp+A8h] [rbp-838h]\n  void *v137; // [rsp+B0h] [rbp-830h]\n  void *v138; // [rsp+B8h] [rbp-828h]\n  __int64 v139; // [rsp+C0h] [rbp-820h]\n  char *i; // [rsp+C8h] [rbp-818h]\n  void *src; // [rsp+D0h] [rbp-810h]\n  unsigned __int64 v142; // [rsp+D8h] [rbp-808h]\n  size_t n; // [rsp+E0h] [rbp-800h]\n  void *dest; // [rsp+E8h] [rbp-7F8h]\n  void *v145; // [rsp+F0h] [rbp-7F0h]\n  unsigned __int64 v146; // [rsp+F8h] [rbp-7E8h]\n  unsigned __int64 v147; // [rsp+100h] [rbp-7E0h]\n  unsigned __int64 v148; // [rsp+108h] [rbp-7D8h]\n  void *v149; // [rsp+110h] [rbp-7D0h]\n  unsigned __int64 v150; // [rsp+118h] [rbp-7C8h]\n  char *v151; // [rsp+120h] [rbp-7C0h]\n  char *v152; // [rsp+128h] [rbp-7B8h]\n  char *v153; // [rsp+130h] [rbp-7B0h]\n  __int64 v154; // [rsp+138h] [rbp-7A8h]\n  unsigned __int64 v155; // [rsp+140h] [rbp-7A0h]\n  _BYTE *v156; // [rsp+148h] [rbp-798h]\n  _BYTE *v157; // [rsp+150h] [rbp-790h]\n  void *v158; // [rsp+158h] [rbp-788h]\n  void *v159; // [rsp+160h] [rbp-780h]\n  void *v160; // [rsp+168h] [rbp-778h]\n  size_t maxlen; // [rsp+170h] [rbp-770h]\n  void *v162; // [rsp+178h] [rbp-768h]\n  void *v163; // [rsp+180h] [rbp-760h]\n  unsigned __int64 v164; // [rsp+188h] [rbp-758h]\n  size_t size; // [rsp+190h] [rbp-750h]\n  size_t v166; // [rsp+198h] [rbp-748h]\n  unsigned __int64 v167; // [rsp+1A0h] [rbp-740h]\n  size_t v168; // [rsp+1A8h] [rbp-738h]\n  size_t v169; // [rsp+1B0h] [rbp-730h]\n  void *v170; // [rsp+1B8h] [rbp-728h]\n  unsigned __int64 v171; // [rsp+1C0h] [rbp-720h]\n  size_t v172; // [rsp+1C8h] [rbp-718h]\n  size_t v173; // [rsp+1D0h] [rbp-710h]\n  _BYTE *v174; // [rsp+1D8h] [rbp-708h]\n  size_t v175; // [rsp+1E0h] [rbp-700h]\n  unsigned __int64 v176; // [rsp+1E8h] [rbp-6F8h]\n  size_t v177; // [rsp+1F0h] [rbp-6F0h]\n  size_t v178; // [rsp+1F8h] [rbp-6E8h]\n  size_t v179; // [rsp+200h] [rbp-6E0h]\n  size_t v180; // [rsp+208h] [rbp-6D8h]\n  __int64 v181; // [rsp+210h] [rbp-6D0h]\n  __int64 v182; // [rsp+218h] [rbp-6C8h]\n  __int64 v183; // [rsp+220h] [rbp-6C0h]\n  __int64 v184; // [rsp+228h] [rbp-6B8h]\n  double v185; // [rsp+230h] [rbp-6B0h]\n  __int64 v186; // [rsp+238h] [rbp-6A8h]\n  __int64 v187; // [rsp+240h] [rbp-6A0h]\n  __int64 v188; // [rsp+248h] [rbp-698h]\n  unsigned __int64 v189; // [rsp+250h] [rbp-690h]\n  size_t v190; // [rsp+258h] [rbp-688h]\n  long double v191; // [rsp+260h] [rbp-680h]\n  __int64 v192; // [rsp+270h] [rbp-670h]\n  int v193; // [rsp+278h] [rbp-668h]\n  char v194[8]; // [rsp+280h] [rbp-660h] BYREF\n  void *v195; // [rsp+288h] [rbp-658h]\n  _BYTE v196[224]; // [rsp+290h] [rbp-650h] BYREF\n  __int64 v197; // [rsp+370h] [rbp-570h] BYREF\n  void *ptr; // [rsp+378h] [rbp-568h]\n  __int64 v199; // [rsp+380h] [rbp-560h]\n  __int64 v200; // [rsp+388h] [rbp-558h]\n  _BYTE v201[624]; // [rsp+390h] [rbp-550h] BYREF\n  char v202[712]; // [rsp+600h] [rbp-2E0h] BYREF\n  unsigned __int64 v203; // [rsp+8C8h] [rbp-18h]\n\n  v111 = a1;\n  v110 = a2;\n  v109 = a3;\n  v108 = a4;\n  v203 = __readfsqword(0x28u);\n  if ( (int)sub_40BE93(a3, &v197, v194) < 0 )\n    return 0LL;\n  if ( (int)sub_40B581(v108, v194) < 0 )\n  {\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 22;\n    return 0LL;\n  }\n  v13 = v199;\n  v14 = 7;\n  v164 = sub_407C92(7uLL, v199, v200, 6LL);\n  if ( v164 > 0xF9F )\n  {\n    size = v164;\n    if ( v164 == -1LL )\n      goto LABEL_530;\n    v14 = size;\n    format = (char *)malloc(size);\n    if ( !format )\n      goto LABEL_530;\n    v137 = format;\n  }\n  else\n  {\n    v20 = alloca(16 * ((v164 + 30) / 0x10));\n    format = (char *)(16 * (((unsigned __int64)&v107 + 7) >> 4));\n    v137 = 0LL;\n  }\n  if ( v111 )\n  {\n    src = v111;\n    v142 = *v110;\n  }\n  else\n  {\n    src = 0LL;\n    v142 = 0LL;\n  }\n  n = 0LL;\n  v138 = v109;\n  v139 = 0LL;\n  for ( i = (char *)ptr; ; i += 88 )\n  {\n    if ( *(void **)i != v138 )\n    {\n      v166 = *(_QWORD *)i - (_QWORD)v138;\n      v167 = sub_407C5E(n, v166);\n      if ( v167 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v21 = -1LL;\n          else\n            v21 = 2 * v142;\n        }\n        else\n        {\n          v21 = 12LL;\n        }\n        v142 = v21;\n        if ( v167 > v21 )\n          v142 = v167;\n        v168 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        dest = src != v111 && src ? realloc(src, v168) : malloc(v168);\n        if ( !dest )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(dest, src, n);\n        src = dest;\n      }\n      v13 = (int)v138;\n      v14 = (_DWORD)src + n;\n      memcpy((char *)src + n, v138, v166);\n      n = v167;\n    }\n    if ( v197 == v139 )\n    {\n      v22 = sub_407C5E(n, 1LL);\n      if ( v22 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v104 = -1LL;\n          else\n            v104 = 2 * v142;\n        }\n        else\n        {\n          v104 = 12LL;\n        }\n        v142 = v104;\n        v105 = sub_407C5E(n, 1LL);\n        if ( v105 > v142 )\n          v142 = sub_407C5E(n, 1LL);\n        v169 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v163 = src != v111 && src ? realloc(src, v169) : malloc(v169);\n        if ( !v163 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v163, src, n);\n        src = v163;\n      }\n      *((_BYTE *)src + n) = 0;\n      if ( src != v111 && n + 1 < v142 )\n      {\n        v170 = realloc(src, n + 1);\n        if ( v170 )\n          src = v170;\n      }\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      *v110 = n;\n      return src;\n    }\n    if ( i[72] == 37 )\n    {\n      if ( *((_QWORD *)i + 10) != -1LL )\n        abort();\n      v13 = 1;\n      v14 = n;\n      v171 = sub_407C5E(n, 1LL);\n      if ( v171 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v23 = -1LL;\n          else\n            v23 = 2 * v142;\n        }\n        else\n        {\n          v23 = 12LL;\n        }\n        v142 = v23;\n        if ( v171 > v23 )\n          v142 = v171;\n        v172 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        if ( src != v111 && src )\n        {\n          v13 = v172;\n          v14 = (int)src;\n          v145 = realloc(src, v172);\n        }\n        else\n        {\n          v14 = v172;\n          v145 = malloc(v172);\n        }\n        if ( !v145 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n        {\n          v13 = (int)src;\n          v14 = (int)v145;\n          memcpy(v145, src, n);\n        }\n        src = v145;\n      }\n      *((_BYTE *)src + n) = 37;\n      n = v171;\n      goto LABEL_487;\n    }\n    if ( *((_QWORD *)i + 10) == -1LL )\n      abort();\n    if ( i[72] == 110 )\n    {\n      v24 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n      if ( v24 == 20 )\n      {\n        **((_DWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n        goto LABEL_487;\n      }\n      if ( v24 > 0x14 )\n      {\n        if ( v24 == 21 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 22 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      else\n      {\n        if ( v24 == 18 )\n        {\n          **((_BYTE **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 19 )\n        {\n          **((_WORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      abort();\n    }\n    if ( i[72] != 102\n      && i[72] != 70\n      && i[72] != 101\n      && i[72] != 69\n      && i[72] != 103\n      && i[72] != 71\n      && i[72] != 97\n      && i[72] != 65 )\n    {\n      break;\n    }\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10)) != 12 )\n      break;\n    v25 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    *(_QWORD *)&v106 = *((_QWORD *)v25 + 2);\n    DWORD2(v106) = *((_DWORD *)v25 + 6);\n    if ( !sub_407D29(v14, v13, a5, a6, a7, a8, v18, v19, a11, a12, DWORD2(v106), v15, v16, v17, v106) )\n      break;\n    v114 = *((_DWORD *)i + 4);\n    v115 = 0;\n    v146 = 0LL;\n    if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n    {\n      if ( *((_QWORD *)i + 5) == -1LL )\n      {\n        v152 = (char *)*((_QWORD *)i + 3);\n        do\n        {\n          v26 = v152++;\n          v27 = *v26 - 48;\n          if ( v146 > 0x1999999999999999LL )\n            v28 = -1LL;\n          else\n            v28 = 10 * v146;\n          v146 = sub_407C5E(v28, v27);\n        }\n        while ( *((char **)i + 4) != v152 );\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n          abort();\n        v120 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n        if ( v120 >= 0 )\n        {\n          v146 = v120;\n        }\n        else\n        {\n          v114 |= 2u;\n          v146 = (unsigned int)-v120;\n        }\n      }\n      v115 = 1;\n    }\n    v116 = 0;\n    v147 = 0LL;\n    if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n    {\n      if ( *((_QWORD *)i + 8) == -1LL )\n      {\n        v153 = (char *)(*((_QWORD *)i + 6) + 1LL);\n        v147 = 0LL;\n        while ( *((char **)i + 7) != v153 )\n        {\n          v29 = v153++;\n          v30 = *v29 - 48;\n          if ( v147 > 0x1999999999999999LL )\n            v31 = -1LL;\n          else\n            v31 = 10 * v147;\n          v147 = sub_407C5E(v31, v30);\n        }\n        v116 = 1;\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n          abort();\n        v121 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n        if ( v121 >= 0 )\n        {\n          v147 = v121;\n          v116 = 1;\n        }\n      }\n    }\n    if ( !v116 && i[72] != 97 && i[72] != 65 )\n      v147 = 6LL;\n    v148 = 0LL;\n    if ( v147 )\n      v148 = v147;\n    v148 = sub_407C5E(v148, 12LL);\n    if ( v148 < v146 )\n      v148 = v146;\n    v32 = v148;\n    v148 = sub_407C5E(v148, 1LL);\n    if ( v148 > 0x2BC )\n    {\n      v173 = v148;\n      if ( v148 == -1LL )\n        goto LABEL_525;\n      v32 = v173;\n      v149 = malloc(v173);\n      if ( !v149 )\n        goto LABEL_525;\n    }\n    else\n    {\n      v149 = v202;\n    }\n    v150 = 0LL;\n    v151 = (char *)v149;\n    v36 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    v37 = *((_DWORD *)v36 + 6);\n    *(_QWORD *)&v191 = *((_QWORD *)v36 + 2);\n    DWORD2(v191) = v37;\n    if ( (unsigned int)sub_40B529(v32, 1, v37, v33, v34, v35, *(__int64 *)&v191, v37) )\n    {\n      if ( i[72] <= 64 || i[72] > 90 )\n      {\n        v41 = v151++;\n        *v41 = 110;\n        v42 = v151++;\n        *v42 = 97;\n        v43 = v151++;\n        *v43 = 110;\n      }\n      else\n      {\n        v38 = v151++;\n        *v38 = 78;\n        v39 = v151++;\n        *v39 = 65;\n        v40 = v151++;\n        *v40 = 78;\n      }\n    }\n    else\n    {\n      v117 = 0;\n      v112 = v134;\n      LOBYTE(v44) = v134;\n      HIBYTE(v44) = BYTE1(v134) | 3;\n      LOWORD(v134) = v44;\n      _FST7 = v191;\n      __asm { fxam }\n      if ( (v45 & 0x200) != 0 )\n      {\n        v117 = -1;\n        v191 = -v191;\n      }\n      if ( v117 >= 0 )\n      {\n        if ( (v114 & 4) != 0 )\n        {\n          v48 = v151++;\n          *v48 = 43;\n        }\n        else if ( (v114 & 8) != 0 )\n        {\n          v49 = v151++;\n          *v49 = 32;\n        }\n      }\n      else\n      {\n        v47 = v151++;\n        *v47 = 45;\n      }\n      if ( v191 > 0.0 && v191 == v191 + v191 )\n      {\n        if ( i[72] <= 64 || i[72] > 90 )\n        {\n          v53 = v151++;\n          *v53 = 105;\n          v54 = v151++;\n          *v54 = 110;\n          v55 = v151++;\n          *v55 = 102;\n        }\n        else\n        {\n          v50 = v151++;\n          *v50 = 73;\n          v51 = v151++;\n          *v51 = 78;\n          v52 = v151++;\n          *v52 = 70;\n        }\n      }\n      else\n      {\n        if ( 0.0 != v191 )\n          abort();\n        v150 = (unsigned __int64)v151;\n        switch ( i[72] )\n        {\n          case 'f':\n          case 'F':\n            v56 = v151++;\n            *v56 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v57 = v151++;\n              *v57 = sub_407CF8();\n              while ( v147 )\n              {\n                v58 = v151++;\n                *v58 = 48;\n                --v147;\n              }\n            }\n            break;\n          case 'e':\n          case 'E':\n            v59 = v151++;\n            *v59 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v60 = v151++;\n              *v60 = sub_407CF8();\n              while ( v147 )\n              {\n                v61 = v151++;\n                *v61 = 48;\n                --v147;\n              }\n            }\n            v62 = v151++;\n            *v62 = i[72];\n            v63 = v151++;\n            *v63 = 43;\n            v64 = v151++;\n            *v64 = 48;\n            v65 = v151++;\n            *v65 = 48;\n            break;\n          case 'g':\n          case 'G':\n            v66 = v151++;\n            *v66 = 48;\n            if ( (v114 & 0x10) != 0 )\n            {\n              if ( v147 )\n                v67 = v147 - 1;\n              else\n                v67 = 0LL;\n              v154 = v67;\n              v68 = v151++;\n              *v68 = sub_407CF8();\n              while ( v154 )\n              {\n                v69 = v151++;\n                *v69 = 48;\n                --v154;\n              }\n            }\n            break;\n          case 'a':\n          case 'A':\n            v70 = v151++;\n            *v70 = 48;\n            v71 = v151++;\n            *v71 = i[72] + 23;\n            v150 = (unsigned __int64)v151;\n            v72 = v151++;\n            *v72 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v73 = v151++;\n              *v73 = sub_407CF8();\n              while ( v147 )\n              {\n                v74 = v151++;\n                *v74 = 48;\n                --v147;\n              }\n            }\n            v75 = v151++;\n            *v75 = i[72] + 15;\n            v76 = v151++;\n            *v76 = 43;\n            v77 = v151++;\n            *v77 = 48;\n            break;\n          default:\n            abort();\n        }\n      }\n      LOWORD(v134) = v112;\n    }\n    if ( v115 && v151 - (_BYTE *)v149 < v146 )\n    {\n      v155 = (_BYTE *)v149 - v151 + v146;\n      v174 = (char *)v149 + v146;\n      if ( (v114 & 2) != 0 )\n      {\n        while ( v155 )\n        {\n          v78 = v151++;\n          *v78 = 32;\n          --v155;\n        }\n      }\n      else if ( (v114 & 0x20) != 0 && v150 )\n      {\n        v156 = v174;\n        while ( (unsigned __int64)v151 > v150 )\n          *--v156 = *--v151;\n        while ( v155 )\n        {\n          v79 = v151++;\n          *v79 = 48;\n          --v155;\n        }\n      }\n      else\n      {\n        v157 = v174;\n        while ( v151 > v149 )\n          *--v157 = *--v151;\n        while ( v155 )\n        {\n          v80 = v151++;\n          *v80 = 32;\n          --v155;\n        }\n      }\n      v151 = v174;\n    }\n    v175 = v151 - (_BYTE *)v149;\n    if ( v151 - (_BYTE *)v149 >= v148 )\n      abort();\n    if ( v142 - n <= v175 )\n    {\n      v176 = sub_407C5E(n, v175);\n      if ( v176 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v81 = -1LL;\n          else\n            v81 = 2 * v142;\n        }\n        else\n        {\n          v81 = 12LL;\n        }\n        v142 = v81;\n        if ( v176 > v81 )\n          v142 = v176;\n        v177 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v158 = src != v111 && src ? realloc(src, v177) : malloc(v177);\n        if ( !v158 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v158, src, n);\n        src = v158;\n      }\n    }\n    v13 = (int)v149;\n    v14 = (_DWORD)src + n;\n    memcpy((char *)src + n, v149, v175);\n    if ( v149 != v202 )\n    {\n      v14 = (int)v149;\n      free(v149);\n    }\n    n += v175;\nLABEL_487:\n    v138 = (void *)*((_QWORD *)i + 1);\n    ++v139;\n  }\n  v122 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n  v123 = *((_DWORD *)i + 4);\n  v159 = format + 1;\n  *format = 37;\n  if ( (v123 & 1) != 0 )\n  {\n    v82 = v159;\n    v159 = (char *)v159 + 1;\n    *v82 = 39;\n  }\n  if ( (v123 & 2) != 0 )\n  {\n    v83 = v159;\n    v159 = (char *)v159 + 1;\n    *v83 = 45;\n  }\n  if ( (v123 & 4) != 0 )\n  {\n    v84 = v159;\n    v159 = (char *)v159 + 1;\n    *v84 = 43;\n  }\n  if ( (v123 & 8) != 0 )\n  {\n    v85 = v159;\n    v159 = (char *)v159 + 1;\n    *v85 = 32;\n  }\n  if ( (v123 & 0x10) != 0 )\n  {\n    v86 = v159;\n    v159 = (char *)v159 + 1;\n    *v86 = 35;\n  }\n  if ( (v123 & 0x40) != 0 )\n  {\n    v87 = v159;\n    v159 = (char *)v159 + 1;\n    *v87 = 73;\n  }\n  if ( (v123 & 0x20) != 0 )\n  {\n    v88 = v159;\n    v159 = (char *)v159 + 1;\n    *v88 = 48;\n  }\n  if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n  {\n    v178 = *((_QWORD *)i + 4) - *((_QWORD *)i + 3);\n    memcpy(v159, *((const void **)i + 3), v178);\n    v159 = (char *)v159 + v178;\n  }\n  if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n  {\n    v179 = *((_QWORD *)i + 7) - *((_QWORD *)i + 6);\n    memcpy(v159, *((const void **)i + 6), v179);\n    v159 = (char *)v159 + v179;\n  }\n  if ( v122 > 0xA )\n  {\n    if ( v122 == 14 || v122 == 16 )\n      goto LABEL_260;\n    if ( v122 == 12 )\n    {\n      v91 = v159;\n      v159 = (char *)v159 + 1;\n      *v91 = 76;\n    }\n  }\n  else\n  {\n    if ( v122 >= 9 )\n    {\n      v89 = v159;\n      v159 = (char *)v159 + 1;\n      *v89 = 108;\n      goto LABEL_260;\n    }\n    if ( v122 >= 7 )\n    {\nLABEL_260:\n      v90 = v159;\n      v159 = (char *)v159 + 1;\n      *v90 = 108;\n    }\n  }\n  *(_WORD *)v159 = (unsigned __int8)i[72];\n  v118 = 0;\n  if ( *((_QWORD *)i + 5) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n      abort();\n    v92 = v118++;\n    *(&v134 + v92) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n  }\n  if ( *((_QWORD *)i + 8) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n      abort();\n    v93 = v118++;\n    *(&v134 + v93) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n  }\n  v94 = sub_407C5E(n, 2LL);\n  if ( v94 > v142 )\n  {\n    if ( v142 )\n    {\n      if ( (v142 & 0x8000000000000000LL) != 0LL )\n        v95 = -1LL;\n      else\n        v95 = 2 * v142;\n    }\n    else\n    {\n      v95 = 12LL;\n    }\n    v142 = v95;\n    v96 = sub_407C5E(n, 2LL);\n    if ( v96 > v142 )\n      v142 = sub_407C5E(n, 2LL);\n    v180 = v142;\n    if ( v142 != -1LL )\n    {\n      v160 = src != v111 && src ? realloc(src, v180) : malloc(v180);\n      if ( v160 )\n      {\n        if ( src == v111 && n )\n          memcpy(v160, src, n);\n        src = v160;\n        goto LABEL_288;\n      }\n    }\nLABEL_525:\n    if ( src != v111 && src )\n      free(src);\n    if ( v137 )\n      free(v137);\nLABEL_530:\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 12;\n    return 0LL;\n  }\nLABEL_288:\n  *((_BYTE *)src + n) = 0;\n  v124 = *__errno_location();\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v113 = -1;\n      v119 = 0;\n      maxlen = v142 - n;\n      if ( v142 - n > 0x7FFFFFFF )\n        maxlen = 0x7FFFFFFFLL;\n      *__errno_location() = 0;\n      if ( v122 == 9 )\n      {\n        v183 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v183, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v183, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v183, &v113);\n        }\n      }\n      else if ( v122 > 9 )\n      {\n        if ( v122 == 13 )\n        {\n          v131 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v131, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v131, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v131, &v113);\n          }\n        }\n        else if ( v122 > 0xD )\n        {\n          if ( v122 == 15 )\n          {\n            v186 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v186, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v186, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v186, &v113);\n            }\n          }\n          else if ( v122 < 0xF )\n          {\n            v132 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v132, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v132, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v132, &v113);\n            }\n          }\n          else if ( v122 == 16 )\n          {\n            v187 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v187, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v187, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v187, &v113);\n            }\n          }\n          else\n          {\n            if ( v122 != 17 )\nLABEL_432:\n              abort();\n            v188 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v188, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v188, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v188, &v113);\n            }\n          }\n        }\n        else if ( v122 == 11 )\n        {\n          v185 = *((double *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113, v185);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v185);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113, v185);\n          }\n        }\n        else if ( v122 > 0xB )\n        {\n          v97 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n          v98 = *((_DWORD *)v97 + 6);\n          v192 = *((_QWORD *)v97 + 2);\n          v193 = v98;\n          if ( v118 == 1 )\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v13 = maxlen;\n            DWORD2(v106) = v193;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v192, *((_QWORD *)&v106 + 1));\n          }\n          else\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113);\n          }\n        }\n        else\n        {\n          v184 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v184, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v184, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v184, &v113);\n          }\n        }\n      }\n      else if ( v122 == 4 )\n      {\n        v128 = *((unsigned __int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v128, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v128, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v128, &v113);\n        }\n      }\n      else if ( v122 > 4 )\n      {\n        if ( v122 == 6 )\n        {\n          v130 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v130, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v130, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v130, &v113);\n          }\n        }\n        else if ( v122 < 6 )\n        {\n          v129 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v129, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v129, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v129, &v113);\n          }\n        }\n        else if ( v122 == 7 )\n        {\n          v181 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v181, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v181, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v181, &v113);\n          }\n        }\n        else\n        {\n          v182 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v182, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v182, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v182, &v113);\n          }\n        }\n      }\n      else if ( v122 == 2 )\n      {\n        v126 = *((unsigned __int8 *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v126, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v126, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v126, &v113);\n        }\n      }\n      else if ( v122 > 2 )\n      {\n        v127 = *((__int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v127, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v127, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v127, &v113);\n        }\n      }\n      else\n      {\n        if ( v122 != 1 )\n          goto LABEL_432;\n        v125 = *((char *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v125, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v125, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v125, &v113);\n        }\n      }\n      if ( v113 >= 0 )\n      {\n        if ( v113 < maxlen && *((_BYTE *)src + n + v113) )\n          abort();\n        if ( v119 > v113 )\n          v113 = v119;\n        goto LABEL_443;\n      }\n      if ( !*((_BYTE *)v159 + 1) )\n        break;\n      *((_BYTE *)v159 + 1) = 0;\n    }\n    if ( v119 >= 0 )\n      v113 = v119;\nLABEL_443:\n    if ( v113 < 0 )\n    {\n      v133 = *__errno_location();\n      if ( src != v111 && src )\n        free(src);\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      v99 = __errno_location();\n      if ( v133 )\n      {\n        v100 = v133;\n      }\n      else if ( i[72] == 99 || i[72] == 115 )\n      {\n        v100 = 84;\n      }\n      else\n      {\n        v100 = 22;\n      }\n      *v99 = v100;\n      return 0LL;\n    }\n    if ( (unsigned int)(v113 + 1) < maxlen )\n    {\n      n += v113;\n      *__errno_location() = v124;\n      goto LABEL_487;\n    }\n    if ( maxlen == 0x7FFFFFFF )\n      break;\n    if ( (v142 & 0x8000000000000000LL) != 0LL )\n      v101 = -1LL;\n    else\n      v101 = 2 * v142;\n    v102 = sub_407C5E(n, (unsigned int)(v113 + 2));\n    v189 = sub_407CDD(v102, v101);\n    if ( v189 > v142 )\n    {\n      if ( v142 )\n      {\n        if ( (v142 & 0x8000000000000000LL) != 0LL )\n          v103 = -1LL;\n        else\n          v103 = 2 * v142;\n      }\n      else\n      {\n        v103 = 12LL;\n      }\n      v142 = v103;\n      if ( v189 > v103 )\n        v142 = v189;\n      v190 = v142;\n      if ( v142 == -1LL )\n        goto LABEL_525;\n      v162 = src != v111 && src ? realloc(src, v190) : malloc(v190);\n      if ( !v162 )\n        goto LABEL_525;\n      if ( src == v111 && n )\n        memcpy(v162, src, n);\n      src = v162;\n    }\n  }\n  if ( src != v111 && src )\n    free(src);\n  if ( v137 )\n    free(v137);\n  if ( ptr != v201 )\n    free(ptr);\n  if ( v195 != v196 )\n    free(v195);\n  *__errno_location() = 75;\n  return 0LL;\n}\n"], [4240681, "sub_40B529", "_BOOL8 __fastcall sub_40B529(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int16 a8)\n{\n  if ( (a8 & 0x7FFF) == 0 )\n    return HIDWORD(a7) >> 31;\n  if ( (a8 & 0x7FFF) == 0x7FFF )\n    return (HIDWORD(a7) ^ 0x80000000 | (unsigned int)a7) != 0;\n  return a7 >= 0;\n}\n"], [4240769, "sub_40B581", "__int64 __fastcall sub_40B581(unsigned int *a1, unsigned __int64 *a2)\n{\n  unsigned int v2; // eax\n  _DWORD *v3; // rax\n  _DWORD *v4; // rax\n  _DWORD *v5; // rax\n  _DWORD *v6; // rax\n  _DWORD *v7; // rax\n  _DWORD *v8; // rax\n  _QWORD *v9; // rax\n  _QWORD *v10; // rax\n  _QWORD *v11; // rax\n  _QWORD *v12; // rax\n  _QWORD *v13; // rax\n  unsigned __int64 v14; // rdx\n  __int64 v15; // rax\n  _DWORD *v16; // rax\n  _DWORD *v17; // rax\n  _QWORD *v18; // rax\n  _QWORD *v19; // rax\n  _QWORD *v20; // rax\n  _QWORD *v21; // rax\n  _QWORD *v22; // rax\n  _QWORD *v23; // rax\n  _QWORD *v24; // rax\n  _QWORD *v25; // rax\n  unsigned __int64 v27; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v28; // [rsp+18h] [rbp-8h]\n\n  v27 = 0LL;\n  v28 = a2[1];\n  while ( *a2 > v27 )\n  {\n    v2 = *(_DWORD *)v28;\n    if ( *(_DWORD *)v28 == 11 )\n    {\n      if ( a1[1] >= 0xB0 )\n      {\n        v13 = (_QWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v13 + 1;\n      }\n      else\n      {\n        v13 = (_QWORD *)(*((_QWORD *)a1 + 2) + a1[1]);\n        a1[1] += 16;\n      }\n      *(_QWORD *)(v28 + 16) = *v13;\n    }\n    else if ( v2 > 0xB )\n    {\n      if ( v2 == 17 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v20 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v20 + 1;\n        }\n        else\n        {\n          v20 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v20;\n      }\n      else if ( v2 > 0x11 )\n      {\n        if ( v2 == 20 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v23 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v23 + 1;\n          }\n          else\n          {\n            v23 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v23;\n        }\n        else if ( v2 > 0x14 )\n        {\n          if ( v2 == 21 )\n          {\n            if ( *a1 >= 0x30 )\n            {\n              v24 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v24 + 1;\n            }\n            else\n            {\n              v24 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v24;\n          }\n          else\n          {\n            if ( v2 != 22 )\n              return 0xFFFFFFFFLL;\n            if ( *a1 >= 0x30 )\n            {\n              v25 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v25 + 1;\n            }\n            else\n            {\n              v25 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v25;\n          }\n        }\n        else if ( v2 == 18 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v21 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v21 + 1;\n          }\n          else\n          {\n            v21 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v21;\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v22 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v22 + 1;\n          }\n          else\n          {\n            v22 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v22;\n        }\n      }\n      else if ( v2 == 14 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v17 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v17 + 2;\n        }\n        else\n        {\n          v17 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v17;\n      }\n      else if ( v2 > 0xE )\n      {\n        if ( v2 == 15 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v18 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v18 + 1;\n          }\n          else\n          {\n            v18 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v18;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(NULL)\";\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v19 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v19 + 1;\n          }\n          else\n          {\n            v19 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v19;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(\";\n        }\n      }\n      else if ( v2 == 12 )\n      {\n        v14 = (*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;\n        *((_QWORD *)a1 + 1) = v14 + 16;\n        v15 = *(_QWORD *)v14;\n        LODWORD(v14) = *(_DWORD *)(v14 + 8);\n        *(_QWORD *)(v28 + 16) = v15;\n        *(_DWORD *)(v28 + 24) = v14;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v16 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v16 + 2;\n        }\n        else\n        {\n          v16 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v16;\n      }\n    }\n    else if ( v2 == 5 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v7 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v7 + 2;\n      }\n      else\n      {\n        v7 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_DWORD *)(v28 + 16) = *v7;\n    }\n    else if ( v2 > 5 )\n    {\n      if ( v2 == 8 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v10 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v10 + 1;\n        }\n        else\n        {\n          v10 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v10;\n      }\n      else if ( v2 > 8 )\n      {\n        if ( v2 == 9 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v11 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v11 + 1;\n          }\n          else\n          {\n            v11 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v11;\n        }\n        else\n        {\n          if ( v2 != 10 )\n            return 0xFFFFFFFFLL;\n          if ( *a1 >= 0x30 )\n          {\n            v12 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 1;\n          }\n          else\n          {\n            v12 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v12;\n        }\n      }\n      else if ( v2 == 6 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v8 + 2;\n        }\n        else\n        {\n          v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v8;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v9 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v9 + 1;\n        }\n        else\n        {\n          v9 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v9;\n      }\n    }\n    else if ( v2 == 2 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v4 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v4 + 2;\n      }\n      else\n      {\n        v4 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v4;\n    }\n    else if ( v2 > 2 )\n    {\n      if ( v2 == 3 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v5 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v5 + 2;\n        }\n        else\n        {\n          v5 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v5;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v6 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v6 + 2;\n        }\n        else\n        {\n          v6 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v6;\n      }\n    }\n    else\n    {\n      if ( v2 != 1 )\n        return 0xFFFFFFFFLL;\n      if ( *a1 >= 0x30 )\n      {\n        v3 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v3 + 2;\n      }\n      else\n      {\n        v3 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v3;\n    }\n    ++v27;\n    v28 += 32LL;\n  }\n  return 0LL;\n}\n"], [4243039, "sub_40BE5F", "__int64 __fastcall sub_40BE5F(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4243091, "sub_40BE93", "__int64 __fastcall sub_40BE93(char *a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rax\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rax\n  void *v9; // rax\n  __int64 v10; // rsi\n  __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned __int64 v14; // rax\n  size_t v15; // rax\n  void *v16; // rax\n  __int64 v17; // rsi\n  __int64 v18; // rax\n  char *v19; // rax\n  int v20; // eax\n  __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  size_t v23; // rax\n  void *v24; // rax\n  __int64 v25; // rsi\n  __int64 v26; // rax\n  unsigned __int64 v27; // rax\n  size_t v28; // rax\n  void *v29; // rax\n  char v33; // [rsp+2Fh] [rbp-E1h]\n  int v34; // [rsp+30h] [rbp-E0h]\n  int ii; // [rsp+34h] [rbp-DCh]\n  __int64 v37; // [rsp+40h] [rbp-D0h]\n  __int64 v38; // [rsp+48h] [rbp-C8h]\n  __int64 v39; // [rsp+50h] [rbp-C0h]\n  unsigned __int64 v40; // [rsp+58h] [rbp-B8h]\n  unsigned __int64 v41; // [rsp+60h] [rbp-B0h]\n  __int64 v42; // [rsp+68h] [rbp-A8h]\n  char *i; // [rsp+70h] [rbp-A0h]\n  char *j; // [rsp+70h] [rbp-A0h]\n  unsigned __int64 v45; // [rsp+78h] [rbp-98h]\n  char *k; // [rsp+80h] [rbp-90h]\n  char *l; // [rsp+80h] [rbp-90h]\n  unsigned __int64 v48; // [rsp+88h] [rbp-88h]\n  char *m; // [rsp+90h] [rbp-80h]\n  char *n; // [rsp+90h] [rbp-80h]\n  unsigned __int64 v51; // [rsp+98h] [rbp-78h]\n  __int64 v52; // [rsp+A0h] [rbp-70h]\n  unsigned __int64 v53; // [rsp+A8h] [rbp-68h]\n  void *dest; // [rsp+B8h] [rbp-58h]\n  unsigned __int64 v55; // [rsp+C8h] [rbp-48h]\n  void *v56; // [rsp+D8h] [rbp-38h]\n  unsigned __int64 v57; // [rsp+E8h] [rbp-28h]\n  void *v58; // [rsp+F8h] [rbp-18h]\n  void *v59; // [rsp+108h] [rbp-8h]\n\n  v37 = 0LL;\n  v40 = 0LL;\n  v41 = 0LL;\n  *(_QWORD *)a2 = 0LL;\n  v38 = 7LL;\n  *(_QWORD *)(a2 + 8) = a2 + 32;\n  *(_QWORD *)a3 = 0LL;\n  v39 = 7LL;\n  *(_QWORD *)(a3 + 8) = a3 + 16;\n  while ( 1 )\n  {\n    do\n    {\n      if ( !*a1 )\n      {\n        *(_QWORD *)(*(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2) = a1;\n        *(_QWORD *)(a2 + 16) = v40;\n        *(_QWORD *)(a2 + 24) = v41;\n        return 0LL;\n      }\n      v3 = a1++;\n    }\n    while ( *v3 != 37 );\n    v42 = -1LL;\n    v52 = *(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2;\n    *(_QWORD *)v52 = a1 - 1;\n    *(_DWORD *)(v52 + 16) = 0;\n    *(_QWORD *)(v52 + 24) = 0LL;\n    *(_QWORD *)(v52 + 32) = 0LL;\n    *(_QWORD *)(v52 + 40) = -1LL;\n    *(_QWORD *)(v52 + 48) = 0LL;\n    *(_QWORD *)(v52 + 56) = 0LL;\n    *(_QWORD *)(v52 + 64) = -1LL;\n    *(_QWORD *)(v52 + 80) = -1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( i = a1; *i > 47 && *i <= 57; ++i )\n        ;\n      if ( *i == 36 )\n      {\n        v45 = 0LL;\n        for ( j = a1; *j > 47 && *j <= 57; ++j )\n        {\n          if ( v45 > 0x1999999999999999LL )\n            v4 = -1LL;\n          else\n            v4 = 10 * v45;\n          v45 = sub_40BE5F(v4, *j - 48);\n        }\n        if ( !v45 || v45 == -1LL )\n        {\nLABEL_272:\n          if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n            free(*(void **)(a3 + 8));\n          if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n            free(*(void **)(a2 + 8));\n          *__errno_location() = 22;\n          return 0xFFFFFFFFLL;\n        }\n        v42 = v45 - 1;\n        a1 = j + 1;\n      }\n    }\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( 1 )\n              {\n                while ( *a1 == 39 )\n                {\n                  *(_DWORD *)(v52 + 16) |= 1u;\n                  ++a1;\n                }\n                if ( *a1 != 45 )\n                  break;\n                *(_DWORD *)(v52 + 16) |= 2u;\n                ++a1;\n              }\n              if ( *a1 != 43 )\n                break;\n              *(_DWORD *)(v52 + 16) |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 32 )\n              break;\n            *(_DWORD *)(v52 + 16) |= 8u;\n            ++a1;\n          }\n          if ( *a1 != 35 )\n            break;\n          *(_DWORD *)(v52 + 16) |= 0x10u;\n          ++a1;\n        }\n        if ( *a1 != 48 )\n          break;\n        *(_DWORD *)(v52 + 16) |= 0x20u;\n        ++a1;\n      }\n      if ( *a1 != 73 )\n        break;\n      *(_DWORD *)(v52 + 16) |= 0x40u;\n      ++a1;\n    }\n    if ( *a1 != 42 )\n    {\n      if ( *a1 > 47 && *a1 <= 57 )\n      {\n        *(_QWORD *)(v52 + 24) = a1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 32) = a1;\n        if ( v40 < *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24) )\n          v40 = *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24);\n      }\n      goto LABEL_88;\n    }\n    *(_QWORD *)(v52 + 24) = a1++;\n    *(_QWORD *)(v52 + 32) = a1;\n    if ( !v40 )\n      v40 = 1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( k = a1; *k > 47 && *k <= 57; ++k )\n        ;\n      if ( *k == 36 )\n      {\n        v48 = 0LL;\n        for ( l = a1; *l > 47 && *l <= 57; ++l )\n        {\n          if ( v48 > 0x1999999999999999LL )\n            v5 = -1LL;\n          else\n            v5 = 10 * v48;\n          v48 = sub_40BE5F(v5, *l - 48);\n        }\n        if ( !v48 || v48 == -1LL )\n          goto LABEL_272;\n        *(_QWORD *)(v52 + 40) = v48 - 1;\n        a1 = l + 1;\n      }\n    }\n    if ( *(_QWORD *)(v52 + 40) == -1LL )\n    {\n      v6 = v37++;\n      *(_QWORD *)(v52 + 40) = v6;\n      if ( *(_QWORD *)(v52 + 40) == -1LL )\n        goto LABEL_272;\n    }\n    v53 = *(_QWORD *)(v52 + 40);\n    if ( v53 >= v39 )\n      break;\nLABEL_75:\n    while ( *(_QWORD *)a3 <= v53 )\n    {\n      v10 = *(_QWORD *)(a3 + 8);\n      v11 = (*(_QWORD *)a3)++;\n      *(_DWORD *)(v10 + 32 * v11) = 0;\n    }\n    if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) )\n    {\n      if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) != 5 )\n        goto LABEL_272;\n    }\n    else\n    {\n      *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) = 5;\n    }\nLABEL_88:\n    if ( *a1 == 46 )\n    {\n      if ( *++a1 == 42 )\n      {\n        *(_QWORD *)(v52 + 48) = a1++ - 1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 <= 1 )\n          v41 = 2LL;\n        if ( *a1 > 47 && *a1 <= 57 )\n        {\n          for ( m = a1; *m > 47 && *m <= 57; ++m )\n            ;\n          if ( *m == 36 )\n          {\n            v51 = 0LL;\n            for ( n = a1; *n > 47 && *n <= 57; ++n )\n            {\n              if ( v51 > 0x1999999999999999LL )\n                v12 = -1LL;\n              else\n                v12 = 10 * v51;\n              v51 = sub_40BE5F(v12, *n - 48);\n            }\n            if ( !v51 || v51 == -1LL )\n              goto LABEL_272;\n            *(_QWORD *)(v52 + 64) = v51 - 1;\n            a1 = n + 1;\n          }\n        }\n        if ( *(_QWORD *)(v52 + 64) == -1LL )\n        {\n          v13 = v37++;\n          *(_QWORD *)(v52 + 64) = v13;\n          if ( *(_QWORD *)(v52 + 64) == -1LL )\n            goto LABEL_272;\n        }\n        v55 = *(_QWORD *)(v52 + 64);\n        if ( v55 >= v39 )\n        {\n          if ( v39 < 0 )\n            v14 = -1LL;\n          else\n            v14 = 2 * v39;\n          v39 = v14;\n          if ( v14 <= v55 )\n            v39 = sub_40BE5F(v55, 1LL);\n          if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n            v15 = -1LL;\n          else\n            v15 = 32 * v39;\n          if ( v15 == -1LL )\n            goto LABEL_277;\n          v16 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v15) : realloc(*(void **)(a3 + 8), v15);\n          v56 = v16;\n          if ( !v16 )\n            goto LABEL_277;\n          if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n            memcpy(v16, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n          *(_QWORD *)(a3 + 8) = v56;\n        }\n        while ( *(_QWORD *)a3 <= v55 )\n        {\n          v17 = *(_QWORD *)(a3 + 8);\n          v18 = (*(_QWORD *)a3)++;\n          *(_DWORD *)(v17 + 32 * v18) = 0;\n        }\n        if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) )\n        {\n          if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) != 5 )\n            goto LABEL_272;\n        }\n        else\n        {\n          *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) = 5;\n        }\n      }\n      else\n      {\n        *(_QWORD *)(v52 + 48) = a1 - 1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 < *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48) )\n          v41 = *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48);\n      }\n    }\n    for ( ii = 0; ; ii += 8 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( *a1 == 104 )\n              {\n                ii |= 1 << (ii & 1);\n                ++a1;\n              }\n              if ( *a1 != 76 )\n                break;\n              ii |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 108 )\n              break;\n            ii += 8;\n            ++a1;\n          }\n          if ( *a1 != 106 )\n            break;\n          ii += 8;\n          ++a1;\n        }\n        if ( *a1 != 122 && *a1 != 90 )\n          break;\n        ii += 8;\n        ++a1;\n      }\n      if ( *a1 != 116 )\n        break;\n      ++a1;\n    }\n    v19 = a1++;\n    v33 = *v19;\n    v20 = *v19;\n    if ( v20 == 100 )\n    {\nLABEL_185:\n      if ( ii > 15 || (ii & 4) != 0 )\n      {\n        v34 = 9;\n      }\n      else if ( ii <= 7 )\n      {\n        if ( (ii & 2) != 0 )\n        {\n          v34 = 1;\n        }\n        else if ( (ii & 1) != 0 )\n        {\n          v34 = 3;\n        }\n        else\n        {\n          v34 = 5;\n        }\n      }\n      else\n      {\n        v34 = 7;\n      }\n      goto LABEL_229;\n    }\n    if ( v20 > 100 )\n    {\n      if ( v20 == 111 )\n        goto LABEL_195;\n      if ( v20 > 111 )\n      {\n        if ( v20 == 115 )\n        {\n          if ( ii <= 7 )\n            v34 = 15;\n          else\n            v34 = 16;\n          goto LABEL_229;\n        }\n        if ( v20 > 115 )\n        {\n          if ( v20 != 117 && v20 != 120 )\n            goto LABEL_272;\nLABEL_195:\n          if ( ii > 15 || (ii & 4) != 0 )\n          {\n            v34 = 10;\n          }\n          else if ( ii <= 7 )\n          {\n            if ( (ii & 2) != 0 )\n            {\n              v34 = 2;\n            }\n            else if ( (ii & 1) != 0 )\n            {\n              v34 = 4;\n            }\n            else\n            {\n              v34 = 6;\n            }\n          }\n          else\n          {\n            v34 = 8;\n          }\n          goto LABEL_229;\n        }\n        if ( v20 != 112 )\n          goto LABEL_272;\n        v34 = 17;\n      }\n      else\n      {\n        if ( v20 == 105 )\n          goto LABEL_185;\n        if ( v20 <= 105 )\n        {\n          if ( v20 > 103 )\n            goto LABEL_272;\nLABEL_205:\n          if ( ii > 15 || (ii & 4) != 0 )\n            v34 = 12;\n          else\n            v34 = 11;\n          goto LABEL_229;\n        }\n        if ( v20 != 110 )\n          goto LABEL_272;\n        if ( ii > 15 || (ii & 4) != 0 )\n        {\n          v34 = 22;\n        }\n        else if ( ii <= 7 )\n        {\n          if ( (ii & 2) != 0 )\n          {\n            v34 = 18;\n          }\n          else if ( (ii & 1) != 0 )\n          {\n            v34 = 19;\n          }\n          else\n          {\n            v34 = 20;\n          }\n        }\n        else\n        {\n          v34 = 21;\n        }\n      }\n    }\n    else if ( v20 > 71 )\n    {\n      if ( v20 == 88 )\n        goto LABEL_195;\n      if ( v20 > 88 )\n      {\n        if ( v20 == 97 )\n          goto LABEL_205;\n        if ( v20 != 99 )\n          goto LABEL_272;\n        if ( ii <= 7 )\n          v34 = 13;\n        else\n          v34 = 14;\n      }\n      else\n      {\n        if ( v20 != 83 )\n          goto LABEL_272;\n        v34 = 16;\n        v33 = 115;\n      }\n    }\n    else\n    {\n      if ( v20 >= 69 || v20 == 65 )\n        goto LABEL_205;\n      if ( v20 == 67 )\n      {\n        v34 = 14;\n        v33 = 99;\n      }\n      else\n      {\n        if ( v20 != 37 )\n          goto LABEL_272;\n        v34 = 0;\n      }\n    }\nLABEL_229:\n    if ( v34 )\n    {\n      *(_QWORD *)(v52 + 80) = v42;\n      if ( *(_QWORD *)(v52 + 80) == -1LL )\n      {\n        v21 = v37++;\n        *(_QWORD *)(v52 + 80) = v21;\n        if ( *(_QWORD *)(v52 + 80) == -1LL )\n          goto LABEL_272;\n      }\n      v57 = *(_QWORD *)(v52 + 80);\n      if ( v57 >= v39 )\n      {\n        if ( v39 < 0 )\n          v22 = -1LL;\n        else\n          v22 = 2 * v39;\n        v39 = v22;\n        if ( v22 <= v57 )\n          v39 = sub_40BE5F(v57, 1LL);\n        if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n          v23 = -1LL;\n        else\n          v23 = 32 * v39;\n        if ( v23 == -1LL )\n          goto LABEL_277;\n        v24 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v23) : realloc(*(void **)(a3 + 8), v23);\n        v58 = v24;\n        if ( !v24 )\n          goto LABEL_277;\n        if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n          memcpy(v24, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n        *(_QWORD *)(a3 + 8) = v58;\n      }\n      while ( *(_QWORD *)a3 <= v57 )\n      {\n        v25 = *(_QWORD *)(a3 + 8);\n        v26 = (*(_QWORD *)a3)++;\n        *(_DWORD *)(v25 + 32 * v26) = 0;\n      }\n      if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) )\n      {\n        if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) != v34 )\n          goto LABEL_272;\n      }\n      else\n      {\n        *(_DWORD *)(*(_QWORD *)(a3 + 8) + 32 * v57) = v34;\n      }\n    }\n    *(_BYTE *)(v52 + 72) = v33;\n    *(_QWORD *)(v52 + 8) = a1;\n    if ( ++*(_QWORD *)a2 >= (unsigned __int64)v38 )\n    {\n      if ( v38 < 0 )\n        v27 = -1LL;\n      else\n        v27 = 2 * v38;\n      v38 = v27;\n      if ( v27 > 0x2E8BA2E8BA2E8BALL )\n        v28 = -1LL;\n      else\n        v28 = 88 * v27;\n      if ( v28 == -1LL )\n        goto LABEL_277;\n      v29 = *(_QWORD *)(a2 + 8) == a2 + 32 ? malloc(v28) : realloc(*(void **)(a2 + 8), v28);\n      v59 = v29;\n      if ( !v29 )\n        goto LABEL_277;\n      if ( *(_QWORD *)(a2 + 8) == a2 + 32 )\n        memcpy(v29, *(const void **)(a2 + 8), 88LL * *(_QWORD *)a2);\n      *(_QWORD *)(a2 + 8) = v59;\n    }\n  }\n  if ( v39 < 0 )\n    v7 = -1LL;\n  else\n    v7 = 2 * v39;\n  v39 = v7;\n  if ( v7 <= v53 )\n    v39 = sub_40BE5F(v53, 1LL);\n  if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n    v8 = -1LL;\n  else\n    v8 = 32 * v39;\n  if ( v8 != -1LL )\n  {\n    v9 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v8) : realloc(*(void **)(a3 + 8), v8);\n    dest = v9;\n    if ( v9 )\n    {\n      if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n        memcpy(v9, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n      *(_QWORD *)(a3 + 8) = dest;\n      goto LABEL_75;\n    }\n  }\nLABEL_277:\n  if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n    free(*(void **)(a3 + 8));\n  if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n    free(*(void **)(a2 + 8));\n  *__errno_location() = 12;\n  return 0xFFFFFFFFLL;\n}\n"], [4248624, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_612E18 - off_612E10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_612E10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4248736, "fini", "void fini(void)\n{\n  ;\n}\n"], [4248752, "sub_40D4B0", "int __fastcall sub_40D4B0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_613208 )\n    v1 = (void *)qword_613208;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4248780, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]