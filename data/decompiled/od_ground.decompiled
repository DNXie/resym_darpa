[[4199416, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4199456, "sub_401420", "__int64 sub_401420()\n{\n  return qword_612010();\n}\n"], [4199472, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4199488, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4199504, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4199520, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4199536, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4199552, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4199568, ".puts", "// attributes: thunk\nint puts(const char *s)\n{\n  return puts(s);\n}\n"], [4199584, ".ferror", "// attributes: thunk\nint ferror(FILE *stream)\n{\n  return ferror(stream);\n}\n"], [4199600, ".strtod", "// attributes: thunk\ndouble strtod(const char *nptr, char **endptr)\n{\n  return strtod(nptr, endptr);\n}\n"], [4199616, ".localeconv", "// attributes: thunk\nstruct lconv *localeconv(void)\n{\n  return localeconv();\n}\n"], [4199632, ".fread_unlocked", "// attributes: thunk\nsize_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)\n{\n  return fread_unlocked(ptr, size, n, stream);\n}\n"], [4199648, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4199664, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4199680, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4199696, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4199712, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4199728, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4199744, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4199760, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4199776, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4199792, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4199808, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4199824, ".snprintf", "// attributes: thunk\nint snprintf(char *s, size_t maxlen, const char *format, ...)\n{\n  return snprintf(s, maxlen, format);\n}\n"], [4199840, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4199856, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4199872, ".__assert_fail", "// attributes: thunk\nvoid __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\n{\n  _assert_fail(assertion, file, line, function);\n}\n"], [4199888, ".strtof", "// attributes: thunk\nfloat strtof(const char *nptr, char **endptr)\n{\n  return strtof(nptr, endptr);\n}\n"], [4199904, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4199920, ".fgetc", "// attributes: thunk\nint fgetc(FILE *stream)\n{\n  return fgetc(stream);\n}\n"], [4199936, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4199952, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4199968, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4199984, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4200000, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4200016, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4200032, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4200048, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4200064, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4200080, ".putchar_unlocked", "// attributes: thunk\nint putchar_unlocked(int c)\n{\n  return putchar_unlocked(c);\n}\n"], [4200096, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4200112, ".putc_unlocked", "// attributes: thunk\nint putc_unlocked(int c, FILE *stream)\n{\n  return putc_unlocked(c, stream);\n}\n"], [4200128, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4200144, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4200160, ".nl_langinfo", "// attributes: thunk\nchar *nl_langinfo(nl_item item)\n{\n  return nl_langinfo(item);\n}\n"], [4200176, ".__fxstat", "// attributes: thunk\nint __fxstat(int ver, int fildes, struct stat *stat_buf)\n{\n  return _fxstat(ver, fildes, stat_buf);\n}\n"], [4200192, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4200208, ".fwrite_unlocked", "// attributes: thunk\nsize_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)\n{\n  return fwrite_unlocked(ptr, size, n, stream);\n}\n"], [4200224, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4200240, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4200256, ".setvbuf", "// attributes: thunk\nint setvbuf(FILE *stream, char *buf, int modes, size_t n)\n{\n  return setvbuf(stream, buf, modes, n);\n}\n"], [4200272, ".strtold", "// attributes: thunk\nlong double strtold(const char *nptr, char **endptr)\n{\n  return strtold(nptr, endptr);\n}\n"], [4200288, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4200304, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4200320, ".fopen", "// attributes: thunk\nFILE *fopen(const char *filename, const char *modes)\n{\n  return fopen(filename, modes);\n}\n"], [4200336, ".strtoumax", "// attributes: thunk\nuintmax_t strtoumax(const char *nptr, char **endptr, int base)\n{\n  return strtoumax(nptr, endptr, base);\n}\n"], [4200352, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4200368, ".sprintf", "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\n  return sprintf(s, format);\n}\n"], [4200384, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4200400, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4200416, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4200432, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4200448, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4200464, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4200512, "sub_401840", "signed __int64 sub_401840()\n{\n  signed __int64 result; // rax\n\n  result = &unk_61226F - &unk_612268;\n  if ( (unsigned __int64)(&unk_61226F - &unk_612268) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4200560, "sub_401870", "__int64 sub_401870()\n{\n  return 0LL;\n}\n"], [4200624, "sub_4018B0", "signed __int64 sub_4018B0()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_6122D8 )\n  {\n    result = sub_401840();\n    byte_6122D8 = 1;\n  }\n  return result;\n}\n"], [4200656, "sub_4018D0", "__int64 sub_4018D0()\n{\n  return sub_401870();\n}\n"], [4200701, "sub_4018FD", "unsigned __int64 __fastcall sub_4018FD(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v5; // [rsp+18h] [rbp-8h]\n\n  do\n  {\n    v5 = a1 % a2;\n    a1 = a2;\n    a2 = v5;\n  }\n  while ( v5 );\n  return a1;\n}\n"], [4200759, "sub_401937", "unsigned __int64 __fastcall sub_401937(unsigned __int64 a1, unsigned __int64 a2)\n{\n  return a1 * (a2 / sub_4018FD(a1, a2));\n}\n"], [4200816, "sub_401970", "int sub_401970()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_40539A(qword_612418);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_40539A(qword_612418);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_40539A(qword_612418);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4201082, "sub_401A7A", "void __fastcall __noreturn sub_401A7A(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  __int64 v3; // r13\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  char *v6; // rax\n  FILE *v7; // rbx\n  char *v8; // rax\n  FILE *v9; // rbx\n  char *v10; // rax\n  FILE *v11; // rbx\n  char *v12; // rax\n  FILE *v13; // rbx\n  char *v14; // rax\n  FILE *v15; // rbx\n  char *v16; // rax\n  FILE *v17; // rbx\n  char *v18; // rax\n  FILE *v19; // rbx\n  char *v20; // rax\n  FILE *v21; // rbx\n  char *v22; // rax\n  FILE *v23; // rbx\n  char *v24; // rax\n  FILE *v25; // rbx\n  char *v26; // rax\n  FILE *v27; // rbx\n  char *v28; // rax\n  FILE *v29; // rbx\n  char *v30; // rax\n  FILE *v31; // rbx\n  char *v32; // rax\n  FILE *v33; // rbx\n  char *v34; // rax\n\n  if ( a1 )\n  {\n    v1 = qword_612418;\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = qword_612418;\n    v4 = qword_612418;\n    v5 = qword_612418;\n    v6 = gettext(\n           \"Usage: %s [OPTION]... [FILE]...\\n\"\n           \"  or:  %s [-abcdfilosx]... [FILE] [[+]OFFSET[.][b]]\\n\"\n           \"  or:  %s --traditional [OPTION]... [FILE] [[+]OFFSET[.][b] [+][LABEL][.][b]]\\n\");\n    printf(v6, v5, v4, v3);\n    v7 = stdout;\n    v8 = gettext(\n           \"\\n\"\n           \"Write an unambiguous representation, octal bytes by default,\\n\"\n           \"of FILE to standard output.  With more than one FILE argument,\\n\"\n           \"concatenate them in the listed order to form the input.\\n\"\n           \"With no FILE, or when FILE is -, read standard input.\\n\"\n           \"\\n\");\n    fputs_unlocked(v8, v7);\n    v9 = stdout;\n    v10 = gettext(\"All arguments to long options are mandatory for short options.\\n\");\n    fputs_unlocked(v10, v9);\n    v11 = stdout;\n    v12 = gettext(\n            \"  -A, --address-radix=RADIX   decide how file offsets are printed\\n\"\n            \"  -j, --skip-bytes=BYTES      skip BYTES input bytes first\\n\");\n    fputs_unlocked(v12, v11);\n    v13 = stdout;\n    v14 = gettext(\n            \"  -N, --read-bytes=BYTES      limit dump to BYTES input bytes\\n\"\n            \"  -S, --strings[=BYTES]       output strings of at least BYTES graphic chars\\n\"\n            \"  -t, --format=TYPE           select output format or formats\\n\"\n            \"  -v, --output-duplicates     do not use * to mark line suppression\\n\"\n            \"  -w, --width[=BYTES]         output BYTES bytes per output line\\n\"\n            \"      --traditional           accept arguments in traditional form\\n\");\n    fputs_unlocked(v14, v13);\n    v15 = stdout;\n    v16 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v16, v15);\n    v17 = stdout;\n    v18 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v18, v17);\n    v19 = stdout;\n    v20 = gettext(\n            \"\\n\"\n            \"Traditional format specifications may be intermixed; they accumulate:\\n\"\n            \"  -a   same as -t a,  select named characters, ignoring high-order bit\\n\"\n            \"  -b   same as -t o1, select octal bytes\\n\"\n            \"  -c   same as -t c,  select ASCII characters or backslash escapes\\n\"\n            \"  -d   same as -t u2, select unsigned decimal 2-byte units\\n\");\n    fputs_unlocked(v20, v19);\n    v21 = stdout;\n    v22 = gettext(\n            \"  -f   same as -t fF, select floats\\n\"\n            \"  -i   same as -t dI, select decimal ints\\n\"\n            \"  -l   same as -t dL, select decimal longs\\n\"\n            \"  -o   same as -t o2, select octal 2-byte units\\n\"\n            \"  -s   same as -t d2, select decimal 2-byte units\\n\"\n            \"  -x   same as -t x2, select hexadecimal 2-byte units\\n\");\n    fputs_unlocked(v22, v21);\n    v23 = stdout;\n    v24 = gettext(\n            \"\\n\"\n            \"If first and second call formats both apply, the second format is assumed\\n\"\n            \"if the last operand begins with + or (if there are 2 operands) a digit.\\n\"\n            \"An OFFSET operand means -j OFFSET.  LABEL is the pseudo-address\\n\"\n            \"at first byte printed, incremented when dump is progressing.\\n\"\n            \"For OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal;\\n\"\n            \"suffixes may be . for octal and b for multiply by 512.\\n\");\n    fputs_unlocked(v24, v23);\n    v25 = stdout;\n    v26 = gettext(\n            \"\\n\"\n            \"TYPE is made up of one or more of these specifications:\\n\"\n            \"\\n\"\n            \"  a          named character, ignoring high-order bit\\n\"\n            \"  c          ASCII character or backslash escape\\n\");\n    fputs_unlocked(v26, v25);\n    v27 = stdout;\n    v28 = gettext(\n            \"  d[SIZE]    signed decimal, SIZE bytes per integer\\n\"\n            \"  f[SIZE]    floating point, SIZE bytes per integer\\n\"\n            \"  o[SIZE]    octal, SIZE bytes per integer\\n\"\n            \"  u[SIZE]    unsigned decimal, SIZE bytes per integer\\n\"\n            \"  x[SIZE]    hexadecimal, SIZE bytes per integer\\n\");\n    fputs_unlocked(v28, v27);\n    v29 = stdout;\n    v30 = gettext(\n            \"\\n\"\n            \"SIZE is a number.  For TYPE in doux, SIZE may also be C for\\n\"\n            \"sizeof(char), S for sizeof(short), I for sizeof(int) or L for\\n\"\n            \"sizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float), D\\n\"\n            \"for sizeof(double) or L for sizeof(long double).\\n\");\n    fputs_unlocked(v30, v29);\n    v31 = stdout;\n    v32 = gettext(\n            \"\\n\"\n            \"RADIX is d for decimal, o for octal, x for hexadecimal or n for none.\\n\"\n            \"BYTES is hexadecimal with 0x or 0X prefix, and may have a multiplier suffix:\\n\"\n            \"b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\\n\"\n            \"GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\\n\"\n            \"Adding a z suffix to any type displays printable characters at the end of each\\n\"\n            \"output line.\\n\");\n    fputs_unlocked(v32, v31);\n    v33 = stdout;\n    v34 = gettext(\n            \"Option --string without a number implies 3; option --width without a number\\n\"\n            \"implies 32.  By default, od uses -A o -t oS -w16.\\n\");\n    fputs_unlocked(v34, v33);\n    sub_401970();\n  }\n  exit(a1);\n}\n"], [4201615, "sub_401C8F", "unsigned __int64 __fastcall sub_401C8F(unsigned __int64 a1, unsigned __int64 a2, char *a3, int a4, int a5, int a6)\n{\n  char *v6; // rax\n  unsigned __int64 result; // rax\n  char v8; // [rsp+0h] [rbp-50h]\n  int v9; // [rsp+8h] [rbp-48h]\n  int v12; // [rsp+34h] [rbp-1Ch]\n  int v13; // [rsp+38h] [rbp-18h]\n  unsigned __int64 i; // [rsp+48h] [rbp-8h]\n\n  v9 = a6;\n  v12 = a6;\n  for ( i = a1; ; --i )\n  {\n    result = a2;\n    if ( a2 >= i )\n      break;\n    v13 = (i - 1) * v9 / a1;\n    v6 = a3++;\n    sub_407DDE(a4, v12 - v13 + a5, *v6, v12 - v13 + a5, a5, a6, v8);\n    v12 = v13;\n  }\n  return result;\n}\n"], [4201783, "sub_401D37", "unsigned __int64 __fastcall sub_401D37(unsigned __int64 a1, unsigned __int64 a2, unsigned __int8 *a3, int a4, int a5, int a6)\n{\n  unsigned __int8 *v6; // rax\n  unsigned __int64 result; // rax\n  char v8; // [rsp+0h] [rbp-50h]\n  int v9; // [rsp+8h] [rbp-48h]\n  int v12; // [rsp+34h] [rbp-1Ch]\n  int v13; // [rsp+38h] [rbp-18h]\n  unsigned __int64 i; // [rsp+48h] [rbp-8h]\n\n  v9 = a6;\n  v12 = a6;\n  for ( i = a1; ; --i )\n  {\n    result = a2;\n    if ( a2 >= i )\n      break;\n    v13 = (i - 1) * v9 / a1;\n    v6 = a3++;\n    sub_407DDE(a4, v12 - v13 + a5, *v6, v12 - v13 + a5, a5, a6, v8);\n    v12 = v13;\n  }\n  return result;\n}\n"], [4201951, "sub_401DDF", "unsigned __int64 __fastcall sub_401DDF(unsigned __int64 a1, unsigned __int64 a2, __int16 *a3, int a4, int a5, int a6)\n{\n  __int16 *v6; // rax\n  unsigned __int64 result; // rax\n  char v8; // [rsp+0h] [rbp-50h]\n  int v9; // [rsp+8h] [rbp-48h]\n  int v12; // [rsp+34h] [rbp-1Ch]\n  int v13; // [rsp+38h] [rbp-18h]\n  unsigned __int64 i; // [rsp+48h] [rbp-8h]\n\n  v9 = a6;\n  v12 = a6;\n  for ( i = a1; ; --i )\n  {\n    result = a2;\n    if ( a2 >= i )\n      break;\n    v13 = (i - 1) * v9 / a1;\n    v6 = a3++;\n    sub_407DDE(a4, v12 - v13 + a5, *v6, v12 - v13 + a5, a5, a6, v8);\n    v12 = v13;\n  }\n  return result;\n}\n"], [4202120, "sub_401E88", "unsigned __int64 __fastcall sub_401E88(unsigned __int64 a1, unsigned __int64 a2, unsigned __int16 *a3, int a4, int a5, int a6)\n{\n  unsigned __int16 *v6; // rax\n  unsigned __int64 result; // rax\n  char v8; // [rsp+0h] [rbp-50h]\n  int v9; // [rsp+8h] [rbp-48h]\n  int v12; // [rsp+34h] [rbp-1Ch]\n  int v13; // [rsp+38h] [rbp-18h]\n  unsigned __int64 i; // [rsp+48h] [rbp-8h]\n\n  v9 = a6;\n  v12 = a6;\n  for ( i = a1; ; --i )\n  {\n    result = a2;\n    if ( a2 >= i )\n      break;\n    v13 = (i - 1) * v9 / a1;\n    v6 = a3++;\n    sub_407DDE(a4, v12 - v13 + a5, *v6, v12 - v13 + a5, a5, a6, v8);\n    v12 = v13;\n  }\n  return result;\n}\n"], [4202289, "sub_401F31", "unsigned __int64 __fastcall sub_401F31(unsigned __int64 a1, unsigned __int64 a2, _DWORD *a3, int a4, int a5, int a6)\n{\n  _DWORD *v6; // rax\n  unsigned __int64 result; // rax\n  char v8; // [rsp+0h] [rbp-50h]\n  int v9; // [rsp+8h] [rbp-48h]\n  int v12; // [rsp+30h] [rbp-20h]\n  int v13; // [rsp+34h] [rbp-1Ch]\n  unsigned __int64 i; // [rsp+48h] [rbp-8h]\n\n  v9 = a6;\n  v12 = a6;\n  for ( i = a1; ; --i )\n  {\n    result = a2;\n    if ( a2 >= i )\n      break;\n    v13 = (i - 1) * v9 / a1;\n    v6 = a3++;\n    sub_407DDE(a4, v12 - v13 + a5, *v6, v12 - v13 + a5, a5, a6, v8);\n    v12 = v13;\n  }\n  return result;\n}\n"], [4202455, "sub_401FD7", "unsigned __int64 __fastcall sub_401FD7(unsigned __int64 a1, unsigned __int64 a2, _QWORD *a3, int a4, int a5, int a6)\n{\n  _QWORD *v6; // rax\n  unsigned __int64 result; // rax\n  char v8; // [rsp+0h] [rbp-60h]\n  int v9; // [rsp+8h] [rbp-58h]\n  int v12; // [rsp+3Ch] [rbp-24h]\n  int v13; // [rsp+40h] [rbp-20h]\n  unsigned __int64 i; // [rsp+50h] [rbp-10h]\n\n  v9 = a6;\n  v12 = a6;\n  for ( i = a1; ; --i )\n  {\n    result = a2;\n    if ( a2 >= i )\n      break;\n    v13 = (i - 1) * v9 / a1;\n    v6 = a3++;\n    sub_407DDE(a4, v12 - v13 + a5, *v6, v12 - v13 + a5, a5, a6, v8);\n    v12 = v13;\n  }\n  return result;\n}\n"], [4202624, "sub_402080", "unsigned __int64 __fastcall sub_402080(unsigned __int64 a1, unsigned __int64 a2, _QWORD *a3, int a4, int a5, int a6)\n{\n  _QWORD *v6; // rax\n  unsigned __int64 result; // rax\n  char v8; // [rsp+0h] [rbp-60h]\n  int v9; // [rsp+8h] [rbp-58h]\n  int v12; // [rsp+3Ch] [rbp-24h]\n  int v13; // [rsp+40h] [rbp-20h]\n  unsigned __int64 i; // [rsp+50h] [rbp-10h]\n\n  v9 = a6;\n  v12 = a6;\n  for ( i = a1; ; --i )\n  {\n    result = a2;\n    if ( a2 >= i )\n      break;\n    v13 = (i - 1) * v9 / a1;\n    v6 = a3++;\n    sub_407DDE(a4, v12 - v13 + a5, *v6, v12 - v13 + a5, a5, a6, v8);\n    v12 = v13;\n  }\n  return result;\n}\n"], [4202793, "sub_402129", "unsigned __int64 __fastcall sub_402129(unsigned __int64 a1, unsigned __int64 a2, float *a3, __int64 a4, int a5, int a6)\n{\n  float *v6; // rax\n  int v7; // ecx\n  int v8; // er8\n  int v9; // er9\n  char v11; // [rsp+0h] [rbp-80h]\n  int v12; // [rsp+8h] [rbp-78h]\n  int v14; // [rsp+30h] [rbp-50h]\n  unsigned __int64 i; // [rsp+48h] [rbp-38h]\n  char v17[40]; // [rsp+50h] [rbp-30h] BYREF\n  unsigned __int64 v18; // [rsp+78h] [rbp-8h]\n\n  v12 = a6;\n  v18 = __readfsqword(0x28u);\n  v14 = a6;\n  for ( i = a1; a2 < i; --i )\n  {\n    v6 = a3++;\n    sub_40562C(v17, 31LL, 0LL, 0LL, *v6);\n    sub_407DDE((unsigned int)\"%*s\", v14 - (i - 1) * v12 / a1 + a5, (unsigned int)v17, v7, v8, v9, v11);\n    v14 = (i - 1) * v12 / a1;\n  }\n  return __readfsqword(0x28u) ^ v18;\n}\n"], [4203035, "sub_40221B", "unsigned __int64 __fastcall sub_40221B(unsigned __int64 a1, unsigned __int64 a2, double *a3, __int64 a4, int a5, int a6)\n{\n  double *v6; // rax\n  int v7; // ecx\n  int v8; // er8\n  int v9; // er9\n  double v11; // [rsp+0h] [rbp-90h]\n  int v12; // [rsp+8h] [rbp-88h]\n  int v14; // [rsp+3Ch] [rbp-54h]\n  unsigned __int64 i; // [rsp+50h] [rbp-40h]\n  char v17[40]; // [rsp+60h] [rbp-30h] BYREF\n  unsigned __int64 v18; // [rsp+88h] [rbp-8h]\n\n  v12 = a6;\n  v18 = __readfsqword(0x28u);\n  v14 = a6;\n  for ( i = a1; a2 < i; --i )\n  {\n    v6 = a3++;\n    v11 = *v6;\n    sub_405451(v17, 40LL, 0LL, 0LL, *v6);\n    sub_407DDE((unsigned int)\"%*s\", v14 - (i - 1) * v12 / a1 + a5, (unsigned int)v17, v7, v8, v9, SLOBYTE(v11));\n    v14 = (i - 1) * v12 / a1;\n  }\n  return __readfsqword(0x28u) ^ v18;\n}\n"], [4203305, "sub_402329", "unsigned __int64 __fastcall sub_402329(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  __int64 v6; // rax\n  int v7; // ecx\n  int v8; // er8\n  int v9; // er9\n  _TBYTE v11; // [rsp+0h] [rbp-B0h]\n  char v12; // [rsp+0h] [rbp-B0h]\n  int v13; // [rsp+18h] [rbp-98h]\n  int v15; // [rsp+44h] [rbp-6Ch]\n  unsigned __int64 i; // [rsp+58h] [rbp-58h]\n  char v18; // [rsp+70h] [rbp-40h] BYREF\n  unsigned __int64 v19; // [rsp+A8h] [rbp-8h]\n\n  v13 = a6;\n  v19 = __readfsqword(0x28u);\n  v15 = a6;\n  for ( i = a1; a2 < i; --i )\n  {\n    v6 = a3;\n    a3 += 16LL;\n    *(_QWORD *)&v11 = *(_QWORD *)v6;\n    HIWORD(v11) = *(_DWORD *)(v6 + 8);\n    sub_4057FE(v11);\n    sub_407DDE((unsigned int)\"%*s\", v15 - (i - 1) * v13 / a1 + a5, (unsigned int)&v18, v7, v8, v9, v12);\n    v15 = (i - 1) * v13 / a1;\n  }\n  return __readfsqword(0x28u) ^ v19;\n}\n"], [4203586, "sub_402442", "int __fastcall sub_402442(__int64 a1, unsigned __int8 *a2)\n{\n  unsigned __int8 *v2; // rax\n  unsigned __int8 v3; // al\n  unsigned __int8 v6; // [rsp+16h] [rbp-Ah]\n\n  fwrite_unlocked(\"  >\", 1uLL, 3uLL, stdout);\n  while ( a1 )\n  {\n    v2 = a2++;\n    v6 = *v2;\n    if ( ((*__ctype_b_loc())[v6] & 0x4000) != 0 )\n      v3 = v6;\n    else\n      v3 = 46;\n    putchar_unlocked(v3);\n    --a1;\n  }\n  return putchar_unlocked(60);\n}\n"], [4203742, "sub_4024DE", "unsigned __int64 __fastcall sub_4024DE(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  _BYTE *v6; // rax\n  unsigned __int64 result; // rax\n  char v8; // [rsp+0h] [rbp-60h]\n  char v11[12]; // [rsp+30h] [rbp-30h] BYREF\n  int v12; // [rsp+3Ch] [rbp-24h]\n  int v13; // [rsp+40h] [rbp-20h]\n  int v14; // [rsp+44h] [rbp-1Ch]\n  _BYTE *v15; // [rsp+48h] [rbp-18h]\n  unsigned __int64 i; // [rsp+50h] [rbp-10h]\n  const char *v17; // [rsp+58h] [rbp-8h]\n\n  v15 = (_BYTE *)a3;\n  v12 = a6;\n  for ( i = a1; ; --i )\n  {\n    result = a2;\n    if ( a2 >= i )\n      break;\n    v13 = (i - 1) * a6 / a1;\n    v6 = v15++;\n    v14 = *v6 & 0x7F;\n    if ( v14 == 127 )\n    {\n      v17 = \"del\";\n    }\n    else if ( v14 > 32 )\n    {\n      v11[0] = v14;\n      v11[1] = 0;\n      v17 = v11;\n    }\n    else\n    {\n      v17 = (const char *)(4LL * v14 + 4253280);\n    }\n    sub_407DDE((unsigned int)\"%*s\", v12 - v13 + a5, (_DWORD)v17, v12 - v13 + a5, a5, a6, v8);\n    v12 = v13;\n  }\n  return result;\n}\n"], [4203980, "sub_4025CC", "unsigned __int64 __fastcall sub_4025CC(unsigned __int64 a1, unsigned __int64 a2, unsigned __int8 *a3, __int64 a4, int a5, int a6)\n{\n  unsigned __int8 *v6; // rax\n  int v7; // er8\n  int v8; // er9\n  char v10; // [rsp+0h] [rbp-80h]\n  int v11; // [rsp+8h] [rbp-78h]\n  unsigned __int8 v13; // [rsp+3Fh] [rbp-41h]\n  int v14; // [rsp+40h] [rbp-40h]\n  int v15; // [rsp+44h] [rbp-3Ch]\n  unsigned __int64 i; // [rsp+50h] [rbp-30h]\n  char s[8]; // [rsp+60h] [rbp-20h] BYREF\n  unsigned __int64 v19; // [rsp+68h] [rbp-18h]\n\n  v11 = a6;\n  v19 = __readfsqword(0x28u);\n  v14 = a6;\n  for ( i = a1; a2 < i; --i )\n  {\n    v15 = (i - 1) * v11 / a1;\n    v6 = a3++;\n    v13 = *v6;\n    if ( *v6 == 9 )\n    {\n      sub_407DDE((unsigned int)\"%*s\", v14 - v15 + a5, (unsigned int)\"\\\\t\", v14 - v15 + a5, a5, a6, v10);\n      goto LABEL_25;\n    }\n    if ( v13 > 9u )\n    {\n      if ( v13 == 11 )\n      {\n        sub_407DDE((unsigned int)\"%*s\", v14 - v15 + a5, (unsigned int)\"\\\\v\", v14 - v15 + a5, a5, a6, v10);\n        goto LABEL_25;\n      }\n      if ( v13 < 0xBu )\n      {\n        sub_407DDE((unsigned int)\"%*s\", v14 - v15 + a5, (unsigned int)\"\\\\n\", v14 - v15 + a5, a5, a6, v10);\n        goto LABEL_25;\n      }\n      if ( v13 == 12 )\n      {\n        sub_407DDE((unsigned int)\"%*s\", v14 - v15 + a5, (unsigned int)\"\\\\f\", v14 - v15 + a5, a5, a6, v10);\n        goto LABEL_25;\n      }\n      if ( v13 == 13 )\n      {\n        sub_407DDE((unsigned int)\"%*s\", v14 - v15 + a5, (unsigned int)\"\\\\r\", v14 - v15 + a5, a5, a6, v10);\n        goto LABEL_25;\n      }\n    }\n    else\n    {\n      if ( v13 == 7 )\n      {\n        sub_407DDE((unsigned int)\"%*s\", v14 - v15 + a5, (unsigned int)\"\\\\a\", v14 - v15 + a5, a5, a6, v10);\n        goto LABEL_25;\n      }\n      if ( v13 > 7u )\n      {\n        sub_407DDE((unsigned int)\"%*s\", v14 - v15 + a5, (unsigned int)\"\\\\b\", v14 - v15 + a5, a5, a6, v10);\n        goto LABEL_25;\n      }\n      if ( !v13 )\n      {\n        sub_407DDE((unsigned int)\"%*s\", v14 - v15 + a5, (unsigned int)\"\\\\0\", v14 - v15 + a5, a5, a6, v10);\n        goto LABEL_25;\n      }\n    }\n    if ( ((*__ctype_b_loc())[v13] & 0x4000) != 0 )\n      sprintf(s, \"%c\", v13);\n    else\n      sprintf(s, \"%03o\", v13);\n    sub_407DDE((unsigned int)\"%*s\", v14 - v15 + a5, (unsigned int)s, v14 - v15 + a5, v7, v8, v10);\nLABEL_25:\n    v14 = (i - 1) * v11 / a1;\n  }\n  return __readfsqword(0x28u) ^ v19;\n}\n"], [4204412, "sub_40277C", "__int64 __fastcall sub_40277C(char *a1, char **a2, unsigned __int64 *a3)\n{\n  char *v3; // rax\n  int v6; // [rsp+1Ch] [rbp-Ch]\n  unsigned __int64 v7; // [rsp+20h] [rbp-8h]\n\n  v7 = 0LL;\n  while ( (unsigned int)(*a1 - 48) <= 9 )\n  {\n    v3 = a1++;\n    v6 = *v3 - 48;\n    if ( ~(__int64)v6 / 0xAuLL < v7 )\n      return 0LL;\n    v7 = 10 * v7 + v6;\n  }\n  *a2 = a1;\n  *a3 = v7;\n  return 1LL;\n}\n"], [4204582, "sub_402826", "__int64 __fastcall sub_402826(__int64 a1, char *a2, char **a3, __int64 a4)\n{\n  int v4; // eax\n  int v5; // eax\n  __int64 v6; // rbx\n  char *v7; // rax\n  unsigned __int64 v9; // r12\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v12; // rax\n  const char *v13; // rax\n  const char *v14; // rax\n  void *v15; // rax\n  void *v16; // rax\n  int v17; // eax\n  char v18; // al\n  unsigned __int64 v19; // r12\n  __int64 v20; // rbx\n  char *v21; // rax\n  size_t v22; // rax\n  __int64 v23; // r12\n  unsigned int v24; // ebx\n  char *v25; // rax\n  char *v28; // [rsp+10h] [rbp-60h]\n  char v29; // [rsp+2Bh] [rbp-45h]\n  unsigned int v30; // [rsp+2Ch] [rbp-44h]\n  int v31; // [rsp+30h] [rbp-40h]\n  unsigned int v32; // [rsp+34h] [rbp-3Ch]\n  unsigned __int64 v33; // [rsp+38h] [rbp-38h] BYREF\n  char *v34; // [rsp+40h] [rbp-30h] BYREF\n  void *v35; // [rsp+48h] [rbp-28h]\n  struct lconv *v36; // [rsp+50h] [rbp-20h]\n  size_t v37; // [rsp+58h] [rbp-18h]\n\n  if ( !a4 )\n    __assert_fail(\"tspec != ((void *)0)\", \"../../src/src/od.c\", 0x254u, \"decode_one_format\");\n  v4 = *a2;\n  if ( v4 == 102 )\n  {\n    v31 = 4;\n    v28 = a2 + 1;\n    v17 = a2[1];\n    switch ( v17 )\n    {\n      case 'F':\n        v28 = a2 + 2;\n        v33 = 4LL;\n        break;\n      case 'L':\n        v28 = a2 + 2;\n        v33 = 16LL;\n        break;\n      case 'D':\n        v28 = a2 + 2;\n        v33 = 8LL;\n        break;\n      default:\n        v18 = sub_40277C(v28, &v34, &v33);\n        if ( v18 != 1 )\n          goto LABEL_24;\n        if ( v34 == v28 )\n        {\n          v33 = 8LL;\n        }\n        else\n        {\n          if ( v33 > 0x10 || !dword_6123C0[v33] )\n          {\n            v19 = v33;\n            v20 = sub_405AF5(a1);\n            v21 = gettext(\"invalid type string %s;\\nthis system doesn't provide a %lu-byte floating point type\");\n            error(0, 0, v21, v20, v19);\n            return 0LL;\n          }\n          v28 = v34;\n        }\n        break;\n    }\n    v30 = dword_6123C0[v33];\n    v36 = localeconv();\n    if ( *v36->decimal_point )\n      v22 = strlen(v36->decimal_point);\n    else\n      v22 = 1LL;\n    v37 = v22;\n    switch ( v30 )\n    {\n      case 7u:\n        v35 = sub_40221B;\n        v32 = v37 + 23;\n        break;\n      case 8u:\n        v35 = sub_402329;\n        v32 = v37 + 28;\n        break;\n      case 6u:\n        v35 = sub_402129;\n        v32 = v37 + 14;\n        break;\n      default:\n        abort();\n    }\n    goto LABEL_111;\n  }\n  if ( v4 > 102 )\n  {\n    if ( v4 != 117 && v4 != 120 && v4 != 111 )\n      goto LABEL_110;\n  }\n  else\n  {\n    if ( v4 == 99 )\n    {\n      v28 = a2 + 1;\n      v31 = 6;\n      v30 = 1;\n      v35 = sub_4025CC;\n      v32 = 3;\n      goto LABEL_111;\n    }\n    if ( v4 != 100 )\n    {\n      if ( v4 != 97 )\n      {\nLABEL_110:\n        v23 = sub_405AF5(a1);\n        v24 = *a2;\n        v25 = gettext(\"invalid character `%c' in type string %s\");\n        error(0, 0, v25, v24, v23);\n        return 0LL;\n      }\n      v28 = a2 + 1;\n      v31 = 5;\n      v30 = 1;\n      v35 = sub_4024DE;\n      v32 = 3;\n      goto LABEL_111;\n    }\n  }\n  v29 = *a2;\n  v28 = a2 + 1;\n  v5 = a2[1];\n  if ( v5 == 73 )\n  {\n    v28 = a2 + 2;\n    v33 = 4LL;\n    goto LABEL_31;\n  }\n  if ( v5 > 73 )\n  {\n    if ( v5 == 76 )\n    {\n      v28 = a2 + 2;\n      v33 = 8LL;\n      goto LABEL_31;\n    }\n    if ( v5 == 83 )\n    {\n      v28 = a2 + 2;\n      v33 = 2LL;\n      goto LABEL_31;\n    }\n  }\n  else if ( v5 == 67 )\n  {\n    v28 = a2 + 2;\n    v33 = 1LL;\n    goto LABEL_31;\n  }\n  if ( (unsigned __int8)sub_40277C(v28, &v34, &v33) != 1 )\n  {\nLABEL_24:\n    v6 = sub_405AF5(a1);\n    v7 = gettext(\"invalid type string %s\");\n    error(0, 0, v7, v6);\n    return 0LL;\n  }\n  if ( v34 == v28 )\n  {\n    v33 = 4LL;\n  }\n  else\n  {\n    if ( v33 > 8 || !dword_612380[v33] )\n    {\n      v9 = v33;\n      v10 = sub_405AF5(a1);\n      v11 = gettext(\"invalid type string %s;\\nthis system doesn't provide a %lu-byte integral type\");\n      error(0, 0, v11, v10, v9);\n      return 0LL;\n    }\n    v28 = v34;\n  }\nLABEL_31:\n  v30 = dword_612380[v33];\n  if ( v29 == 111 )\n  {\n    v31 = 2;\n    if ( v30 == 5 )\n    {\n      v13 = \"lo\";\n    }\n    else if ( v30 == 4 )\n    {\n      v13 = \"lo\";\n    }\n    else\n    {\n      v13 = \"o\";\n    }\n    v32 = dword_40E4A0[v33];\n    sprintf((char *)(a4 + 16), \"%%*.%d%s\", v32, v13);\n    goto LABEL_62;\n  }\n  if ( v29 <= 111 )\n  {\n    if ( v29 != 100 )\n      goto LABEL_61;\n    v31 = 0;\n    v32 = dword_40E500[v33];\n    if ( v30 == 5 )\n    {\n      v12 = \"ld\";\n    }\n    else if ( v30 == 4 )\n    {\n      v12 = \"ld\";\n    }\n    else\n    {\n      v12 = \"d\";\n    }\n    goto LABEL_43;\n  }\n  if ( v29 == 117 )\n  {\n    v31 = 1;\n    v32 = dword_40E560[v33];\n    if ( v30 == 5 )\n    {\n      v12 = \"lu\";\n    }\n    else if ( v30 == 4 )\n    {\n      v12 = \"lu\";\n    }\n    else\n    {\n      v12 = \"u\";\n    }\nLABEL_43:\n    sprintf((char *)(a4 + 16), \"%%*%s\", v12);\n    goto LABEL_62;\n  }\n  if ( v29 != 120 )\nLABEL_61:\n    abort();\n  v31 = 3;\n  if ( v30 == 5 )\n  {\n    v14 = \"lx\";\n  }\n  else if ( v30 == 4 )\n  {\n    v14 = \"lx\";\n  }\n  else\n  {\n    v14 = \"x\";\n  }\n  v32 = dword_40E5C0[v33];\n  sprintf((char *)(a4 + 16), \"%%*.%d%s\", v32, v14);\nLABEL_62:\n  if ( strlen((const char *)(a4 + 16)) > 7 )\n    __assert_fail(\"strlen (tspec->fmt_string) < FMT_BYTES_ALLOCATED\", \"../../src/src/od.c\", 0x2B6u, \"decode_one_format\");\n  if ( v30 != 3 )\n  {\n    if ( v30 > 3 )\n    {\n      if ( v30 == 4 )\n      {\n        v35 = sub_401FD7;\n        goto LABEL_111;\n      }\n      if ( v30 == 5 )\n      {\n        v35 = sub_402080;\n        goto LABEL_111;\n      }\n    }\n    else\n    {\n      if ( v30 == 1 )\n      {\n        if ( v31 )\n          v15 = sub_401D37;\n        else\n          v15 = sub_401C8F;\n        v35 = v15;\n        goto LABEL_111;\n      }\n      if ( v30 == 2 )\n      {\n        if ( v31 )\n          v16 = sub_401E88;\n        else\n          v16 = sub_401DDF;\n        v35 = v16;\n        goto LABEL_111;\n      }\n    }\n    abort();\n  }\n  v35 = sub_401F31;\nLABEL_111:\n  *(_DWORD *)(a4 + 4) = v30;\n  *(_DWORD *)a4 = v31;\n  *(_QWORD *)(a4 + 8) = v35;\n  *(_DWORD *)(a4 + 28) = v32;\n  *(_BYTE *)(a4 + 24) = *v28 == 122;\n  if ( *(_BYTE *)(a4 + 24) )\n    ++v28;\n  if ( a3 )\n    *a3 = v28;\n  return 1LL;\n}\n"], [4206335, "sub_402EFF", "__int64 sub_402EFF()\n{\n  const char *v1; // rbx\n  int *v2; // rax\n  unsigned __int8 v3; // [rsp+Fh] [rbp-11h]\n\n  v3 = 1;\n  do\n  {\n    filename = *(char **)qword_612350;\n    if ( !filename )\n      return v3;\n    qword_612350 += 8LL;\n    if ( !strcmp(filename, \"-\") )\n    {\n      filename = gettext(\"standard input\");\n      stream = (FILE *)stdin;\n      byte_612360 = 1;\n    }\n    else\n    {\n      stream = fopen(filename, \"r\");\n      if ( !stream )\n      {\n        v1 = filename;\n        v2 = __errno_location();\n        error(0, *v2, \"%s\", v1);\n        v3 = 0;\n      }\n    }\n  }\n  while ( !stream );\n  if ( byte_612310 )\n  {\n    if ( byte_6122F0 != 1 )\n      setvbuf(stream, 0LL, 2, 0LL);\n  }\n  return v3;\n}\n"], [4206632, "sub_403028", "__int64 __fastcall sub_403028(int a1)\n{\n  char *v1; // rbx\n  char *v2; // rax\n  const char *v3; // rbx\n  int *v4; // rax\n  char *v5; // rax\n  unsigned __int8 v7; // [rsp+1Fh] [rbp-11h]\n\n  v7 = 1;\n  if ( stream )\n  {\n    if ( ferror_unlocked(stream) )\n    {\n      v1 = filename;\n      v2 = gettext(\"%s: read error\");\n      error(0, a1, v2, v1);\n      if ( strcmp(*(const char **)(qword_612350 - 8), \"-\") )\n        sub_40865A(stream);\n      v7 = 0;\n    }\n    else if ( strcmp(*(const char **)(qword_612350 - 8), \"-\") && (unsigned int)sub_40865A(stream) )\n    {\n      v3 = filename;\n      v4 = __errno_location();\n      error(0, *v4, \"%s\", v3);\n      v7 = 0;\n    }\n    stream = 0LL;\n  }\n  if ( ferror_unlocked(stdout) )\n  {\n    v5 = gettext(\"write error\");\n    error(0, 0, v5);\n    v7 = 0;\n  }\n  return v7;\n}\n"], [4206949, "sub_403165", "__int64 __fastcall sub_403165(__int64 a1)\n{\n  char *v2; // [rsp+8h] [rbp-18h]\n  char *v3; // [rsp+10h] [rbp-10h] BYREF\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v2 = (char *)a1;\n  v4 = a1;\n  if ( !a1 )\n    __assert_fail(\"s != ((void *)0)\", \"../../src/src/od.c\", 0x3A2u, \"decode_format_string\");\n  while ( *v2 )\n  {\n    if ( qword_612338 <= (unsigned __int64)qword_612330 )\n      qword_612328 = sub_407B68(qword_612328, &qword_612338, 40LL);\n    if ( (unsigned __int8)sub_402826(v4, v2, &v3, 40 * qword_612330 + qword_612328) != 1 )\n      return 0LL;\n    if ( v2 == v3 )\n      __assert_fail(\"s != next\", \"../../src/src/od.c\", 0x3AEu, \"decode_format_string\");\n    v2 = v3;\n    ++qword_612330;\n  }\n  return 1LL;\n}\n"], [4207205, "sub_403265", "__int64 __fastcall sub_403265(unsigned __int64 a1)\n{\n  int v2; // eax\n  const char *v3; // rbx\n  int *v4; // rax\n  bool v5; // bl\n  char *v6; // rax\n  unsigned __int64 v7; // [rsp+8h] [rbp-20D8h]\n  bool v8; // [rsp+1Bh] [rbp-20C5h]\n  int v9; // [rsp+1Ch] [rbp-20C4h]\n  size_t n; // [rsp+20h] [rbp-20C0h]\n  size_t v11; // [rsp+28h] [rbp-20B8h]\n  struct stat stat_buf; // [rsp+30h] [rbp-20B0h] BYREF\n  char ptr[8200]; // [rsp+C0h] [rbp-2020h] BYREF\n  unsigned __int64 v14; // [rsp+20C8h] [rbp-18h]\n\n  v7 = a1;\n  v14 = __readfsqword(0x28u);\n  v8 = 1;\n  v9 = 0;\n  if ( !a1 )\n    return 1LL;\n  while ( stream )\n  {\n    v2 = fileno(stream);\n    if ( (unsigned int)sub_40E300(v2, &stat_buf) )\n    {\n      v3 = filename;\n      v4 = __errno_location();\n      error(0, *v4, \"%s\", v3);\n      v8 = 0;\n    }\n    else\n    {\n      if ( (stat_buf.st_mode & 0xF000) == 0x8000 && stat_buf.st_size > 0 )\n      {\n        if ( stat_buf.st_size >= v7 )\n        {\n          if ( (unsigned int)sub_40878D(stream, v7, 1LL) )\n          {\n            v9 = *__errno_location();\n            v8 = 0;\n          }\n          v7 = 0LL;\n        }\n        else\n        {\n          v7 -= stat_buf.st_size;\n        }\n      }\n      else\n      {\n        n = 0x2000LL;\n        while ( v7 )\n        {\n          if ( v7 < n )\n            n = v7;\n          v11 = fread_unlocked(ptr, 1uLL, n, stream);\n          v7 -= v11;\n          if ( v11 != n )\n          {\n            v9 = *__errno_location();\n            v8 = 0;\n            v7 = 0LL;\n            break;\n          }\n        }\n      }\n      if ( !v7 )\n        break;\n    }\n    v5 = (v8 & (unsigned __int8)sub_403028(v9)) != 0;\n    v8 = (v5 & (unsigned __int8)sub_402EFF()) != 0;\n  }\n  if ( v7 )\n  {\n    v6 = gettext(\"cannot skip past end of combined input\");\n    error(1, 0, v6);\n  }\n  return v8;\n}\n"], [4207838, "sub_4034DE", "__int64 __fastcall sub_4034DE(__int64 a1, unsigned int a2)\n{\n  return a2;\n}\n"], [4207853, "sub_4034ED", "unsigned __int64 __fastcall sub_4034ED(unsigned __int64 a1, char a2)\n{\n  char *s; // [rsp+10h] [rbp-40h]\n  char *v5; // [rsp+18h] [rbp-38h]\n  _BYTE v6[17]; // [rsp+37h] [rbp-19h] BYREF\n  unsigned __int64 v7; // [rsp+48h] [rbp-8h]\n\n  v7 = __readfsqword(0x28u);\n  v6[1] = 0;\n  s = v6;\n  v6[0] = a2;\n  v5 = &v6[-dword_6122E4];\n  switch ( dword_6122E0 )\n  {\n    case 10:\n      do\n      {\n        *--s = a1 % 0xA + 48;\n        a1 /= 0xAuLL;\n      }\n      while ( a1 );\n      break;\n    case 16:\n      do\n      {\n        *--s = byte_40F7EF[a1 & 0xF];\n        a1 >>= 4;\n      }\n      while ( a1 );\n      break;\n    case 8:\n      do\n      {\n        *--s = (a1 & 7) + 48;\n        a1 >>= 3;\n      }\n      while ( a1 );\n      break;\n  }\n  while ( v5 < s )\n    *--s = 48;\n  fputs_unlocked(s, stdout);\n  return __readfsqword(0x28u) ^ v7;\n}\n"], [4208223, "sub_40365F", "int __fastcall sub_40365F(unsigned __int64 a1, char a2)\n{\n  int result; // eax\n\n  putchar_unlocked(40);\n  result = sub_4034ED(a1, 41);\n  if ( a2 )\n    result = putchar_unlocked(a2);\n  return result;\n}\n"], [4208286, "sub_40369E", "int __fastcall sub_40369E(unsigned __int64 a1, char a2)\n{\n  sub_4034ED(a1, 32);\n  return sub_40365F(qword_6122F8 + a1, a2);\n}\n"], [4208350, "sub_4036DE", "int __fastcall sub_4036DE(__int64 a1, __int64 a2, const void *a3, unsigned __int8 *a4)\n{\n  int result; // eax\n  int v6; // [rsp+24h] [rbp-2Ch]\n  int v7; // [rsp+28h] [rbp-28h]\n  int v8; // [rsp+2Ch] [rbp-24h]\n  unsigned __int64 i; // [rsp+38h] [rbp-18h]\n\n  if ( byte_612220 && byte_612221 != 1 && a2 == n && !memcmp(a3, a4, n) )\n  {\n    result = (unsigned __int8)byte_612404;\n    if ( !byte_612404 )\n    {\n      result = puts(\"*\");\n      byte_612404 = 1;\n    }\n  }\n  else\n  {\n    byte_612404 = 0;\n    for ( i = 0LL; ; ++i )\n    {\n      result = qword_612330;\n      if ( i >= qword_612330 )\n        break;\n      v6 = dword_40E620[*(unsigned int *)(qword_612328 + 40 * i + 4)];\n      v7 = n / v6;\n      v8 = (n - a2) / v6;\n      if ( i )\n        printf(\"%*s\", dword_6122E4, &locale);\n      else\n        qword_612300(a1, 0LL);\n      (*(void (__fastcall **)(_QWORD, _QWORD, unsigned __int8 *, unsigned __int64, _QWORD, _QWORD))(qword_612328\n                                                                                                  + 40 * i\n                                                                                                  + 8))(\n        v7,\n        v8,\n        a4,\n        qword_612328 + 40 * i + 16,\n        *(unsigned int *)(qword_612328 + 40 * i + 28),\n        *(unsigned int *)(qword_612328 + 40 * i + 32));\n      if ( *(_BYTE *)(qword_612328 + 40 * i + 24) )\n      {\n        printf(\n          \"%*s\",\n          *(_DWORD *)(qword_612328 + 40 * i + 28) * v8 + v8 * *(_DWORD *)(qword_612328 + 40 * i + 32) / v7,\n          &locale);\n        sub_402442(a2, a4);\n      }\n      putchar_unlocked(10);\n    }\n  }\n  byte_612221 = 0;\n  return result;\n}\n"], [4209025, "sub_403981", "_BOOL8 __fastcall sub_403981(int *a1)\n{\n  int *v1; // rax\n  bool v2; // bl\n  bool v4; // [rsp+1Fh] [rbp-11h]\n\n  v4 = 1;\n  *a1 = -1;\n  while ( stream )\n  {\n    *a1 = fgetc(stream);\n    if ( *a1 != -1 )\n      break;\n    v1 = __errno_location();\n    v2 = (v4 & (unsigned __int8)sub_403028(*v1)) != 0;\n    v4 = (v2 & (unsigned __int8)sub_402EFF()) != 0;\n  }\n  return v4;\n}\n"], [4209164, "sub_403A0C", "_BOOL8 __fastcall sub_403A0C(size_t a1, __int64 a2, _QWORD *a3)\n{\n  int *v3; // rax\n  bool v4; // bl\n  bool v7; // [rsp+2Fh] [rbp-21h]\n  size_t n; // [rsp+30h] [rbp-20h]\n  size_t v9; // [rsp+38h] [rbp-18h]\n\n  v7 = 1;\n  if ( !a1 || a1 > ::n )\n    __assert_fail(\"0 < n && n <= bytes_per_block\", \"../../src/src/od.c\", 0x4CDu, \"read_block\");\n  *a3 = 0LL;\n  while ( stream )\n  {\n    n = a1 - *a3;\n    v9 = fread_unlocked((void *)(*a3 + a2), 1uLL, n, stream);\n    *a3 += v9;\n    if ( v9 == n )\n      break;\n    v3 = __errno_location();\n    v4 = (v7 & (unsigned __int8)sub_403028(*v3)) != 0;\n    v7 = (v4 & (unsigned __int8)sub_402EFF()) != 0;\n  }\n  return v7;\n}\n"], [4209447, "sub_403B27", "__int64 sub_403B27()\n{\n  int v1; // [rsp+4h] [rbp-Ch]\n  unsigned __int64 i; // [rsp+8h] [rbp-8h]\n\n  v1 = 1;\n  for ( i = 0LL; i < qword_612330; ++i )\n    v1 = sub_401937(v1, dword_40E620[*(unsigned int *)(qword_612328 + 40 * i + 4)]);\n  return (unsigned int)v1;\n}\n"], [4209557, "sub_403B95", "bool __fastcall sub_403B95(char *a1, __int64 a2)\n{\n  char *s; // [rsp+8h] [rbp-18h]\n  unsigned int v4; // [rsp+1Ch] [rbp-4h]\n\n  s = a1;\n  if ( !*a1 )\n    return 0;\n  if ( *a1 == 43 )\n    s = a1 + 1;\n  if ( strchr(s, 46) )\n  {\n    v4 = 10;\n  }\n  else if ( *s == 48 && (s[1] == 120 || s[1] == 88) )\n  {\n    v4 = 16;\n  }\n  else\n  {\n    v4 = 8;\n  }\n  return (unsigned int)sub_4081EE(s, 0LL, v4, a2, \"Bb\") == 0;\n}\n"], [4209735, "sub_403C47", "__int64 sub_403C47()\n{\n  size_t v0; // rax\n  bool v2; // [rsp+Ah] [rbp-46h]\n  unsigned __int8 v3; // [rsp+Bh] [rbp-45h]\n  int v4; // [rsp+Ch] [rbp-44h]\n  unsigned __int64 v5; // [rsp+10h] [rbp-40h] BYREF\n  unsigned __int64 v6; // [rsp+18h] [rbp-38h]\n  size_t v7; // [rsp+20h] [rbp-30h]\n  unsigned __int64 v8; // [rsp+28h] [rbp-28h]\n  void *ptr[4]; // [rsp+30h] [rbp-20h]\n\n  v2 = 0;\n  v3 = 1;\n  ptr[0] = (void *)sub_407ADE(2LL, n);\n  ptr[1] = (char *)ptr[0] + n;\n  v6 = qword_612308;\n  if ( byte_612310 )\n  {\n    while ( v6 < qword_612320 )\n    {\n      v0 = n;\n      if ( qword_612320 - v6 <= n )\n        v0 = qword_612320 - v6;\n      v7 = v0;\n      v3 &= sub_403A0C(v0, (__int64)ptr[v2], &v5);\n      if ( v5 < n )\n        goto LABEL_15;\n      if ( v5 != n )\n        __assert_fail(\"n_bytes_read == bytes_per_block\", \"../../src/src/od.c\", 0x53Fu, \"dump\");\n      sub_4036DE(v6, v5, ptr[!v2], (unsigned __int8 *)ptr[v2]);\n      v6 += v5;\n      v2 = !v2;\n    }\n    v5 = 0LL;\n  }\n  else\n  {\n    while ( 1 )\n    {\n      v3 &= sub_403A0C(n, (__int64)ptr[v2], &v5);\n      if ( v5 < n )\n        break;\n      if ( v5 != n )\n        __assert_fail(\"n_bytes_read == bytes_per_block\", \"../../src/src/od.c\", 0x54Du, \"dump\");\n      sub_4036DE(v6, v5, ptr[!v2], (unsigned __int8 *)ptr[v2]);\n      v6 += v5;\n      v2 = !v2;\n    }\n  }\nLABEL_15:\n  if ( v5 )\n  {\n    v4 = sub_403B27();\n    v8 = v4 * ((v4 + v5 - 1) / v4);\n    memset((char *)ptr[v2] + v5, 0, v8 - v5);\n    sub_4036DE(v6, v5, ptr[!v2], (unsigned __int8 *)ptr[v2]);\n    v6 += v5;\n  }\n  qword_612300(v6, 10LL);\n  if ( byte_612310 && v6 >= qword_612320 )\n    v3 = (unsigned __int8)(v3 & sub_403028(0)) != 0;\n  free(ptr[0]);\n  return v3;\n}\n"], [4210511, "sub_403F4F", "__int64 sub_403F4F()\n{\n  __int64 v0; // rax\n  __int64 v2; // rax\n  unsigned __int8 v3; // [rsp+Bh] [rbp-35h]\n  int c; // [rsp+Ch] [rbp-34h] BYREF\n  __int64 v5; // [rsp+10h] [rbp-30h] BYREF\n  void *ptr; // [rsp+18h] [rbp-28h]\n  unsigned __int64 v7; // [rsp+20h] [rbp-20h]\n  unsigned __int64 i; // [rsp+28h] [rbp-18h]\n\n  v0 = qword_6122E8;\n  if ( (unsigned __int64)qword_6122E8 < 0x64 )\n    v0 = 100LL;\n  v5 = v0;\n  ptr = (void *)sub_407C27(v0);\n  v7 = qword_612308;\n  v3 = 1;\nLABEL_4:\n  if ( !byte_612310 || qword_612320 >= (unsigned __int64)qword_6122E8 && qword_612320 - qword_6122E8 > v7 )\n  {\n    for ( i = 0LL; i < qword_6122E8; ++i )\n    {\n      v3 &= sub_403981(&c);\n      ++v7;\n      if ( c < 0 )\n      {\nLABEL_9:\n        free(ptr);\n        return v3;\n      }\n      if ( ((*__ctype_b_loc())[c] & 0x4000) == 0 )\n        goto LABEL_4;\n      *((_BYTE *)ptr + i) = c;\n    }\n    while ( byte_612310 != 1 || v7 < qword_612320 )\n    {\n      if ( i == v5 )\n        ptr = (void *)sub_407CBD(ptr, &v5);\n      v3 &= sub_403981(&c);\n      ++v7;\n      if ( c < 0 )\n        goto LABEL_9;\n      if ( !c )\n        break;\n      if ( ((*__ctype_b_loc())[c] & 0x4000) == 0 )\n        goto LABEL_4;\n      v2 = i++;\n      *((_BYTE *)ptr + v2) = c;\n    }\n    *((_BYTE *)ptr + i) = 0;\n    qword_612300(v7 - i - 1, 32LL);\n    for ( i = 0LL; ; ++i )\n    {\n      c = *((char *)ptr + i);\n      if ( !c )\n      {\n        putchar_unlocked(10);\n        goto LABEL_4;\n      }\n      if ( c == 10 )\n      {\n        fwrite_unlocked(\"\\\\n\", 1uLL, 2uLL, stdout);\n        continue;\n      }\n      if ( c > 10 )\n      {\n        if ( c == 12 )\n        {\n          fwrite_unlocked(\"\\\\f\", 1uLL, 2uLL, stdout);\n          continue;\n        }\n        if ( c < 12 )\n        {\n          fwrite_unlocked(\"\\\\v\", 1uLL, 2uLL, stdout);\n          continue;\n        }\n        if ( c == 13 )\n        {\n          fwrite_unlocked(\"\\\\r\", 1uLL, 2uLL, stdout);\n          continue;\n        }\n      }\n      else\n      {\n        if ( c == 8 )\n        {\n          fwrite_unlocked(\"\\\\b\", 1uLL, 2uLL, stdout);\n          continue;\n        }\n        if ( c > 8 )\n        {\n          fwrite_unlocked(\"\\\\t\", 1uLL, 2uLL, stdout);\n          continue;\n        }\n        if ( c == 7 )\n        {\n          fwrite_unlocked(\"\\\\a\", 1uLL, 2uLL, stdout);\n          continue;\n        }\n      }\n      putc_unlocked(c, stdout);\n    }\n  }\n  free(ptr);\n  return (unsigned __int8)(v3 & sub_403028(0)) != 0;\n}\n"], [4211482, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  int v3; // eax\n  unsigned int v4; // ebx\n  char *v5; // rax\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  char *v10; // rax\n  __int64 v11; // rax\n  char *v12; // rax\n  char v13; // al\n  char *v14; // rbx\n  int *v15; // rax\n  char **argv; // [rsp+0h] [rbp-80h]\n  char v17; // [rsp+1Dh] [rbp-63h]\n  char v18; // [rsp+1Eh] [rbp-62h]\n  bool v19; // [rsp+1Fh] [rbp-61h]\n  char v20; // [rsp+1Fh] [rbp-61h]\n  int v21; // [rsp+20h] [rbp-60h]\n  int v22; // [rsp+24h] [rbp-5Ch]\n  int v23; // [rsp+28h] [rbp-58h]\n  int v24; // [rsp+30h] [rbp-50h]\n  unsigned int v25; // [rsp+3Ch] [rbp-44h]\n  unsigned int v26; // [rsp+3Ch] [rbp-44h]\n  unsigned int v27; // [rsp+3Ch] [rbp-44h]\n  unsigned int v28; // [rsp+3Ch] [rbp-44h]\n  int longind[2]; // [rsp+40h] [rbp-40h] BYREF\n  size_t v30; // [rsp+48h] [rbp-38h] BYREF\n  unsigned __int64 i; // [rsp+50h] [rbp-30h]\n  size_t v32; // [rsp+58h] [rbp-28h]\n  unsigned __int64 v33; // [rsp+60h] [rbp-20h]\n  size_t v34; // [rsp+68h] [rbp-18h]\n\n  argv = a2;\n  v17 = 0;\n  v18 = 0;\n  v19 = 1;\n  v33 = 0LL;\n  sub_4059EA(*a2, a2, a3);\n  setlocale(6, &locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40E2E0(sub_4052AF);\n  for ( i = 0LL; i <= 8; ++i )\n    dword_612380[i] = 0;\n  dword_612384 = 1;\n  dword_612388 = 2;\n  dword_612390 = 3;\n  dword_6123A0 = 5;\n  for ( i = 0LL; i <= 0x10; ++i )\n    dword_6123C0[i] = 0;\n  dword_6123D0 = 6;\n  dword_612400 = 8;\n  dword_6123E0 = 7;\n  qword_612330 = 0LL;\n  qword_612338 = 0LL;\n  qword_612328 = 0LL;\n  qword_612300 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_4034ED;\n  dword_6122E0 = 8;\n  dword_6122E4 = 7;\n  byte_6122F0 = 0;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        longind[0] = -1;\n        v22 = getopt_long(a1, a2, \"A:aBbcDdeFfHhIij:LlN:OoS:st:vw::Xx\", &longopts, longind);\n        if ( v22 == -1 )\n        {\n          if ( v19 )\n          {\n            if ( byte_6122F0 && qword_612330 )\n            {\n              v6 = gettext(\"no type may be specified when dumping strings\");\n              error(1, 0, v6);\n            }\n            v21 = a1 - optind;\n            if ( v17 != 1 || byte_6122F1 )\n            {\n              if ( v21 == 2 )\n              {\n                if ( (byte_6122F1 || *a2[optind + 1] == 43 || (unsigned int)(*a2[optind + 1] - 48) <= 9)\n                  && sub_403B95(a2[optind + 1], (__int64)&v30) )\n                {\n                  if ( byte_6122F1 && sub_403B95(a2[optind], (__int64)longind) )\n                  {\n                    qword_612308 = *(_QWORD *)longind;\n                    byte_6122F2 = 1;\n                    v34 = v30;\n                    argv = a2 + 2;\n                    v21 = 0;\n                  }\n                  else\n                  {\n                    qword_612308 = v30;\n                    v21 = 1;\n                    a2[optind + 1] = a2[optind];\n                    argv = a2 + 1;\n                  }\n                }\n              }\n              else if ( v21 == 3 )\n              {\n                if ( byte_6122F1\n                  && sub_403B95(a2[optind + 1], (__int64)longind)\n                  && sub_403B95(a2[optind + 2], (__int64)&v30) )\n                {\n                  qword_612308 = *(_QWORD *)longind;\n                  byte_6122F2 = 1;\n                  v34 = v30;\n                  a2[optind + 2] = a2[optind];\n                  argv = a2 + 2;\n                  v21 -= 2;\n                }\n              }\n              else if ( v21 == 1 && (byte_6122F1 || *a2[optind] == 43) && sub_403B95(a2[optind], (__int64)longind) )\n              {\n                qword_612308 = *(_QWORD *)longind;\n                --v21;\n                argv = a2 + 1;\n              }\n              if ( byte_6122F1 && v21 > 1 )\n              {\n                v7 = sub_405AF5(argv[optind + 1]);\n                v8 = gettext(\"extra operand %s\");\n                error(0, 0, v8, v7);\n                v9 = gettext(\"compatibility mode supports at most one file\");\n                error(0, 0, \"%s\", v9);\n                sub_401A7A(1);\n              }\n            }\n            if ( byte_6122F2 )\n            {\n              if ( (char *)qword_612300 == (char *)sub_4034DE )\n              {\n                dword_6122E0 = 8;\n                dword_6122E4 = 7;\n                qword_612300 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_40365F;\n              }\n              else\n              {\n                qword_612300 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_40369E;\n              }\n            }\n            if ( byte_612310 )\n            {\n              qword_612320 = qword_612308 + qword_612318;\n              if ( qword_612308 + qword_612318 < (unsigned __int64)qword_612308 )\n              {\n                v10 = gettext(\"skip-bytes + read-bytes is too large\");\n                error(1, 0, v10);\n              }\n            }\n            if ( !qword_612330 )\n              sub_403165((__int64)\"oS\");\n            if ( v21 <= 0 )\n              qword_612350 = (__int64)&off_40E6F0;\n            else\n              qword_612350 = (__int64)&argv[optind];\n            v20 = sub_402EFF();\n            if ( stream )\n            {\n              v20 = (unsigned __int8)(v20 & sub_403265(qword_612308)) != 0;\n              if ( stream )\n              {\n                if ( byte_6122F2 )\n                  v11 = v34 - qword_612308;\n                else\n                  v11 = 0LL;\n                qword_6122F8 = v11;\n                v23 = sub_403B27();\n                if ( v18 )\n                {\n                  if ( !v32 || v32 % v23 )\n                  {\n                    v12 = gettext(\"warning: invalid width %lu; using %d instead\");\n                    error(0, 0, v12, v32, (unsigned int)v23);\n                    n = v23;\n                  }\n                  else\n                  {\n                    n = v32;\n                  }\n                }\n                else if ( v23 > 15 )\n                {\n                  n = v23;\n                }\n                else\n                {\n                  n = v23 * (16 / v23);\n                }\n                for ( i = 0LL; i < qword_612330; ++i )\n                {\n                  v24 = n\n                      / dword_40E620[*(unsigned int *)(qword_612328 + 40 * i + 4)]\n                      * (*(_DWORD *)(qword_612328 + 40 * i + 28) + 1);\n                  if ( v24 > v33 )\n                    v33 = v24;\n                }\n                for ( i = 0LL; i < qword_612330; ++i )\n                  *(_DWORD *)(qword_612328 + 40 * i + 32) = v33\n                                                          - n\n                                                          / dword_40E620[*(unsigned int *)(qword_612328 + 40 * i + 4)]\n                                                          * *(_DWORD *)(qword_612328 + 40 * i + 28);\n                if ( byte_6122F0 )\n                  v13 = sub_403F4F();\n                else\n                  v13 = sub_403C47();\n                v20 = (unsigned __int8)(v20 & v13) != 0;\n              }\n            }\n            if ( byte_612360 )\n            {\n              if ( (unsigned int)sub_40865A(stdin) == -1 )\n              {\n                v14 = gettext(\"standard input\");\n                v15 = __errno_location();\n                error(1, *v15, v14);\n              }\n            }\n            exit(v20 == 0);\n          }\n          exit(1);\n        }\n        if ( v22 != 98 )\n          break;\n        v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"o1\")) != 0;\n      }\n      if ( v22 > 98 )\n        break;\n      if ( v22 == 72 )\n        goto LABEL_88;\n      if ( v22 > 72 )\n      {\n        if ( v22 == 79 )\n        {\n          v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"o4\")) != 0;\n        }\n        else if ( v22 > 79 )\n        {\n          switch ( v22 )\n          {\n            case 'X':\nLABEL_88:\n              v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"x4\")) != 0;\n              break;\n            case 'a':\n              v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"a\")) != 0;\n              break;\n            case 'S':\n              v17 = 1;\n              if ( optarg )\n              {\n                v27 = sub_4081EE(optarg, 0LL, 0LL, &v30, \"bEGKkMmPTYZ0\");\n                if ( v27 )\n                  sub_408108(v27, (unsigned int)longind[0], (unsigned int)(char)v22, &longopts, optarg);\n                qword_6122E8 = v30;\n              }\n              else\n              {\n                qword_6122E8 = 3LL;\n              }\n              byte_6122F0 = 1;\n              break;\n            default:\n              goto LABEL_102;\n          }\n        }\n        else\n        {\n          switch ( v22 )\n          {\n            case 'L':\n              goto LABEL_90;\n            case 'N':\n              v17 = 1;\n              byte_612310 = 1;\n              v26 = sub_4081EE(optarg, 0LL, 0LL, &qword_612318, \"bEGKkMmPTYZ0\");\n              if ( v26 )\n                sub_408108(v26, (unsigned int)longind[0], (unsigned int)(char)v22, &longopts, optarg);\n              break;\n            case 'I':\nLABEL_90:\n              v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"dL\")) != 0;\n              break;\n            default:\n              goto LABEL_102;\n          }\n        }\n      }\n      else if ( v22 == 65 )\n      {\n        v17 = 1;\n        v3 = *(char *)optarg;\n        if ( v3 == 110 )\n        {\n          qword_612300 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_4034DE;\n          dword_6122E4 = 0;\n        }\n        else if ( v3 > 110 )\n        {\n          if ( v3 == 111 )\n          {\n            qword_612300 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_4034ED;\n            dword_6122E0 = 8;\n            dword_6122E4 = 7;\n          }\n          else if ( v3 == 120 )\n          {\n            qword_612300 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_4034ED;\n            dword_6122E0 = 16;\n            dword_6122E4 = 6;\n          }\n          else\n          {\nLABEL_66:\n            v4 = *(char *)optarg;\n            v5 = gettext(\"invalid output address radix `%c'; it must be one character from [doxn]\");\n            error(1, 0, v5, v4);\n          }\n        }\n        else\n        {\n          if ( v3 != 100 )\n            goto LABEL_66;\n          qword_612300 = (__int64 (__fastcall *)(_QWORD, _QWORD))sub_4034ED;\n          dword_6122E0 = 10;\n          dword_6122E4 = 7;\n        }\n      }\n      else\n      {\n        if ( v22 <= 65 )\n        {\n          if ( v22 == -131 )\n          {\n            sub_4079BF(\n              (_DWORD)stdout,\n              (unsigned int)\"od\",\n              (unsigned int)\"GNU coreutils\",\n              (_DWORD)off_612228,\n              (unsigned int)\"Jim Meyering\",\n              0,\n              (char)a2);\n            exit(0);\n          }\n          if ( v22 == -130 )\n            sub_401A7A(0);\nLABEL_102:\n          sub_401A7A(1);\n        }\n        switch ( v22 )\n        {\n          case 'D':\n            v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"u4\")) != 0;\n            break;\n          case 'F':\nLABEL_86:\n            v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"fD\")) != 0;\n            break;\n          case 'B':\n            goto LABEL_92;\n          default:\n            goto LABEL_102;\n        }\n      }\n    }\n    if ( v22 == 108 )\n      goto LABEL_90;\n    if ( v22 > 108 )\n    {\n      if ( v22 == 118 )\n      {\n        v17 = 1;\n        byte_612220 = 0;\n      }\n      else if ( v22 > 118 )\n      {\n        if ( v22 == 120 )\n          goto LABEL_94;\n        if ( v22 < 120 )\n        {\n          v17 = 1;\n          v18 = 1;\n          if ( optarg )\n          {\n            v28 = sub_4081EE(optarg, 0LL, 10LL, &v30, &locale);\n            if ( v28 )\n              sub_408108(v28, (unsigned int)longind[0], (unsigned int)(char)v22, &longopts, optarg);\n            v32 = v30;\n          }\n          else\n          {\n            v32 = 32LL;\n          }\n        }\n        else\n        {\n          if ( v22 != 128 )\n            goto LABEL_102;\n          byte_6122F1 = 1;\n        }\n      }\n      else\n      {\n        switch ( v22 )\n        {\n          case 's':\n            v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"d2\")) != 0;\n            break;\n          case 't':\n            v17 = 1;\n            v19 = (v19 & (unsigned __int8)sub_403165(optarg)) != 0;\n            break;\n          case 'o':\nLABEL_92:\n            v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"o2\")) != 0;\n            break;\n          default:\n            goto LABEL_102;\n        }\n      }\n    }\n    else if ( v22 == 102 )\n    {\n      v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"fF\")) != 0;\n    }\n    else if ( v22 > 102 )\n    {\n      switch ( v22 )\n      {\n        case 'i':\n          v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"dI\")) != 0;\n          break;\n        case 'j':\n          v17 = 1;\n          v25 = sub_4081EE(optarg, 0LL, 0LL, &qword_612308, \"bEGKkMmPTYZ0\");\n          if ( v25 )\n            sub_408108(v25, (unsigned int)longind[0], (unsigned int)(char)v22, &longopts, optarg);\n          break;\n        case 'h':\nLABEL_94:\n          v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"x2\")) != 0;\n          break;\n        default:\n          goto LABEL_102;\n      }\n    }\n    else if ( v22 == 100 )\n    {\n      v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"u2\")) != 0;\n    }\n    else\n    {\n      if ( v22 > 100 )\n        goto LABEL_86;\n      v19 = (v19 & (unsigned __int8)sub_403165((__int64)\"c\")) != 0;\n    }\n  }\n}\n"], [4215450, "sub_40529A", "__int64 __fastcall sub_40529A(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_612410 = a1;\n  return result;\n}\n"], [4215471, "sub_4052AF", "__int64 sub_4052AF()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_4089E5(stdout) && (byte_612410 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_612408 )\n    {\n      v0 = (const char *)sub_40710E(qword_612408);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_4089E5(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4215706, "sub_40539A", "_BYTE *__fastcall sub_40539A(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4215811, "sub_405403", "size_t __fastcall sub_405403(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4215889, "sub_405451", "__int64 __fastcall sub_405451(char *a1, size_t a2, char a3, unsigned int a4, double a5)\n{\n  double v5; // rax\n  _BYTE *v6; // rax\n  char *v7; // rax\n  char v8; // dl\n  int v9; // eax\n  int i; // [rsp+38h] [rbp-48h]\n  int v14; // [rsp+3Ch] [rbp-44h]\n  double v15; // [rsp+40h] [rbp-40h]\n  _BYTE *v16; // [rsp+48h] [rbp-38h]\n  _BYTE *v17; // [rsp+48h] [rbp-38h]\n  _BYTE *v18; // [rsp+48h] [rbp-38h]\n  char format; // [rsp+50h] [rbp-30h] BYREF\n  _BYTE v20[23]; // [rsp+51h] [rbp-2Fh] BYREF\n  unsigned __int64 v21; // [rsp+68h] [rbp-18h]\n\n  v21 = __readfsqword(0x28u);\n  if ( a5 >= 0.0 )\n    v5 = a5;\n  else\n    v5 = -a5;\n  v15 = v5;\n  format = 37;\n  v20[0] = 45;\n  v16 = &v20[(a3 & 1) != 0];\n  *v16 = 43;\n  v17 = &v16[(a3 & 2) != 0];\n  *v17 = 32;\n  v18 = &v17[(a3 & 4) != 0];\n  *v18 = 48;\n  v6 = &v18[(a3 & 8) != 0];\n  *v6++ = 42;\n  *v6++ = 46;\n  *v6 = 42;\n  v6[1] = 76;\n  v7 = v6 + 1;\n  if ( (a3 & 0x10) != 0 )\n    v8 = 71;\n  else\n    v8 = 103;\n  *v7 = v8;\n  v7[1] = 0;\n  if ( v15 >= 2.225073858507201e-308 )\n    v9 = 15;\n  else\n    v9 = 1;\n  for ( i = v9; ; ++i )\n  {\n    v14 = snprintf(a1, a2, &format, a4, (unsigned int)i, a5);\n    if ( v14 < 0 || i > 16 || v14 < a2 && strtod(a1, 0LL) == a5 )\n      break;\n  }\n  return (unsigned int)v14;\n}\n"], [4216364, "sub_40562C", "__int64 __fastcall sub_40562C(char *a1, size_t a2, char a3, unsigned int a4, float a5)\n{\n  float v5; // eax\n  _BYTE *v6; // rax\n  char *v7; // rax\n  char v8; // dl\n  int v9; // eax\n  __int64 v11; // [rsp+0h] [rbp-70h]\n  int i; // [rsp+2Ch] [rbp-44h]\n  float v14; // [rsp+30h] [rbp-40h]\n  int v15; // [rsp+34h] [rbp-3Ch]\n  _BYTE *v16; // [rsp+38h] [rbp-38h]\n  _BYTE *v17; // [rsp+38h] [rbp-38h]\n  _BYTE *v18; // [rsp+38h] [rbp-38h]\n  char format; // [rsp+40h] [rbp-30h] BYREF\n  _BYTE v20[23]; // [rsp+41h] [rbp-2Fh] BYREF\n  unsigned __int64 v21; // [rsp+58h] [rbp-18h]\n\n  *((float *)&v11 + 1) = a5;\n  v21 = __readfsqword(0x28u);\n  if ( a5 >= 0.0 )\n  {\n    v5 = a5;\n  }\n  else\n  {\n    *(float *)&v11 = -a5;\n    v5 = -a5;\n  }\n  v14 = v5;\n  format = 37;\n  v20[0] = 45;\n  v16 = &v20[(a3 & 1) != 0];\n  *v16 = 43;\n  v17 = &v16[(a3 & 2) != 0];\n  *v17 = 32;\n  v18 = &v17[(a3 & 4) != 0];\n  *v18 = 48;\n  v6 = &v18[(a3 & 8) != 0];\n  *v6++ = 42;\n  *v6++ = 46;\n  *v6 = 42;\n  v6[1] = 76;\n  v7 = v6 + 1;\n  if ( (a3 & 0x10) != 0 )\n    v8 = 71;\n  else\n    v8 = 103;\n  *v7 = v8;\n  v7[1] = 0;\n  if ( v14 >= 1.1754944e-38 )\n    v9 = 6;\n  else\n    v9 = 1;\n  for ( i = v9; ; ++i )\n  {\n    v15 = snprintf(a1, a2, &format, a4, (unsigned int)i, *((float *)&v11 + 1), v11);\n    if ( v15 < 0 || i > 8 || v15 < a2 && strtof(a1, 0LL) == *((float *)&v11 + 1) )\n      break;\n  }\n  return (unsigned int)v15;\n}\n"], [4216830, "sub_4057FE", "__int64 __fastcall sub_4057FE(char *a1, size_t a2, char a3, unsigned int a4, long double a5)\n{\n  __int64 v7; // rax\n  int v8; // edx\n  _BYTE *v9; // rax\n  char *v10; // rax\n  char v11; // dl\n  int v12; // eax\n  long double v14; // [rsp+10h] [rbp-80h]\n  int i; // [rsp+40h] [rbp-50h]\n  int v18; // [rsp+44h] [rbp-4Ch]\n  _BYTE *v19; // [rsp+48h] [rbp-48h]\n  _BYTE *v20; // [rsp+48h] [rbp-48h]\n  _BYTE *v21; // [rsp+48h] [rbp-48h]\n  long double v22; // [rsp+50h] [rbp-40h]\n  char format; // [rsp+60h] [rbp-30h] BYREF\n  _BYTE v24[23]; // [rsp+61h] [rbp-2Fh] BYREF\n  unsigned __int64 v25; // [rsp+78h] [rbp-18h]\n\n  v25 = __readfsqword(0x28u);\n  if ( a5 >= 0.0 )\n  {\n    v7 = *(_QWORD *)&a5;\n    v8 = DWORD2(a5);\n  }\n  else\n  {\n    v14 = -a5;\n    v7 = *(_QWORD *)&v14;\n    v8 = DWORD2(v14);\n  }\n  *(_QWORD *)&v22 = v7;\n  DWORD2(v22) = v8;\n  format = 37;\n  v24[0] = 45;\n  v19 = &v24[(a3 & 1) != 0];\n  *v19 = 43;\n  v20 = &v19[(a3 & 2) != 0];\n  *v20 = 32;\n  v21 = &v20[(a3 & 4) != 0];\n  *v21 = 48;\n  v9 = &v21[(a3 & 8) != 0];\n  *v9++ = 42;\n  *v9++ = 46;\n  *v9 = 42;\n  v9[1] = 76;\n  v10 = v9 + 2;\n  if ( (a3 & 0x10) != 0 )\n    v11 = 71;\n  else\n    v11 = 103;\n  *v10 = v11;\n  v10[1] = 0;\n  if ( v22 >= 3.3621031431120935063e-4932 )\n    v12 = 18;\n  else\n    v12 = 1;\n  for ( i = v12; ; ++i )\n  {\n    v18 = snprintf(a1, a2, &format, a4, (unsigned int)i);\n    if ( v18 < 0 || i > 20 || v18 < a2 && a5 == strtold(a1, 0LL) )\n      break;\n  }\n  return (unsigned int)v18;\n}\n"], [4217322, "sub_4059EA", "char *__fastcall sub_4059EA(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_612418 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4217553, "sub_405AD1", "__int64 __fastcall sub_405AD1(unsigned int a1, __int64 a2)\n{\n  return sub_406F80(a1, 6LL, a2);\n}\n"], [4217589, "sub_405AF5", "__int64 __fastcall sub_405AF5(__int64 a1)\n{\n  return sub_405AD1(0, a1);\n}\n"], [4217620, "sub_405B14", "__int64 __fastcall sub_405B14(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_612420;\n  v4 = sub_407D4B(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4217693, "sub_405B5D", "__int64 __fastcall sub_405B5D(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_612420;\n  return *(unsigned int *)v1;\n}\n"], [4217723, "sub_405B7B", "__int64 *__fastcall sub_405B7B(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_612420;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4217759, "sub_405B9F", "__int64 __fastcall sub_405B9F(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_612420;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4217895, "sub_405C27", "__int64 __fastcall sub_405C27(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_612420;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4217946, "sub_405C5A", "__int64 *__fastcall sub_405C5A(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_612420;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4218036, "sub_405CB4", "_QWORD *__fastcall sub_405CB4(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4218156, "sub_405D2C", "char *__fastcall sub_405D2C(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'\";\n  return v3;\n}\n"], [4218217, "sub_405D69", "unsigned __int64 __fastcall sub_405D69(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_405D2C((const char *)L\"`'\", a5);\n        a9 = sub_405D2C((const char *)L\"'\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_405D69(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4221364, "sub_4069B4", "unsigned __int64 __fastcall sub_4069B4(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_612420;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_405D69(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4221524, "sub_406A54", "__int64 __fastcall sub_406A54(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_406A86(a1, a2, 0LL, a3);\n}\n"], [4221574, "sub_406A86", "__int64 __fastcall sub_406A86(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_612420;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_405D69(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_407C0D(v10);\n  sub_405D69(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4221874, "sub_406BB2", "void sub_406BB2()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_612260;\n  for ( i = 1; i < dword_612240; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_612460 )\n  {\n    free(ptr[1]);\n    qword_612250 = 256LL;\n    off_612258 = &unk_612460;\n  }\n  if ( ptr != (void **)&qword_612250 )\n  {\n    free(ptr);\n    off_612260 = &qword_612250;\n  }\n  dword_612240 = 1;\n}\n"], [4222045, "sub_406C5D", "void *__fastcall sub_406C5D(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_612260;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612240 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_612260 == &qword_612250;\n    if ( off_612260 == &qword_612250 )\n      v4 = 0LL;\n    else\n      v4 = off_612260;\n    v12 = (__int64 *)sub_407C5C(v4, 16 * v14);\n    off_612260 = v12;\n    if ( v9 )\n    {\n      v5 = off_612258;\n      *v12 = qword_612250;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_612240], 0, 16 * (v14 - (unsigned int)dword_612240));\n    dword_612240 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_405D69((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_612460 )\n      free(ptr);\n    ptr = (void *)sub_407C0D(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_405D69((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4222691, "sub_406EE3", "void *__fastcall sub_406EE3(int a1, __int64 a2)\n{\n  return sub_406C5D(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_612420);\n}\n"], [4222734, "sub_406F0E", "void *__fastcall sub_406F0E(int a1, __int64 a2, size_t a3)\n{\n  return sub_406C5D(a1, a2, a3, (__int64)&qword_612420);\n}\n"], [4222778, "sub_406F3A", "void *__fastcall sub_406F3A(__int64 a1)\n{\n  return sub_406EE3(0, a1);\n}\n"], [4222809, "sub_406F59", "void *__fastcall sub_406F59(__int64 a1, size_t a2)\n{\n  return sub_406F0E(0, a1, a2);\n}\n"], [4222848, "sub_406F80", "void *__fastcall sub_406F80(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_405CB4(v5, a2);\n  return sub_406C5D(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4222913, "sub_406FC1", "void *__fastcall sub_406FC1(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_405CB4(v7, a2);\n  return sub_406C5D(a1, a3, a4, (__int64)v7);\n}\n"], [4222976, "sub_407000", "void *__fastcall sub_407000(int a1, __int64 a2)\n{\n  return sub_406F80(0, a1, a2);\n}\n"], [4223012, "sub_407024", "void *__fastcall sub_407024(int a1, __int64 a2, size_t a3)\n{\n  return sub_406FC1(0, a1, a2, a3);\n}\n"], [4223056, "sub_407050", "void *__fastcall sub_407050(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_612420;\n  v4[1] = qword_612428;\n  v4[2] = qword_612430;\n  v4[3] = qword_612438;\n  v4[4] = qword_612440;\n  v4[5] = qword_612448;\n  v4[6] = qword_612450;\n  sub_405B9F(v4, a3, 1);\n  return sub_406C5D(0, a1, a2, (__int64)v4);\n}\n"], [4223204, "sub_4070E4", "void *__fastcall sub_4070E4(__int64 a1, unsigned __int8 a2)\n{\n  return sub_407050(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4223246, "sub_40710E", "void *__fastcall sub_40710E(__int64 a1)\n{\n  return sub_4070E4(a1, 0x3Au);\n}\n"], [4223277, "sub_40712D", "void *__fastcall sub_40712D(__int64 a1, size_t a2)\n{\n  return sub_407050(a1, a2, 0x3Au);\n}\n"], [4223319, "sub_407157", "__int64 __fastcall sub_407157(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_40718D(a1, a2, a3, a4, -1LL);\n}\n"], [4223373, "sub_40718D", "void *__fastcall sub_40718D(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_612420;\n  v8[1] = qword_612428;\n  v8[2] = qword_612430;\n  v8[3] = qword_612438;\n  v8[4] = qword_612440;\n  v8[5] = qword_612448;\n  v8[6] = qword_612450;\n  sub_405C5A(v8, a2, a3);\n  return sub_406C5D(a1, a4, a5, (__int64)v8);\n}\n"], [4223524, "sub_407224", "__int64 __fastcall sub_407224(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_407157(0, a1, a2, a3);\n}\n"], [4223571, "sub_407253", "void *__fastcall sub_407253(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_40718D(0, a1, a2, a3, a4);\n}\n"], [4223629, "sub_40728D", "int __fastcall sub_40728D(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4225144, "sub_407878", "int __fastcall sub_407878(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_40728D(a1, a2, a3, a4, a5, i);\n}\n"], [4225254, "sub_4078E6", "int __fastcall sub_4078E6(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_40728D(a1, a2, a3, a4, v8, i);\n}\n"], [4225471, "sub_4079BF", "int sub_4079BF(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_4078E6(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4225653, "sub_407A75", "int sub_407A75()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4225758, "sub_407ADE", "__int64 __fastcall sub_407ADE(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_407DA9(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_407C27(a2 * a1);\n}\n"], [4225820, "sub_407B1C", "__int64 __fastcall sub_407B1C(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_407DA9(a1, a2, v4);\n  return sub_407C5C(a1, a3 * a2);\n}\n"], [4225896, "sub_407B68", "__int64 __fastcall sub_407B68(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_407DA9(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_407C5C(a1, a3 * v6);\n}\n"], [4226061, "sub_407C0D", "__int64 __fastcall sub_407C0D(__int64 a1)\n{\n  return sub_407C27(a1);\n}\n"], [4226087, "sub_407C27", "void *__fastcall sub_407C27(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_407DA9(a1, a2, v2);\n  return v4;\n}\n"], [4226140, "sub_407C5C", "void *__fastcall sub_407C5C(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_407DA9(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4226237, "sub_407CBD", "__int64 __fastcall sub_407CBD(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_407B68(a1, a2, 1uLL);\n}\n"], [4226279, "sub_407CE7", "void *__fastcall sub_407CE7(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_407C27(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4226322, "sub_407D12", "void *__fastcall sub_407D12(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_407DA9(a1, a2, v2);\n  return v4;\n}\n"], [4226379, "sub_407D4B", "void *__fastcall sub_407D4B(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_407C27(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4226428, "sub_407D7C", "void *__fastcall sub_407D7C(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_407D4B(a1, v1 + 1);\n}\n"], [4226473, "sub_407DA9", "void __noreturn sub_407DA9()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4226526, "sub_407DDE", "__int64 sub_407DDE(__int64 a1, ...)\n{\n  gcc_va_list va; // [rsp+18h] [rbp-C8h] BYREF\n\n  va_start(va, a1);\n  return (unsigned int)sub_407E8B(a1, va);\n}\n"], [4226699, "sub_407E8B", "__int64 __fastcall sub_407E8B(__int64 a1, __int64 a2)\n{\n  char *v2; // rbx\n  int *v3; // rax\n  int v5; // [rsp+1Ch] [rbp-14h]\n\n  v5 = sub_4089B9(a1, a2);\n  if ( v5 < 0 && !ferror(stdout) )\n  {\n    v2 = gettext(\"cannot perform formatted output\");\n    v3 = __errno_location();\n    error(status, *v3, v2);\n  }\n  return (unsigned int)v5;\n}\n"], [4226816, "sub_407F00", "__int64 sub_407F00(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+18h] [rbp-C8h] BYREF\n\n  va_start(va, a2);\n  return (unsigned int)sub_407FB4(a1, a2, va);\n}\n"], [4226996, "sub_407FB4", "__int64 __fastcall sub_407FB4(FILE *a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  int *v4; // rax\n  int v6; // [rsp+2Ch] [rbp-14h]\n\n  v6 = sub_408845(a1, a2, a3);\n  if ( v6 < 0 && !ferror(a1) )\n  {\n    v3 = gettext(\"cannot perform formatted output\");\n    v4 = __errno_location();\n    error(status, *v4, v3);\n  }\n  return (unsigned int)v6;\n}\n"], [4227118, "sub_40802E", "void __fastcall sub_40802E(unsigned int a1, int a2, char a3, __int64 a4, __int64 a5, int a6)\n{\n  char *v6; // rax\n  char v9[8]; // [rsp+20h] [rbp-20h] BYREF\n  const char *v10; // [rsp+28h] [rbp-18h]\n  char *msgid; // [rsp+30h] [rbp-10h]\n  char *v12; // [rsp+38h] [rbp-8h]\n\n  v10 = \"--\";\n  if ( a1 > 3 )\n  {\n    if ( a1 != 4 )\n      goto LABEL_6;\n    msgid = \"invalid %s%s argument `%s'\";\n  }\n  else if ( a1 >= 2 )\n  {\n    msgid = \"invalid suffix in %s%s argument `%s'\";\n  }\n  else\n  {\n    if ( a1 != 1 )\nLABEL_6:\n      abort();\n    msgid = \"%s%s argument `%s' too large\";\n  }\n  if ( a2 >= 0 )\n  {\n    v12 = *(char **)(32LL * a2 + a4);\n  }\n  else\n  {\n    v10 -= a2;\n    v9[0] = a3;\n    v9[1] = 0;\n    v12 = v9;\n  }\n  v6 = gettext(msgid);\n  error(a6, 0, v6, v10, v12, a5);\n}\n"], [4227336, "sub_408108", "void __fastcall __noreturn sub_408108(unsigned int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  sub_40802E(a1, a2, a3, a4, a5, status);\n  abort();\n}\n"], [4227406, "sub_40814E", "__int64 __fastcall sub_40814E(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4227501, "sub_4081AD", "__int64 __fastcall sub_4081AD(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_40814E(a1, a2) )\n    ;\n  return i;\n}\n"], [4227566, "sub_4081EE", "__int64 __fastcall sub_4081EE(const char *a1, char **a2, int a3, uintmax_t *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  uintmax_t v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoumax\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoumax(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_4081AD(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_40814E(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_4081AD(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_40814E(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_4081AD(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_4081AD(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_40814E(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_4081AD(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_4081AD(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_4081AD(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_4081AD(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4228698, "sub_40865A", "int __fastcall sub_40865A(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_408742(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4228879, "sub_40870F", "__int64 __fastcall sub_40870F(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_40878D(a1, 0LL, 1LL);\n  return result;\n}\n"], [4228930, "sub_408742", "int __fastcall sub_408742(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_40870F(a1);\n  return fflush(a1);\n}\n"], [4229005, "sub_40878D", "int __fastcall sub_40878D(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4229189, "sub_408845", "size_t __fastcall sub_408845(FILE *a1, __int64 a2, __int64 a3)\n{\n  size_t result; // rax\n  size_t v4; // rax\n  int v5; // [rsp+24h] [rbp-80Ch]\n  size_t v6; // [rsp+28h] [rbp-808h] BYREF\n  void *ptr; // [rsp+30h] [rbp-800h]\n  size_t n; // [rsp+38h] [rbp-7F8h]\n  char v9[2008]; // [rsp+40h] [rbp-7F0h] BYREF\n  unsigned __int64 v10; // [rsp+818h] [rbp-18h]\n\n  v10 = __readfsqword(0x28u);\n  v6 = 2000LL;\n  ptr = (void *)sub_408B9B(v9, &v6, a2, a3);\n  n = v6;\n  if ( ptr )\n  {\n    v4 = fwrite(ptr, 1uLL, n, a1);\n    if ( v4 >= n )\n    {\n      if ( ptr != v9 )\n        free(ptr);\n      if ( n <= 0x7FFFFFFF )\n      {\n        result = n;\n      }\n      else\n      {\n        *__errno_location() = 75;\n        sub_408A70(a1);\n        result = 0xFFFFFFFFLL;\n      }\n    }\n    else\n    {\n      if ( ptr != v9 )\n      {\n        v5 = *__errno_location();\n        free(ptr);\n        *__errno_location() = v5;\n      }\n      result = 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    sub_408A70(a1);\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"], [4229561, "sub_4089B9", "size_t __fastcall sub_4089B9(__int64 a1, __int64 a2)\n{\n  return sub_408845(stdout, a1, a2);\n}\n"], [4229605, "sub_4089E5", "__int64 __fastcall sub_4089E5(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = sub_40865A(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4229744, "sub_408A70", "_DWORD *__fastcall sub_408A70(_DWORD *a1)\n{\n  _DWORD *result; // rax\n\n  result = a1;\n  *a1 |= 0x20u;\n  return result;\n}\n"], [4229771, "sub_408A8B", "__int64 __fastcall sub_408A8B(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4229823, "sub_408ABF", "__int64 __fastcall sub_408ABF(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  __int64 v5; // rax\n\n  v4 = sub_408A8B(a1, a2);\n  v5 = sub_408A8B(v4, a3);\n  return sub_408A8B(v5, a4);\n}\n"], [4229898, "sub_408B0A", "unsigned __int64 __fastcall sub_408B0A(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = a2;\n  if ( a1 >= a2 )\n    result = a1;\n  return result;\n}\n"], [4229925, "sub_408B25", "__int64 sub_408B25()\n{\n  __int64 result; // rax\n  char *v1; // [rsp+8h] [rbp-8h]\n\n  v1 = nl_langinfo(0x10000);\n  if ( *v1 )\n    result = (unsigned __int8)*v1;\n  else\n    result = 46LL;\n  return result;\n}\n"], [4229974, "sub_408B56", "_BOOL8 __fastcall sub_408B56(int a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, __int64 a11, int a12, int a13, int a14, long double a15)\n{\n  return (unsigned int)sub_40C356(a1, a2, DWORD2(a15), a12, a13, a14, *(__int64 *)&a15, DWORD2(a15)) || a15 == a15 + a15;\n}\n"], [4230043, "sub_408B9B", "void *__fastcall sub_408B9B(void *a1, unsigned __int64 *a2, void *a3, __int64 a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)\n{\n  int v13; // esi\n  int v14; // edi\n  int v15; // ecx\n  int v16; // er8\n  int v17; // er9\n  double v18; // xmm4_8\n  double v19; // xmm5_8\n  void *v20; // rsp\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  unsigned __int64 v23; // rax\n  unsigned int v24; // eax\n  char *v25; // rax\n  char *v26; // rax\n  __int64 v27; // rcx\n  unsigned __int64 v28; // rax\n  char *v29; // rax\n  __int64 v30; // rcx\n  unsigned __int64 v31; // rax\n  int v32; // edi\n  int v33; // ecx\n  int v34; // er8\n  int v35; // er9\n  char *v36; // rax\n  int v37; // edx\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  char *v41; // rax\n  char *v42; // rax\n  char *v43; // rax\n  __int16 v44; // ax\n  __int16 v45; // fps\n  char *v47; // rax\n  char *v48; // rax\n  char *v49; // rax\n  char *v50; // rax\n  char *v51; // rax\n  char *v52; // rax\n  char *v53; // rax\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rbx\n  char *v58; // rax\n  char *v59; // rax\n  char *v60; // rbx\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rax\n  char *v64; // rax\n  char *v65; // rax\n  char *v66; // rax\n  __int64 v67; // rax\n  char *v68; // rbx\n  char *v69; // rax\n  char *v70; // rax\n  char *v71; // rax\n  char *v72; // rax\n  char *v73; // rbx\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  unsigned __int64 v81; // rax\n  _BYTE *v82; // rax\n  _BYTE *v83; // rax\n  _BYTE *v84; // rax\n  _BYTE *v85; // rax\n  _BYTE *v86; // rax\n  _BYTE *v87; // rax\n  _BYTE *v88; // rax\n  _BYTE *v89; // rax\n  _BYTE *v90; // rax\n  _BYTE *v91; // rax\n  unsigned int v92; // eax\n  unsigned int v93; // eax\n  unsigned __int64 v94; // rax\n  __int64 v95; // rax\n  unsigned __int64 v96; // rax\n  char *v97; // rax\n  int v98; // edx\n  int *v99; // rdx\n  int v100; // eax\n  unsigned __int64 v101; // rbx\n  __int64 v102; // rax\n  unsigned __int64 v103; // rax\n  __int64 v104; // rax\n  unsigned __int64 v105; // rax\n  long double v106; // [rsp+0h] [rbp-8E0h]\n  __int64 v107; // [rsp+18h] [rbp-8C8h] BYREF\n  __int64 v108; // [rsp+20h] [rbp-8C0h]\n  void *v109; // [rsp+28h] [rbp-8B8h]\n  unsigned __int64 *v110; // [rsp+30h] [rbp-8B0h]\n  void *v111; // [rsp+38h] [rbp-8A8h]\n  __int16 v112; // [rsp+4Ah] [rbp-896h]\n  int v113; // [rsp+4Ch] [rbp-894h] BYREF\n  int v114; // [rsp+50h] [rbp-890h]\n  int v115; // [rsp+54h] [rbp-88Ch]\n  int v116; // [rsp+58h] [rbp-888h]\n  int v117; // [rsp+5Ch] [rbp-884h]\n  unsigned int v118; // [rsp+60h] [rbp-880h]\n  int v119; // [rsp+64h] [rbp-87Ch]\n  int v120; // [rsp+68h] [rbp-878h]\n  int v121; // [rsp+6Ch] [rbp-874h]\n  unsigned int v122; // [rsp+70h] [rbp-870h]\n  int v123; // [rsp+74h] [rbp-86Ch]\n  int v124; // [rsp+78h] [rbp-868h]\n  unsigned int v125; // [rsp+7Ch] [rbp-864h]\n  unsigned int v126; // [rsp+80h] [rbp-860h]\n  unsigned int v127; // [rsp+84h] [rbp-85Ch]\n  unsigned int v128; // [rsp+88h] [rbp-858h]\n  unsigned int v129; // [rsp+8Ch] [rbp-854h]\n  unsigned int v130; // [rsp+90h] [rbp-850h]\n  unsigned int v131; // [rsp+94h] [rbp-84Ch]\n  unsigned int v132; // [rsp+98h] [rbp-848h]\n  int v133; // [rsp+9Ch] [rbp-844h]\n  unsigned int v134; // [rsp+A0h] [rbp-840h]\n  unsigned int v135; // [rsp+A4h] [rbp-83Ch]\n  char *format; // [rsp+A8h] [rbp-838h]\n  void *v137; // [rsp+B0h] [rbp-830h]\n  void *v138; // [rsp+B8h] [rbp-828h]\n  __int64 v139; // [rsp+C0h] [rbp-820h]\n  char *i; // [rsp+C8h] [rbp-818h]\n  void *src; // [rsp+D0h] [rbp-810h]\n  unsigned __int64 v142; // [rsp+D8h] [rbp-808h]\n  size_t n; // [rsp+E0h] [rbp-800h]\n  void *dest; // [rsp+E8h] [rbp-7F8h]\n  void *v145; // [rsp+F0h] [rbp-7F0h]\n  unsigned __int64 v146; // [rsp+F8h] [rbp-7E8h]\n  unsigned __int64 v147; // [rsp+100h] [rbp-7E0h]\n  unsigned __int64 v148; // [rsp+108h] [rbp-7D8h]\n  void *v149; // [rsp+110h] [rbp-7D0h]\n  unsigned __int64 v150; // [rsp+118h] [rbp-7C8h]\n  char *v151; // [rsp+120h] [rbp-7C0h]\n  char *v152; // [rsp+128h] [rbp-7B8h]\n  char *v153; // [rsp+130h] [rbp-7B0h]\n  __int64 v154; // [rsp+138h] [rbp-7A8h]\n  unsigned __int64 v155; // [rsp+140h] [rbp-7A0h]\n  _BYTE *v156; // [rsp+148h] [rbp-798h]\n  _BYTE *v157; // [rsp+150h] [rbp-790h]\n  void *v158; // [rsp+158h] [rbp-788h]\n  void *v159; // [rsp+160h] [rbp-780h]\n  void *v160; // [rsp+168h] [rbp-778h]\n  size_t maxlen; // [rsp+170h] [rbp-770h]\n  void *v162; // [rsp+178h] [rbp-768h]\n  void *v163; // [rsp+180h] [rbp-760h]\n  unsigned __int64 v164; // [rsp+188h] [rbp-758h]\n  size_t size; // [rsp+190h] [rbp-750h]\n  size_t v166; // [rsp+198h] [rbp-748h]\n  unsigned __int64 v167; // [rsp+1A0h] [rbp-740h]\n  size_t v168; // [rsp+1A8h] [rbp-738h]\n  size_t v169; // [rsp+1B0h] [rbp-730h]\n  void *v170; // [rsp+1B8h] [rbp-728h]\n  unsigned __int64 v171; // [rsp+1C0h] [rbp-720h]\n  size_t v172; // [rsp+1C8h] [rbp-718h]\n  size_t v173; // [rsp+1D0h] [rbp-710h]\n  _BYTE *v174; // [rsp+1D8h] [rbp-708h]\n  size_t v175; // [rsp+1E0h] [rbp-700h]\n  unsigned __int64 v176; // [rsp+1E8h] [rbp-6F8h]\n  size_t v177; // [rsp+1F0h] [rbp-6F0h]\n  size_t v178; // [rsp+1F8h] [rbp-6E8h]\n  size_t v179; // [rsp+200h] [rbp-6E0h]\n  size_t v180; // [rsp+208h] [rbp-6D8h]\n  __int64 v181; // [rsp+210h] [rbp-6D0h]\n  __int64 v182; // [rsp+218h] [rbp-6C8h]\n  __int64 v183; // [rsp+220h] [rbp-6C0h]\n  __int64 v184; // [rsp+228h] [rbp-6B8h]\n  double v185; // [rsp+230h] [rbp-6B0h]\n  __int64 v186; // [rsp+238h] [rbp-6A8h]\n  __int64 v187; // [rsp+240h] [rbp-6A0h]\n  __int64 v188; // [rsp+248h] [rbp-698h]\n  unsigned __int64 v189; // [rsp+250h] [rbp-690h]\n  size_t v190; // [rsp+258h] [rbp-688h]\n  long double v191; // [rsp+260h] [rbp-680h]\n  __int64 v192; // [rsp+270h] [rbp-670h]\n  int v193; // [rsp+278h] [rbp-668h]\n  char v194[8]; // [rsp+280h] [rbp-660h] BYREF\n  void *v195; // [rsp+288h] [rbp-658h]\n  _BYTE v196[224]; // [rsp+290h] [rbp-650h] BYREF\n  __int64 v197; // [rsp+370h] [rbp-570h] BYREF\n  void *ptr; // [rsp+378h] [rbp-568h]\n  __int64 v199; // [rsp+380h] [rbp-560h]\n  __int64 v200; // [rsp+388h] [rbp-558h]\n  _BYTE v201[624]; // [rsp+390h] [rbp-550h] BYREF\n  char v202[712]; // [rsp+600h] [rbp-2E0h] BYREF\n  unsigned __int64 v203; // [rsp+8C8h] [rbp-18h]\n\n  v111 = a1;\n  v110 = a2;\n  v109 = a3;\n  v108 = a4;\n  v203 = __readfsqword(0x28u);\n  if ( (int)sub_40CCC0(a3, &v197, v194) < 0 )\n    return 0LL;\n  if ( (int)sub_40C3AE(v108, v194) < 0 )\n  {\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 22;\n    return 0LL;\n  }\n  v13 = v199;\n  v14 = 7;\n  v164 = sub_408ABF(7uLL, v199, v200, 6LL);\n  if ( v164 > 0xF9F )\n  {\n    size = v164;\n    if ( v164 == -1LL )\n      goto LABEL_530;\n    v14 = size;\n    format = (char *)malloc(size);\n    if ( !format )\n      goto LABEL_530;\n    v137 = format;\n  }\n  else\n  {\n    v20 = alloca(16 * ((v164 + 30) / 0x10));\n    format = (char *)(16 * (((unsigned __int64)&v107 + 7) >> 4));\n    v137 = 0LL;\n  }\n  if ( v111 )\n  {\n    src = v111;\n    v142 = *v110;\n  }\n  else\n  {\n    src = 0LL;\n    v142 = 0LL;\n  }\n  n = 0LL;\n  v138 = v109;\n  v139 = 0LL;\n  for ( i = (char *)ptr; ; i += 88 )\n  {\n    if ( *(void **)i != v138 )\n    {\n      v166 = *(_QWORD *)i - (_QWORD)v138;\n      v167 = sub_408A8B(n, v166);\n      if ( v167 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v21 = -1LL;\n          else\n            v21 = 2 * v142;\n        }\n        else\n        {\n          v21 = 12LL;\n        }\n        v142 = v21;\n        if ( v167 > v21 )\n          v142 = v167;\n        v168 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        dest = src != v111 && src ? realloc(src, v168) : malloc(v168);\n        if ( !dest )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(dest, src, n);\n        src = dest;\n      }\n      v13 = (int)v138;\n      v14 = (_DWORD)src + n;\n      memcpy((char *)src + n, v138, v166);\n      n = v167;\n    }\n    if ( v197 == v139 )\n    {\n      v22 = sub_408A8B(n, 1LL);\n      if ( v22 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v104 = -1LL;\n          else\n            v104 = 2 * v142;\n        }\n        else\n        {\n          v104 = 12LL;\n        }\n        v142 = v104;\n        v105 = sub_408A8B(n, 1LL);\n        if ( v105 > v142 )\n          v142 = sub_408A8B(n, 1LL);\n        v169 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v163 = src != v111 && src ? realloc(src, v169) : malloc(v169);\n        if ( !v163 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v163, src, n);\n        src = v163;\n      }\n      *((_BYTE *)src + n) = 0;\n      if ( src != v111 && n + 1 < v142 )\n      {\n        v170 = realloc(src, n + 1);\n        if ( v170 )\n          src = v170;\n      }\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      *v110 = n;\n      return src;\n    }\n    if ( i[72] == 37 )\n    {\n      if ( *((_QWORD *)i + 10) != -1LL )\n        abort();\n      v13 = 1;\n      v14 = n;\n      v171 = sub_408A8B(n, 1LL);\n      if ( v171 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v23 = -1LL;\n          else\n            v23 = 2 * v142;\n        }\n        else\n        {\n          v23 = 12LL;\n        }\n        v142 = v23;\n        if ( v171 > v23 )\n          v142 = v171;\n        v172 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        if ( src != v111 && src )\n        {\n          v13 = v172;\n          v14 = (int)src;\n          v145 = realloc(src, v172);\n        }\n        else\n        {\n          v14 = v172;\n          v145 = malloc(v172);\n        }\n        if ( !v145 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n        {\n          v13 = (int)src;\n          v14 = (int)v145;\n          memcpy(v145, src, n);\n        }\n        src = v145;\n      }\n      *((_BYTE *)src + n) = 37;\n      n = v171;\n      goto LABEL_487;\n    }\n    if ( *((_QWORD *)i + 10) == -1LL )\n      abort();\n    if ( i[72] == 110 )\n    {\n      v24 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n      if ( v24 == 20 )\n      {\n        **((_DWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n        goto LABEL_487;\n      }\n      if ( v24 > 0x14 )\n      {\n        if ( v24 == 21 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 22 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      else\n      {\n        if ( v24 == 18 )\n        {\n          **((_BYTE **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 19 )\n        {\n          **((_WORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      abort();\n    }\n    if ( i[72] != 102\n      && i[72] != 70\n      && i[72] != 101\n      && i[72] != 69\n      && i[72] != 103\n      && i[72] != 71\n      && i[72] != 97\n      && i[72] != 65 )\n    {\n      break;\n    }\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10)) != 12 )\n      break;\n    v25 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    *(_QWORD *)&v106 = *((_QWORD *)v25 + 2);\n    DWORD2(v106) = *((_DWORD *)v25 + 6);\n    if ( !sub_408B56(v14, v13, a5, a6, a7, a8, v18, v19, a11, a12, DWORD2(v106), v15, v16, v17, v106) )\n      break;\n    v114 = *((_DWORD *)i + 4);\n    v115 = 0;\n    v146 = 0LL;\n    if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n    {\n      if ( *((_QWORD *)i + 5) == -1LL )\n      {\n        v152 = (char *)*((_QWORD *)i + 3);\n        do\n        {\n          v26 = v152++;\n          v27 = *v26 - 48;\n          if ( v146 > 0x1999999999999999LL )\n            v28 = -1LL;\n          else\n            v28 = 10 * v146;\n          v146 = sub_408A8B(v28, v27);\n        }\n        while ( *((char **)i + 4) != v152 );\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n          abort();\n        v120 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n        if ( v120 >= 0 )\n        {\n          v146 = v120;\n        }\n        else\n        {\n          v114 |= 2u;\n          v146 = (unsigned int)-v120;\n        }\n      }\n      v115 = 1;\n    }\n    v116 = 0;\n    v147 = 0LL;\n    if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n    {\n      if ( *((_QWORD *)i + 8) == -1LL )\n      {\n        v153 = (char *)(*((_QWORD *)i + 6) + 1LL);\n        v147 = 0LL;\n        while ( *((char **)i + 7) != v153 )\n        {\n          v29 = v153++;\n          v30 = *v29 - 48;\n          if ( v147 > 0x1999999999999999LL )\n            v31 = -1LL;\n          else\n            v31 = 10 * v147;\n          v147 = sub_408A8B(v31, v30);\n        }\n        v116 = 1;\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n          abort();\n        v121 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n        if ( v121 >= 0 )\n        {\n          v147 = v121;\n          v116 = 1;\n        }\n      }\n    }\n    if ( !v116 && i[72] != 97 && i[72] != 65 )\n      v147 = 6LL;\n    v148 = 0LL;\n    if ( v147 )\n      v148 = v147;\n    v148 = sub_408A8B(v148, 12LL);\n    if ( v148 < v146 )\n      v148 = v146;\n    v32 = v148;\n    v148 = sub_408A8B(v148, 1LL);\n    if ( v148 > 0x2BC )\n    {\n      v173 = v148;\n      if ( v148 == -1LL )\n        goto LABEL_525;\n      v32 = v173;\n      v149 = malloc(v173);\n      if ( !v149 )\n        goto LABEL_525;\n    }\n    else\n    {\n      v149 = v202;\n    }\n    v150 = 0LL;\n    v151 = (char *)v149;\n    v36 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    v37 = *((_DWORD *)v36 + 6);\n    *(_QWORD *)&v191 = *((_QWORD *)v36 + 2);\n    DWORD2(v191) = v37;\n    if ( (unsigned int)sub_40C356(v32, 1, v37, v33, v34, v35, *(__int64 *)&v191, v37) )\n    {\n      if ( i[72] <= 64 || i[72] > 90 )\n      {\n        v41 = v151++;\n        *v41 = 110;\n        v42 = v151++;\n        *v42 = 97;\n        v43 = v151++;\n        *v43 = 110;\n      }\n      else\n      {\n        v38 = v151++;\n        *v38 = 78;\n        v39 = v151++;\n        *v39 = 65;\n        v40 = v151++;\n        *v40 = 78;\n      }\n    }\n    else\n    {\n      v117 = 0;\n      v112 = v134;\n      LOBYTE(v44) = v134;\n      HIBYTE(v44) = BYTE1(v134) | 3;\n      LOWORD(v134) = v44;\n      _FST7 = v191;\n      __asm { fxam }\n      if ( (v45 & 0x200) != 0 )\n      {\n        v117 = -1;\n        v191 = -v191;\n      }\n      if ( v117 >= 0 )\n      {\n        if ( (v114 & 4) != 0 )\n        {\n          v48 = v151++;\n          *v48 = 43;\n        }\n        else if ( (v114 & 8) != 0 )\n        {\n          v49 = v151++;\n          *v49 = 32;\n        }\n      }\n      else\n      {\n        v47 = v151++;\n        *v47 = 45;\n      }\n      if ( v191 > 0.0 && v191 == v191 + v191 )\n      {\n        if ( i[72] <= 64 || i[72] > 90 )\n        {\n          v53 = v151++;\n          *v53 = 105;\n          v54 = v151++;\n          *v54 = 110;\n          v55 = v151++;\n          *v55 = 102;\n        }\n        else\n        {\n          v50 = v151++;\n          *v50 = 73;\n          v51 = v151++;\n          *v51 = 78;\n          v52 = v151++;\n          *v52 = 70;\n        }\n      }\n      else\n      {\n        if ( 0.0 != v191 )\n          abort();\n        v150 = (unsigned __int64)v151;\n        switch ( i[72] )\n        {\n          case 'f':\n          case 'F':\n            v56 = v151++;\n            *v56 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v57 = v151++;\n              *v57 = sub_408B25();\n              while ( v147 )\n              {\n                v58 = v151++;\n                *v58 = 48;\n                --v147;\n              }\n            }\n            break;\n          case 'e':\n          case 'E':\n            v59 = v151++;\n            *v59 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v60 = v151++;\n              *v60 = sub_408B25();\n              while ( v147 )\n              {\n                v61 = v151++;\n                *v61 = 48;\n                --v147;\n              }\n            }\n            v62 = v151++;\n            *v62 = i[72];\n            v63 = v151++;\n            *v63 = 43;\n            v64 = v151++;\n            *v64 = 48;\n            v65 = v151++;\n            *v65 = 48;\n            break;\n          case 'g':\n          case 'G':\n            v66 = v151++;\n            *v66 = 48;\n            if ( (v114 & 0x10) != 0 )\n            {\n              if ( v147 )\n                v67 = v147 - 1;\n              else\n                v67 = 0LL;\n              v154 = v67;\n              v68 = v151++;\n              *v68 = sub_408B25();\n              while ( v154 )\n              {\n                v69 = v151++;\n                *v69 = 48;\n                --v154;\n              }\n            }\n            break;\n          case 'a':\n          case 'A':\n            v70 = v151++;\n            *v70 = 48;\n            v71 = v151++;\n            *v71 = i[72] + 23;\n            v150 = (unsigned __int64)v151;\n            v72 = v151++;\n            *v72 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v73 = v151++;\n              *v73 = sub_408B25();\n              while ( v147 )\n              {\n                v74 = v151++;\n                *v74 = 48;\n                --v147;\n              }\n            }\n            v75 = v151++;\n            *v75 = i[72] + 15;\n            v76 = v151++;\n            *v76 = 43;\n            v77 = v151++;\n            *v77 = 48;\n            break;\n          default:\n            abort();\n        }\n      }\n      LOWORD(v134) = v112;\n    }\n    if ( v115 && v151 - (_BYTE *)v149 < v146 )\n    {\n      v155 = (_BYTE *)v149 - v151 + v146;\n      v174 = (char *)v149 + v146;\n      if ( (v114 & 2) != 0 )\n      {\n        while ( v155 )\n        {\n          v78 = v151++;\n          *v78 = 32;\n          --v155;\n        }\n      }\n      else if ( (v114 & 0x20) != 0 && v150 )\n      {\n        v156 = v174;\n        while ( (unsigned __int64)v151 > v150 )\n          *--v156 = *--v151;\n        while ( v155 )\n        {\n          v79 = v151++;\n          *v79 = 48;\n          --v155;\n        }\n      }\n      else\n      {\n        v157 = v174;\n        while ( v151 > v149 )\n          *--v157 = *--v151;\n        while ( v155 )\n        {\n          v80 = v151++;\n          *v80 = 32;\n          --v155;\n        }\n      }\n      v151 = v174;\n    }\n    v175 = v151 - (_BYTE *)v149;\n    if ( v151 - (_BYTE *)v149 >= v148 )\n      abort();\n    if ( v142 - n <= v175 )\n    {\n      v176 = sub_408A8B(n, v175);\n      if ( v176 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v81 = -1LL;\n          else\n            v81 = 2 * v142;\n        }\n        else\n        {\n          v81 = 12LL;\n        }\n        v142 = v81;\n        if ( v176 > v81 )\n          v142 = v176;\n        v177 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v158 = src != v111 && src ? realloc(src, v177) : malloc(v177);\n        if ( !v158 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v158, src, n);\n        src = v158;\n      }\n    }\n    v13 = (int)v149;\n    v14 = (_DWORD)src + n;\n    memcpy((char *)src + n, v149, v175);\n    if ( v149 != v202 )\n    {\n      v14 = (int)v149;\n      free(v149);\n    }\n    n += v175;\nLABEL_487:\n    v138 = (void *)*((_QWORD *)i + 1);\n    ++v139;\n  }\n  v122 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n  v123 = *((_DWORD *)i + 4);\n  v159 = format + 1;\n  *format = 37;\n  if ( (v123 & 1) != 0 )\n  {\n    v82 = v159;\n    v159 = (char *)v159 + 1;\n    *v82 = 39;\n  }\n  if ( (v123 & 2) != 0 )\n  {\n    v83 = v159;\n    v159 = (char *)v159 + 1;\n    *v83 = 45;\n  }\n  if ( (v123 & 4) != 0 )\n  {\n    v84 = v159;\n    v159 = (char *)v159 + 1;\n    *v84 = 43;\n  }\n  if ( (v123 & 8) != 0 )\n  {\n    v85 = v159;\n    v159 = (char *)v159 + 1;\n    *v85 = 32;\n  }\n  if ( (v123 & 0x10) != 0 )\n  {\n    v86 = v159;\n    v159 = (char *)v159 + 1;\n    *v86 = 35;\n  }\n  if ( (v123 & 0x40) != 0 )\n  {\n    v87 = v159;\n    v159 = (char *)v159 + 1;\n    *v87 = 73;\n  }\n  if ( (v123 & 0x20) != 0 )\n  {\n    v88 = v159;\n    v159 = (char *)v159 + 1;\n    *v88 = 48;\n  }\n  if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n  {\n    v178 = *((_QWORD *)i + 4) - *((_QWORD *)i + 3);\n    memcpy(v159, *((const void **)i + 3), v178);\n    v159 = (char *)v159 + v178;\n  }\n  if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n  {\n    v179 = *((_QWORD *)i + 7) - *((_QWORD *)i + 6);\n    memcpy(v159, *((const void **)i + 6), v179);\n    v159 = (char *)v159 + v179;\n  }\n  if ( v122 > 0xA )\n  {\n    if ( v122 == 14 || v122 == 16 )\n      goto LABEL_260;\n    if ( v122 == 12 )\n    {\n      v91 = v159;\n      v159 = (char *)v159 + 1;\n      *v91 = 76;\n    }\n  }\n  else\n  {\n    if ( v122 >= 9 )\n    {\n      v89 = v159;\n      v159 = (char *)v159 + 1;\n      *v89 = 108;\n      goto LABEL_260;\n    }\n    if ( v122 >= 7 )\n    {\nLABEL_260:\n      v90 = v159;\n      v159 = (char *)v159 + 1;\n      *v90 = 108;\n    }\n  }\n  *(_WORD *)v159 = (unsigned __int8)i[72];\n  v118 = 0;\n  if ( *((_QWORD *)i + 5) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n      abort();\n    v92 = v118++;\n    *(&v134 + v92) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n  }\n  if ( *((_QWORD *)i + 8) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n      abort();\n    v93 = v118++;\n    *(&v134 + v93) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n  }\n  v94 = sub_408A8B(n, 2LL);\n  if ( v94 > v142 )\n  {\n    if ( v142 )\n    {\n      if ( (v142 & 0x8000000000000000LL) != 0LL )\n        v95 = -1LL;\n      else\n        v95 = 2 * v142;\n    }\n    else\n    {\n      v95 = 12LL;\n    }\n    v142 = v95;\n    v96 = sub_408A8B(n, 2LL);\n    if ( v96 > v142 )\n      v142 = sub_408A8B(n, 2LL);\n    v180 = v142;\n    if ( v142 != -1LL )\n    {\n      v160 = src != v111 && src ? realloc(src, v180) : malloc(v180);\n      if ( v160 )\n      {\n        if ( src == v111 && n )\n          memcpy(v160, src, n);\n        src = v160;\n        goto LABEL_288;\n      }\n    }\nLABEL_525:\n    if ( src != v111 && src )\n      free(src);\n    if ( v137 )\n      free(v137);\nLABEL_530:\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 12;\n    return 0LL;\n  }\nLABEL_288:\n  *((_BYTE *)src + n) = 0;\n  v124 = *__errno_location();\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v113 = -1;\n      v119 = 0;\n      maxlen = v142 - n;\n      if ( v142 - n > 0x7FFFFFFF )\n        maxlen = 0x7FFFFFFFLL;\n      *__errno_location() = 0;\n      if ( v122 == 9 )\n      {\n        v183 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v183, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v183, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v183, &v113);\n        }\n      }\n      else if ( v122 > 9 )\n      {\n        if ( v122 == 13 )\n        {\n          v131 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v131, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v131, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v131, &v113);\n          }\n        }\n        else if ( v122 > 0xD )\n        {\n          if ( v122 == 15 )\n          {\n            v186 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v186, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v186, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v186, &v113);\n            }\n          }\n          else if ( v122 < 0xF )\n          {\n            v132 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v132, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v132, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v132, &v113);\n            }\n          }\n          else if ( v122 == 16 )\n          {\n            v187 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v187, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v187, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v187, &v113);\n            }\n          }\n          else\n          {\n            if ( v122 != 17 )\nLABEL_432:\n              abort();\n            v188 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v188, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v188, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v188, &v113);\n            }\n          }\n        }\n        else if ( v122 == 11 )\n        {\n          v185 = *((double *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113, v185);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v185);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113, v185);\n          }\n        }\n        else if ( v122 > 0xB )\n        {\n          v97 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n          v98 = *((_DWORD *)v97 + 6);\n          v192 = *((_QWORD *)v97 + 2);\n          v193 = v98;\n          if ( v118 == 1 )\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v13 = maxlen;\n            DWORD2(v106) = v193;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v192, *((_QWORD *)&v106 + 1));\n          }\n          else\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113);\n          }\n        }\n        else\n        {\n          v184 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v184, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v184, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v184, &v113);\n          }\n        }\n      }\n      else if ( v122 == 4 )\n      {\n        v128 = *((unsigned __int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v128, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v128, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v128, &v113);\n        }\n      }\n      else if ( v122 > 4 )\n      {\n        if ( v122 == 6 )\n        {\n          v130 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v130, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v130, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v130, &v113);\n          }\n        }\n        else if ( v122 < 6 )\n        {\n          v129 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v129, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v129, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v129, &v113);\n          }\n        }\n        else if ( v122 == 7 )\n        {\n          v181 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v181, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v181, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v181, &v113);\n          }\n        }\n        else\n        {\n          v182 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v182, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v182, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v182, &v113);\n          }\n        }\n      }\n      else if ( v122 == 2 )\n      {\n        v126 = *((unsigned __int8 *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v126, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v126, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v126, &v113);\n        }\n      }\n      else if ( v122 > 2 )\n      {\n        v127 = *((__int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v127, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v127, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v127, &v113);\n        }\n      }\n      else\n      {\n        if ( v122 != 1 )\n          goto LABEL_432;\n        v125 = *((char *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v125, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v125, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v125, &v113);\n        }\n      }\n      if ( v113 >= 0 )\n      {\n        if ( v113 < maxlen && *((_BYTE *)src + n + v113) )\n          abort();\n        if ( v119 > v113 )\n          v113 = v119;\n        goto LABEL_443;\n      }\n      if ( !*((_BYTE *)v159 + 1) )\n        break;\n      *((_BYTE *)v159 + 1) = 0;\n    }\n    if ( v119 >= 0 )\n      v113 = v119;\nLABEL_443:\n    if ( v113 < 0 )\n    {\n      v133 = *__errno_location();\n      if ( src != v111 && src )\n        free(src);\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      v99 = __errno_location();\n      if ( v133 )\n      {\n        v100 = v133;\n      }\n      else if ( i[72] == 99 || i[72] == 115 )\n      {\n        v100 = 84;\n      }\n      else\n      {\n        v100 = 22;\n      }\n      *v99 = v100;\n      return 0LL;\n    }\n    if ( (unsigned int)(v113 + 1) < maxlen )\n    {\n      n += v113;\n      *__errno_location() = v124;\n      goto LABEL_487;\n    }\n    if ( maxlen == 0x7FFFFFFF )\n      break;\n    if ( (v142 & 0x8000000000000000LL) != 0LL )\n      v101 = -1LL;\n    else\n      v101 = 2 * v142;\n    v102 = sub_408A8B(n, (unsigned int)(v113 + 2));\n    v189 = sub_408B0A(v102, v101);\n    if ( v189 > v142 )\n    {\n      if ( v142 )\n      {\n        if ( (v142 & 0x8000000000000000LL) != 0LL )\n          v103 = -1LL;\n        else\n          v103 = 2 * v142;\n      }\n      else\n      {\n        v103 = 12LL;\n      }\n      v142 = v103;\n      if ( v189 > v103 )\n        v142 = v189;\n      v190 = v142;\n      if ( v142 == -1LL )\n        goto LABEL_525;\n      v162 = src != v111 && src ? realloc(src, v190) : malloc(v190);\n      if ( !v162 )\n        goto LABEL_525;\n      if ( src == v111 && n )\n        memcpy(v162, src, n);\n      src = v162;\n    }\n  }\n  if ( src != v111 && src )\n    free(src);\n  if ( v137 )\n    free(v137);\n  if ( ptr != v201 )\n    free(ptr);\n  if ( v195 != v196 )\n    free(v195);\n  *__errno_location() = 75;\n  return 0LL;\n}\n"], [4244310, "sub_40C356", "_BOOL8 __fastcall sub_40C356(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int16 a8)\n{\n  if ( (a8 & 0x7FFF) == 0 )\n    return HIDWORD(a7) >> 31;\n  if ( (a8 & 0x7FFF) == 0x7FFF )\n    return (HIDWORD(a7) ^ 0x80000000 | (unsigned int)a7) != 0;\n  return a7 >= 0;\n}\n"], [4244398, "sub_40C3AE", "__int64 __fastcall sub_40C3AE(unsigned int *a1, unsigned __int64 *a2)\n{\n  unsigned int v2; // eax\n  _DWORD *v3; // rax\n  _DWORD *v4; // rax\n  _DWORD *v5; // rax\n  _DWORD *v6; // rax\n  _DWORD *v7; // rax\n  _DWORD *v8; // rax\n  _QWORD *v9; // rax\n  _QWORD *v10; // rax\n  _QWORD *v11; // rax\n  _QWORD *v12; // rax\n  _QWORD *v13; // rax\n  unsigned __int64 v14; // rdx\n  __int64 v15; // rax\n  _DWORD *v16; // rax\n  _DWORD *v17; // rax\n  _QWORD *v18; // rax\n  _QWORD *v19; // rax\n  _QWORD *v20; // rax\n  _QWORD *v21; // rax\n  _QWORD *v22; // rax\n  _QWORD *v23; // rax\n  _QWORD *v24; // rax\n  _QWORD *v25; // rax\n  unsigned __int64 v27; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v28; // [rsp+18h] [rbp-8h]\n\n  v27 = 0LL;\n  v28 = a2[1];\n  while ( *a2 > v27 )\n  {\n    v2 = *(_DWORD *)v28;\n    if ( *(_DWORD *)v28 == 11 )\n    {\n      if ( a1[1] >= 0xB0 )\n      {\n        v13 = (_QWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v13 + 1;\n      }\n      else\n      {\n        v13 = (_QWORD *)(*((_QWORD *)a1 + 2) + a1[1]);\n        a1[1] += 16;\n      }\n      *(_QWORD *)(v28 + 16) = *v13;\n    }\n    else if ( v2 > 0xB )\n    {\n      if ( v2 == 17 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v20 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v20 + 1;\n        }\n        else\n        {\n          v20 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v20;\n      }\n      else if ( v2 > 0x11 )\n      {\n        if ( v2 == 20 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v23 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v23 + 1;\n          }\n          else\n          {\n            v23 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v23;\n        }\n        else if ( v2 > 0x14 )\n        {\n          if ( v2 == 21 )\n          {\n            if ( *a1 >= 0x30 )\n            {\n              v24 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v24 + 1;\n            }\n            else\n            {\n              v24 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v24;\n          }\n          else\n          {\n            if ( v2 != 22 )\n              return 0xFFFFFFFFLL;\n            if ( *a1 >= 0x30 )\n            {\n              v25 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v25 + 1;\n            }\n            else\n            {\n              v25 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v25;\n          }\n        }\n        else if ( v2 == 18 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v21 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v21 + 1;\n          }\n          else\n          {\n            v21 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v21;\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v22 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v22 + 1;\n          }\n          else\n          {\n            v22 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v22;\n        }\n      }\n      else if ( v2 == 14 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v17 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v17 + 2;\n        }\n        else\n        {\n          v17 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v17;\n      }\n      else if ( v2 > 0xE )\n      {\n        if ( v2 == 15 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v18 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v18 + 1;\n          }\n          else\n          {\n            v18 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v18;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(NULL)\";\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v19 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v19 + 1;\n          }\n          else\n          {\n            v19 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v19;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(\";\n        }\n      }\n      else if ( v2 == 12 )\n      {\n        v14 = (*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;\n        *((_QWORD *)a1 + 1) = v14 + 16;\n        v15 = *(_QWORD *)v14;\n        LODWORD(v14) = *(_DWORD *)(v14 + 8);\n        *(_QWORD *)(v28 + 16) = v15;\n        *(_DWORD *)(v28 + 24) = v14;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v16 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v16 + 2;\n        }\n        else\n        {\n          v16 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v16;\n      }\n    }\n    else if ( v2 == 5 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v7 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v7 + 2;\n      }\n      else\n      {\n        v7 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_DWORD *)(v28 + 16) = *v7;\n    }\n    else if ( v2 > 5 )\n    {\n      if ( v2 == 8 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v10 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v10 + 1;\n        }\n        else\n        {\n          v10 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v10;\n      }\n      else if ( v2 > 8 )\n      {\n        if ( v2 == 9 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v11 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v11 + 1;\n          }\n          else\n          {\n            v11 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v11;\n        }\n        else\n        {\n          if ( v2 != 10 )\n            return 0xFFFFFFFFLL;\n          if ( *a1 >= 0x30 )\n          {\n            v12 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 1;\n          }\n          else\n          {\n            v12 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v12;\n        }\n      }\n      else if ( v2 == 6 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v8 + 2;\n        }\n        else\n        {\n          v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v8;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v9 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v9 + 1;\n        }\n        else\n        {\n          v9 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v9;\n      }\n    }\n    else if ( v2 == 2 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v4 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v4 + 2;\n      }\n      else\n      {\n        v4 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v4;\n    }\n    else if ( v2 > 2 )\n    {\n      if ( v2 == 3 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v5 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v5 + 2;\n        }\n        else\n        {\n          v5 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v5;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v6 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v6 + 2;\n        }\n        else\n        {\n          v6 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v6;\n      }\n    }\n    else\n    {\n      if ( v2 != 1 )\n        return 0xFFFFFFFFLL;\n      if ( *a1 >= 0x30 )\n      {\n        v3 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v3 + 2;\n      }\n      else\n      {\n        v3 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v3;\n    }\n    ++v27;\n    v28 += 32LL;\n  }\n  return 0LL;\n}\n"], [4246668, "sub_40CC8C", "__int64 __fastcall sub_40CC8C(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4246720, "sub_40CCC0", "__int64 __fastcall sub_40CCC0(char *a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rax\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rax\n  void *v9; // rax\n  __int64 v10; // rsi\n  __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned __int64 v14; // rax\n  size_t v15; // rax\n  void *v16; // rax\n  __int64 v17; // rsi\n  __int64 v18; // rax\n  char *v19; // rax\n  int v20; // eax\n  __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  size_t v23; // rax\n  void *v24; // rax\n  __int64 v25; // rsi\n  __int64 v26; // rax\n  unsigned __int64 v27; // rax\n  size_t v28; // rax\n  void *v29; // rax\n  char v33; // [rsp+2Fh] [rbp-E1h]\n  int v34; // [rsp+30h] [rbp-E0h]\n  int ii; // [rsp+34h] [rbp-DCh]\n  __int64 v37; // [rsp+40h] [rbp-D0h]\n  __int64 v38; // [rsp+48h] [rbp-C8h]\n  __int64 v39; // [rsp+50h] [rbp-C0h]\n  unsigned __int64 v40; // [rsp+58h] [rbp-B8h]\n  unsigned __int64 v41; // [rsp+60h] [rbp-B0h]\n  __int64 v42; // [rsp+68h] [rbp-A8h]\n  char *i; // [rsp+70h] [rbp-A0h]\n  char *j; // [rsp+70h] [rbp-A0h]\n  unsigned __int64 v45; // [rsp+78h] [rbp-98h]\n  char *k; // [rsp+80h] [rbp-90h]\n  char *l; // [rsp+80h] [rbp-90h]\n  unsigned __int64 v48; // [rsp+88h] [rbp-88h]\n  char *m; // [rsp+90h] [rbp-80h]\n  char *n; // [rsp+90h] [rbp-80h]\n  unsigned __int64 v51; // [rsp+98h] [rbp-78h]\n  __int64 v52; // [rsp+A0h] [rbp-70h]\n  unsigned __int64 v53; // [rsp+A8h] [rbp-68h]\n  void *dest; // [rsp+B8h] [rbp-58h]\n  unsigned __int64 v55; // [rsp+C8h] [rbp-48h]\n  void *v56; // [rsp+D8h] [rbp-38h]\n  unsigned __int64 v57; // [rsp+E8h] [rbp-28h]\n  void *v58; // [rsp+F8h] [rbp-18h]\n  void *v59; // [rsp+108h] [rbp-8h]\n\n  v37 = 0LL;\n  v40 = 0LL;\n  v41 = 0LL;\n  *(_QWORD *)a2 = 0LL;\n  v38 = 7LL;\n  *(_QWORD *)(a2 + 8) = a2 + 32;\n  *(_QWORD *)a3 = 0LL;\n  v39 = 7LL;\n  *(_QWORD *)(a3 + 8) = a3 + 16;\n  while ( 1 )\n  {\n    do\n    {\n      if ( !*a1 )\n      {\n        *(_QWORD *)(*(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2) = a1;\n        *(_QWORD *)(a2 + 16) = v40;\n        *(_QWORD *)(a2 + 24) = v41;\n        return 0LL;\n      }\n      v3 = a1++;\n    }\n    while ( *v3 != 37 );\n    v42 = -1LL;\n    v52 = *(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2;\n    *(_QWORD *)v52 = a1 - 1;\n    *(_DWORD *)(v52 + 16) = 0;\n    *(_QWORD *)(v52 + 24) = 0LL;\n    *(_QWORD *)(v52 + 32) = 0LL;\n    *(_QWORD *)(v52 + 40) = -1LL;\n    *(_QWORD *)(v52 + 48) = 0LL;\n    *(_QWORD *)(v52 + 56) = 0LL;\n    *(_QWORD *)(v52 + 64) = -1LL;\n    *(_QWORD *)(v52 + 80) = -1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( i = a1; *i > 47 && *i <= 57; ++i )\n        ;\n      if ( *i == 36 )\n      {\n        v45 = 0LL;\n        for ( j = a1; *j > 47 && *j <= 57; ++j )\n        {\n          if ( v45 > 0x1999999999999999LL )\n            v4 = -1LL;\n          else\n            v4 = 10 * v45;\n          v45 = sub_40CC8C(v4, *j - 48);\n        }\n        if ( !v45 || v45 == -1LL )\n        {\nLABEL_272:\n          if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n            free(*(void **)(a3 + 8));\n          if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n            free(*(void **)(a2 + 8));\n          *__errno_location() = 22;\n          return 0xFFFFFFFFLL;\n        }\n        v42 = v45 - 1;\n        a1 = j + 1;\n      }\n    }\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( 1 )\n              {\n                while ( *a1 == 39 )\n                {\n                  *(_DWORD *)(v52 + 16) |= 1u;\n                  ++a1;\n                }\n                if ( *a1 != 45 )\n                  break;\n                *(_DWORD *)(v52 + 16) |= 2u;\n                ++a1;\n              }\n              if ( *a1 != 43 )\n                break;\n              *(_DWORD *)(v52 + 16) |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 32 )\n              break;\n            *(_DWORD *)(v52 + 16) |= 8u;\n            ++a1;\n          }\n          if ( *a1 != 35 )\n            break;\n          *(_DWORD *)(v52 + 16) |= 0x10u;\n          ++a1;\n        }\n        if ( *a1 != 48 )\n          break;\n        *(_DWORD *)(v52 + 16) |= 0x20u;\n        ++a1;\n      }\n      if ( *a1 != 73 )\n        break;\n      *(_DWORD *)(v52 + 16) |= 0x40u;\n      ++a1;\n    }\n    if ( *a1 != 42 )\n    {\n      if ( *a1 > 47 && *a1 <= 57 )\n      {\n        *(_QWORD *)(v52 + 24) = a1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 32) = a1;\n        if ( v40 < *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24) )\n          v40 = *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24);\n      }\n      goto LABEL_88;\n    }\n    *(_QWORD *)(v52 + 24) = a1++;\n    *(_QWORD *)(v52 + 32) = a1;\n    if ( !v40 )\n      v40 = 1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( k = a1; *k > 47 && *k <= 57; ++k )\n        ;\n      if ( *k == 36 )\n      {\n        v48 = 0LL;\n        for ( l = a1; *l > 47 && *l <= 57; ++l )\n        {\n          if ( v48 > 0x1999999999999999LL )\n            v5 = -1LL;\n          else\n            v5 = 10 * v48;\n          v48 = sub_40CC8C(v5, *l - 48);\n        }\n        if ( !v48 || v48 == -1LL )\n          goto LABEL_272;\n        *(_QWORD *)(v52 + 40) = v48 - 1;\n        a1 = l + 1;\n      }\n    }\n    if ( *(_QWORD *)(v52 + 40) == -1LL )\n    {\n      v6 = v37++;\n      *(_QWORD *)(v52 + 40) = v6;\n      if ( *(_QWORD *)(v52 + 40) == -1LL )\n        goto LABEL_272;\n    }\n    v53 = *(_QWORD *)(v52 + 40);\n    if ( v53 >= v39 )\n      break;\nLABEL_75:\n    while ( *(_QWORD *)a3 <= v53 )\n    {\n      v10 = *(_QWORD *)(a3 + 8);\n      v11 = (*(_QWORD *)a3)++;\n      *(_DWORD *)(v10 + 32 * v11) = 0;\n    }\n    if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) )\n    {\n      if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) != 5 )\n        goto LABEL_272;\n    }\n    else\n    {\n      *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) = 5;\n    }\nLABEL_88:\n    if ( *a1 == 46 )\n    {\n      if ( *++a1 == 42 )\n      {\n        *(_QWORD *)(v52 + 48) = a1++ - 1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 <= 1 )\n          v41 = 2LL;\n        if ( *a1 > 47 && *a1 <= 57 )\n        {\n          for ( m = a1; *m > 47 && *m <= 57; ++m )\n            ;\n          if ( *m == 36 )\n          {\n            v51 = 0LL;\n            for ( n = a1; *n > 47 && *n <= 57; ++n )\n            {\n              if ( v51 > 0x1999999999999999LL )\n                v12 = -1LL;\n              else\n                v12 = 10 * v51;\n              v51 = sub_40CC8C(v12, *n - 48);\n            }\n            if ( !v51 || v51 == -1LL )\n              goto LABEL_272;\n            *(_QWORD *)(v52 + 64) = v51 - 1;\n            a1 = n + 1;\n          }\n        }\n        if ( *(_QWORD *)(v52 + 64) == -1LL )\n        {\n          v13 = v37++;\n          *(_QWORD *)(v52 + 64) = v13;\n          if ( *(_QWORD *)(v52 + 64) == -1LL )\n            goto LABEL_272;\n        }\n        v55 = *(_QWORD *)(v52 + 64);\n        if ( v55 >= v39 )\n        {\n          if ( v39 < 0 )\n            v14 = -1LL;\n          else\n            v14 = 2 * v39;\n          v39 = v14;\n          if ( v14 <= v55 )\n            v39 = sub_40CC8C(v55, 1LL);\n          if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n            v15 = -1LL;\n          else\n            v15 = 32 * v39;\n          if ( v15 == -1LL )\n            goto LABEL_277;\n          v16 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v15) : realloc(*(void **)(a3 + 8), v15);\n          v56 = v16;\n          if ( !v16 )\n            goto LABEL_277;\n          if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n            memcpy(v16, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n          *(_QWORD *)(a3 + 8) = v56;\n        }\n        while ( *(_QWORD *)a3 <= v55 )\n        {\n          v17 = *(_QWORD *)(a3 + 8);\n          v18 = (*(_QWORD *)a3)++;\n          *(_DWORD *)(v17 + 32 * v18) = 0;\n        }\n        if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) )\n        {\n          if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) != 5 )\n            goto LABEL_272;\n        }\n        else\n        {\n          *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) = 5;\n        }\n      }\n      else\n      {\n        *(_QWORD *)(v52 + 48) = a1 - 1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 < *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48) )\n          v41 = *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48);\n      }\n    }\n    for ( ii = 0; ; ii += 8 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( *a1 == 104 )\n              {\n                ii |= 1 << (ii & 1);\n                ++a1;\n              }\n              if ( *a1 != 76 )\n                break;\n              ii |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 108 )\n              break;\n            ii += 8;\n            ++a1;\n          }\n          if ( *a1 != 106 )\n            break;\n          ii += 8;\n          ++a1;\n        }\n        if ( *a1 != 122 && *a1 != 90 )\n          break;\n        ii += 8;\n        ++a1;\n      }\n      if ( *a1 != 116 )\n        break;\n      ++a1;\n    }\n    v19 = a1++;\n    v33 = *v19;\n    v20 = *v19;\n    if ( v20 == 100 )\n    {\nLABEL_185:\n      if ( ii > 15 || (ii & 4) != 0 )\n      {\n        v34 = 9;\n      }\n      else if ( ii <= 7 )\n      {\n        if ( (ii & 2) != 0 )\n        {\n          v34 = 1;\n        }\n        else if ( (ii & 1) != 0 )\n        {\n          v34 = 3;\n        }\n        else\n        {\n          v34 = 5;\n        }\n      }\n      else\n      {\n        v34 = 7;\n      }\n      goto LABEL_229;\n    }\n    if ( v20 > 100 )\n    {\n      if ( v20 == 111 )\n        goto LABEL_195;\n      if ( v20 > 111 )\n      {\n        if ( v20 == 115 )\n        {\n          if ( ii <= 7 )\n            v34 = 15;\n          else\n            v34 = 16;\n          goto LABEL_229;\n        }\n        if ( v20 > 115 )\n        {\n          if ( v20 != 117 && v20 != 120 )\n            goto LABEL_272;\nLABEL_195:\n          if ( ii > 15 || (ii & 4) != 0 )\n          {\n            v34 = 10;\n          }\n          else if ( ii <= 7 )\n          {\n            if ( (ii & 2) != 0 )\n            {\n              v34 = 2;\n            }\n            else if ( (ii & 1) != 0 )\n            {\n              v34 = 4;\n            }\n            else\n            {\n              v34 = 6;\n            }\n          }\n          else\n          {\n            v34 = 8;\n          }\n          goto LABEL_229;\n        }\n        if ( v20 != 112 )\n          goto LABEL_272;\n        v34 = 17;\n      }\n      else\n      {\n        if ( v20 == 105 )\n          goto LABEL_185;\n        if ( v20 <= 105 )\n        {\n          if ( v20 > 103 )\n            goto LABEL_272;\nLABEL_205:\n          if ( ii > 15 || (ii & 4) != 0 )\n            v34 = 12;\n          else\n            v34 = 11;\n          goto LABEL_229;\n        }\n        if ( v20 != 110 )\n          goto LABEL_272;\n        if ( ii > 15 || (ii & 4) != 0 )\n        {\n          v34 = 22;\n        }\n        else if ( ii <= 7 )\n        {\n          if ( (ii & 2) != 0 )\n          {\n            v34 = 18;\n          }\n          else if ( (ii & 1) != 0 )\n          {\n            v34 = 19;\n          }\n          else\n          {\n            v34 = 20;\n          }\n        }\n        else\n        {\n          v34 = 21;\n        }\n      }\n    }\n    else if ( v20 > 71 )\n    {\n      if ( v20 == 88 )\n        goto LABEL_195;\n      if ( v20 > 88 )\n      {\n        if ( v20 == 97 )\n          goto LABEL_205;\n        if ( v20 != 99 )\n          goto LABEL_272;\n        if ( ii <= 7 )\n          v34 = 13;\n        else\n          v34 = 14;\n      }\n      else\n      {\n        if ( v20 != 83 )\n          goto LABEL_272;\n        v34 = 16;\n        v33 = 115;\n      }\n    }\n    else\n    {\n      if ( v20 >= 69 || v20 == 65 )\n        goto LABEL_205;\n      if ( v20 == 67 )\n      {\n        v34 = 14;\n        v33 = 99;\n      }\n      else\n      {\n        if ( v20 != 37 )\n          goto LABEL_272;\n        v34 = 0;\n      }\n    }\nLABEL_229:\n    if ( v34 )\n    {\n      *(_QWORD *)(v52 + 80) = v42;\n      if ( *(_QWORD *)(v52 + 80) == -1LL )\n      {\n        v21 = v37++;\n        *(_QWORD *)(v52 + 80) = v21;\n        if ( *(_QWORD *)(v52 + 80) == -1LL )\n          goto LABEL_272;\n      }\n      v57 = *(_QWORD *)(v52 + 80);\n      if ( v57 >= v39 )\n      {\n        if ( v39 < 0 )\n          v22 = -1LL;\n        else\n          v22 = 2 * v39;\n        v39 = v22;\n        if ( v22 <= v57 )\n          v39 = sub_40CC8C(v57, 1LL);\n        if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n          v23 = -1LL;\n        else\n          v23 = 32 * v39;\n        if ( v23 == -1LL )\n          goto LABEL_277;\n        v24 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v23) : realloc(*(void **)(a3 + 8), v23);\n        v58 = v24;\n        if ( !v24 )\n          goto LABEL_277;\n        if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n          memcpy(v24, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n        *(_QWORD *)(a3 + 8) = v58;\n      }\n      while ( *(_QWORD *)a3 <= v57 )\n      {\n        v25 = *(_QWORD *)(a3 + 8);\n        v26 = (*(_QWORD *)a3)++;\n        *(_DWORD *)(v25 + 32 * v26) = 0;\n      }\n      if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) )\n      {\n        if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) != v34 )\n          goto LABEL_272;\n      }\n      else\n      {\n        *(_DWORD *)(*(_QWORD *)(a3 + 8) + 32 * v57) = v34;\n      }\n    }\n    *(_BYTE *)(v52 + 72) = v33;\n    *(_QWORD *)(v52 + 8) = a1;\n    if ( ++*(_QWORD *)a2 >= (unsigned __int64)v38 )\n    {\n      if ( v38 < 0 )\n        v27 = -1LL;\n      else\n        v27 = 2 * v38;\n      v38 = v27;\n      if ( v27 > 0x2E8BA2E8BA2E8BALL )\n        v28 = -1LL;\n      else\n        v28 = 88 * v27;\n      if ( v28 == -1LL )\n        goto LABEL_277;\n      v29 = *(_QWORD *)(a2 + 8) == a2 + 32 ? malloc(v28) : realloc(*(void **)(a2 + 8), v28);\n      v59 = v29;\n      if ( !v29 )\n        goto LABEL_277;\n      if ( *(_QWORD *)(a2 + 8) == a2 + 32 )\n        memcpy(v29, *(const void **)(a2 + 8), 88LL * *(_QWORD *)a2);\n      *(_QWORD *)(a2 + 8) = v59;\n    }\n  }\n  if ( v39 < 0 )\n    v7 = -1LL;\n  else\n    v7 = 2 * v39;\n  v39 = v7;\n  if ( v7 <= v53 )\n    v39 = sub_40CC8C(v53, 1LL);\n  if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n    v8 = -1LL;\n  else\n    v8 = 32 * v39;\n  if ( v8 != -1LL )\n  {\n    v9 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v8) : realloc(*(void **)(a3 + 8), v8);\n    dest = v9;\n    if ( v9 )\n    {\n      if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n        memcpy(v9, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n      *(_QWORD *)(a3 + 8) = dest;\n      goto LABEL_75;\n    }\n  }\nLABEL_277:\n  if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n    free(*(void **)(a3 + 8));\n  if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n    free(*(void **)(a2 + 8));\n  *__errno_location() = 12;\n  return 0xFFFFFFFFLL;\n}\n"], [4252256, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_611E18 - off_611E10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_611E10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4252368, "fini", "void fini(void)\n{\n  ;\n}\n"], [4252384, "sub_40E2E0", "int __fastcall sub_40E2E0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_612218 )\n    v1 = (void *)qword_612218;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4252416, "sub_40E300", "int __fastcall sub_40E300(int fildes, struct stat *stat_buf)\n{\n  return __fxstat(1, fildes, stat_buf);\n}\n"], [4252432, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]