[[4198760, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4198800, "sub_401190", "__int64 sub_401190()\n{\n  return qword_60B010();\n}\n"], [4198816, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4198832, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4198848, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4198864, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4198880, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4198896, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4198912, ".toupper", "// attributes: thunk\nint toupper(int c)\n{\n  return toupper(c);\n}\n"], [4198928, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4198944, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4198960, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4198976, ".stpcpy", "// attributes: thunk\nchar *stpcpy(char *dest, const char *src)\n{\n  return stpcpy(dest, src);\n}\n"], [4198992, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4199008, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4199024, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4199040, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4199056, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4199072, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4199088, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4199104, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4199120, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4199136, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4199152, ".__assert_fail", "// attributes: thunk\nvoid __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\n{\n  _assert_fail(assertion, file, line, function);\n}\n"], [4199168, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4199184, ".close", "// attributes: thunk\nint close(int fd)\n{\n  return close(fd);\n}\n"], [4199200, ".posix_fadvise", "// attributes: thunk\nint posix_fadvise(int fd, off_t offset, off_t len, int advise)\n{\n  return posix_fadvise(fd, offset, len, advise);\n}\n"], [4199216, ".read", "// attributes: thunk\nssize_t read(int fd, void *buf, size_t nbytes)\n{\n  return read(fd, buf, nbytes);\n}\n"], [4199232, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4199248, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4199264, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4199280, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4199296, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4199312, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4199328, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4199344, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4199360, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4199376, ".tolower", "// attributes: thunk\nint tolower(int c)\n{\n  return tolower(c);\n}\n"], [4199392, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4199408, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4199424, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4199440, ".fwrite_unlocked", "// attributes: thunk\nsize_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)\n{\n  return fwrite_unlocked(ptr, size, n, stream);\n}\n"], [4199456, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4199472, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4199488, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4199504, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4199520, ".strtoumax", "// attributes: thunk\nuintmax_t strtoumax(const char *nptr, char **endptr, int base)\n{\n  return strtoumax(nptr, endptr, base);\n}\n"], [4199536, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4199552, ".sprintf", "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\n  return sprintf(s, format);\n}\n"], [4199568, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4199584, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4199600, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4199616, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4199632, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4199648, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4199696, "sub_401510", "signed __int64 sub_401510()\n{\n  signed __int64 result; // rax\n\n  result = &unk_60B20F - &unk_60B208;\n  if ( (unsigned __int64)(&unk_60B20F - &unk_60B208) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4199744, "sub_401540", "__int64 sub_401540()\n{\n  return 0LL;\n}\n"], [4199808, "sub_401580", "signed __int64 sub_401580()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_60B258 )\n  {\n    result = sub_401510();\n    byte_60B258 = 1;\n  }\n  return result;\n}\n"], [4199840, "sub_4015A0", "__int64 sub_4015A0()\n{\n  return sub_401540();\n}\n"], [4199885, "sub_4015CD", "__int64 __fastcall sub_4015CD(unsigned __int8 a1)\n{\n  return a1;\n}\n"], [4199900, "sub_4015DC", "int sub_4015DC()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_4049B9(qword_60D590);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_4049B9(qword_60D590);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_4049B9(qword_60D590);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4200166, "sub_4016E6", "_BOOL8 __fastcall sub_4016E6(_QWORD *a1, __int64 a2, char a3)\n{\n  return *(_BYTE *)(*a1 + a2) == a3 && *(_BYTE *)(a1[1] + a2) != 1;\n}\n"], [4200247, "sub_401737", "void __fastcall __noreturn sub_401737(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbx\n  char *v5; // rax\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rbx\n  char *v9; // rax\n  FILE *v10; // rbx\n  char *v11; // rax\n  FILE *v12; // rbx\n  char *v13; // rax\n  FILE *v14; // rbx\n  char *v15; // rax\n  FILE *v16; // rbx\n  char *v17; // rax\n\n  v1 = qword_60D590;\n  if ( a1 )\n  {\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = gettext(\"Usage: %s [OPTION]... SET1 [SET2]\\n\");\n    printf(v3, v1);\n    v4 = stdout;\n    v5 = gettext(\n           \"Translate, squeeze, and/or delete characters from standard input,\\n\"\n           \"writing to standard output.\\n\"\n           \"\\n\"\n           \"  -c, -C, --complement    use the complement of SET1\\n\"\n           \"  -d, --delete            delete characters in SET1, do not translate\\n\"\n           \"  -s, --squeeze-repeats   replace each input sequence of a repeated character\\n\"\n           \"                            that is listed in SET1 with a single occurrence\\n\"\n           \"                            of that character\\n\"\n           \"  -t, --truncate-set1     first truncate SET1 to length of SET2\\n\");\n    fputs_unlocked(v5, v4);\n    v6 = stdout;\n    v7 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v7, v6);\n    v8 = stdout;\n    v9 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v9, v8);\n    v10 = stdout;\n    v11 = gettext(\n            \"\\n\"\n            \"SETs are specified as strings of characters.  Most represent themselves.\\n\"\n            \"Interpreted sequences are:\\n\"\n            \"\\n\"\n            \"  \\\\NNN            character with octal value NNN (1 to 3 octal digits)\\n\"\n            \"  \\\\\\\\              backslash\\n\"\n            \"  \\\\a              audible BEL\\n\"\n            \"  \\\\b              backspace\\n\"\n            \"  \\\\f              form feed\\n\"\n            \"  \\\\n              new line\\n\"\n            \"  \\\\r              return\\n\"\n            \"  \\\\t              horizontal tab\\n\");\n    fputs_unlocked(v11, v10);\n    v12 = stdout;\n    v13 = gettext(\n            \"  \\\\v              vertical tab\\n\"\n            \"  CHAR1-CHAR2     all characters from CHAR1 to CHAR2 in ascending order\\n\"\n            \"  [CHAR*]         in SET2, copies of CHAR until length of SET1\\n\"\n            \"  [CHAR*REPEAT]   REPEAT copies of CHAR, REPEAT octal if starting with 0\\n\"\n            \"  [:alnum:]       all letters and digits\\n\"\n            \"  [:alpha:]       all letters\\n\"\n            \"  [:blank:]       all horizontal whitespace\\n\"\n            \"  [:cntrl:]       all control characters\\n\"\n            \"  [:digit:]       all digits\\n\");\n    fputs_unlocked(v13, v12);\n    v14 = stdout;\n    v15 = gettext(\n            \"  [:graph:]       all printable characters, not including space\\n\"\n            \"  [:lower:]       all lower case letters\\n\"\n            \"  [:print:]       all printable characters, including space\\n\"\n            \"  [:punct:]       all punctuation characters\\n\"\n            \"  [:space:]       all horizontal or vertical whitespace\\n\"\n            \"  [:upper:]       all upper case letters\\n\"\n            \"  [:xdigit:]      all hexadecimal digits\\n\"\n            \"  [=CHAR=]        all characters which are equivalent to CHAR\\n\");\n    fputs_unlocked(v15, v14);\n    v16 = stdout;\n    v17 = gettext(\n            \"\\n\"\n            \"Translation occurs if -d is not given and both SET1 and SET2 appear.\\n\"\n            \"-t may be used only when translating.  SET2 is extended to length of\\n\"\n            \"SET1 by repeating its last character as necessary.  Excess characters\\n\"\n            \"of SET2 are ignored.  Only [:lower:] and [:upper:] are guaranteed to\\n\"\n            \"expand in ascending order; used in SET2 while translating, they may\\n\"\n            \"only be used in pairs to specify case conversion.  -s uses SET1 if not\\n\"\n            \"translating nor deleting; else squeezing uses SET2 and occurs after\\n\"\n            \"translation or deletion.\\n\");\n    fputs_unlocked(v17, v16);\n    sub_4015DC();\n  }\n  exit(a1);\n}\n"], [4200560, "sub_401870", "bool __fastcall sub_401870(char a1, char a2)\n{\n  return a1 == a2;\n}\n"], [4200586, "sub_40188A", "bool __fastcall sub_40188A(unsigned int a1, unsigned __int8 a2)\n{\n  int v3; // [rsp+1Ch] [rbp-4h]\n\n  if ( a1 == 5 )\n  {\n    v3 = (*__ctype_b_loc())[a2] & 0x8000;\n  }\n  else if ( a1 > 5 )\n  {\n    if ( a1 == 8 )\n    {\n      v3 = (*__ctype_b_loc())[a2] & 4;\n    }\n    else if ( a1 > 8 )\n    {\n      if ( a1 == 10 )\n      {\n        v3 = (*__ctype_b_loc())[a2] & 0x100;\n      }\n      else if ( a1 < 0xA )\n      {\n        v3 = (*__ctype_b_loc())[a2] & 0x2000;\n      }\n      else\n      {\n        if ( a1 != 11 )\n          abort();\n        v3 = (*__ctype_b_loc())[a2] & 0x1000;\n      }\n    }\n    else if ( a1 == 6 )\n    {\n      v3 = (*__ctype_b_loc())[a2] & 0x200;\n    }\n    else\n    {\n      v3 = (*__ctype_b_loc())[a2] & 0x4000;\n    }\n  }\n  else if ( a1 == 2 )\n  {\n    v3 = (*__ctype_b_loc())[a2] & 1;\n  }\n  else if ( a1 > 2 )\n  {\n    if ( a1 == 3 )\n      v3 = (*__ctype_b_loc())[a2] & 2;\n    else\n      v3 = (*__ctype_b_loc())[a2] & 0x800;\n  }\n  else if ( a1 )\n  {\n    v3 = (*__ctype_b_loc())[a2] & 0x400;\n  }\n  else\n  {\n    v3 = (*__ctype_b_loc())[a2] & 8;\n  }\n  return v3 != 0;\n}\n"], [4201181, "sub_401ADD", "void __fastcall sub_401ADD(void **a1)\n{\n  free(*a1);\n  free(a1[1]);\n}\n"], [4201226, "sub_401B0A", "__int64 __fastcall sub_401B0A(const char *a1, _QWORD *a2)\n{\n  int v2; // eax\n  unsigned int v3; // er14\n  unsigned int v4; // er13\n  unsigned int v5; // er12\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rax\n  __int64 v9; // rax\n  __int64 v11; // [rsp+0h] [rbp-80h]\n  __int64 v12; // [rsp+8h] [rbp-78h]\n  __int64 v13; // [rsp+10h] [rbp-70h]\n  unsigned __int8 v14; // [rsp+33h] [rbp-4Dh]\n  int v15; // [rsp+34h] [rbp-4Ch]\n  int v16; // [rsp+34h] [rbp-4Ch]\n  __int64 i; // [rsp+38h] [rbp-48h]\n  __int64 v18; // [rsp+40h] [rbp-40h]\n  size_t v19; // [rsp+48h] [rbp-38h]\n\n  v19 = strlen(a1);\n  *a2 = sub_406D88(v19);\n  a2[1] = sub_406E73(v19, 1LL);\n  v18 = 0LL;\n  for ( i = 0LL; a1[i]; ++i )\n  {\n    if ( a1[i] == 92 )\n    {\n      *(_BYTE *)(a2[1] + v18) = 1;\n      v2 = a1[i + 1];\n      if ( v2 == 98 )\n      {\n        v14 = 8;\n        goto LABEL_38;\n      }\n      if ( v2 > 98 )\n      {\n        if ( v2 == 114 )\n        {\n          v14 = 13;\n          goto LABEL_38;\n        }\n        if ( v2 > 114 )\n        {\n          if ( v2 == 116 )\n          {\n            v14 = 9;\n            goto LABEL_38;\n          }\n          if ( v2 == 118 )\n          {\n            v14 = 11;\n            goto LABEL_38;\n          }\n        }\n        else\n        {\n          if ( v2 == 102 )\n          {\n            v14 = 12;\n            goto LABEL_38;\n          }\n          if ( v2 == 110 )\n          {\n            v14 = 10;\n            goto LABEL_38;\n          }\n        }\n      }\n      else\n      {\n        if ( v2 <= 55 )\n        {\n          if ( v2 >= 48 )\n          {\n            v14 = a1[i + 1] - 48;\n            v15 = a1[i + 2] - 48;\n            if ( v15 >= 0 && v15 <= 7 )\n            {\n              v14 = 8 * v14 + v15;\n              v16 = a1[++i + 2] - 48;\n              if ( v16 >= 0 && v16 <= 7 )\n              {\n                if ( 8 * v14 + v16 > 255 )\n                {\n                  v3 = a1[i + 2];\n                  v4 = a1[i + 1];\n                  v5 = a1[i];\n                  v6 = gettext(\n                         \"warning: the ambiguous octal escape \\\\%c%c%c is being\\n\"\n                         \"\\tinterpreted as the 2-byte sequence \\\\0%c%c, %c\");\n                  LODWORD(v13) = v3;\n                  LODWORD(v12) = v4;\n                  LODWORD(v11) = v5;\n                  error(0, 0, v6, v5, v4, v3, v11, v12, v13);\n                }\n                else\n                {\n                  v14 = 8 * v14 + v16;\n                  ++i;\n                }\n              }\n            }\n          }\n          else\n          {\n            if ( a1[i + 1] )\n              goto LABEL_37;\n            v7 = gettext(\"warning: an unescaped backslash at end of string is not portable\");\n            error(0, 0, v7);\n            *(_BYTE *)(a2[1] + v18) = 0;\n            --i;\n            v14 = 92;\n          }\nLABEL_38:\n          ++i;\n          v8 = v18++;\n          *(_BYTE *)(*a2 + v8) = v14;\n          continue;\n        }\n        if ( v2 == 92 )\n        {\n          v14 = 92;\n          goto LABEL_38;\n        }\n        if ( v2 == 97 )\n        {\n          v14 = 7;\n          goto LABEL_38;\n        }\n      }\nLABEL_37:\n      v14 = a1[i + 1];\n      goto LABEL_38;\n    }\n    v9 = v18++;\n    *(_BYTE *)(*a2 + v9) = a1[i];\n  }\n  a2[2] = v18;\n  return 1LL;\n}\n"], [4202165, "sub_401EB5", "__int64 __fastcall sub_401EB5(const char *a1, size_t a2)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; i <= 0xB; ++i )\n  {\n    if ( !strncmp(a1, (&s)[i], a2) && strlen((&s)[i]) == a2 )\n      return i;\n  }\n  return 9999LL;\n}\n"], [4202271, "sub_401F1F", "char *__fastcall sub_401F1F(unsigned __int8 a1)\n{\n  char *s; // [rsp+18h] [rbp-8h]\n\n  s = (char *)sub_406D88(5LL);\n  if ( ((*__ctype_b_loc())[a1] & 0x4000) != 0 )\n  {\n    *s = a1;\n    s[1] = 0;\n  }\n  else\n  {\n    sprintf(s, \"\\\\%03o\", a1);\n  }\n  return s;\n}\n"], [4202386, "sub_401F92", "__int64 __fastcall sub_401F92(__int64 a1, unsigned __int64 a2)\n{\n  char *v2; // rax\n  unsigned __int8 v4; // [rsp+1Fh] [rbp-31h]\n  char *dest; // [rsp+20h] [rbp-30h]\n  unsigned __int64 i; // [rsp+28h] [rbp-28h]\n  __int64 v7; // [rsp+38h] [rbp-18h]\n  char s[8]; // [rsp+40h] [rbp-10h] BYREF\n  unsigned __int64 v9; // [rsp+48h] [rbp-8h]\n\n  v9 = __readfsqword(0x28u);\n  v7 = sub_406C3F(a2 + 1, 4LL);\n  dest = (char *)v7;\n  for ( i = 0LL; i < a2; ++i )\n  {\n    v4 = *(_BYTE *)(a1 + i);\n    if ( v4 == 10 )\n    {\n      v2 = stpcpy(dest, \"\\\\n\");\n      goto LABEL_24;\n    }\n    if ( v4 > 0xAu )\n    {\n      if ( v4 == 12 )\n      {\n        v2 = stpcpy(dest, \"\\\\f\");\n        goto LABEL_24;\n      }\n      if ( v4 < 0xCu )\n      {\n        v2 = stpcpy(dest, \"\\\\v\");\n        goto LABEL_24;\n      }\n      if ( v4 == 13 )\n      {\n        v2 = stpcpy(dest, \"\\\\r\");\n        goto LABEL_24;\n      }\n      if ( v4 == 92 )\n      {\n        v2 = stpcpy(dest, \"\\\\\");\n        goto LABEL_24;\n      }\n    }\n    else\n    {\n      if ( v4 == 8 )\n      {\n        v2 = stpcpy(dest, \"\\\\b\");\n        goto LABEL_24;\n      }\n      if ( v4 > 8u )\n      {\n        v2 = stpcpy(dest, \"\\\\t\");\n        goto LABEL_24;\n      }\n      if ( v4 == 7 )\n      {\n        v2 = stpcpy(dest, \"\\\\a\");\n        goto LABEL_24;\n      }\n    }\n    if ( ((*__ctype_b_loc())[v4] & 0x4000) != 0 )\n    {\n      s[0] = v4;\n      s[1] = 0;\n    }\n    else\n    {\n      sprintf(s, \"\\\\%03o\", v4);\n    }\n    v2 = stpcpy(dest, s);\nLABEL_24:\n    dest = v2;\n  }\n  return v7;\n}\n"], [4202777, "sub_402119", "__int64 __fastcall sub_402119(__int64 a1, char a2)\n{\n  __int64 result; // rax\n  __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_406D88(32LL);\n  *(_QWORD *)(v3 + 8) = 0LL;\n  *(_DWORD *)v3 = 0;\n  *(_BYTE *)(v3 + 16) = a2;\n  if ( !*(_QWORD *)(a1 + 8) )\n    __assert_fail(\"list->tail\", \"../../src/src/tr.c\", 0x28Du, \"append_normal_char\");\n  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL) = v3;\n  result = a1;\n  *(_QWORD *)(a1 + 8) = v3;\n  return result;\n}\n"], [4202909, "sub_40219D", "__int64 __fastcall sub_40219D(__int64 a1, unsigned __int8 a2, unsigned __int8 a3)\n{\n  char *v3; // rax\n  __int64 result; // rax\n  char *ptr; // [rsp+18h] [rbp-18h]\n  char *v7; // [rsp+20h] [rbp-10h]\n  __int64 v8; // [rsp+28h] [rbp-8h]\n\n  if ( a3 >= a2 )\n  {\n    v8 = sub_406D88(32LL);\n    *(_QWORD *)(v8 + 8) = 0LL;\n    *(_DWORD *)v8 = 1;\n    *(_BYTE *)(v8 + 16) = a2;\n    *(_BYTE *)(v8 + 17) = a3;\n    if ( !*(_QWORD *)(a1 + 8) )\n      __assert_fail(\"list->tail\", \"../../src/src/tr.c\", 0x2ADu, \"append_range\");\n    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL) = v8;\n    *(_QWORD *)(a1 + 8) = v8;\n    result = 1LL;\n  }\n  else\n  {\n    ptr = sub_401F1F(a2);\n    v7 = sub_401F1F(a3);\n    v3 = gettext(\"range-endpoints of `%s-%s' are in reverse collating sequence order\");\n    error(0, 0, v3, ptr, v7);\n    free(ptr);\n    free(v7);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4203182, "sub_4022AE", "__int64 __fastcall sub_4022AE(__int64 a1, const char *a2, size_t a3)\n{\n  int v4; // [rsp+24h] [rbp-Ch]\n  __int64 v5; // [rsp+28h] [rbp-8h]\n\n  v4 = sub_401EB5(a2, a3);\n  if ( v4 == 9999 )\n    return 0LL;\n  v5 = sub_406D88(32LL);\n  *(_QWORD *)(v5 + 8) = 0LL;\n  *(_DWORD *)v5 = 2;\n  *(_DWORD *)(v5 + 16) = v4;\n  if ( !*(_QWORD *)(a1 + 8) )\n    __assert_fail(\"list->tail\", \"../../src/src/tr.c\", 0x2C6u, \"append_char_class\");\n  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL) = v5;\n  *(_QWORD *)(a1 + 8) = v5;\n  return 1LL;\n}\n"], [4203359, "sub_40235F", "__int64 __fastcall sub_40235F(__int64 a1, char a2, __int64 a3)\n{\n  __int64 result; // rax\n  __int64 v5; // [rsp+28h] [rbp-8h]\n\n  v5 = sub_406D88(32LL);\n  *(_QWORD *)(v5 + 8) = 0LL;\n  *(_DWORD *)v5 = 4;\n  *(_BYTE *)(v5 + 16) = a2;\n  *(_QWORD *)(v5 + 24) = a3;\n  if ( !*(_QWORD *)(a1 + 8) )\n    __assert_fail(\"list->tail\", \"../../src/src/tr.c\", 0x2DCu, \"append_repeated_char\");\n  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL) = v5;\n  result = a1;\n  *(_QWORD *)(a1 + 8) = v5;\n  return result;\n}\n"], [4203507, "sub_4023F3", "__int64 __fastcall sub_4023F3(__int64 a1, _BYTE *a2, __int64 a3)\n{\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  if ( a3 != 1 )\n    return 0LL;\n  v4 = sub_406D88(32LL);\n  *(_QWORD *)(v4 + 8) = 0LL;\n  *(_DWORD *)v4 = 3;\n  *(_BYTE *)(v4 + 16) = *a2;\n  if ( !*(_QWORD *)(a1 + 8) )\n    __assert_fail(\"list->tail\", \"../../src/src/tr.c\", 0x2F3u, \"append_equiv_class\");\n  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL) = v4;\n  *(_QWORD *)(a1 + 8) = v4;\n  return 1LL;\n}\n"], [4203666, "sub_402492", "__int64 __fastcall sub_402492(_QWORD *a1, unsigned __int64 a2, char a3, unsigned __int64 *a4)\n{\n  while ( a1[2] - 1LL > a2 )\n  {\n    if ( *(_BYTE *)(*a1 + a2) == a3\n      && *(_BYTE *)(a2 + 1 + *a1) == 93\n      && *(_BYTE *)(a1[1] + a2) != 1\n      && *(_BYTE *)(a2 + 1 + a1[1]) != 1 )\n    {\n      *a4 = a2;\n      return 1LL;\n    }\n    ++a2;\n  }\n  return 0LL;\n}\n"], [4203850, "sub_40254A", "__int64 __fastcall sub_40254A(_QWORD *a1, __int64 a2, _BYTE *a3, _QWORD *a4, unsigned __int64 *a5)\n{\n  unsigned int v6; // eax\n  __int64 v7; // rbx\n  char *v8; // rax\n  _BYTE *v12; // [rsp+38h] [rbp-38h] BYREF\n  unsigned __int64 i; // [rsp+40h] [rbp-30h]\n  unsigned __int64 v14; // [rsp+48h] [rbp-28h]\n  _BYTE *v15; // [rsp+50h] [rbp-20h]\n  void *ptr; // [rsp+58h] [rbp-18h]\n\n  if ( (unsigned __int64)(a2 + 1) >= a1[2] )\n    __assert_fail(\"start_idx + 1 < es->len\", \"../../src/src/tr.c\", 0x320u, \"find_bracketed_repeat\");\n  if ( !sub_4016E6(a1, a2 + 1, 42) )\n    return 0xFFFFFFFFLL;\n  for ( i = a2 + 2; ; ++i )\n  {\n    if ( a1[2] <= i || *(_BYTE *)(a1[1] + i) == 1 )\n      return 0xFFFFFFFFLL;\n    if ( *(_BYTE *)(*a1 + i) == 93 )\n      break;\n  }\n  v14 = i - a2 - 2;\n  *a3 = *(_BYTE *)(*a1 + a2);\n  if ( v14 )\n  {\n    v15 = (_BYTE *)(a2 + 2 + *a1);\n    if ( *v15 == 48 )\n      v6 = 8;\n    else\n      v6 = 10;\n    if ( (unsigned int)sub_406FDF(v15, &v12, v6, a4, 0LL) || *a4 == -1LL || &v15[v14] != v12 )\n    {\n      ptr = (void *)sub_401F92((__int64)v15, v14);\n      v7 = sub_404BE5(ptr);\n      v8 = gettext(\"invalid repeat count %s in [c*n] construct\");\n      error(0, 0, v8, v7);\n      free(ptr);\n      return 4294967294LL;\n    }\n  }\n  else\n  {\n    *a4 = 0LL;\n  }\n  *a5 = i;\n  return 0LL;\n}\n"], [4204363, "sub_40274B", "_BOOL8 __fastcall sub_40274B(_QWORD *a1, __int64 a2)\n{\n  unsigned __int64 i; // [rsp+18h] [rbp-8h]\n\n  if ( !sub_4016E6(a1, a2, 42) )\n    return 0LL;\n  for ( i = a2 + 1; a1[2] > i; ++i )\n  {\n    if ( (unsigned int)(unsigned __int8)sub_4015CD(*(_BYTE *)(*a1 + i)) - 48 > 9 || *(_BYTE *)(a1[1] + i) )\n      return sub_4016E6(a1, i, 93);\n  }\n  return 0LL;\n}\n"], [4204543, "sub_4027FF", "__int64 __fastcall sub_4027FF(__int64 *a1, __int64 a2)\n{\n  char *v2; // rax\n  __int64 v4; // rbx\n  char *v5; // rax\n  char *v6; // rax\n  char v7; // [rsp+1Ah] [rbp-56h] BYREF\n  char v8; // [rsp+1Bh] [rbp-55h]\n  int v9; // [rsp+1Ch] [rbp-54h]\n  unsigned __int64 v10; // [rsp+20h] [rbp-50h] BYREF\n  __int64 v11; // [rsp+28h] [rbp-48h] BYREF\n  unsigned __int64 i; // [rsp+30h] [rbp-40h]\n  __int64 v13; // [rsp+38h] [rbp-38h]\n  unsigned __int64 v14; // [rsp+40h] [rbp-30h]\n  char *v15; // [rsp+48h] [rbp-28h]\n  void *ptr; // [rsp+50h] [rbp-20h]\n  void *v17; // [rsp+58h] [rbp-18h]\n\n  v13 = *a1;\n  for ( i = 0LL; ; i = v11 + 2 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        if ( i + 2 >= a1[2] )\n        {\n          while ( a1[2] > i )\n            sub_402119(a2, *(_BYTE *)(v13 + i++));\n          return 1LL;\n        }\n        if ( sub_4016E6(a1, i, 91) )\n          break;\nLABEL_25:\n        if ( sub_4016E6(a1, i + 1, 45) )\n        {\n          if ( (unsigned __int8)sub_40219D(a2, *(_BYTE *)(v13 + i), *(_BYTE *)(i + 2 + v13)) != 1 )\n            return 0LL;\n          i += 3LL;\n        }\n        else\n        {\n          sub_402119(a2, *(_BYTE *)(v13 + i++));\n        }\n      }\n      v8 = 1;\n      if ( sub_4016E6(a1, i + 1, 58) || sub_4016E6(a1, i + 1, 61) )\n      {\n        if ( (unsigned __int8)sub_402492(a1, i + 2, *(_BYTE *)(i + 1 + v13), (unsigned __int64 *)&v11) )\n          break;\n      }\nLABEL_19:\n      v9 = sub_40254A(a1, i + 1, &v7, &v11, &v10);\n      if ( v9 )\n      {\n        if ( v9 != -1 )\n          return 0LL;\n        v8 = 0;\n      }\n      else\n      {\n        sub_40235F(a2, v7, v11);\n        i = v10 + 1;\n      }\n      if ( !v8 )\n        goto LABEL_25;\n    }\n    v14 = v11 - i - 2;\n    v15 = (char *)(i + 2 + v13);\n    if ( v11 - i == 2 )\n      break;\n    if ( *(_BYTE *)(i + 1 + v13) == 58 )\n    {\n      if ( (unsigned __int8)sub_4022AE(a2, v15, v14) != 1 )\n      {\n        if ( !sub_40274B(a1, i + 2) )\n        {\n          ptr = (void *)sub_401F92((__int64)v15, v14);\n          v4 = sub_404BE5(ptr);\n          v5 = gettext(\"invalid character class %s\");\n          error(0, 0, v5, v4);\n          free(ptr);\n          return 0LL;\n        }\n        goto LABEL_19;\n      }\n    }\n    else if ( (unsigned __int8)sub_4023F3(a2, v15, v14) != 1 )\n    {\n      if ( !sub_40274B(a1, i + 2) )\n      {\n        v17 = (void *)sub_401F92((__int64)v15, v14);\n        v6 = gettext(\"%s: equivalence class operand must be a single character\");\n        error(0, 0, v6, v17);\n        free(v17);\n        return 0LL;\n      }\n      goto LABEL_19;\n    }\n  }\n  if ( *(_BYTE *)(i + 1 + v13) == 58 )\n    v2 = gettext(\"missing character class name `[::]'\");\n  else\n    v2 = gettext(\"missing equivalence class character `[==]'\");\n  error(0, 0, v2);\n  return 0LL;\n}\n"], [4205581, "sub_402C0D", "__int64 __fastcall sub_402C0D(__int64 a1)\n{\n  __int64 result; // rax\n\n  *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8LL);\n  result = a1;\n  *(_QWORD *)(a1 + 16) = -1LL;\n  return result;\n}\n"], [4205623, "sub_402C37", "__int64 __fastcall sub_402C37(_QWORD *a1, _DWORD *a2)\n{\n  unsigned int v3; // eax\n  __int64 v4; // rdx\n  int v5; // eax\n  unsigned int v6; // [rsp+10h] [rbp-10h]\n  int i; // [rsp+14h] [rbp-Ch]\n  int j; // [rsp+14h] [rbp-Ch]\n  __int64 v9; // [rsp+18h] [rbp-8h]\n\n  if ( a2 )\n    *a2 = 2;\n  if ( a1[2] == -2LL )\n  {\n    a1[1] = *(_QWORD *)(*a1 + 8LL);\n    a1[2] = -1LL;\n  }\n  v9 = a1[1];\n  if ( !v9 )\n    return 0xFFFFFFFFLL;\n  v3 = *(_DWORD *)v9;\n  if ( *(_DWORD *)v9 == 2 )\n  {\n    if ( a2 )\n    {\n      v5 = *(_DWORD *)(v9 + 16);\n      if ( v5 == 6 )\n      {\n        *a2 = 0;\n      }\n      else if ( v5 == 10 )\n      {\n        *a2 = 1;\n      }\n    }\n    if ( a1[2] == -1LL )\n    {\n      for ( i = 0; i <= 255 && !sub_40188A(*(_DWORD *)(v9 + 16), i); ++i )\n        ;\n      if ( i > 255 )\n        __assert_fail(\"i < N_CHARS\", \"../../src/src/tr.c\", 0x44Bu, \"get_next\");\n      a1[2] = i;\n    }\n    if ( !sub_40188A(*(_DWORD *)(v9 + 16), a1[2]) )\n      __assert_fail(\"is_char_class_member (p->u.char_class, s->state)\", \"../../src/src/tr.c\", 0x44Eu, \"get_next\");\n    v6 = a1[2];\n    for ( j = v6 + 1; j <= 255 && !sub_40188A(*(_DWORD *)(v9 + 16), j); ++j )\n      ;\n    if ( j > 255 )\n    {\n      a1[1] = *(_QWORD *)(v9 + 8);\n      a1[2] = -1LL;\n    }\n    else\n    {\n      a1[2] = j;\n    }\n  }\n  else if ( v3 > 2 )\n  {\n    if ( v3 == 3 )\n    {\n      v6 = *(unsigned __int8 *)(v9 + 16);\n      a1[2] = -1LL;\n      a1[1] = *(_QWORD *)(v9 + 8);\n    }\n    else\n    {\n      if ( v3 != 4 )\nLABEL_53:\n        abort();\n      if ( *(_QWORD *)(v9 + 24) )\n      {\n        if ( a1[2] == -1LL )\n          a1[2] = 0LL;\n        ++a1[2];\n        v6 = *(unsigned __int8 *)(v9 + 16);\n        if ( a1[2] == *(_QWORD *)(v9 + 24) )\n        {\n          a1[1] = *(_QWORD *)(v9 + 8);\n          a1[2] = -1LL;\n        }\n      }\n      else\n      {\n        a1[1] = *(_QWORD *)(v9 + 8);\n        a1[2] = -1LL;\n        v6 = sub_402C37(a1, a2);\n      }\n    }\n  }\n  else if ( v3 )\n  {\n    if ( v3 != 1 )\n      goto LABEL_53;\n    if ( a1[2] == -1LL )\n      v4 = *(unsigned __int8 *)(v9 + 16);\n    else\n      v4 = a1[2] + 1LL;\n    a1[2] = v4;\n    v6 = a1[2];\n    if ( a1[2] == *(unsigned __int8 *)(v9 + 17) )\n    {\n      a1[1] = *(_QWORD *)(v9 + 8);\n      a1[2] = -1LL;\n    }\n  }\n  else\n  {\n    v6 = *(unsigned __int8 *)(v9 + 16);\n    a1[2] = -1LL;\n    a1[1] = *(_QWORD *)(v9 + 8);\n  }\n  return v6;\n}\n"], [4206543, "sub_402FCF", "__int64 __fastcall sub_402FCF(_QWORD *a1)\n{\n  unsigned int v2; // [rsp+18h] [rbp-108h]\n  int v3; // [rsp+1Ch] [rbp-104h]\n  char v4[256]; // [rsp+20h] [rbp-100h] BYREF\n\n  v2 = 256;\n  memset(v4, 0, sizeof(v4));\n  a1[2] = -2LL;\n  while ( 1 )\n  {\n    v3 = sub_402C37(a1, 0LL);\n    if ( v3 == -1 )\n      break;\n    v2 -= (unsigned __int8)v4[v3] ^ 1;\n    v4[v3] = 1;\n  }\n  return v2;\n}\n"], [4206701, "sub_40306D", "__int64 __fastcall sub_40306D(_QWORD *a1, __int64 a2)\n{\n  __int64 result; // rax\n  char *v3; // rax\n  __int64 v4; // rax\n  __int64 v5; // rax\n  bool v6; // [rsp+1Ah] [rbp-46h]\n  bool v7; // [rsp+1Bh] [rbp-45h]\n  int v8; // [rsp+1Ch] [rbp-44h] BYREF\n  int v9; // [rsp+20h] [rbp-40h] BYREF\n  unsigned int i; // [rsp+24h] [rbp-3Ch]\n  int v11; // [rsp+28h] [rbp-38h]\n  int v12; // [rsp+2Ch] [rbp-34h]\n  __int64 v13; // [rsp+30h] [rbp-30h]\n  __int64 v14; // [rsp+38h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+40h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+48h] [rbp-18h]\n  __int64 v17; // [rsp+50h] [rbp-10h]\n  __int64 v18; // [rsp+58h] [rbp-8h]\n\n  v13 = 0LL;\n  v14 = 0LL;\n  v11 = 0;\n  v12 = 0;\n  v15 = a1[3];\n  v16 = *(_QWORD *)(a2 + 24);\n  v17 = a1[1];\n  v18 = *(_QWORD *)(a2 + 8);\n  v6 = 1;\n  v7 = 1;\n  result = *(unsigned __int8 *)(a2 + 49) ^ 1u;\n  if ( *(_BYTE *)(a2 + 49) == 1 )\n  {\n    for ( i = 0; i <= 0xFF; ++i )\n    {\n      if ( ((*__ctype_b_loc())[i] & 0x100) != 0 )\n        ++v13;\n      if ( ((*__ctype_b_loc())[i] & 0x200) != 0 )\n        ++v14;\n    }\n    a1[2] = -2LL;\n    *(_QWORD *)(a2 + 16) = -2LL;\n    while ( v11 != -1 && v12 != -1 )\n    {\n      v11 = sub_402C37(a1, &v8);\n      v12 = sub_402C37((_QWORD *)a2, &v9);\n      if ( v7 && v9 != 2 && (!v6 || v8 == 2) )\n      {\n        v3 = gettext(\"misaligned [:upper:] and/or [:lower:] construct\");\n        error(1, 0, v3);\n      }\n      if ( v9 != 2 )\n      {\n        sub_402C0D((__int64)a1);\n        sub_402C0D(a2);\n        if ( v8 == 1 )\n          v4 = v13 - 1;\n        else\n          v4 = v14 - 1;\n        a1[3] -= v4;\n        if ( v9 == 1 )\n          v5 = v13 - 1;\n        else\n          v5 = v14 - 1;\n        *(_QWORD *)(a2 + 24) -= v5;\n      }\n      v6 = a1[2] == -1LL;\n      v7 = *(_QWORD *)(a2 + 16) == -1LL;\n    }\n    if ( a1[3] > v15 || *(_QWORD *)(a2 + 24) > v16 )\n      __assert_fail(\n        \"old_s1_len >= s1->length && old_s2_len >= s2->length\",\n        \"../../src/src/tr.c\",\n        0x4DEu,\n        \"validate_case_classes\");\n    a1[1] = v17;\n    result = a2;\n    *(_QWORD *)(a2 + 8) = v18;\n  }\n  return result;\n}\n"], [4207317, "sub_4032D5", "__int64 __fastcall sub_4032D5(__int64 a1)\n{\n  unsigned int v1; // eax\n  int v2; // eax\n  char *v3; // rax\n  __int64 result; // rax\n  int j; // [rsp+1Ch] [rbp-24h]\n  int k; // [rsp+1Ch] [rbp-24h]\n  __int64 i; // [rsp+20h] [rbp-20h]\n  unsigned __int64 v8; // [rsp+28h] [rbp-18h]\n  __int64 v9; // [rsp+30h] [rbp-10h]\n\n  v8 = 0LL;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  *(_BYTE *)(a1 + 48) = 0;\n  *(_BYTE *)(a1 + 50) = 0;\n  *(_BYTE *)(a1 + 49) = 0;\n  for ( i = *(_QWORD *)(*(_QWORD *)a1 + 8LL); i; i = *(_QWORD *)(i + 8) )\n  {\n    v9 = 0LL;\n    v1 = *(_DWORD *)i;\n    if ( *(_DWORD *)i == 2 )\n    {\n      *(_BYTE *)(a1 + 49) = 1;\n      for ( j = 0; j <= 255; ++j )\n      {\n        if ( sub_40188A(*(_DWORD *)(i + 16), j) )\n          ++v9;\n      }\n      v2 = *(_DWORD *)(i + 16);\n      if ( v2 != 6 && v2 != 10 )\n        *(_BYTE *)(a1 + 50) = 1;\n    }\n    else if ( v1 > 2 )\n    {\n      if ( v1 == 3 )\n      {\n        for ( k = 0; k <= 255; ++k )\n        {\n          if ( sub_401870(*(_BYTE *)(i + 16), k) )\n            ++v9;\n        }\n        *(_BYTE *)(a1 + 48) = 1;\n      }\n      else\n      {\n        if ( v1 != 4 )\nLABEL_32:\n          abort();\n        if ( *(_QWORD *)(i + 24) )\n        {\n          v9 = *(_QWORD *)(i + 24);\n        }\n        else\n        {\n          *(_QWORD *)(a1 + 40) = i;\n          ++*(_QWORD *)(a1 + 32);\n        }\n      }\n    }\n    else if ( v1 )\n    {\n      if ( v1 != 1 )\n        goto LABEL_32;\n      if ( *(_BYTE *)(i + 17) < *(_BYTE *)(i + 16) )\n        __assert_fail(\"p->u.range.last_char >= p->u.range.first_char\", \"../../src/src/tr.c\", 0x508u, \"get_spec_stats\");\n      v9 = *(unsigned __int8 *)(i + 17) - *(unsigned __int8 *)(i + 16) + 1;\n    }\n    else\n    {\n      v9 = 1LL;\n    }\n    if ( v8 > v8 + v9 || v8 + v9 == -1LL )\n    {\n      v3 = gettext(\"too many characters in set\");\n      error(1, 0, v3);\n    }\n    v8 += v9;\n  }\n  result = a1;\n  *(_QWORD *)(a1 + 24) = v8;\n  return result;\n}\n"], [4207893, "sub_403515", "unsigned __int64 __fastcall sub_403515(_QWORD *a1)\n{\n  unsigned __int64 result; // rax\n  __int64 v2; // rdx\n\n  sub_4032D5((__int64)a1);\n  result = (unsigned __int8)byte_60B262;\n  if ( byte_60B262 )\n  {\n    v2 = (int)sub_402FCF(a1);\n    result = (unsigned __int64)a1;\n    a1[3] = v2;\n  }\n  return result;\n}\n"], [4207953, "sub_403551", "_QWORD *__fastcall sub_403551(_QWORD *a1, unsigned __int64 a2)\n{\n  _QWORD *result; // rax\n\n  sub_4032D5((__int64)a1);\n  result = (_QWORD *)a1[3];\n  if ( (unsigned __int64)result <= a2 )\n  {\n    result = (_QWORD *)a1[4];\n    if ( result == (_QWORD *)1 )\n    {\n      *(_QWORD *)(a1[5] + 24LL) = a2 - a1[3];\n      result = a1;\n      a1[3] = a2;\n    }\n  }\n  return result;\n}\n"], [4208053, "sub_4035B5", "__int64 __fastcall sub_4035B5(_QWORD *a1)\n{\n  __int64 result; // rax\n\n  a1[1] = sub_406D88(32LL);\n  *a1 = a1[1];\n  result = *a1;\n  *(_QWORD *)(*a1 + 8LL) = 0LL;\n  return result;\n}\n"], [4208123, "sub_4035FB", "_BOOL8 __fastcall sub_4035FB(const char *a1, __int64 a2)\n{\n  bool v2; // al\n  bool v4; // [rsp+1Fh] [rbp-21h]\n  void *v5[4]; // [rsp+20h] [rbp-20h] BYREF\n\n  v2 = (unsigned __int8)sub_401B0A(a1, v5) && (unsigned __int8)sub_4027FF((__int64 *)v5, a2);\n  v4 = v2;\n  sub_401ADD(v5);\n  return v4;\n}\n"], [4208222, "sub_40365E", "__int64 __fastcall sub_40365E(__int64 a1, __int64 a2)\n{\n  unsigned int v2; // eax\n  char *v3; // rax\n  __int64 result; // rax\n  __int64 v5; // [rsp+18h] [rbp-8h]\n\n  if ( !byte_60B264 )\n    __assert_fail(\"translating\", \"../../src/src/tr.c\", 0x57Au, \"string2_extend\");\n  if ( *(_QWORD *)(a1 + 24) <= *(_QWORD *)(a2 + 24) )\n    __assert_fail(\"s1->length > s2->length\", \"../../src/src/tr.c\", 0x57Bu, \"string2_extend\");\n  if ( !*(_QWORD *)(a2 + 24) )\n    __assert_fail(\"s2->length > 0\", \"../../src/src/tr.c\", 0x57Cu, \"string2_extend\");\n  v5 = *(_QWORD *)(a2 + 8);\n  v2 = *(_DWORD *)v5;\n  if ( *(_DWORD *)v5 == 2 )\n  {\n    v3 = gettext(\"when translating with string1 longer than string2,\\nthe latter string must not end with a character class\");\n    error(1, 0, v3);\n    abort();\n  }\n  if ( v2 > 2 )\n  {\n    if ( v2 == 3 )\n      abort();\n    if ( v2 != 4 )\nLABEL_20:\n      abort();\n    goto LABEL_18;\n  }\n  if ( !v2 )\n  {\nLABEL_18:\n    sub_40235F(a2, *(_BYTE *)(v5 + 16), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a2 + 24));\n    goto LABEL_21;\n  }\n  if ( v2 != 1 )\n    goto LABEL_20;\n  sub_40235F(a2, *(_BYTE *)(v5 + 17), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a2 + 24));\nLABEL_21:\n  result = a2;\n  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);\n  return result;\n}\n"], [4208551, "sub_4037A7", "__int64 __fastcall sub_4037A7(_QWORD *a1)\n{\n  int v2; // [rsp+18h] [rbp-8h]\n  int v3; // [rsp+1Ch] [rbp-4h]\n\n  a1[2] = -2LL;\n  v2 = sub_402C37(a1, 0LL);\n  if ( v2 == -1 )\n    return 0LL;\n  while ( 1 )\n  {\n    v3 = sub_402C37(a1, 0LL);\n    if ( v3 == -1 )\n      break;\n    if ( v3 != v2 )\n      return 0LL;\n  }\n  return 1LL;\n}\n"], [4208658, "sub_403812", "void __fastcall sub_403812(__int64 a1, __int64 a2)\n{\n  char *v2; // rax\n  char *v3; // rax\n  char *v4; // rax\n  char *v5; // rax\n  char *v6; // rax\n  char *v7; // rax\n  char *v8; // rax\n\n  sub_403515((_QWORD *)a1);\n  if ( *(_QWORD *)(a1 + 32) )\n  {\n    v2 = gettext(\"the [c*] repeat construct may not appear in string1\");\n    error(1, 0, v2);\n  }\n  if ( a2 )\n  {\n    sub_403551((_QWORD *)a2, *(_QWORD *)(a1 + 24));\n    if ( *(_QWORD *)(a2 + 32) > 1uLL )\n    {\n      v3 = gettext(\"only one [c*] repeat construct may appear in string2\");\n      error(1, 0, v3);\n    }\n    if ( byte_60B264 )\n    {\n      if ( *(_BYTE *)(a2 + 48) )\n      {\n        v4 = gettext(\"[=c=] expressions may not appear in string2 when translating\");\n        error(1, 0, v4);\n      }\n      if ( *(_BYTE *)(a2 + 50) )\n      {\n        v5 = gettext(\"when translating, the only character classes that may appear in\\nstring2 are `upper' and `lower'\");\n        error(1, 0, v5);\n      }\n      sub_40306D((_QWORD *)a1, a2);\n      if ( *(_QWORD *)(a1 + 24) > *(_QWORD *)(a2 + 24) && byte_60B263 != 1 )\n      {\n        if ( !*(_QWORD *)(a2 + 24) )\n        {\n          v6 = gettext(\"when not truncating set1, string2 must be non-empty\");\n          error(1, 0, v6);\n        }\n        sub_40365E(a1, a2);\n      }\n      if ( byte_60B262\n        && *(_BYTE *)(a1 + 49)\n        && (*(_QWORD *)(a2 + 24) != *(_QWORD *)(a1 + 24) || (unsigned __int8)sub_4037A7((_QWORD *)a2) != 1) )\n      {\n        v7 = gettext(\n               \"when translating with complemented character classes,\\n\"\n               \"string2 must map all characters in the domain to one\");\n        error(1, 0, v7);\n      }\n    }\n    else if ( *(_QWORD *)(a2 + 32) )\n    {\n      v8 = gettext(\"the [c*] construct may appear in string2 only when translating\");\n      error(1, 0, v8);\n    }\n  }\n}\n"], [4209187, "sub_403A23", "__int64 __fastcall sub_403A23(__int64 a1, __int64 a2, __int64 (__fastcall *a3)(__int64, __int64))\n{\n  __int64 result; // rax\n  char *v4; // rbx\n  int *v5; // rax\n  int v7; // [rsp+28h] [rbp-38h]\n  unsigned __int64 v8; // [rsp+30h] [rbp-30h]\n  unsigned __int64 v9; // [rsp+38h] [rbp-28h]\n  __int64 n; // [rsp+40h] [rbp-20h]\n  unsigned __int64 v11; // [rsp+48h] [rbp-18h]\n\n  v7 = 0x7FFFFFFF;\n  v8 = 0LL;\n  v9 = 0LL;\n  while ( 1 )\n  {\n    if ( v8 < v9 )\n      goto LABEL_5;\n    result = a3(a1, a2);\n    v9 = result;\n    if ( !result )\n      return result;\n    v8 = 0LL;\nLABEL_5:\n    v11 = v8;\n    if ( v7 == 0x7FFFFFFF )\n    {\n      while ( v8 < v9 && byte_60D280[(unsigned __int8)sub_4015CD(*(_BYTE *)(a1 + v8))] != 1 )\n        v8 += 2LL;\n      if ( v8 == v9 && byte_60D280[(unsigned __int8)sub_4015CD(*(_BYTE *)(v8 - 1 + a1))] )\n        --v8;\n      if ( v8 < v9 )\n      {\n        v7 = *(char *)(a1 + v8);\n        n = v8 - v11 + 1;\n        if ( v8 && *(char *)(v8 - 1 + a1) == v7 )\n          n = v8 - v11;\n        ++v8;\n      }\n      else\n      {\n        n = v9 - v11;\n      }\n      if ( n && fwrite_unlocked((const void *)(a1 + v11), 1uLL, n, stdout) != n )\n      {\n        v4 = gettext(\"write error\");\n        v5 = __errno_location();\n        error(1, *v5, v4);\n      }\n    }\n    if ( v7 != 0x7FFFFFFF )\n    {\n      while ( v8 < v9 && *(char *)(a1 + v8) == v7 )\n        ++v8;\n      if ( v8 < v9 )\n        v7 = 0x7FFFFFFF;\n    }\n  }\n}\n"], [4209717, "sub_403C35", "__int64 __fastcall sub_403C35(__int64 a1, __int64 a2)\n{\n  char *v2; // rbx\n  int *v3; // rax\n  __int64 v5; // [rsp+18h] [rbp-18h]\n\n  v5 = sub_40637D(0LL, a1, a2);\n  if ( v5 == -1 )\n  {\n    v2 = gettext(\"read error\");\n    v3 = __errno_location();\n    error(1, *v3, v2);\n  }\n  return v5;\n}\n"], [4209817, "sub_403C99", "unsigned __int64 __fastcall sub_403C99(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rax\n  unsigned __int64 v4; // [rsp+18h] [rbp-18h]\n  unsigned __int64 i; // [rsp+20h] [rbp-10h]\n  unsigned __int64 j; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v7; // [rsp+28h] [rbp-8h]\n\n  do\n  {\n    v7 = sub_403C35(a1, a2);\n    if ( !v7 )\n      return 0LL;\n    for ( i = 0LL; i < v7 && byte_60D380[(unsigned __int8)sub_4015CD(*(_BYTE *)(a1 + i))] != 1; ++i )\n      ;\n    v4 = i;\n    for ( j = i + 1; j < v7; ++j )\n    {\n      if ( byte_60D380[(unsigned __int8)sub_4015CD(*(_BYTE *)(a1 + j))] != 1 )\n      {\n        v3 = v4++;\n        *(_BYTE *)(v3 + a1) = *(_BYTE *)(a1 + j);\n      }\n    }\n  }\n  while ( !v4 );\n  return v4;\n}\n"], [4210066, "sub_403D92", "unsigned __int64 __fastcall sub_403D92(__int64 a1, __int64 a2)\n{\n  unsigned __int64 i; // [rsp+10h] [rbp-20h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-18h]\n\n  v4 = sub_403C35(a1, a2);\n  for ( i = 0LL; i < v4; ++i )\n    *(_BYTE *)(a1 + i) = byte_60D480[(unsigned __int8)sub_4015CD(*(_BYTE *)(a1 + i))];\n  return v4;\n}\n"], [4210192, "sub_403E10", "__int64 __fastcall sub_403E10(_QWORD *a1, char a2, __int64 a3)\n{\n  __int64 result; // rax\n  unsigned __int64 i; // [rsp+28h] [rbp-8h]\n\n  a1[2] = -2LL;\n  for ( result = sub_402C37(a1, 0LL); (_DWORD)result != -1; result = sub_402C37(a1, 0LL) )\n    *(_BYTE *)((int)result + a3) = 1;\n  if ( a2 )\n  {\n    for ( i = 0LL; i <= 0xFF; ++i )\n    {\n      result = *(unsigned __int8 *)(a3 + i) == 0;\n      *(_BYTE *)(i + a3) = result;\n    }\n  }\n  return result;\n}\n"], [4210346, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  bool v3; // al\n  int v4; // eax\n  int v5; // eax\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *v9; // rax\n  char *v10; // rax\n  __int64 v11; // rbx\n  char *v12; // rax\n  char *v13; // rax\n  char *v14; // rbx\n  int *v15; // rax\n  size_t v16; // rax\n  char *v17; // rbx\n  int *v18; // rax\n  char *v19; // rbx\n  int *v20; // rax\n  int v21; // [rsp+1Ch] [rbp-E4h] BYREF\n  int v22; // [rsp+20h] [rbp-E0h] BYREF\n  int i; // [rsp+24h] [rbp-DCh]\n  int c; // [rsp+28h] [rbp-D8h]\n  int v25; // [rsp+2Ch] [rbp-D4h]\n  int v26; // [rsp+30h] [rbp-D0h]\n  int v27; // [rsp+34h] [rbp-CCh]\n  int v28; // [rsp+38h] [rbp-C8h]\n  int v29; // [rsp+3Ch] [rbp-C4h]\n  int v30; // [rsp+40h] [rbp-C0h]\n  int v31; // [rsp+44h] [rbp-BCh]\n  char *v32; // [rsp+48h] [rbp-B8h]\n  char *v33; // [rsp+50h] [rbp-B0h]\n  size_t n; // [rsp+58h] [rbp-A8h]\n  char *v35; // [rsp+60h] [rbp-A0h]\n  size_t v36; // [rsp+68h] [rbp-98h]\n  char v37; // [rsp+70h] [rbp-90h] BYREF\n  char v38; // [rsp+B0h] [rbp-50h] BYREF\n\n  v33 = &v37;\n  v32 = &v38;\n  sub_404ADA(*a2, a2, a3);\n  setlocale(6, locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_407750(sub_4048CE);\n  while ( 1 )\n  {\n    v25 = getopt_long(a1, a2, \"+cCdst\", &longopts, 0LL);\n    if ( v25 == -1 )\n    {\n      v26 = a1 - optind;\n      v3 = a1 - optind == 2 && byte_60B261 != 1;\n      byte_60B264 = v3;\n      if ( byte_60B261 == byte_60B260 )\n        v4 = 2;\n      else\n        v4 = 1;\n      v27 = v4;\n      if ( (unsigned __int8)byte_60B261 > (int)(unsigned __int8)byte_60B260 )\n        v5 = 1;\n      else\n        v5 = 2;\n      v28 = v5;\n      if ( v26 < v27 )\n      {\n        if ( v26 )\n        {\n          v7 = sub_404BE5(a2[a1 - 1]);\n          v8 = gettext(\"missing operand after %s\");\n          error(0, 0, v8, v7);\n          if ( byte_60B260 )\n            v9 = \"Two strings must be given when both deleting and squeezing repeats.\";\n          else\n            v9 = \"Two strings must be given when translating.\";\n          v10 = gettext(v9);\n          fprintf(stderr, \"%s\\n\", v10);\n        }\n        else\n        {\n          v6 = gettext(\"missing operand\");\n          error(0, 0, v6);\n        }\n        sub_401737(1);\n      }\n      if ( v28 < v26 )\n      {\n        v11 = sub_404BE5((&a2[optind])[v28]);\n        v12 = gettext(\"extra operand %s\");\n        error(0, 0, v12, v11);\n        if ( v26 == 2 )\n        {\n          v13 = gettext(\"Only one string may be given when deleting without squeezing repeats.\");\n          fprintf(stderr, \"%s\\n\", v13);\n        }\n        sub_401737(1);\n      }\n      sub_4035B5(v33);\n      if ( !sub_4035FB(a2[optind], (__int64)v33) )\n        exit(1);\n      if ( v26 == 2 )\n      {\n        sub_4035B5(v32);\n        if ( !sub_4035FB(a2[optind + 1], (__int64)v32) )\n          exit(1);\n      }\n      else\n      {\n        v32 = 0LL;\n      }\n      sub_403812((__int64)v33, (__int64)v32);\n      sub_404AA0(stdin, 2LL);\n      if ( byte_60B260 && v26 == 1 )\n      {\n        sub_403E10(v33, byte_60B262, (__int64)byte_60D280);\n        sub_403A23((__int64)&unk_60B280, 0x2000LL, sub_403C35);\n      }\n      else if ( byte_60B261 && v26 == 1 )\n      {\n        sub_403E10(v33, byte_60B262, (__int64)byte_60D380);\n        while ( 1 )\n        {\n          n = sub_403C99((__int64)&unk_60B280, 0x2000LL);\n          if ( !n )\n            break;\n          if ( fwrite_unlocked(&unk_60B280, 1uLL, n, stdout) != n )\n          {\n            v14 = gettext(\"write error\");\n            v15 = __errno_location();\n            error(1, *v15, v14);\n          }\n        }\n      }\n      else if ( byte_60B260 && byte_60B261 && v26 == 2 )\n      {\n        sub_403E10(v33, byte_60B262, (__int64)byte_60D380);\n        sub_403E10(v32, 0, (__int64)byte_60D280);\n        sub_403A23((__int64)&unk_60B280, 0x2000LL, (__int64 (__fastcall *)(__int64, __int64))sub_403C99);\n      }\n      else if ( byte_60B264 )\n      {\n        if ( !byte_60B262 )\n        {\n          for ( c = 0; c <= 255; ++c )\n            byte_60D480[c] = c;\n          *((_QWORD *)v33 + 2) = -2LL;\n          *((_QWORD *)v32 + 2) = -2LL;\n          while ( 1 )\n          {\n            v30 = sub_402C37(v33, &v21);\n            v31 = sub_402C37(v32, &v22);\n            if ( v21 || v22 != 1 )\n            {\n              if ( v21 != 1 || v22 )\n              {\n                if ( v30 == -1 || v31 == -1 )\n                {\n                  if ( v30 != -1 && byte_60B263 != 1 )\n                    __assert_fail(\"c1 == -1 || truncate_set1\", \"../../src/src/tr.c\", 0x785u, \"main\");\n                  goto LABEL_106;\n                }\n                byte_60D480[v30] = v31;\n              }\n              else\n              {\n                for ( c = 0; c <= 255; ++c )\n                {\n                  if ( ((*__ctype_b_loc())[c] & 0x100) != 0 )\n                    byte_60D480[c] = tolower(c);\n                }\n              }\n            }\n            else\n            {\n              for ( c = 0; c <= 255; ++c )\n              {\n                if ( ((*__ctype_b_loc())[c] & 0x200) != 0 )\n                  byte_60D480[c] = toupper(c);\n              }\n            }\n            if ( v22 != 2 )\n            {\n              sub_402C0D((__int64)v33);\n              sub_402C0D((__int64)v32);\n            }\n          }\n        }\n        v35 = byte_60D380;\n        sub_403E10(v33, 0, (__int64)byte_60D380);\n        *((_QWORD *)v32 + 2) = -2LL;\n        for ( i = 0; i <= 255; ++i )\n          byte_60D480[i] = i;\n        for ( i = 0; i <= 255; ++i )\n        {\n          if ( v35[i] != 1 )\n          {\n            v29 = sub_402C37(v32, 0LL);\n            if ( v29 == -1 && byte_60B263 != 1 )\n              __assert_fail(\"ch != -1 || truncate_set1\", \"../../src/src/tr.c\", 0x74Fu, \"main\");\n            if ( v29 == -1 )\n              break;\n            byte_60D480[i] = v29;\n          }\n        }\nLABEL_106:\n        if ( byte_60B260 )\n        {\n          sub_403E10(v32, 0, (__int64)byte_60D280);\n          sub_403A23((__int64)&unk_60B280, 0x2000LL, (__int64 (__fastcall *)(__int64, __int64))sub_403D92);\n        }\n        else\n        {\n          while ( 1 )\n          {\n            v36 = sub_403D92((__int64)&unk_60B280, 0x2000LL);\n            if ( !v36 )\n              break;\n            v16 = fwrite_unlocked(&unk_60B280, 1uLL, v36, stdout);\n            if ( v16 != v36 )\n            {\n              v17 = gettext(\"write error\");\n              v18 = __errno_location();\n              error(1, *v18, v17);\n            }\n          }\n        }\n      }\n      if ( close(0) )\n      {\n        v19 = gettext(\"standard input\");\n        v20 = __errno_location();\n        error(1, *v20, v19);\n      }\n      exit(0);\n    }\n    if ( v25 == 99 )\n      goto LABEL_12;\n    if ( v25 > 99 )\n    {\n      switch ( v25 )\n      {\n        case 's':\n          byte_60B260 = 1;\n          break;\n        case 't':\n          byte_60B263 = 1;\n          break;\n        case 'd':\n          byte_60B261 = 1;\n          break;\n        default:\n          goto LABEL_18;\n      }\n    }\n    else\n    {\n      if ( v25 == -130 )\n        sub_401737(0);\n      if ( v25 != 67 )\n      {\n        if ( v25 == -131 )\n        {\n          sub_406B20(\n            (_DWORD)stdout,\n            (unsigned int)\"tr\",\n            (unsigned int)\"GNU coreutils\",\n            (_DWORD)off_60B1D0,\n            (unsigned int)\"Jim Meyering\",\n            0,\n            (char)a2);\n          exit(0);\n        }\nLABEL_18:\n        sub_401737(1);\n      }\nLABEL_12:\n      byte_60B262 = 1;\n    }\n  }\n}\n"], [4212921, "sub_4048B9", "__int64 __fastcall sub_4048B9(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_60D588 = a1;\n  return result;\n}\n"], [4212942, "sub_4048CE", "__int64 sub_4048CE()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_40744B(stdout) && (byte_60D588 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_60D580 )\n    {\n      v0 = (const char *)sub_4061FE(qword_60D580);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_40744B(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4213177, "sub_4049B9", "_BYTE *__fastcall sub_4049B9(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4213282, "sub_404A22", "size_t __fastcall sub_404A22(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4213360, "sub_404A70", "int __fastcall sub_404A70(int a1, off_t a2, off_t a3, int a4)\n{\n  return posix_fadvise(a1, a2, a3, a4);\n}\n"], [4213408, "sub_404AA0", "void __fastcall sub_404AA0(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    sub_404A70(v2, 0LL, 0LL, a2);\n  }\n}\n"], [4213466, "sub_404ADA", "char *__fastcall sub_404ADA(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_60D590 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4213697, "sub_404BC1", "__int64 __fastcall sub_404BC1(unsigned int a1, __int64 a2)\n{\n  return sub_406070(a1, 6LL, a2);\n}\n"], [4213733, "sub_404BE5", "__int64 __fastcall sub_404BE5(__int64 a1)\n{\n  return sub_404BC1(0, a1);\n}\n"], [4213764, "sub_404C04", "__int64 __fastcall sub_404C04(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60D5A0;\n  v4 = sub_406EAC(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4213837, "sub_404C4D", "__int64 __fastcall sub_404C4D(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60D5A0;\n  return *(unsigned int *)v1;\n}\n"], [4213867, "sub_404C6B", "__int64 *__fastcall sub_404C6B(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_60D5A0;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4213903, "sub_404C8F", "__int64 __fastcall sub_404C8F(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_60D5A0;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4214039, "sub_404D17", "__int64 __fastcall sub_404D17(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_60D5A0;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4214090, "sub_404D4A", "__int64 *__fastcall sub_404D4A(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_60D5A0;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4214180, "sub_404DA4", "_QWORD *__fastcall sub_404DA4(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4214300, "sub_404E1C", "char *__fastcall sub_404E1C(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'\";\n  return v3;\n}\n"], [4214361, "sub_404E59", "unsigned __int64 __fastcall sub_404E59(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_404E1C((const char *)L\"`'\", a5);\n        a9 = sub_404E1C((const char *)L\"'\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_404E59(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4217508, "sub_405AA4", "unsigned __int64 __fastcall sub_405AA4(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_60D5A0;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_404E59(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4217668, "sub_405B44", "__int64 __fastcall sub_405B44(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_405B76(a1, a2, 0LL, a3);\n}\n"], [4217718, "sub_405B76", "__int64 __fastcall sub_405B76(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_60D5A0;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_404E59(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_406D6E(v10);\n  sub_404E59(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4218018, "sub_405CA2", "void sub_405CA2()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_60B200;\n  for ( i = 1; i < dword_60B1E0; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_60D5E0 )\n  {\n    free(ptr[1]);\n    qword_60B1F0 = 256LL;\n    off_60B1F8 = &unk_60D5E0;\n  }\n  if ( ptr != (void **)&qword_60B1F0 )\n  {\n    free(ptr);\n    off_60B200 = &qword_60B1F0;\n  }\n  dword_60B1E0 = 1;\n}\n"], [4218189, "sub_405D4D", "void *__fastcall sub_405D4D(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_60B200;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60B1E0 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_60B200 == &qword_60B1F0;\n    if ( off_60B200 == &qword_60B1F0 )\n      v4 = 0LL;\n    else\n      v4 = off_60B200;\n    v12 = (__int64 *)sub_406DBD(v4, 16 * v14);\n    off_60B200 = v12;\n    if ( v9 )\n    {\n      v5 = off_60B1F8;\n      *v12 = qword_60B1F0;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_60B1E0], 0, 16 * (v14 - (unsigned int)dword_60B1E0));\n    dword_60B1E0 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_404E59((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_60D5E0 )\n      free(ptr);\n    ptr = (void *)sub_406D6E(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_404E59((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4218835, "sub_405FD3", "void *__fastcall sub_405FD3(int a1, __int64 a2)\n{\n  return sub_405D4D(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_60D5A0);\n}\n"], [4218878, "sub_405FFE", "void *__fastcall sub_405FFE(int a1, __int64 a2, size_t a3)\n{\n  return sub_405D4D(a1, a2, a3, (__int64)&qword_60D5A0);\n}\n"], [4218922, "sub_40602A", "void *__fastcall sub_40602A(__int64 a1)\n{\n  return sub_405FD3(0, a1);\n}\n"], [4218953, "sub_406049", "void *__fastcall sub_406049(__int64 a1, size_t a2)\n{\n  return sub_405FFE(0, a1, a2);\n}\n"], [4218992, "sub_406070", "void *__fastcall sub_406070(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_404DA4(v5, a2);\n  return sub_405D4D(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4219057, "sub_4060B1", "void *__fastcall sub_4060B1(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_404DA4(v7, a2);\n  return sub_405D4D(a1, a3, a4, (__int64)v7);\n}\n"], [4219120, "sub_4060F0", "void *__fastcall sub_4060F0(int a1, __int64 a2)\n{\n  return sub_406070(0, a1, a2);\n}\n"], [4219156, "sub_406114", "void *__fastcall sub_406114(int a1, __int64 a2, size_t a3)\n{\n  return sub_4060B1(0, a1, a2, a3);\n}\n"], [4219200, "sub_406140", "void *__fastcall sub_406140(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_60D5A0;\n  v4[1] = qword_60D5A8;\n  v4[2] = qword_60D5B0;\n  v4[3] = qword_60D5B8;\n  v4[4] = qword_60D5C0;\n  v4[5] = qword_60D5C8;\n  v4[6] = qword_60D5D0;\n  sub_404C8F(v4, a3, 1);\n  return sub_405D4D(0, a1, a2, (__int64)v4);\n}\n"], [4219348, "sub_4061D4", "void *__fastcall sub_4061D4(__int64 a1, unsigned __int8 a2)\n{\n  return sub_406140(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4219390, "sub_4061FE", "void *__fastcall sub_4061FE(__int64 a1)\n{\n  return sub_4061D4(a1, 0x3Au);\n}\n"], [4219421, "sub_40621D", "void *__fastcall sub_40621D(__int64 a1, size_t a2)\n{\n  return sub_406140(a1, a2, 0x3Au);\n}\n"], [4219463, "sub_406247", "__int64 __fastcall sub_406247(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_40627D(a1, a2, a3, a4, -1LL);\n}\n"], [4219517, "sub_40627D", "void *__fastcall sub_40627D(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_60D5A0;\n  v8[1] = qword_60D5A8;\n  v8[2] = qword_60D5B0;\n  v8[3] = qword_60D5B8;\n  v8[4] = qword_60D5C0;\n  v8[5] = qword_60D5C8;\n  v8[6] = qword_60D5D0;\n  sub_404D4A(v8, a2, a3);\n  return sub_405D4D(a1, a4, a5, (__int64)v8);\n}\n"], [4219668, "sub_406314", "__int64 __fastcall sub_406314(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_406247(0, a1, a2, a3);\n}\n"], [4219715, "sub_406343", "void *__fastcall sub_406343(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_40627D(0, a1, a2, a3, a4);\n}\n"], [4219773, "sub_40637D", "ssize_t __fastcall sub_40637D(int a1, void *a2, size_t a3)\n{\n  ssize_t result; // rax\n  ssize_t v5; // [rsp+28h] [rbp-8h]\n\nLABEL_1:\n  for ( result = read(a1, a2, a3); ; result = read(a1, a2, 0x7FFFE000uLL) )\n  {\n    v5 = result;\n    if ( result >= 0 )\n      break;\n    if ( *__errno_location() == 4 )\n      goto LABEL_1;\n    if ( *__errno_location() != 22 || a3 <= 0x7FFFE000 )\n      return v5;\n    a3 = 2147475456LL;\n  }\n  return result;\n}\n"], [4219886, "sub_4063EE", "int __fastcall sub_4063EE(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4221401, "sub_4069D9", "int __fastcall sub_4069D9(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_4063EE(a1, a2, a3, a4, a5, i);\n}\n"], [4221511, "sub_406A47", "int __fastcall sub_406A47(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_4063EE(a1, a2, a3, a4, v8, i);\n}\n"], [4221728, "sub_406B20", "int sub_406B20(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_406A47(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4221910, "sub_406BD6", "int sub_406BD6()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4222015, "sub_406C3F", "__int64 __fastcall sub_406C3F(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_406F0A(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_406D88(a2 * a1);\n}\n"], [4222077, "sub_406C7D", "__int64 __fastcall sub_406C7D(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_406F0A(a1, a2, v4);\n  return sub_406DBD(a1, a3 * a2);\n}\n"], [4222153, "sub_406CC9", "__int64 __fastcall sub_406CC9(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_406F0A(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_406DBD(a1, a3 * v6);\n}\n"], [4222318, "sub_406D6E", "__int64 __fastcall sub_406D6E(__int64 a1)\n{\n  return sub_406D88(a1);\n}\n"], [4222344, "sub_406D88", "void *__fastcall sub_406D88(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_406F0A(a1, a2, v2);\n  return v4;\n}\n"], [4222397, "sub_406DBD", "void *__fastcall sub_406DBD(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_406F0A(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4222494, "sub_406E1E", "__int64 __fastcall sub_406E1E(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_406CC9(a1, a2, 1uLL);\n}\n"], [4222536, "sub_406E48", "void *__fastcall sub_406E48(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_406D88(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4222579, "sub_406E73", "void *__fastcall sub_406E73(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_406F0A(a1, a2, v2);\n  return v4;\n}\n"], [4222636, "sub_406EAC", "void *__fastcall sub_406EAC(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_406D88(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4222685, "sub_406EDD", "void *__fastcall sub_406EDD(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_406EAC(a1, v1 + 1);\n}\n"], [4222730, "sub_406F0A", "void __noreturn sub_406F0A()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4222783, "sub_406F3F", "__int64 __fastcall sub_406F3F(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4222878, "sub_406F9E", "__int64 __fastcall sub_406F9E(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_406F3F(a1, a2) )\n    ;\n  return i;\n}\n"], [4222943, "sub_406FDF", "__int64 __fastcall sub_406FDF(const char *a1, char **a2, int a3, uintmax_t *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  uintmax_t v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoumax\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoumax(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_406F9E(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_406F3F(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_406F9E(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_406F3F(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_406F9E(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_406F9E(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_406F3F(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_406F9E(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_406F9E(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_406F9E(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_406F9E(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4224075, "sub_40744B", "__int64 __fastcall sub_40744B(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = (unsigned int)sub_4074D6(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4224214, "sub_4074D6", "int __fastcall sub_4074D6(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_4075BE(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4224395, "sub_40758B", "__int64 __fastcall sub_40758B(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_407609(a1, 0LL, 1LL);\n  return result;\n}\n"], [4224446, "sub_4075BE", "int __fastcall sub_4075BE(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_40758B(a1);\n  return fflush(a1);\n}\n"], [4224521, "sub_407609", "int __fastcall sub_407609(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4224720, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_60AE18 - off_60AE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_60AE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4224832, "fini", "void fini(void)\n{\n  ;\n}\n"], [4224848, "sub_407750", "int __fastcall sub_407750(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_60B1C8 )\n    v1 = (void *)qword_60B1C8;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4224876, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]