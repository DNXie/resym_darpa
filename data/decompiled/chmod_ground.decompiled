[[4199536, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4199568, "sub_401490", "__int64 sub_401490()\n{\n  return qword_60E010();\n}\n"], [4199584, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4199600, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4199616, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4199632, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4199648, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4199664, ".strcpy", "// attributes: thunk\nchar *strcpy(char *dest, const char *src)\n{\n  return strcpy(dest, src);\n}\n"], [4199680, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4199696, ".qsort", "// attributes: thunk\nvoid qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)\n{\n  qsort(base, nmemb, size, compar);\n}\n"], [4199712, ".fcntl", "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\n  return fcntl(fd, cmd);\n}\n"], [4199728, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4199744, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4199760, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4199776, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4199792, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4199808, ".__lxstat", "// attributes: thunk\nint __lxstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _lxstat(ver, filename, stat_buf);\n}\n"], [4199824, ".openat", "// attributes: thunk\nint openat(int fd, const char *file, int oflag, ...)\n{\n  return openat(fd, file, oflag);\n}\n"], [4199840, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4199856, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4199872, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4199888, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4199904, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4199920, ".__fxstatat", "// attributes: thunk\nint __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)\n{\n  return _fxstatat(ver, fildes, filename, stat_buf, flag);\n}\n"], [4199936, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4199952, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4199968, ".__assert_fail", "// attributes: thunk\nvoid __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\n{\n  _assert_fail(assertion, file, line, function);\n}\n"], [4199984, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4200000, ".close", "// attributes: thunk\nint close(int fd)\n{\n  return close(fd);\n}\n"], [4200016, ".closedir", "// attributes: thunk\nint closedir(DIR *dirp)\n{\n  return closedir(dirp);\n}\n"], [4200032, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4200048, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4200064, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4200080, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4200096, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4200112, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4200128, ".dirfd", "// attributes: thunk\nint dirfd(DIR *dirp)\n{\n  return dirfd(dirp);\n}\n"], [4200144, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4200160, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4200176, ".umask", "// attributes: thunk\n__mode_t umask(__mode_t mask)\n{\n  return umask(mask);\n}\n"], [4200192, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4200208, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4200224, ".__xstat", "// attributes: thunk\nint __xstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _xstat(ver, filename, stat_buf);\n}\n"], [4200240, ".readdir", "// attributes: thunk\nstruct dirent *readdir(DIR *dirp)\n{\n  return readdir(dirp);\n}\n"], [4200256, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4200272, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4200288, ".fchmodat", "// attributes: thunk\nint fchmodat(int fd, const char *file, __mode_t mode, int flag)\n{\n  return fchmodat(fd, file, mode, flag);\n}\n"], [4200304, ".__fxstat", "// attributes: thunk\nint __fxstat(int ver, int fildes, struct stat *stat_buf)\n{\n  return _fxstat(ver, fildes, stat_buf);\n}\n"], [4200320, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4200336, ".fchdir", "// attributes: thunk\nint fchdir(int fd)\n{\n  return fchdir(fd);\n}\n"], [4200352, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4200368, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4200384, ".memmove", "// attributes: thunk\nvoid *memmove(void *dest, const void *src, size_t n)\n{\n  return memmove(dest, src, n);\n}\n"], [4200400, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4200416, ".open", "// attributes: thunk\nint open(const char *file, int oflag, ...)\n{\n  return open(file, oflag);\n}\n"], [4200432, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4200448, ".fdopendir", "// attributes: thunk\nDIR *fdopendir(int fd)\n{\n  return fdopendir(fd);\n}\n"], [4200464, ".fstatfs", "// attributes: thunk\nint fstatfs(int fildes, struct statfs *buf)\n{\n  return fstatfs(fildes, buf);\n}\n"], [4200480, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4200496, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4200512, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4200528, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4200544, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4200560, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4200576, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4200624, "sub_4018B0", "signed __int64 sub_4018B0()\n{\n  signed __int64 result; // rax\n\n  result = &unk_60E26F - &unk_60E268;\n  if ( (unsigned __int64)(&unk_60E26F - &unk_60E268) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4200672, "sub_4018E0", "__int64 sub_4018E0()\n{\n  return 0LL;\n}\n"], [4200736, "sub_401920", "signed __int64 sub_401920()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_60E2D8 )\n  {\n    result = sub_4018B0();\n    byte_60E2D8 = 1;\n  }\n  return result;\n}\n"], [4200768, "sub_401940", "__int64 sub_401940()\n{\n  return sub_4018E0();\n}\n"], [4200813, "sub_40196D", "int __fastcall sub_40196D(int a1, const char *a2, __mode_t a3)\n{\n  return fchmodat(a1, a2, a3, 0);\n}\n"], [4200855, "sub_401997", "int sub_401997()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_402C37(qword_60E320);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_402C37(qword_60E320);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_402C37(qword_60E320);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4201121, "sub_401AA1", "bool __fastcall sub_401AA1(char *a1, unsigned __int16 a2, unsigned __int16 a3)\n{\n  __int64 v3; // r12\n  char *v4; // rbx\n  int *v5; // rax\n  unsigned __int16 v7; // [rsp+0h] [rbp-B0h]\n  struct stat stat_buf; // [rsp+10h] [rbp-A0h] BYREF\n\n  v7 = a3;\n  if ( (a3 & 0xE00) == 0 )\n    return ((a2 ^ v7) & 0xFFF) != 0;\n  if ( !(unsigned int)sub_40AA50(a1, &stat_buf) )\n  {\n    v7 = stat_buf.st_mode;\n    return ((a2 ^ v7) & 0xFFF) != 0;\n  }\n  if ( byte_60E2ED != 1 )\n  {\n    v3 = sub_403631(a1);\n    v4 = gettext(\"getting new attributes of %s\");\n    v5 = __errno_location();\n    error(0, *v5, v4, v3);\n  }\n  return 0;\n}\n"], [4201328, "sub_401B70", "unsigned __int64 __fastcall sub_401B70(__int64 a1, unsigned int a2, unsigned int a3, int a4)\n{\n  __int64 v4; // rbx\n  char *v5; // rax\n  __int64 v6; // rax\n  __int64 v7; // rax\n  __int16 v10; // [rsp+10h] [rbp-60h]\n  const char *format; // [rsp+28h] [rbp-48h]\n  const char *formata; // [rsp+28h] [rbp-48h]\n  char v13; // [rsp+30h] [rbp-40h] BYREF\n  _BYTE v14[15]; // [rsp+31h] [rbp-3Fh] BYREF\n  char v15; // [rsp+40h] [rbp-30h] BYREF\n  _BYTE v16[23]; // [rsp+41h] [rbp-2Fh] BYREF\n  unsigned __int64 v17; // [rsp+58h] [rbp-18h]\n\n  v10 = a3;\n  v17 = __readfsqword(0x28u);\n  if ( a4 )\n  {\n    sub_402D99(a3, &v13);\n    v14[9] = 0;\n    sub_402D99(a2, &v15);\n    v16[9] = 0;\n    switch ( a4 )\n    {\n      case 2:\n        format = gettext(\"failed to change mode of %s from %04lo (%s) to %04lo (%s)\\n\");\n        break;\n      case 3:\n        formata = gettext(\"mode of %s retained as %04lo (%s)\\n\");\n        v6 = sub_403631(a1);\n        printf(formata, v6, v10 & 0xFFF, v14);\n        return __readfsqword(0x28u) ^ v17;\n      case 1:\n        format = gettext(\"mode of %s changed from %04lo (%s) to %04lo (%s)\\n\");\n        break;\n      default:\n        abort();\n    }\n    v7 = sub_403631(a1);\n    printf(format, v7, a2 & 0xFFF, v16, v10 & 0xFFF, v14);\n    return __readfsqword(0x28u) ^ v17;\n  }\n  v4 = sub_403631(a1);\n  v5 = gettext(\"neither symbolic link %s nor referent has been changed\\n\");\n  printf(v5, v4);\n  return __readfsqword(0x28u) ^ v17;\n}\n"], [4201700, "sub_401CE4", "__int64 __fastcall sub_401CE4(__int64 a1, __int64 a2)\n{\n  int v2; // eax\n  __int64 result; // rax\n  __int64 v4; // rbx\n  char *v5; // rax\n  const char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  __int64 v9; // rbx\n  char *v10; // rax\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // rbx\n  char *v14; // rax\n  __int64 v15; // r12\n  __int64 v16; // rbx\n  char *v17; // rax\n  char *v18; // rax\n  __int64 v19; // r12\n  char *v20; // rbx\n  int *v21; // rax\n  bool v22; // al\n  int v23; // eax\n  __int64 v24; // rbx\n  char *v25; // rax\n  unsigned __int8 v26; // [rsp+1Dh] [rbp-73h]\n  char v27; // [rsp+1Eh] [rbp-72h]\n  unsigned int v28; // [rsp+20h] [rbp-70h]\n  __mode_t v29; // [rsp+24h] [rbp-6Ch]\n  unsigned int v30; // [rsp+2Ch] [rbp-64h]\n  char *s1; // [rsp+30h] [rbp-60h]\n  char *v32; // [rsp+38h] [rbp-58h]\n  char v33; // [rsp+50h] [rbp-40h] BYREF\n  _BYTE v34[15]; // [rsp+51h] [rbp-3Fh] BYREF\n  char v35; // [rsp+60h] [rbp-30h] BYREF\n  _BYTE v36[23]; // [rsp+61h] [rbp-2Fh] BYREF\n  unsigned __int64 v37; // [rsp+78h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  s1 = *(char **)(a2 + 56);\n  v32 = *(char **)(a2 + 48);\n  v26 = 1;\n  v27 = 0;\n  v2 = *(unsigned __int16 *)(a2 + 112);\n  if ( v2 == 6 )\n    return 1LL;\n  if ( *(unsigned __int16 *)(a2 + 112) > 6u )\n  {\n    switch ( v2 )\n    {\n      case 10:\n        if ( !*(_QWORD *)(a2 + 88) && !*(_QWORD *)(a2 + 32) )\n        {\n          *(_QWORD *)(a2 + 32) = 1LL;\n          fts_set(a1, a2, 1LL);\n          return 1LL;\n        }\n        if ( byte_60E2ED != 1 )\n        {\n          v4 = sub_403631(s1);\n          v5 = gettext(\"cannot access %s\");\n          error(0, *(_DWORD *)(a2 + 64), v5, v4);\n        }\n        v26 = 0;\n        break;\n      case 13:\n        if ( byte_60E2ED != 1 )\n        {\n          v9 = sub_403631(s1);\n          v10 = gettext(\"cannot operate on dangling symlink %s\");\n          error(0, 0, v10, v9);\n        }\n        v26 = 0;\n        break;\n      case 7:\n        if ( byte_60E2ED != 1 )\n        {\n          v6 = (const char *)sub_403631(s1);\n          error(0, *(_DWORD *)(a2 + 64), \"%s\", v6);\n        }\n        v26 = 0;\n        break;\n    }\n  }\n  else if ( v2 == 2 )\n  {\n    if ( (unsigned __int8)sub_4085B4(a1, a2) )\n    {\n      v11 = sub_403631(s1);\n      v12 = gettext(\n              \"WARNING: Circular directory structure.\\n\"\n              \"This almost certainly means that you have a corrupted file system.\\n\"\n              \"NOTIFY YOUR SYSTEM MANAGER.\\n\"\n              \"The following directory is part of the cycle:\\n\"\n              \"  %s\\n\");\n      error(0, 0, v12, v11);\n      return 0LL;\n    }\n  }\n  else if ( v2 == 4 )\n  {\n    if ( byte_60E2ED != 1 )\n    {\n      v7 = sub_403631(s1);\n      v8 = gettext(\"cannot read directory %s\");\n      error(0, *(_DWORD *)(a2 + 64), v8, v7);\n    }\n    v26 = 0;\n  }\n  if ( v26\n    && qword_60E2F0\n    && *(_QWORD *)(a2 + 128) == *(_QWORD *)qword_60E2F0\n    && *(_QWORD *)(a2 + 120) == *(_QWORD *)(qword_60E2F0 + 8) )\n  {\n    if ( !strcmp(s1, \"/\") )\n    {\n      v13 = sub_403631(s1);\n      v14 = gettext(\"it is dangerous to operate recursively on %s\");\n      error(0, 0, v14, v13);\n    }\n    else\n    {\n      v15 = sub_40360D(1LL, \"/\");\n      v16 = sub_40360D(0LL, s1);\n      v17 = gettext(\"it is dangerous to operate recursively on %s (same as %s)\");\n      error(0, 0, v17, v16, v15);\n    }\n    v18 = gettext(\"use --no-preserve-root to override this failsafe\");\n    error(0, 0, v18);\n    fts_set(a1, a2, 4LL);\n    fts_read(a1);\n    result = 0LL;\n  }\n  else\n  {\n    if ( v26 )\n    {\n      v28 = *(_DWORD *)(a2 + 144);\n      v29 = sub_40338B(v28, (v28 & 0xF000) == 0x4000, (unsigned int)dword_60E2E8, qword_60E2E0, 0LL);\n      if ( (v28 & 0xF000) != 40960 )\n      {\n        if ( sub_40196D(*(_DWORD *)(a1 + 44), v32, v29) )\n        {\n          if ( byte_60E2ED != 1 )\n          {\n            v19 = sub_403631(s1);\n            v20 = gettext(\"changing permissions of %s\");\n            v21 = __errno_location();\n            error(0, *v21, v20, v19);\n          }\n          v26 = 0;\n        }\n        else\n        {\n          v27 = 1;\n        }\n      }\n    }\n    if ( dword_60E220 != 2 )\n    {\n      v22 = v27 && sub_401AA1(v32, v28, v29);\n      if ( v22 || !dword_60E220 )\n      {\n        if ( v26 != 1 )\n        {\n          v23 = 2;\n        }\n        else if ( v27 != 1 )\n        {\n          v23 = 0;\n        }\n        else if ( v22 )\n        {\n          v23 = 1;\n        }\n        else\n        {\n          v23 = 3;\n        }\n        sub_401B70((__int64)s1, v28, v29, v23);\n      }\n    }\n    if ( v27 )\n    {\n      if ( byte_60E2EE )\n      {\n        v30 = sub_40338B(v28, (v28 & 0xF000) == 0x4000, 0LL, qword_60E2E0, 0LL);\n        if ( (v29 & ~v30) != 0 )\n        {\n          sub_402D99(v29, &v33);\n          sub_402D99(v30, &v35);\n          v36[9] = 0;\n          v34[9] = 0;\n          v24 = sub_404C4A(s1);\n          v25 = gettext(\"%s: new permissions are %s, not %s\");\n          error(0, 0, v25, v24, v34, v36);\n          v26 = 0;\n        }\n      }\n    }\n    if ( byte_60E2EC != 1 )\n      fts_set(a1, a2, 4LL);\n    result = v26;\n  }\n  return result;\n}\n"], [4203336, "sub_402348", "_BOOL8 __fastcall sub_402348(__int64 a1, unsigned int a2)\n{\n  char *v2; // rbx\n  int *v3; // rax\n  char *v4; // rbx\n  int *v5; // rax\n  bool v7; // [rsp+1Fh] [rbp-21h]\n  __int64 i; // [rsp+20h] [rbp-20h]\n  __int64 v9; // [rsp+28h] [rbp-18h]\n\n  v7 = 1;\n  for ( i = sub_40854C(a1, a2, 0LL); ; v7 = (v7 & (unsigned __int8)sub_401CE4(i, v9)) != 0 )\n  {\n    v9 = fts_read(i);\n    if ( !v9 )\n      break;\n  }\n  if ( *__errno_location() )\n  {\n    if ( byte_60E2ED != 1 )\n    {\n      v2 = gettext(\"fts_read failed\");\n      v3 = __errno_location();\n      error(0, *v3, v2);\n    }\n    v7 = 0;\n  }\n  if ( (unsigned int)fts_close(i) )\n  {\n    v4 = gettext(\"fts_close failed\");\n    v5 = __errno_location();\n    error(0, *v5, v4);\n    v7 = 0;\n  }\n  return v7;\n}\n"], [4203590, "sub_402446", "void __fastcall __noreturn sub_402446(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  __int64 v3; // r13\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  char *v6; // rax\n  FILE *v7; // rbx\n  char *v8; // rax\n  FILE *v9; // rbx\n  char *v10; // rax\n  FILE *v11; // rbx\n  char *v12; // rax\n  FILE *v13; // rbx\n  char *v14; // rax\n  FILE *v15; // rbx\n  char *v16; // rax\n  FILE *v17; // rbx\n  char *v18; // rax\n\n  if ( a1 )\n  {\n    v1 = qword_60E320;\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = qword_60E320;\n    v4 = qword_60E320;\n    v5 = qword_60E320;\n    v6 = gettext(\n           \"Usage: %s [OPTION]... MODE[,MODE]... FILE...\\n\"\n           \"  or:  %s [OPTION]... OCTAL-MODE FILE...\\n\"\n           \"  or:  %s [OPTION]... --reference=RFILE FILE...\\n\");\n    printf(v6, v5, v4, v3);\n    v7 = stdout;\n    v8 = gettext(\n           \"Change the mode of each FILE to MODE.\\n\"\n           \"\\n\"\n           \"  -c, --changes           like verbose but report only when a change is made\\n\");\n    fputs_unlocked(v8, v7);\n    v9 = stdout;\n    v10 = gettext(\n            \"      --no-preserve-root  do not treat `/' specially (the default)\\n\"\n            \"      --preserve-root     fail to operate recursively on `/'\\n\");\n    fputs_unlocked(v10, v9);\n    v11 = stdout;\n    v12 = gettext(\n            \"  -f, --silent, --quiet   suppress most error messages\\n\"\n            \"  -v, --verbose           output a diagnostic for every file processed\\n\"\n            \"      --reference=RFILE   use RFILE's mode instead of MODE values\\n\"\n            \"  -R, --recursive         change files and directories recursively\\n\");\n    fputs_unlocked(v12, v11);\n    v13 = stdout;\n    v14 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v14, v13);\n    v15 = stdout;\n    v16 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v16, v15);\n    v17 = stdout;\n    v18 = gettext(\"\\nEach MODE is of the form `[ugoa]*([-+=]([rwxXst]*|[ugo]))+'.\\n\");\n    fputs_unlocked(v18, v17);\n    sub_401997();\n  }\n  exit(a1);\n}\n"], [4203899, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  char *v3; // rax\n  int v4; // eax\n  char *v5; // rax\n  __int64 v6; // rbx\n  char *v7; // rax\n  __int64 v8; // r12\n  char *v9; // rbx\n  int *v10; // rax\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r12\n  char *v14; // rbx\n  int *v15; // rax\n  int v16; // eax\n  char v17; // [rsp+2Ah] [rbp-56h]\n  int v18; // [rsp+2Ch] [rbp-54h]\n  unsigned __int64 v19; // [rsp+30h] [rbp-50h] BYREF\n  char *v20; // [rsp+38h] [rbp-48h]\n  __int64 v21; // [rsp+40h] [rbp-40h]\n  __int64 v22; // [rsp+48h] [rbp-38h]\n  char *s; // [rsp+50h] [rbp-30h]\n  size_t v24; // [rsp+58h] [rbp-28h]\n  __int64 v25; // [rsp+60h] [rbp-20h]\n  __int64 v26; // [rsp+68h] [rbp-18h]\n\n  v20 = 0LL;\n  v21 = 0LL;\n  v19 = 0LL;\n  v17 = 0;\n  v22 = 0LL;\n  sub_403526(*a2, a2, a3);\n  setlocale(6, &locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40AA30(sub_402B4C);\n  byte_60E2EE = 0;\n  byte_60E2ED = 0;\n  byte_60E2EC = 0;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v18 = getopt_long(a1, a2, \"Rcfvr::w::x::X::s::t::u::g::o::a::,::+::=::\", &longopts, 0LL);\n        if ( v18 == -1 )\n        {\n          if ( v22 )\n          {\n            if ( v20 )\n            {\n              v3 = gettext(\"cannot combine mode and --reference options\");\n              error(0, 0, v3);\n              sub_402446(1);\n            }\n          }\n          else if ( !v20 )\n          {\n            v4 = optind++;\n            v20 = a2[v4];\n          }\n          if ( optind >= a1 )\n          {\n            if ( v20 && a2[optind - 1] == v20 )\n            {\n              v6 = sub_403631(a2[a1 - 1]);\n              v7 = gettext(\"missing operand after %s\");\n              error(0, 0, v7, v6);\n            }\n            else\n            {\n              v5 = gettext(\"missing operand\");\n              error(0, 0, v5);\n            }\n            sub_402446(1);\n          }\n          if ( v22 )\n          {\n            qword_60E2E0 = sub_403344(v22);\n            if ( !qword_60E2E0 )\n            {\n              v8 = sub_403631(v22);\n              v9 = gettext(\"failed to get attributes of %s\");\n              v10 = __errno_location();\n              error(1, *v10, v9, v8);\n            }\n          }\n          else\n          {\n            qword_60E2E0 = sub_402FEF(v20);\n            if ( !qword_60E2E0 )\n            {\n              v11 = sub_403631(v20);\n              v12 = gettext(\"invalid mode: %s\");\n              error(0, 0, v12, v11);\n              sub_402446(1);\n            }\n            dword_60E2E8 = umask(0);\n          }\n          if ( byte_60E2EC && v17 )\n          {\n            qword_60E2F0 = sub_4084EF(&unk_60E300);\n            if ( !qword_60E2F0 )\n            {\n              v13 = sub_403631(\"/\");\n              v14 = gettext(\"failed to get attributes of %s\");\n              v15 = __errno_location();\n              error(1, *v15, v14, v13);\n            }\n          }\n          else\n          {\n            qword_60E2F0 = 0LL;\n          }\n          v16 = !sub_402348((__int64)&a2[optind], 0x411u);\n          exit(v16);\n        }\n        if ( v18 != 102 )\n          break;\n        byte_60E2ED = 1;\n      }\n      if ( v18 > 102 )\n        break;\n      if ( v18 == 61 )\n        goto LABEL_34;\n      if ( v18 > 61 )\n      {\n        if ( v18 == 88 )\n          goto LABEL_34;\n        if ( v18 > 88 )\n        {\n          if ( v18 == 97 )\n            goto LABEL_34;\n          if ( v18 != 99 )\n            goto LABEL_46;\n          dword_60E220 = 1;\n        }\n        else\n        {\n          if ( v18 != 82 )\n            goto LABEL_46;\n          byte_60E2EC = 1;\n        }\n      }\n      else\n      {\n        if ( v18 == -130 )\n          sub_402446(0);\n        if ( v18 <= -130 )\n        {\n          if ( v18 == -131 )\n          {\n            sub_4054FB(\n              (_DWORD)stdout,\n              (unsigned int)\"chmod\",\n              (unsigned int)\"GNU coreutils\",\n              (_DWORD)off_60E228,\n              (unsigned int)\"David MacKenzie\",\n              (unsigned int)\"Jim Meyering\",\n              0);\n            exit(0);\n          }\nLABEL_46:\n          sub_402446(1);\n        }\n        if ( (unsigned int)(v18 - 43) > 1 )\n          goto LABEL_46;\nLABEL_34:\n        s = a2[optind - 1];\n        v24 = strlen(s);\n        v25 = (v21 != 0) + v21;\n        v26 = v25 + v24;\n        if ( v19 <= v25 + v24 )\n        {\n          v19 = v26 + 1;\n          v20 = (char *)sub_4057F9(v20, &v19);\n        }\n        v20[v21] = 44;\n        strcpy(&v20[v25], s);\n        v21 = v26;\n        byte_60E2EE = 1;\n      }\n    }\n    if ( v18 == 118 )\n    {\n      dword_60E220 = 0;\n    }\n    else\n    {\n      if ( v18 <= 118 )\n      {\n        if ( v18 != 111 )\n        {\n          if ( v18 > 111 )\n          {\n            if ( v18 < 114 )\n              goto LABEL_46;\n          }\n          else if ( v18 != 103 )\n          {\n            goto LABEL_46;\n          }\n        }\n        goto LABEL_34;\n      }\n      if ( v18 == 128 )\n      {\n        v17 = 0;\n      }\n      else\n      {\n        if ( v18 <= 128 )\n        {\n          if ( v18 > 120 )\n            goto LABEL_46;\n          goto LABEL_34;\n        }\n        if ( v18 == 129 )\n        {\n          v17 = 1;\n        }\n        else\n        {\n          if ( v18 != 130 )\n            goto LABEL_46;\n          v22 = optarg;\n        }\n      }\n    }\n  }\n}\n"], [4205367, "sub_402B37", "__int64 __fastcall sub_402B37(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_60E318 = a1;\n  return result;\n}\n"], [4205388, "sub_402B4C", "__int64 sub_402B4C()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_4086B7(stdout) && (byte_60E318 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_60E310 )\n    {\n      v0 = (const char *)sub_404C4A(qword_60E310);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_4086B7(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4205623, "sub_402C37", "_BYTE *__fastcall sub_402C37(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4205728, "sub_402CA0", "size_t __fastcall sub_402CA0(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4205806, "sub_402CEE", "__int64 __fastcall sub_402CEE(__int16 a1)\n{\n  switch ( a1 & 0xF000 )\n  {\n    case 32768:\n      return 45LL;\n    case 16384:\n      return 100LL;\n    case 24576:\n      return 98LL;\n    case 8192:\n      return 99LL;\n    case 40960:\n      return 108LL;\n    case 4096:\n      return 112LL;\n    case 49152:\n      return 115LL;\n  }\n  return 63LL;\n}\n"], [4205977, "sub_402D99", "_BYTE *__fastcall sub_402D99(__int16 a1, _BYTE *a2)\n{\n  char v2; // al\n  char v3; // al\n  char v4; // al\n  char v5; // al\n  char v6; // al\n  char v7; // al\n  char v8; // al\n  char v9; // al\n  char v10; // al\n  _BYTE *result; // rax\n\n  *a2 = sub_402CEE(a1);\n  if ( (a1 & 0x100) != 0 )\n    v2 = 114;\n  else\n    v2 = 45;\n  a2[1] = v2;\n  if ( (a1 & 0x80) != 0 )\n    v3 = 119;\n  else\n    v3 = 45;\n  a2[2] = v3;\n  if ( (a1 & 0x800) != 0 )\n  {\n    if ( (a1 & 0x40) != 0 )\n      v4 = 115;\n    else\n      v4 = 83;\n  }\n  else if ( (a1 & 0x40) != 0 )\n  {\n    v4 = 120;\n  }\n  else\n  {\n    v4 = 45;\n  }\n  a2[3] = v4;\n  if ( (a1 & 0x20) != 0 )\n    v5 = 114;\n  else\n    v5 = 45;\n  a2[4] = v5;\n  if ( (a1 & 0x10) != 0 )\n    v6 = 119;\n  else\n    v6 = 45;\n  a2[5] = v6;\n  if ( (a1 & 0x400) != 0 )\n  {\n    if ( (a1 & 8) != 0 )\n      v7 = 115;\n    else\n      v7 = 83;\n  }\n  else if ( (a1 & 8) != 0 )\n  {\n    v7 = 120;\n  }\n  else\n  {\n    v7 = 45;\n  }\n  a2[6] = v7;\n  if ( (a1 & 4) != 0 )\n    v8 = 114;\n  else\n    v8 = 45;\n  a2[7] = v8;\n  if ( (a1 & 2) != 0 )\n    v9 = 119;\n  else\n    v9 = 45;\n  a2[8] = v9;\n  if ( (a1 & 0x200) != 0 )\n  {\n    if ( (a1 & 1) != 0 )\n      v10 = 116;\n    else\n      v10 = 84;\n  }\n  else if ( (a1 & 1) != 0 )\n  {\n    v10 = 120;\n  }\n  else\n  {\n    v10 = 45;\n  }\n  a2[9] = v10;\n  a2[10] = 32;\n  result = a2 + 11;\n  a2[11] = 0;\n  return result;\n}\n"], [4206432, "sub_402F60", "_BYTE *__fastcall sub_402F60(__int64 a1, _BYTE *a2)\n{\n  return sub_402D99(*(_DWORD *)(a1 + 24), a2);\n}\n"], [4206471, "sub_402F87", "__int64 __fastcall sub_402F87(unsigned int a1)\n{\n  return a1;\n}\n"], [4206483, "sub_402F93", "__int64 __fastcall sub_402F93(int a1, int a2)\n{\n  __int64 result; // rax\n\n  result = sub_405763(32LL);\n  *(_BYTE *)result = 61;\n  *(_BYTE *)(result + 1) = 1;\n  *(_DWORD *)(result + 4) = 4095;\n  *(_DWORD *)(result + 8) = a1;\n  *(_DWORD *)(result + 12) = a2;\n  *(_BYTE *)(result + 17) = 0;\n  return result;\n}\n"], [4206575, "sub_402FEF", "__int64 __fastcall sub_402FEF(char *a1)\n{\n  char *v1; // rax\n  _BOOL4 v3; // eax\n  int v4; // eax\n  char *v5; // rax\n  int v6; // eax\n  int v7; // eax\n  __int64 v8; // rax\n  int v9; // eax\n  char *v10; // [rsp+8h] [rbp-48h]\n  char v11; // [rsp+12h] [rbp-3Eh]\n  char v12; // [rsp+13h] [rbp-3Dh]\n  unsigned int v13; // [rsp+14h] [rbp-3Ch]\n  int v14; // [rsp+18h] [rbp-38h]\n  int v15; // [rsp+1Ch] [rbp-34h]\n  int v16; // [rsp+20h] [rbp-30h]\n  __int64 v17; // [rsp+28h] [rbp-28h]\n  __int64 v18; // [rsp+30h] [rbp-20h]\n  char *i; // [rsp+38h] [rbp-18h]\n  _BYTE *ptr; // [rsp+40h] [rbp-10h]\n  char *v21; // [rsp+48h] [rbp-8h]\n\n  v10 = a1;\n  v17 = 0LL;\n  if ( *a1 > 47 && *a1 <= 55 )\n  {\n    v13 = 0;\n    do\n    {\n      v1 = v10++;\n      v13 = 8 * v13 + *v1 - 48;\n      if ( v13 > 0xFFF )\n        return 0LL;\n    }\n    while ( *v10 > 47 && *v10 <= 55 );\n    if ( *v10 )\n      return 0LL;\n    v16 = sub_402F87(v13);\n    return sub_402F93(v16, v16 & 0xC00 | 0x3FFu);\n  }\n  v18 = 1LL;\n  for ( i = a1; *i; ++i )\n  {\n    v3 = *i == 61 || *i == 43 || *i == 45;\n    v18 += v3;\n  }\n  ptr = (_BYTE *)sub_40561A(v18, 16LL);\n  while ( 2 )\n  {\n    v14 = 0;\n    while ( 1 )\n    {\n      v4 = *v10;\n      if ( v4 == 97 )\n      {\n        v14 |= 0xFFFu;\n        goto LABEL_35;\n      }\n      if ( v4 <= 97 )\n        break;\n      switch ( v4 )\n      {\n        case 'o':\n          v14 |= 0x207u;\n          break;\n        case 'u':\n          v14 |= 0x9C0u;\n          break;\n        case 'g':\n          v14 |= 0x438u;\n          break;\n        default:\n          goto LABEL_69;\n      }\nLABEL_35:\n      ++v10;\n    }\n    if ( v4 == 45 || v4 == 61 || v4 == 43 )\n    {\n      do\n      {\n        v12 = *v10;\n        v11 = 3;\n        v5 = v10 + 1;\n        v10 += 2;\n        v6 = *v5;\n        switch ( v6 )\n        {\n          case 'o':\n            v15 = 7;\n            break;\n          case 'u':\n            v15 = 448;\n            break;\n          case 'g':\n            v15 = 56;\n            break;\n          default:\n            v15 = 0;\n            v11 = 1;\n            --v10;\n            while ( 1 )\n            {\n              v7 = *v10;\n              if ( v7 == 115 )\n              {\n                v15 |= 0xC00u;\n              }\n              else if ( v7 > 115 )\n              {\n                switch ( v7 )\n                {\n                  case 'w':\n                    v15 |= 0x92u;\n                    break;\n                  case 'x':\n                    v15 |= 0x49u;\n                    break;\n                  case 't':\n                    v15 |= 0x200u;\n                    break;\n                  default:\n                    goto LABEL_59;\n                }\n              }\n              else if ( v7 == 88 )\n              {\n                v11 = 2;\n              }\n              else\n              {\n                if ( v7 != 114 )\n                  goto LABEL_59;\n                v15 |= 0x124u;\n              }\n              ++v10;\n            }\n        }\nLABEL_59:\n        v8 = v17++;\n        v21 = &ptr[16 * v8];\n        *v21 = v12;\n        v21[1] = v11;\n        *((_DWORD *)v21 + 1) = v14;\n        *((_DWORD *)v21 + 2) = v15;\n        if ( v14 )\n          v9 = v14 & v15;\n        else\n          v9 = v15;\n        *((_DWORD *)v21 + 3) = v9;\n      }\n      while ( *v10 == 61 || *v10 == 43 || *v10 == 45 );\n      if ( *v10 == 44 )\n      {\n        ++v10;\n        continue;\n      }\n      if ( !*v10 )\n      {\n        ptr[16 * v17 + 1] = 0;\n        return (__int64)ptr;\n      }\n    }\n    break;\n  }\nLABEL_69:\n  free(ptr);\n  return 0LL;\n}\n"], [4207428, "sub_403344", "__int64 __fastcall sub_403344(char *a1)\n{\n  __int64 result; // rax\n  struct stat stat_buf; // [rsp+10h] [rbp-90h] BYREF\n\n  if ( (unsigned int)sub_40AA50(a1, &stat_buf) )\n    result = 0LL;\n  else\n    result = sub_402F93(stat_buf.st_mode, 4095);\n  return result;\n}\n"], [4207499, "sub_40338B", "__int64 __fastcall sub_40338B(__int16 a1, unsigned __int8 a2, int a3, char *a4, _DWORD *a5)\n{\n  int v5; // eax\n  int v6; // eax\n  int v7; // edx\n  int v8; // eax\n  int v9; // edx\n  int v10; // eax\n  int v11; // eax\n  int v12; // eax\n  int v13; // eax\n  unsigned int v17; // [rsp+28h] [rbp-18h]\n  int v18; // [rsp+2Ch] [rbp-14h]\n  int v19; // [rsp+30h] [rbp-10h]\n  int v20; // [rsp+30h] [rbp-10h]\n  int v21; // [rsp+30h] [rbp-10h]\n  int v22; // [rsp+34h] [rbp-Ch]\n  int v23; // [rsp+38h] [rbp-8h]\n\n  v17 = a1 & 0xFFF;\n  v18 = 0;\n  while ( a4[1] )\n  {\n    v22 = *((_DWORD *)a4 + 1);\n    if ( a2 )\n      v5 = 3072;\n    else\n      v5 = 0;\n    v23 = ~*((_DWORD *)a4 + 3) & v5;\n    v19 = *((_DWORD *)a4 + 2);\n    v6 = a4[1];\n    if ( v6 == 2 )\n    {\n      if ( v17 & 0x49 | a2 )\n        v19 |= 0x49u;\n    }\n    else if ( v6 == 3 )\n    {\n      v20 = v17 & v19;\n      if ( (v20 & 0x124) != 0 )\n        v7 = 292;\n      else\n        v7 = 0;\n      if ( (v20 & 0x92) != 0 )\n        v8 = 146;\n      else\n        v8 = 0;\n      v9 = v8 | v7;\n      if ( (v20 & 0x49) != 0 )\n        v10 = 73;\n      else\n        v10 = 0;\n      v19 = v9 | v10 | v20;\n    }\n    if ( v22 )\n      v11 = *((_DWORD *)a4 + 1);\n    else\n      v11 = ~a3;\n    v21 = ~v23 & v11 & v19;\n    v12 = *a4;\n    switch ( v12 )\n    {\n      case '-':\n        v18 |= v21;\n        v17 &= ~v21;\n        break;\n      case '=':\n        if ( v22 )\n          v13 = ~v22;\n        else\n          v13 = 0;\n        v18 |= ~((unsigned __int16)v23 | (unsigned __int16)v13) & 0xFFF;\n        v17 = v21 | v17 & (v23 | v13);\n        break;\n      case '+':\n        v18 |= v21;\n        v17 |= v21;\n        break;\n    }\n    a4 += 16;\n  }\n  if ( a5 )\n    *a5 = v18;\n  return v17;\n}\n"], [4207910, "sub_403526", "char *__fastcall sub_403526(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_60E320 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4208141, "sub_40360D", "__int64 __fastcall sub_40360D(unsigned int a1, __int64 a2)\n{\n  return sub_404ABC(a1, 6LL, a2);\n}\n"], [4208177, "sub_403631", "__int64 __fastcall sub_403631(__int64 a1)\n{\n  return sub_40360D(0, a1);\n}\n"], [4208208, "sub_403650", "__int64 __fastcall sub_403650(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60E340;\n  v4 = sub_405887(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4208281, "sub_403699", "__int64 __fastcall sub_403699(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60E340;\n  return *(unsigned int *)v1;\n}\n"], [4208311, "sub_4036B7", "__int64 *__fastcall sub_4036B7(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_60E340;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4208347, "sub_4036DB", "__int64 __fastcall sub_4036DB(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_60E340;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4208483, "sub_403763", "__int64 __fastcall sub_403763(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_60E340;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4208534, "sub_403796", "__int64 *__fastcall sub_403796(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_60E340;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4208624, "sub_4037F0", "_QWORD *__fastcall sub_4037F0(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4208744, "sub_403868", "char *__fastcall sub_403868(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'\";\n  return v3;\n}\n"], [4208805, "sub_4038A5", "unsigned __int64 __fastcall sub_4038A5(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_403868((const char *)L\"`'\", a5);\n        a9 = sub_403868((const char *)L\"'\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_4038A5(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4211952, "sub_4044F0", "unsigned __int64 __fastcall sub_4044F0(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_60E340;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_4038A5(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4212112, "sub_404590", "__int64 __fastcall sub_404590(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_4045C2(a1, a2, 0LL, a3);\n}\n"], [4212162, "sub_4045C2", "__int64 __fastcall sub_4045C2(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_60E340;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_4038A5(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_405749(v10);\n  sub_4038A5(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4212462, "sub_4046EE", "void sub_4046EE()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_60E260;\n  for ( i = 1; i < dword_60E240; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_60E380 )\n  {\n    free(ptr[1]);\n    qword_60E250 = 256LL;\n    off_60E258 = &unk_60E380;\n  }\n  if ( ptr != (void **)&qword_60E250 )\n  {\n    free(ptr);\n    off_60E260 = &qword_60E250;\n  }\n  dword_60E240 = 1;\n}\n"], [4212633, "sub_404799", "void *__fastcall sub_404799(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_60E260;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60E240 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_60E260 == &qword_60E250;\n    if ( off_60E260 == &qword_60E250 )\n      v4 = 0LL;\n    else\n      v4 = off_60E260;\n    v12 = (__int64 *)sub_405798(v4, 16 * v14);\n    off_60E260 = v12;\n    if ( v9 )\n    {\n      v5 = off_60E258;\n      *v12 = qword_60E250;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_60E240], 0, 16 * (v14 - (unsigned int)dword_60E240));\n    dword_60E240 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_4038A5((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_60E380 )\n      free(ptr);\n    ptr = (void *)sub_405749(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_4038A5((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4213279, "sub_404A1F", "void *__fastcall sub_404A1F(int a1, __int64 a2)\n{\n  return sub_404799(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_60E340);\n}\n"], [4213322, "sub_404A4A", "void *__fastcall sub_404A4A(int a1, __int64 a2, size_t a3)\n{\n  return sub_404799(a1, a2, a3, (__int64)&qword_60E340);\n}\n"], [4213366, "sub_404A76", "void *__fastcall sub_404A76(__int64 a1)\n{\n  return sub_404A1F(0, a1);\n}\n"], [4213397, "sub_404A95", "void *__fastcall sub_404A95(__int64 a1, size_t a2)\n{\n  return sub_404A4A(0, a1, a2);\n}\n"], [4213436, "sub_404ABC", "void *__fastcall sub_404ABC(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_4037F0(v5, a2);\n  return sub_404799(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4213501, "sub_404AFD", "void *__fastcall sub_404AFD(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_4037F0(v7, a2);\n  return sub_404799(a1, a3, a4, (__int64)v7);\n}\n"], [4213564, "sub_404B3C", "void *__fastcall sub_404B3C(int a1, __int64 a2)\n{\n  return sub_404ABC(0, a1, a2);\n}\n"], [4213600, "sub_404B60", "void *__fastcall sub_404B60(int a1, __int64 a2, size_t a3)\n{\n  return sub_404AFD(0, a1, a2, a3);\n}\n"], [4213644, "sub_404B8C", "void *__fastcall sub_404B8C(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_60E340;\n  v4[1] = qword_60E348;\n  v4[2] = qword_60E350;\n  v4[3] = qword_60E358;\n  v4[4] = qword_60E360;\n  v4[5] = qword_60E368;\n  v4[6] = qword_60E370;\n  sub_4036DB(v4, a3, 1);\n  return sub_404799(0, a1, a2, (__int64)v4);\n}\n"], [4213792, "sub_404C20", "void *__fastcall sub_404C20(__int64 a1, unsigned __int8 a2)\n{\n  return sub_404B8C(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4213834, "sub_404C4A", "void *__fastcall sub_404C4A(__int64 a1)\n{\n  return sub_404C20(a1, 0x3Au);\n}\n"], [4213865, "sub_404C69", "void *__fastcall sub_404C69(__int64 a1, size_t a2)\n{\n  return sub_404B8C(a1, a2, 0x3Au);\n}\n"], [4213907, "sub_404C93", "__int64 __fastcall sub_404C93(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_404CC9(a1, a2, a3, a4, -1LL);\n}\n"], [4213961, "sub_404CC9", "void *__fastcall sub_404CC9(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_60E340;\n  v8[1] = qword_60E348;\n  v8[2] = qword_60E350;\n  v8[3] = qword_60E358;\n  v8[4] = qword_60E360;\n  v8[5] = qword_60E368;\n  v8[6] = qword_60E370;\n  sub_403796(v8, a2, a3);\n  return sub_404799(a1, a4, a5, (__int64)v8);\n}\n"], [4214112, "sub_404D60", "__int64 __fastcall sub_404D60(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_404C93(0, a1, a2, a3);\n}\n"], [4214159, "sub_404D8F", "void *__fastcall sub_404D8F(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_404CC9(0, a1, a2, a3, a4);\n}\n"], [4214217, "sub_404DC9", "int __fastcall sub_404DC9(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4215732, "sub_4053B4", "int __fastcall sub_4053B4(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_404DC9(a1, a2, a3, a4, a5, i);\n}\n"], [4215842, "sub_405422", "int __fastcall sub_405422(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_404DC9(a1, a2, a3, a4, v8, i);\n}\n"], [4216059, "sub_4054FB", "int sub_4054FB(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_405422(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4216241, "sub_4055B1", "int sub_4055B1()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4216346, "sub_40561A", "__int64 __fastcall sub_40561A(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_4058E5(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_405763(a2 * a1);\n}\n"], [4216408, "sub_405658", "__int64 __fastcall sub_405658(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_4058E5(a1, a2, v4);\n  return sub_405798(a1, a3 * a2);\n}\n"], [4216484, "sub_4056A4", "__int64 __fastcall sub_4056A4(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_4058E5(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_405798(a1, a3 * v6);\n}\n"], [4216649, "sub_405749", "__int64 __fastcall sub_405749(__int64 a1)\n{\n  return sub_405763(a1);\n}\n"], [4216675, "sub_405763", "void *__fastcall sub_405763(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_4058E5(a1, a2, v2);\n  return v4;\n}\n"], [4216728, "sub_405798", "void *__fastcall sub_405798(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_4058E5(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4216825, "sub_4057F9", "__int64 __fastcall sub_4057F9(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_4056A4(a1, a2, 1uLL);\n}\n"], [4216867, "sub_405823", "void *__fastcall sub_405823(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_405763(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4216910, "sub_40584E", "void *__fastcall sub_40584E(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_4058E5(a1, a2, v2);\n  return v4;\n}\n"], [4216967, "sub_405887", "void *__fastcall sub_405887(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_405763(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4217016, "sub_4058B8", "void *__fastcall sub_4058B8(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_405887(a1, v1 + 1);\n}\n"], [4217061, "sub_4058E5", "void __noreturn sub_4058E5()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4217114, "sub_40591A", "_BOOL8 __fastcall sub_40591A(_QWORD *a1, _QWORD *a2)\n{\n  return a1[1] == a2[1] && *a1 == *a2;\n}\n"], [4217199, "sub_40596F", "unsigned __int64 __fastcall sub_40596F(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n"], [4217241, "sub_405999", "__int64 __fastcall sub_405999(__int64 a1)\n{\n  if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n  {\n    *(_QWORD *)(a1 + 88) = sub_409277(31LL, 0LL, sub_40596F, sub_40591A, free);\n    if ( !*(_QWORD *)(a1 + 88) )\n      return 0LL;\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 88) = malloc(0x20uLL);\n    if ( !*(_QWORD *)(a1 + 88) )\n      return 0LL;\n    sub_40875E(*(_QWORD *)(a1 + 88));\n  }\n  return 1LL;\n}\n"], [4217394, "sub_405A32", "__int64 __fastcall sub_405A32(__int64 a1, __int64 a2)\n{\n  _QWORD *ptr; // [rsp+20h] [rbp-10h]\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n  {\n    ptr = malloc(0x18uLL);\n    if ( !ptr )\n      return 0LL;\n    *ptr = *(_QWORD *)(a2 + 120);\n    ptr[1] = *(_QWORD *)(a2 + 128);\n    ptr[2] = a2;\n    v4 = sub_409F0D(*(_QWORD *)(a1 + 88), ptr);\n    if ( (_QWORD *)v4 != ptr )\n    {\n      free(ptr);\n      if ( !v4 )\n        return 0LL;\n      *(_QWORD *)a2 = *(_QWORD *)(v4 + 16);\n      *(_WORD *)(a2 + 112) = 2;\n    }\n  }\n  else if ( (unsigned __int8)sub_40877F(*(_QWORD *)(a1 + 88), a2 + 120) )\n  {\n    *(_QWORD *)a2 = a2;\n    *(_WORD *)(a2 + 112) = 2;\n  }\n  return 1LL;\n}\n"], [4217666, "sub_405B42", "void __fastcall sub_405B42(__int64 a1, __int64 a2)\n{\n  __int64 *v2; // [rsp+18h] [rbp-38h]\n  void *ptr; // [rsp+20h] [rbp-30h]\n  __int64 *v4; // [rsp+28h] [rbp-28h]\n  __int64 v5[4]; // [rsp+30h] [rbp-20h] BYREF\n\n  v2 = (__int64 *)(a2 + 120);\n  if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n  {\n    v5[0] = *v2;\n    v5[1] = *(_QWORD *)(a2 + 128);\n    ptr = (void *)sub_409F56(*(_QWORD *)(a1 + 88), v5);\n    if ( !ptr )\n      abort();\n    free(ptr);\n  }\n  else\n  {\n    v4 = *(__int64 **)(a2 + 8);\n    if ( v4 && v4[11] >= 0 )\n    {\n      if ( !*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16LL) )\n        abort();\n      if ( **(_QWORD **)(a1 + 88) == *(_QWORD *)(a2 + 128) && *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8LL) == *v2 )\n      {\n        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8LL) = v4[15];\n        **(_QWORD **)(a1 + 88) = v4[16];\n      }\n    }\n  }\n}\n"], [4217935, "sub_405C4F", "void __fastcall sub_405C4F(__int64 a1)\n{\n  if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n  {\n    if ( *(_QWORD *)(a1 + 88) )\n      sub_4094E2(*(_QWORD *)(a1 + 88));\n  }\n  else\n  {\n    free(*(void **)(a1 + 88));\n  }\n}\n"], [4218012, "sub_405C9C", "__int64 __fastcall sub_405C9C(__int64 a1)\n{\n  __int64 result; // rax\n  int fd; // [rsp+1Ch] [rbp-4h]\n\n  while ( 1 )\n  {\n    result = (unsigned int)sub_40A25D(a1) ^ 1;\n    if ( !(_BYTE)result )\n      break;\n    fd = sub_40A2F7(a1);\n    if ( fd >= 0 )\n      close(fd);\n  }\n  return result;\n}\n"], [4218078, "sub_405CDE", "__int64 __fastcall sub_405CDE(__int64 a1, char a2)\n{\n  __int64 result; // rax\n\n  if ( *(_WORD *)(a1 + 112) != 11 )\n    abort();\n  if ( a2 )\n    result = 2LL;\n  else\n    result = 1LL;\n  *(_QWORD *)(a1 + 168) = result;\n  return result;\n}\n"], [4218145, "sub_405D21", "__int64 __fastcall sub_405D21(int a1, int a2, int a3, int *a4, int a5, int a6)\n{\n  int fd; // [rsp+20h] [rbp-10h]\n  _BYTE v9[12]; // [rsp+24h] [rbp-Ch]\n\n  fd = sub_40A379(a1, a2, a3 | 0x10900u, a2, a5, a6);\n  if ( fd < 0 )\n    return 0LL;\n  sub_408616((unsigned int)fd, 1LL);\n  *(_QWORD *)&v9[4] = fdopendir(fd);\n  if ( *(_QWORD *)&v9[4] )\n  {\n    *a4 = fd;\n  }\n  else\n  {\n    *(_QWORD *)v9 = (unsigned int)*__errno_location();\n    close(fd);\n    *__errno_location() = *(_DWORD *)v9;\n  }\n  return *(_QWORD *)&v9[4];\n}\n"], [4218298, "sub_405DBA", "__int64 __fastcall sub_405DBA(__int64 a1, int a2, char a3)\n{\n  __int64 result; // rax\n  int v4; // [rsp+18h] [rbp-8h]\n  int fd; // [rsp+1Ch] [rbp-4h]\n\n  v4 = *(_DWORD *)(a1 + 44);\n  if ( v4 == a2 && v4 != -100 )\n    abort();\n  if ( a3 )\n  {\n    fd = sub_40A26F(a1 + 96, (unsigned int)v4);\n    if ( fd >= 0 )\n      close(fd);\n  }\n  else if ( (*(_DWORD *)(a1 + 72) & 4) == 0 && v4 >= 0 )\n  {\n    close(v4);\n  }\n  result = a1;\n  *(_DWORD *)(a1 + 44) = a2;\n  return result;\n}\n"], [4218439, "sub_405E47", "__int64 __fastcall sub_405E47(__int64 a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // edx\n  int v7; // eax\n  int v8; // eax\n  int v10; // [rsp+18h] [rbp-8h]\n  unsigned int v11; // [rsp+1Ch] [rbp-4h]\n\n  if ( (*(_DWORD *)(a1 + 72) & 0x10) != 0 )\n    v6 = 198912;\n  else\n    v6 = 67840;\n  if ( (*(_DWORD *)(a1 + 72) & 0x800) != 0 )\n    v7 = 0x40000;\n  else\n    v7 = 0;\n  v10 = v6 | v7;\n  if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n    v8 = sub_40A379(*(_DWORD *)(a1 + 44), a2, v10, a2, a5, a6);\n  else\n    v8 = sub_408853(a2, v10, v10, a4, a5, a6, a2);\n  v11 = v8;\n  if ( v8 >= 0 )\n    sub_408616((unsigned int)v8, 1LL);\n  return v11;\n}\n"], [4218612, "fts_open", "__int64 __fastcall fts_open(const char **a1, int a2, __int64 a3)\n{\n  void *v4; // rax\n  __int64 v5; // rbx\n  int v6; // eax\n  __int64 v7; // rax\n  bool v8; // al\n  void *v9; // r13\n  unsigned __int64 v10; // r14\n  __int64 v11; // rax\n  _QWORD *v12; // r12\n  __int64 v13; // rdx\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  const char **v18; // [rsp+8h] [rbp-58h]\n  bool v19; // [rsp+1Fh] [rbp-41h]\n  _QWORD *ptr; // [rsp+20h] [rbp-40h]\n  _QWORD *v21; // [rsp+28h] [rbp-38h]\n  unsigned __int64 v22; // [rsp+30h] [rbp-30h]\n  size_t v23; // [rsp+38h] [rbp-28h]\n\n  v18 = a1;\n  ptr = 0LL;\n  v21 = 0LL;\n  if ( (a2 & 0xFFFFF000) != 0 || (a2 & 4) != 0 && (a2 & 0x200) != 0 || (a2 & 0x12) == 0 )\n  {\n    *__errno_location() = 22;\n    return 0LL;\n  }\n  v4 = malloc(0x80uLL);\n  v5 = (__int64)v4;\n  if ( !v4 )\n    return 0LL;\n  memset(v4, 0, 0x80uLL);\n  *(_QWORD *)(v5 + 64) = a3;\n  *(_DWORD *)(v5 + 72) = a2;\n  if ( (*(_DWORD *)(v5 + 72) & 2) != 0 )\n  {\n    *(_DWORD *)(v5 + 72) |= 4u;\n    v6 = *(_DWORD *)(v5 + 72);\n    BYTE1(v6) &= 0xFDu;\n    *(_DWORD *)(v5 + 72) = v6;\n  }\n  *(_DWORD *)(v5 + 44) = -100;\n  v22 = sub_4081F0(a1);\n  v7 = 4096LL;\n  if ( v22 >= 0x1000 )\n    v7 = v22;\n  if ( (unsigned __int8)sub_408010(v5, v7) != 1 )\n    goto LABEL_47;\n  if ( *a1 )\n  {\n    ptr = (_QWORD *)sub_407F27(v5, &unk_40BA43, 0LL);\n    if ( ptr )\n    {\n      ptr[11] = -1LL;\n      goto LABEL_17;\n    }\nLABEL_46:\n    free(*(void **)(v5 + 32));\nLABEL_47:\n    free((void *)v5);\n    return 0LL;\n  }\nLABEL_17:\n  v8 = !a3 || (*(_DWORD *)(v5 + 72) & 0x400) != 0;\n  v19 = v8;\n  v9 = 0LL;\n  v10 = 0LL;\n  while ( *v18 )\n  {\n    v23 = strlen(*v18);\n    v11 = sub_407F27(v5, *v18, v23);\n    v12 = (_QWORD *)v11;\n    if ( !v11 )\n      goto LABEL_45;\n    *(_QWORD *)(v11 + 88) = 0LL;\n    *(_QWORD *)(v11 + 8) = ptr;\n    *(_QWORD *)(v11 + 48) = v11 + 264;\n    if ( v19 && v9 )\n    {\n      *(_WORD *)(v11 + 112) = 11;\n      sub_405CDE(v11, 1);\n    }\n    else\n    {\n      *(_WORD *)(v11 + 112) = sub_407BDE(v5, v11, 0LL);\n    }\n    if ( a3 )\n    {\n      v12[2] = v9;\n      v9 = v12;\n    }\n    else\n    {\n      v12[2] = 0LL;\n      if ( v9 )\n        v21[2] = v12;\n      else\n        v9 = v12;\n      v21 = v12;\n    }\n    ++v18;\n    ++v10;\n  }\n  if ( a3 && v10 > 1 )\n    v9 = (void *)sub_407DE0(v5, v9, v10);\n  *(_QWORD *)v5 = sub_407F27(v5, &unk_40BA43, 0LL);\n  if ( !*(_QWORD *)v5\n    || (*(_QWORD *)(*(_QWORD *)v5 + 16LL) = v9,\n        *(_WORD *)(*(_QWORD *)v5 + 112LL) = 9,\n        (unsigned __int8)sub_405999(v5) ^ 1) )\n  {\nLABEL_45:\n    sub_407FD5(v9);\n    free(ptr);\n    goto LABEL_46;\n  }\n  if ( (*(_DWORD *)(v5 + 72) & 4) == 0 && (*(_DWORD *)(v5 + 72) & 0x200) == 0 )\n  {\n    *(_DWORD *)(v5 + 40) = sub_405E47(v5, (int)\".\", v13, v14, v15, v16);\n    if ( *(int *)(v5 + 40) < 0 )\n      *(_DWORD *)(v5 + 72) |= 4u;\n  }\n  sub_40A205(v5 + 96, 0xFFFFFFFFLL);\n  return v5;\n}\n"], [4219470, "sub_40624E", "__int64 __fastcall sub_40624E(__int64 a1, const char *a2)\n{\n  char *v2; // r12\n  const char *v3; // r12\n  size_t v4; // r13\n  __int64 result; // rax\n\n  *((_QWORD *)a2 + 9) = *((_QWORD *)a2 + 12);\n  memmove(*(void **)(a1 + 32), a2 + 264, *((_QWORD *)a2 + 9) + 1LL);\n  v2 = strrchr(a2 + 264, 47);\n  if ( v2 && (a2 + 264 != v2 || v2[1]) )\n  {\n    v3 = v2 + 1;\n    v4 = strlen(v3);\n    memmove((void *)(a2 + 264), v3, v4 + 1);\n    *((_QWORD *)a2 + 12) = v4;\n  }\n  *((_QWORD *)a2 + 7) = *(_QWORD *)(a1 + 32);\n  result = *((_QWORD *)a2 + 7);\n  *((_QWORD *)a2 + 6) = result;\n  return result;\n}\n"], [4219656, "fts_close", "__int64 __fastcall fts_close(__int64 a1)\n{\n  _QWORD *v1; // rbx\n  void *v2; // r12\n  _QWORD *v3; // rax\n  int v5; // [rsp+1Ch] [rbp-14h]\n\n  v5 = 0;\n  if ( *(_QWORD *)a1 )\n  {\n    v1 = *(_QWORD **)a1;\n    while ( (__int64)v1[11] >= 0 )\n    {\n      v2 = v1;\n      if ( v1[2] )\n        v3 = (_QWORD *)v1[2];\n      else\n        v3 = (_QWORD *)v1[1];\n      v1 = v3;\n      free(v2);\n    }\n    free(v1);\n  }\n  if ( *(_QWORD *)(a1 + 8) )\n    sub_407FD5(*(void **)(a1 + 8));\n  free(*(void **)(a1 + 16));\n  free(*(void **)(a1 + 32));\n  if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n  {\n    if ( *(int *)(a1 + 44) >= 0 && close(*(_DWORD *)(a1 + 44)) )\n    {\nLABEL_20:\n      v5 = *__errno_location();\n      goto LABEL_21;\n    }\n  }\n  else if ( (*(_DWORD *)(a1 + 72) & 4) == 0 )\n  {\n    if ( fchdir(*(_DWORD *)(a1 + 40)) )\n      v5 = *__errno_location();\n    if ( close(*(_DWORD *)(a1 + 40)) && !v5 )\n      goto LABEL_20;\n  }\nLABEL_21:\n  sub_405C9C(a1 + 96);\n  if ( *(_QWORD *)(a1 + 80) )\n    sub_4094E2(*(_QWORD *)(a1 + 80));\n  sub_405C4F(a1);\n  free((void *)a1);\n  if ( !v5 )\n    return 0LL;\n  *__errno_location() = v5;\n  return 0xFFFFFFFFLL;\n}\n"], [4220049, "sub_406491", "_BOOL8 __fastcall sub_406491(int a1)\n{\n  struct statfs buf; // [rsp+10h] [rbp-80h] BYREF\n\n  if ( fstatfs(a1, &buf) )\n    return 1LL;\n  return buf.f_type != 26985 && buf.f_type != 16914836;\n}\n"], [4220131, "sub_4064E3", "_BOOL8 __fastcall sub_4064E3(int a1)\n{\n  _BOOL8 result; // rax\n  struct statfs buf; // [rsp+10h] [rbp-80h] BYREF\n\n  if ( fstatfs(a1, &buf) )\n    result = 0LL;\n  else\n    result = buf.f_type == 1382369651;\n  return result;\n}\n"], [4220205, "sub_40652D", "unsigned __int64 __fastcall sub_40652D(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"], [4220246, "sub_406556", "bool __fastcall sub_406556(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n"], [4220296, "sub_406588", "__int64 __fastcall sub_406588(__int64 a1)\n{\n  __int64 result; // rax\n  bool v2; // [rsp+1Fh] [rbp-31h]\n  __int64 v3; // [rsp+20h] [rbp-30h]\n  __int64 v4; // [rsp+28h] [rbp-28h]\n  __int64 v5; // [rsp+30h] [rbp-20h]\n  __int64 v6; // [rsp+30h] [rbp-20h]\n  _BYTE *ptr; // [rsp+38h] [rbp-18h]\n  __int64 v8; // [rsp+40h] [rbp-10h] BYREF\n\n  v4 = *(_QWORD *)(a1 + 80);\n  v3 = *(_QWORD *)(v4 + 80);\n  if ( (*(_DWORD *)(v4 + 72) & 0x200) == 0 )\n    return 0LL;\n  if ( !v3 )\n  {\n    *(_QWORD *)(v4 + 80) = sub_409277(13LL, 0LL, sub_40652D, sub_406556, free);\n    v3 = *(_QWORD *)(v4 + 80);\n    if ( !v3 )\n      return 0LL;\n  }\n  v8 = *(_QWORD *)(a1 + 120);\n  v5 = sub_408C3E(v3, &v8);\n  if ( v5 )\n    return *(unsigned __int8 *)(v5 + 8);\n  ptr = malloc(0x10uLL);\n  if ( !ptr )\n    return 0LL;\n  v2 = sub_4064E3(*(_DWORD *)(v4 + 44));\n  ptr[8] = v2;\n  *(_QWORD *)ptr = *(_QWORD *)(a1 + 120);\n  v6 = sub_409F0D(v3, ptr);\n  if ( v6 )\n  {\n    if ( (_BYTE *)v6 != ptr )\n      abort();\n    result = v2;\n  }\n  else\n  {\n    free(ptr);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4220629, "fts_read", "__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 result; // rax\n  __int64 v2; // rbx\n  __int16 v3; // r13\n  __int64 v4; // rdx\n  int v5; // ecx\n  int v6; // er8\n  int v7; // er9\n  int v8; // eax\n  _QWORD *i; // rbx\n  _QWORD *v10; // r13\n  __int64 v11; // rbx\n  int v12; // eax\n  int v13; // eax\n  __int64 v14; // rdx\n  int v15; // ecx\n  int v16; // er8\n  int v17; // er9\n  __int64 v18; // rax\n  _BYTE *v19; // rax\n  __int64 v20; // rbx\n  int v21; // eax\n  bool v22; // al\n  int v23; // eax\n  int v24; // eax\n  __int16 v25; // ax\n  int v26; // [rsp+4h] [rbp-2Ch]\n  __int64 v27; // [rsp+8h] [rbp-28h]\n\n  if ( !*(_QWORD *)a1 || (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n    return 0LL;\n  v2 = *(_QWORD *)a1;\n  v3 = *(_WORD *)(*(_QWORD *)a1 + 116LL);\n  *(_WORD *)(*(_QWORD *)a1 + 116LL) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v2 + 112) = sub_407BDE(a1, v2, 0LL);\n    return v2;\n  }\n  if ( v3 == 2 && (*(_WORD *)(v2 + 112) == 12 || *(_WORD *)(v2 + 112) == 13) )\n  {\n    *(_WORD *)(v2 + 112) = sub_407BDE(a1, v2, 1LL);\n    if ( *(_WORD *)(v2 + 112) == 1 && (*(_DWORD *)(a1 + 72) & 4) == 0 )\n    {\n      *(_DWORD *)(v2 + 68) = sub_405E47(a1, (int)\".\", v4, v5, v6, v7);\n      if ( *(int *)(v2 + 68) >= 0 )\n      {\n        *(_WORD *)(v2 + 114) |= 2u;\n      }\n      else\n      {\n        *(_DWORD *)(v2 + 64) = *__errno_location();\n        *(_WORD *)(v2 + 112) = 7;\n      }\n    }\n    goto LABEL_71;\n  }\n  if ( *(_WORD *)(v2 + 112) == 1 )\n  {\n    if ( v3 == 4 || (*(_DWORD *)(a1 + 72) & 0x40) != 0 && *(_QWORD *)(v2 + 120) != *(_QWORD *)(a1 + 24) )\n    {\n      if ( (*(_WORD *)(v2 + 114) & 2) != 0 )\n        close(*(_DWORD *)(v2 + 68));\n      if ( *(_QWORD *)(a1 + 8) )\n      {\n        sub_407FD5(*(void **)(a1 + 8));\n        *(_QWORD *)(a1 + 8) = 0LL;\n      }\n      *(_WORD *)(v2 + 112) = 6;\n      sub_405B42(a1, v2);\n      return v2;\n    }\n    if ( *(_QWORD *)(a1 + 8) && (*(_DWORD *)(a1 + 72) & 0x1000) != 0 )\n    {\n      v8 = *(_DWORD *)(a1 + 72);\n      BYTE1(v8) &= 0xEFu;\n      *(_DWORD *)(a1 + 72) = v8;\n      sub_407FD5(*(void **)(a1 + 8));\n      *(_QWORD *)(a1 + 8) = 0LL;\n    }\n    if ( *(_QWORD *)(a1 + 8) )\n    {\n      if ( (unsigned int)sub_408246(a1, v2, 0xFFFFFFFFLL, *(_QWORD *)(v2 + 48)) )\n      {\n        *(_DWORD *)(v2 + 64) = *__errno_location();\n        *(_WORD *)(v2 + 114) |= 1u;\n        for ( i = *(_QWORD **)(a1 + 8); i; i = (_QWORD *)i[2] )\n          i[6] = *(_QWORD *)(i[1] + 48LL);\n      }\n    }\n    else\n    {\n      *(_QWORD *)(a1 + 8) = sub_40719C(a1, 3LL);\n      if ( !*(_QWORD *)(a1 + 8) )\n      {\n        if ( (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n          return 0LL;\n        if ( *(_DWORD *)(v2 + 64) && *(_WORD *)(v2 + 112) != 4 )\n          *(_WORD *)(v2 + 112) = 7;\n        sub_405B42(a1, v2);\n        return v2;\n      }\n    }\n    v2 = *(_QWORD *)(a1 + 8);\n    *(_QWORD *)(a1 + 8) = 0LL;\nLABEL_67:\n    if ( *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 56LL) + *(_QWORD *)(*(_QWORD *)(v2 + 8) + 72LL) - 1LL) == 47 )\n      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 72LL) - 1LL;\n    else\n      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 72LL);\n    v19 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v18);\n    *v19 = 47;\n    memmove(v19 + 1, (const void *)(v2 + 264), *(_QWORD *)(v2 + 96) + 1LL);\n    goto LABEL_71;\n  }\n  while ( 1 )\n  {\n    v10 = (_QWORD *)v2;\n    if ( !*(_QWORD *)(v2 + 16) && *(_QWORD *)(*(_QWORD *)(v2 + 8) + 24LL) )\n    {\n      v11 = *(_QWORD *)(v2 + 8);\n      *(_QWORD *)a1 = v11;\n      *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v11 + 72)) = 0;\n      v2 = sub_40719C(a1, 3LL);\n      if ( v2 )\n      {\n        free(v10);\n        goto LABEL_67;\n      }\n      if ( (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n        return 0LL;\nLABEL_91:\n      v20 = v10[1];\n      *(_QWORD *)a1 = v20;\n      free(v10);\n      if ( *(_QWORD *)(v20 + 88) == -1LL )\n      {\n        free((void *)v20);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return 0LL;\n      }\n      if ( *(_WORD *)(v20 + 112) == 11 )\n        abort();\n      *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v20 + 72)) = 0;\n      if ( *(_QWORD *)(v20 + 88) )\n      {\n        if ( (*(_WORD *)(v20 + 114) & 2) != 0 )\n        {\n          if ( (*(_DWORD *)(a1 + 72) & 4) == 0 )\n          {\n            if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n            {\n              sub_405DBA(a1, *(_DWORD *)(v20 + 68), 1);\n              v22 = 0;\n            }\n            else\n            {\n              v22 = fchdir(*(_DWORD *)(v20 + 68)) != 0;\n            }\n            if ( v22 )\n            {\n              v26 = *__errno_location();\n              close(*(_DWORD *)(v20 + 68));\n              *__errno_location() = v26;\n              *(_DWORD *)(v20 + 64) = *__errno_location();\n              v23 = *(_DWORD *)(a1 + 72);\n              BYTE1(v23) |= 0x20u;\n              *(_DWORD *)(a1 + 72) = v23;\n            }\n          }\n          close(*(_DWORD *)(v20 + 68));\n          goto LABEL_115;\n        }\n        if ( (*(_WORD *)(v20 + 114) & 1) == 0 && (unsigned int)sub_408246(a1, *(_QWORD *)(v20 + 8), 0xFFFFFFFFLL, \"..\") )\n          goto LABEL_114;\n        goto LABEL_115;\n      }\n      sub_405C9C(a1 + 96);\n      if ( (*(_DWORD *)(a1 + 72) & 4) == 0 )\n      {\n        if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n        {\n          sub_405DBA(a1, -100, 1);\n        }\n        else if ( fchdir(*(_DWORD *)(a1 + 40)) )\n        {\n          v21 = 1;\n          goto LABEL_102;\n        }\n      }\n      v21 = 0;\nLABEL_102:\n      if ( v21 )\n      {\nLABEL_114:\n        *(_DWORD *)(v20 + 64) = *__errno_location();\n        v24 = *(_DWORD *)(a1 + 72);\n        BYTE1(v24) |= 0x20u;\n        *(_DWORD *)(a1 + 72) = v24;\n      }\nLABEL_115:\n      if ( *(_DWORD *)(v20 + 64) )\n        v25 = 7;\n      else\n        v25 = 6;\n      *(_WORD *)(v20 + 112) = v25;\n      if ( !*(_DWORD *)(v20 + 64) )\n        sub_405B42(a1, v20);\n      if ( (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n        result = 0LL;\n      else\n        result = v20;\n      return result;\n    }\n    v2 = *(_QWORD *)(v2 + 16);\n    if ( !v2 )\n      goto LABEL_91;\n    *(_QWORD *)a1 = v2;\n    free(v10);\n    if ( !*(_QWORD *)(v2 + 88) )\n      break;\n    if ( *(_WORD *)(v2 + 116) != 4 )\n    {\n      if ( *(_WORD *)(v2 + 116) == 2 )\n      {\n        *(_WORD *)(v2 + 112) = sub_407BDE(a1, v2, 1LL);\n        if ( *(_WORD *)(v2 + 112) == 1 && (*(_DWORD *)(a1 + 72) & 4) == 0 )\n        {\n          *(_DWORD *)(v2 + 68) = sub_405E47(a1, (int)\".\", v14, v15, v16, v17);\n          if ( *(int *)(v2 + 68) >= 0 )\n          {\n            *(_WORD *)(v2 + 114) |= 2u;\n          }\n          else\n          {\n            *(_DWORD *)(v2 + 64) = *__errno_location();\n            *(_WORD *)(v2 + 112) = 7;\n          }\n        }\n        *(_WORD *)(v2 + 116) = 3;\n      }\n      goto LABEL_67;\n    }\n  }\n  sub_405C9C(a1 + 96);\n  if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n    goto LABEL_55;\n  if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n  {\n    sub_405DBA(a1, -100, 1);\n    goto LABEL_55;\n  }\n  if ( fchdir(*(_DWORD *)(a1 + 40)) )\n    v12 = 1;\n  else\nLABEL_55:\n    v12 = 0;\n  if ( v12 )\n  {\n    v13 = *(_DWORD *)(a1 + 72);\n    BYTE1(v13) |= 0x20u;\n    *(_DWORD *)(a1 + 72) = v13;\n    return 0LL;\n  }\n  sub_405C4F(a1);\n  sub_40624E(a1, (const char *)v2);\n  sub_405999(a1);\nLABEL_71:\n  *(_QWORD *)a1 = v2;\n  if ( *(_WORD *)(v2 + 112) == 11 )\n  {\n    if ( *(_QWORD *)(v2 + 168) == 2LL )\n    {\n      v27 = *(_QWORD *)(v2 + 8);\n      if ( *(__int64 *)(v2 + 88) <= 0\n        || *(_QWORD *)(v27 + 104)\n        || (*(_DWORD *)(a1 + 72) & 8) == 0\n        || (*(_DWORD *)(a1 + 72) & 0x10) == 0\n        || !(unsigned __int8)sub_406588(v27) )\n      {\n        *(_WORD *)(v2 + 112) = sub_407BDE(a1, v2, 0LL);\n        if ( (*(_DWORD *)(v2 + 144) & 0xF000) == 0x4000 && *(_QWORD *)(v2 + 88) && *(_QWORD *)(v27 + 104) )\n          --*(_QWORD *)(v27 + 104);\n      }\n    }\n    else if ( *(_QWORD *)(v2 + 168) != 1LL )\n    {\n      abort();\n    }\n  }\n  if ( *(_WORD *)(v2 + 112) != 1 )\n    return v2;\n  if ( !*(_QWORD *)(v2 + 88) )\n    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v2 + 120);\n  if ( (unsigned __int8)sub_405A32(a1, v2) == 1 )\n    return v2;\n  *__errno_location() = 12;\n  return 0LL;\n}\n"], [4222664, "fts_set", "__int64 __fastcall fts_set(__int64 a1, __int64 a2, int a3)\n{\n  __int64 result; // rax\n\n  if ( !a3 || a3 == 1 || a3 == 2 || a3 == 3 || a3 == 4 )\n  {\n    *(_WORD *)(a2 + 116) = a3;\n    result = 0LL;\n  }\n  else\n  {\n    *__errno_location() = 22;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4222751, "fts_children", "__int64 __fastcall fts_children(__int64 a1, int a2)\n{\n  __int64 v3; // r12\n  __int64 v4; // rdx\n  int v5; // ecx\n  int v6; // er8\n  int v7; // er9\n  int v8; // eax\n  unsigned int v9; // [rsp+Ch] [rbp-24h]\n  int fd; // [rsp+18h] [rbp-18h]\n  int v11; // [rsp+1Ch] [rbp-14h]\n\n  if ( a2 && a2 != 4096 )\n  {\n    *__errno_location() = 22;\n    return 0LL;\n  }\n  v3 = *(_QWORD *)a1;\n  *__errno_location() = 0;\n  if ( (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n    return 0LL;\n  if ( *(_WORD *)(v3 + 112) == 9 )\n    return *(_QWORD *)(v3 + 16);\n  if ( *(_WORD *)(v3 + 112) != 1 )\n    return 0LL;\n  if ( *(_QWORD *)(a1 + 8) )\n    sub_407FD5(*(void **)(a1 + 8));\n  if ( a2 == 4096 )\n  {\n    v8 = *(_DWORD *)(a1 + 72);\n    BYTE1(v8) |= 0x10u;\n    *(_DWORD *)(a1 + 72) = v8;\n    v9 = 2;\n  }\n  else\n  {\n    v9 = 1;\n  }\n  if ( *(_QWORD *)(v3 + 88) || **(_BYTE **)(v3 + 48) == 47 || (*(_DWORD *)(a1 + 72) & 4) != 0 )\n  {\n    *(_QWORD *)(a1 + 8) = sub_40719C(a1, v9);\n    return *(_QWORD *)(a1 + 8);\n  }\n  fd = sub_405E47(a1, (int)\".\", v4, v5, v6, v7);\n  if ( fd < 0 )\n  {\n    *(_QWORD *)(a1 + 8) = 0LL;\n    return 0LL;\n  }\n  *(_QWORD *)(a1 + 8) = sub_40719C(a1, v9);\n  if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n  {\n    sub_405DBA(a1, fd, 1);\n  }\n  else\n  {\n    if ( fchdir(fd) )\n    {\n      v11 = *__errno_location();\n      close(fd);\n      *__errno_location() = v11;\n      return 0LL;\n    }\n    close(fd);\n  }\n  return *(_QWORD *)(a1 + 8);\n}\n"], [4223157, "sub_4070B5", "__int64 __fastcall sub_4070B5(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( *(_QWORD *)(*(_QWORD *)a1 + 128LL) < *(_QWORD *)(*(_QWORD *)a2 + 128LL) )\n    result = 0xFFFFFFFFLL;\n  else\n    result = *(_QWORD *)(*(_QWORD *)a2 + 128LL) < *(_QWORD *)(*(_QWORD *)a1 + 128LL);\n  return result;\n}\n"], [4223248, "sub_407110", "__int64 __fastcall sub_407110(__int64 a1, unsigned int a2)\n{\n  __int64 result; // rax\n  int v3; // [rsp+18h] [rbp-4h]\n\n  if ( a2 == 6 )\n  {\n    v3 = 24576;\n  }\n  else if ( a2 > 6 )\n  {\n    switch ( a2 )\n    {\n      case 0xAu:\n        v3 = 40960;\n        break;\n      case 0xCu:\n        v3 = 49152;\n        break;\n      case 8u:\n        v3 = 0x8000;\n        break;\n      default:\n        goto LABEL_18;\n    }\n  }\n  else\n  {\n    switch ( a2 )\n    {\n      case 2u:\n        v3 = 0x2000;\n        break;\n      case 4u:\n        v3 = 0x4000;\n        break;\n      case 1u:\n        v3 = 4096;\n        break;\n      default:\nLABEL_18:\n        v3 = 0;\n        break;\n    }\n  }\n  result = a1;\n  *(_DWORD *)(a1 + 24) = v3;\n  return result;\n}\n"], [4223388, "sub_40719C", "void *__fastcall sub_40719C(__int64 a1, int a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  void *result; // rax\n  int v8; // edx\n  int v9; // eax\n  int v10; // edi\n  int v11; // eax\n  __int64 v12; // rax\n  __int16 v13; // ax\n  unsigned __int64 v14; // rax\n  __int64 v15; // rax\n  __int64 v16; // rax\n  _BYTE *v17; // rax\n  void *v18; // r13\n  unsigned __int64 v19; // r14\n  size_t v20; // rax\n  __int64 v21; // r12\n  size_t v22; // rax\n  size_t v23; // rax\n  int v24; // eax\n  size_t v25; // rax\n  int v26; // eax\n  bool v27; // al\n  bool v28; // al\n  bool v29; // al\n  int v30; // eax\n  bool v31; // al\n  int v32; // eax\n  char v33; // [rsp+12h] [rbp-8Eh]\n  char v34; // [rsp+13h] [rbp-8Dh]\n  unsigned __int8 v35; // [rsp+14h] [rbp-8Ch]\n  bool v36; // [rsp+15h] [rbp-8Bh]\n  bool v37; // [rsp+16h] [rbp-8Ah]\n  bool v38; // [rsp+17h] [rbp-89h]\n  int fd; // [rsp+18h] [rbp-88h] BYREF\n  int v40; // [rsp+1Ch] [rbp-84h]\n  void *ptr; // [rsp+20h] [rbp-80h]\n  __int64 v42; // [rsp+28h] [rbp-78h]\n  unsigned __int64 v43; // [rsp+30h] [rbp-70h]\n  void *dest; // [rsp+38h] [rbp-68h]\n  __int64 v45; // [rsp+40h] [rbp-60h]\n  DIR *dirp; // [rsp+48h] [rbp-58h]\n  unsigned __int64 v47; // [rsp+50h] [rbp-50h]\n  unsigned __int64 v48; // [rsp+58h] [rbp-48h]\n  __int64 v49; // [rsp+60h] [rbp-40h]\n  struct dirent *v50; // [rsp+68h] [rbp-38h]\n  __int64 v51; // [rsp+70h] [rbp-30h]\n  unsigned __int64 v52; // [rsp+78h] [rbp-28h]\n\n  v45 = *(_QWORD *)a1;\n  v37 = *(_QWORD *)(v45 + 24) != 0LL;\n  if ( *(_QWORD *)(v45 + 24) )\n  {\n    dirp = *(DIR **)(v45 + 24);\n    fd = dirfd(dirp);\n    if ( fd < 0 )\n    {\n      closedir(*(DIR **)(v45 + 24));\n      *(_QWORD *)(v45 + 24) = 0LL;\n      if ( a2 == 3 )\n      {\n        *(_WORD *)(v45 + 112) = 4;\n        *(_DWORD *)(v45 + 64) = *__errno_location();\n      }\n      return 0LL;\n    }\nLABEL_28:\n    if ( *(_QWORD *)(a1 + 64) )\n      v14 = -1LL;\n    else\n      v14 = 100000LL;\n    v47 = v14;\n    if ( a2 == 2 )\n    {\n      v42 = 0LL;\n      v35 = 0;\n    }\n    else if ( (*(_DWORD *)(a1 + 72) & 8) != 0 && (*(_DWORD *)(a1 + 72) & 0x10) != 0 )\n    {\n      if ( (*(_DWORD *)(a1 + 72) & 0x20) != 0 )\n        v15 = 0LL;\n      else\n        v15 = 2LL;\n      v42 = *(_QWORD *)(v45 + 136) - v15;\n      v35 = 1;\n    }\n    else\n    {\n      v42 = -1LL;\n      v35 = 0;\n    }\n    if ( v37 )\n    {\n      v33 = 1;\n    }\n    else if ( v42 || a2 == 3 )\n    {\n      if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n      {\n        fd = sub_40A48D((unsigned int)fd);\n        if ( fd >= 0 )\n          sub_408616((unsigned int)fd, 1LL);\n      }\n      if ( fd < 0 || (unsigned int)sub_408246(a1, v45, (unsigned int)fd, 0LL) )\n      {\n        if ( v42 && a2 == 3 )\n          *(_DWORD *)(v45 + 64) = *__errno_location();\n        *(_WORD *)(v45 + 114) |= 1u;\n        v33 = 0;\n        closedir(*(DIR **)(v45 + 24));\n        *(_QWORD *)(v45 + 24) = 0LL;\n        if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 && fd >= 0 )\n          close(fd);\n        *(_QWORD *)(v45 + 24) = 0LL;\n      }\n      else\n      {\n        v33 = 1;\n      }\n    }\n    else\n    {\n      v33 = 0;\n    }\n    if ( *(_BYTE *)(*(_QWORD *)(v45 + 56) + *(_QWORD *)(v45 + 72) - 1LL) == 47 )\n      v16 = *(_QWORD *)(v45 + 72) - 1LL;\n    else\n      v16 = *(_QWORD *)(v45 + 72);\n    v48 = v16;\n    if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n    {\n      v17 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v48);\n      dest = v17 + 1;\n      *v17 = 47;\n    }\n    else\n    {\n      dest = 0LL;\n    }\n    ++v48;\n    v43 = *(_QWORD *)(a1 + 48) - v48;\n    v49 = *(_QWORD *)(v45 + 88) + 1LL;\n    v34 = 0;\n    v18 = 0LL;\n    ptr = 0LL;\n    v19 = 0LL;\n    while ( *(_QWORD *)(v45 + 24) )\n    {\n      v50 = readdir(*(DIR **)(v45 + 24));\n      if ( !v50 )\n        break;\n      if ( (*(_DWORD *)(a1 + 72) & 0x20) != 0\n        || v50->d_name[0] != 46\n        || v50->d_name[1] && (v50->d_name[1] != 46 || v50->d_name[2]) )\n      {\n        v20 = strlen(v50->d_name);\n        v21 = sub_407F27(a1, v50->d_name, v20);\n        if ( !v21 )\n          goto LABEL_75;\n        v22 = strlen(v50->d_name);\n        if ( v22 >= v43 )\n        {\n          v51 = *(_QWORD *)(a1 + 32);\n          v23 = strlen(v50->d_name);\n          if ( (unsigned __int8)sub_408010(a1, v48 + v23 + 1) != 1 )\n          {\nLABEL_75:\n            v40 = *__errno_location();\n            free((void *)v21);\n            sub_407FD5(v18);\n            closedir(*(DIR **)(v45 + 24));\n            *(_QWORD *)(v45 + 24) = 0LL;\n            *(_WORD *)(v45 + 112) = 7;\n            v24 = *(_DWORD *)(a1 + 72);\n            BYTE1(v24) |= 0x20u;\n            *(_DWORD *)(a1 + 72) = v24;\n            *__errno_location() = v40;\n            return 0LL;\n          }\n          if ( *(_QWORD *)(a1 + 32) != v51 )\n          {\n            v34 = 1;\n            if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n              dest = (void *)(*(_QWORD *)(a1 + 32) + v48);\n          }\n          v43 = *(_QWORD *)(a1 + 48) - v48;\n        }\n        v25 = strlen(v50->d_name);\n        v52 = v48 + v25;\n        if ( v48 + v25 < v48 )\n        {\n          free((void *)v21);\n          sub_407FD5(v18);\n          closedir(*(DIR **)(v45 + 24));\n          *(_QWORD *)(v45 + 24) = 0LL;\n          *(_WORD *)(v45 + 112) = 7;\n          v26 = *(_DWORD *)(a1 + 72);\n          BYTE1(v26) |= 0x20u;\n          *(_DWORD *)(a1 + 72) = v26;\n          *__errno_location() = 36;\n          return 0LL;\n        }\n        *(_QWORD *)(v21 + 88) = v49;\n        *(_QWORD *)(v21 + 8) = *(_QWORD *)a1;\n        *(_QWORD *)(v21 + 72) = v52;\n        *(_QWORD *)(v21 + 128) = v50->d_ino;\n        if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n        {\n          *(_QWORD *)(v21 + 48) = *(_QWORD *)(v21 + 56);\n          memmove(dest, (const void *)(v21 + 264), *(_QWORD *)(v21 + 96) + 1LL);\n        }\n        else\n        {\n          *(_QWORD *)(v21 + 48) = v21 + 264;\n        }\n        if ( *(_QWORD *)(a1 + 64) && (*(_DWORD *)(a1 + 72) & 0x400) == 0 )\n        {\n          *(_WORD *)(v21 + 112) = sub_407BDE(a1, v21, 0LL);\n          v29 = *(_WORD *)(v21 + 112) == 1 || *(_WORD *)(v21 + 112) == 2 || *(_WORD *)(v21 + 112) == 5;\n          v36 = v29;\n        }\n        else\n        {\n          v27 = (*(_DWORD *)(a1 + 72) & 0x10) != 0 && (*(_DWORD *)(a1 + 72) & 8) != 0 && v50->d_type && v50->d_type != 4;\n          v38 = v27;\n          *(_WORD *)(v21 + 112) = 11;\n          sub_407110(v21 + 120, v50->d_type);\n          sub_405CDE(v21, !v38);\n          v28 = (*(_DWORD *)(a1 + 72) & 0x10) != 0 && v50->d_type == 4;\n          v36 = v28;\n        }\n        if ( v42 && v36 )\n          v42 -= v35;\n        *(_QWORD *)(v21 + 16) = 0LL;\n        if ( v18 )\n        {\n          *((_QWORD *)ptr + 2) = v21;\n          ptr = (void *)v21;\n        }\n        else\n        {\n          ptr = (void *)v21;\n          v18 = (void *)v21;\n        }\n        if ( v47 <= ++v19 )\n          goto LABEL_114;\n      }\n    }\n    if ( *(_QWORD *)(v45 + 24) )\n    {\n      closedir(*(DIR **)(v45 + 24));\n      *(_QWORD *)(v45 + 24) = 0LL;\n    }\nLABEL_114:\n    if ( v34 )\n      sub_4080DD(a1, v18);\n    if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n    {\n      if ( *(_QWORD *)(a1 + 48) == v48 || !v19 )\n        dest = (char *)dest - 1;\n      *(_BYTE *)dest = 0;\n    }\n    if ( v37 || !v33 || a2 != 1 && v19 )\n    {\nLABEL_136:\n      if ( v19 )\n      {\n        if ( v19 > 0x2710\n          && !*(_QWORD *)(a1 + 64)\n          && (*(_DWORD *)(a1 + 72) & 0x200) != 0\n          && sub_406491(*(_DWORD *)(a1 + 44)) )\n        {\n          *(_QWORD *)(a1 + 64) = sub_4070B5;\n          v18 = (void *)sub_407DE0(a1, v18, v19);\n          *(_QWORD *)(a1 + 64) = 0LL;\n        }\n        if ( *(_QWORD *)(a1 + 64) && v19 > 1 )\n          v18 = (void *)sub_407DE0(a1, v18, v19);\n        result = v18;\n      }\n      else\n      {\n        if ( a2 == 3 )\n          *(_WORD *)(v45 + 112) = 6;\n        sub_407FD5(v18);\n        result = 0LL;\n      }\n      return result;\n    }\n    if ( *(_QWORD *)(v45 + 88) )\n    {\n      v31 = (unsigned int)sub_408246(a1, *(_QWORD *)(v45 + 8), 0xFFFFFFFFLL, \"..\") != 0;\nLABEL_134:\n      if ( v31 )\n      {\n        *(_WORD *)(v45 + 112) = 7;\n        v32 = *(_DWORD *)(a1 + 72);\n        BYTE1(v32) |= 0x20u;\n        *(_DWORD *)(a1 + 72) = v32;\n        sub_407FD5(v18);\n        return 0LL;\n      }\n      goto LABEL_136;\n    }\n    sub_405C9C(a1 + 96);\n    if ( (*(_DWORD *)(a1 + 72) & 4) == 0 )\n    {\n      if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n      {\n        sub_405DBA(a1, -100, 1);\n      }\n      else if ( fchdir(*(_DWORD *)(a1 + 40)) )\n      {\n        v30 = 1;\nLABEL_132:\n        v31 = v30 != 0;\n        goto LABEL_134;\n      }\n    }\n    v30 = 0;\n    goto LABEL_132;\n  }\n  if ( (*(_DWORD *)(a1 + 72) & 0x10) != 0 && ((*(_DWORD *)(a1 + 72) & 1) == 0 || *(_QWORD *)(v45 + 88)) )\n    v8 = 0x20000;\n  else\n    v8 = 0;\n  if ( (*(_DWORD *)(a1 + 72) & 0x800) != 0 )\n    v9 = 0x40000;\n  else\n    v9 = 0;\n  v10 = v9 | v8;\n  if ( (*(_DWORD *)(a1 + 72) & 4) != 0 || (*(_DWORD *)(a1 + 72) & 0x200) == 0 )\n    v11 = -100;\n  else\n    v11 = *(_DWORD *)(a1 + 44);\n  v12 = sub_405D21(v11, *(_QWORD *)(v45 + 48), v10, &fd, a5, a6);\n  *(_QWORD *)(v45 + 24) = v12;\n  if ( *(_QWORD *)(v45 + 24) )\n  {\n    if ( *(_WORD *)(v45 + 112) == 11 )\n    {\n      v13 = sub_407BDE(a1, v45, 0LL);\n      *(_WORD *)(v45 + 112) = v13;\n    }\n    else if ( (*(_DWORD *)(a1 + 72) & 0x100) != 0 )\n    {\n      sub_405B42(a1, v45);\n      sub_407BDE(a1, v45, 0LL);\n      if ( (unsigned __int8)sub_405A32(a1, v45) != 1 )\n      {\n        *__errno_location() = 12;\n        return 0LL;\n      }\n    }\n    goto LABEL_28;\n  }\n  if ( a2 == 3 )\n  {\n    *(_WORD *)(v45 + 112) = 4;\n    *(_DWORD *)(v45 + 64) = *__errno_location();\n  }\n  return 0LL;\n}\n"], [4226014, "sub_407BDE", "__int64 __fastcall sub_407BDE(__int64 a1, __int64 a2, char a3)\n{\n  __int64 result; // rax\n  __int64 v4; // rax\n  int v6; // [rsp+14h] [rbp-1Ch]\n  struct stat *s; // [rsp+18h] [rbp-18h]\n\n  s = (struct stat *)(a2 + 120);\n  if ( !*(_QWORD *)(a2 + 88) && (*(_DWORD *)(a1 + 72) & 1) != 0 )\n    a3 = 1;\n  if ( (*(_DWORD *)(a1 + 72) & 2) != 0 || a3 )\n  {\n    if ( (unsigned int)sub_40AA50(*(char **)(a2 + 48), s) )\n    {\n      v6 = *__errno_location();\n      if ( *__errno_location() == 2 && !(unsigned int)sub_40AA70(*(char **)(a2 + 48), s) )\n      {\n        *__errno_location() = 0;\n        return 13LL;\n      }\n      *(_DWORD *)(a2 + 64) = v6;\n      goto LABEL_14;\n    }\n  }\n  else if ( (unsigned int)sub_40AA80(*(_DWORD *)(a1 + 44), *(char **)(a2 + 48), s, 256) )\n  {\n    *(_DWORD *)(a2 + 64) = *__errno_location();\nLABEL_14:\n    memset(s, 0, sizeof(struct stat));\n    return 10LL;\n  }\n  switch ( *(_DWORD *)(a2 + 144) & 0xF000 )\n  {\n    case 16384:\n      if ( (*(_DWORD *)(a1 + 72) & 0x20) != 0 )\n        v4 = 0LL;\n      else\n        v4 = 2LL;\n      *(_QWORD *)(a2 + 104) = *(_QWORD *)(a2 + 136) - v4;\n      if ( *(_BYTE *)(a2 + 264) != 46 || *(_BYTE *)(a2 + 265) && (*(_BYTE *)(a2 + 265) != 46 || *(_BYTE *)(a2 + 266)) )\n      {\n        result = 1LL;\n      }\n      else if ( *(_QWORD *)(a2 + 88) )\n      {\n        result = 5LL;\n      }\n      else\n      {\n        result = 1LL;\n      }\n      break;\n    case 40960:\n      result = 12LL;\n      break;\n    case 32768:\n      result = 8LL;\n      break;\n    default:\n      result = 3LL;\n      break;\n  }\n  return result;\n}\n"], [4226463, "sub_407D9F", "__int64 __fastcall sub_407D9F(__int64 a1, __int64 a2)\n{\n  return (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)(*(_QWORD *)a1 + 80LL) + 64LL))(a1, a2);\n}\n"], [4226528, "sub_407DE0", "__int64 __fastcall sub_407DE0(__int64 a1, __int64 a2, size_t a3)\n{\n  size_t v3; // r12\n  _QWORD *v5; // rbx\n  __int64 i; // r13\n  _QWORD *v7; // rax\n  _QWORD *v8; // rbx\n  __int64 v9; // [rsp+0h] [rbp-50h]\n  int (*compar)(const void *, const void *); // [rsp+20h] [rbp-30h]\n  void *v11; // [rsp+28h] [rbp-28h]\n\n  v3 = a3;\n  compar = *(int (**)(const void *, const void *))(a1 + 64);\n  if ( *(_QWORD *)(a1 + 56) < a3 )\n  {\n    *(_QWORD *)(a1 + 56) = a3 + 40;\n    if ( *(_QWORD *)(a1 + 56) > 0x1FFFFFFFFFFFFFFFuLL\n      || (v11 = realloc(*(void **)(a1 + 16), 8LL * *(_QWORD *)(a1 + 56))) == 0LL )\n    {\n      free(*(void **)(a1 + 16));\n      *(_QWORD *)(a1 + 16) = 0LL;\n      *(_QWORD *)(a1 + 56) = 0LL;\n      return a2;\n    }\n    *(_QWORD *)(a1 + 16) = v11;\n  }\n  v5 = *(_QWORD **)(a1 + 16);\n  for ( i = a2; i; i = *(_QWORD *)(i + 16) )\n  {\n    v7 = v5++;\n    *v7 = i;\n  }\n  qsort(*(void **)(a1 + 16), v3, 8uLL, compar);\n  v8 = *(_QWORD **)(a1 + 16);\n  v9 = *v8;\n  while ( --v3 )\n  {\n    *(_QWORD *)(*v8 + 16LL) = v8[1];\n    ++v8;\n  }\n  *(_QWORD *)(*v8 + 16LL) = 0LL;\n  return v9;\n}\n"], [4226855, "sub_407F27", "char *__fastcall sub_407F27(__int64 a1, const void *a2, size_t a3)\n{\n  char *v4; // rbx\n\n  v4 = (char *)malloc(a3 + 272);\n  if ( !v4 )\n    return 0LL;\n  memmove(v4 + 264, a2, a3);\n  v4[a3 + 264] = 0;\n  *((_QWORD *)v4 + 12) = a3;\n  *((_QWORD *)v4 + 10) = a1;\n  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 32);\n  *((_DWORD *)v4 + 16) = 0;\n  *((_QWORD *)v4 + 3) = 0LL;\n  *((_WORD *)v4 + 57) = 0;\n  *((_WORD *)v4 + 58) = 3;\n  *((_QWORD *)v4 + 4) = 0LL;\n  *((_QWORD *)v4 + 5) = 0LL;\n  return v4;\n}\n"], [4227029, "sub_407FD5", "void __fastcall sub_407FD5(void *ptr)\n{\n  DIR **v2; // rbx\n\n  while ( 1 )\n  {\n    v2 = (DIR **)ptr;\n    if ( !ptr )\n      break;\n    ptr = (void *)*((_QWORD *)ptr + 2);\n    if ( v2[3] )\n      closedir(v2[3]);\n    free(v2);\n  }\n}\n"], [4227088, "sub_408010", "__int64 __fastcall sub_408010(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 v3; // [rsp+10h] [rbp-10h]\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *(_QWORD *)(a1 + 48) + a2 + 256;\n  if ( *(_QWORD *)(a1 + 48) <= v3 )\n  {\n    *(_QWORD *)(a1 + 48) = v3;\n    v4 = realloc(*(void **)(a1 + 32), *(_QWORD *)(a1 + 48));\n    if ( v4 )\n    {\n      *(_QWORD *)(a1 + 32) = v4;\n      result = 1LL;\n    }\n    else\n    {\n      free(*(void **)(a1 + 32));\n      *(_QWORD *)(a1 + 32) = 0LL;\n      result = 0LL;\n    }\n  }\n  else\n  {\n    free(*(void **)(a1 + 32));\n    *(_QWORD *)(a1 + 32) = 0LL;\n    *__errno_location() = 36;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4227293, "sub_4080DD", "__int64 __fastcall sub_4080DD(__int64 a1, _QWORD *a2)\n{\n  _QWORD *v2; // rax\n  __int64 result; // rax\n  _QWORD *i; // [rsp+10h] [rbp-10h]\n  __int64 v6; // [rsp+18h] [rbp-8h]\n\n  v6 = *(_QWORD *)(a1 + 32);\n  for ( i = *(_QWORD **)(a1 + 8); i; i = (_QWORD *)i[2] )\n  {\n    if ( (_QWORD *)i[6] != i + 33 )\n      i[6] = v6 + i[6] - i[7];\n    i[7] = v6;\n  }\n  while ( 1 )\n  {\n    result = a2[11];\n    if ( result < 0 )\n      break;\n    if ( (_QWORD *)a2[6] != a2 + 33 )\n      a2[6] = v6 + a2[6] - a2[7];\n    a2[7] = v6;\n    if ( a2[2] )\n      v2 = (_QWORD *)a2[2];\n    else\n      v2 = (_QWORD *)a2[1];\n    a2 = v2;\n  }\n  return result;\n}\n"], [4227568, "sub_4081F0", "size_t __fastcall sub_4081F0(const char **a1)\n{\n  size_t v3; // [rsp+10h] [rbp-10h]\n  size_t v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0LL;\n  while ( *a1 )\n  {\n    v4 = strlen(*a1);\n    if ( v4 > v3 )\n      v3 = v4;\n    ++a1;\n  }\n  return v3 + 1;\n}\n"], [4227654, "sub_408246", "__int64 __fastcall sub_408246(__int64 a1, __int64 a2, int a3, const char *a4, int a5, int a6)\n{\n  bool v6; // al\n  char *s1; // [rsp+0h] [rbp-D0h]\n  char v10; // [rsp+2Fh] [rbp-A1h]\n  unsigned int v11; // [rsp+30h] [rbp-A0h]\n  int fildes; // [rsp+34h] [rbp-9Ch]\n  int v13; // [rsp+38h] [rbp-98h]\n  int v14; // [rsp+3Ch] [rbp-94h]\n  struct stat stat_buf; // [rsp+40h] [rbp-90h] BYREF\n\n  s1 = (char *)a4;\n  v6 = a4 && !strcmp(a4, \"..\");\n  v10 = v6;\n  if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n  {\n    if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 && a3 >= 0 )\n      close(a3);\n    return 0LL;\n  }\n  if ( a3 < 0 )\n  {\n    if ( v10 )\n    {\n      if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 && (unsigned __int8)sub_40A25D(a1 + 96) != 1 )\n      {\n        v13 = sub_40A2F7(a1 + 96);\n        v10 = 1;\n        if ( v13 >= 0 )\n        {\n          a3 = v13;\n          s1 = 0LL;\n        }\n      }\n    }\n  }\n  fildes = a3;\n  if ( a3 < 0 )\n  {\n    fildes = sub_405E47(a1, (int)s1, (__int64)s1, (int)a4, a5, a6);\n    if ( fildes < 0 )\n      return 0xFFFFFFFFLL;\n  }\n  if ( (*(_DWORD *)(a1 + 72) & 2) == 0 && (!s1 || strcmp(s1, \"..\")) )\n    goto LABEL_27;\n  if ( !(unsigned int)sub_40AA60(fildes, &stat_buf) )\n  {\n    if ( *(_QWORD *)(a2 + 120) != stat_buf.st_dev || *(_QWORD *)(a2 + 128) != stat_buf.st_ino )\n    {\n      *__errno_location() = 2;\n      v11 = -1;\n      goto LABEL_30;\n    }\nLABEL_27:\n    if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n    {\n      sub_405DBA(a1, fildes, v10 == 0);\n      return 0LL;\n    }\n    v11 = fchdir(fildes);\n    goto LABEL_30;\n  }\n  v11 = -1;\nLABEL_30:\n  if ( a3 < 0 )\n  {\n    v14 = *__errno_location();\n    close(fildes);\n    *__errno_location() = v14;\n  }\n  return v11;\n}\n"], [4228335, "sub_4084EF", "__ino_t *__fastcall sub_4084EF(__ino_t *a1)\n{\n  struct stat stat_buf; // [rsp+10h] [rbp-90h] BYREF\n\n  if ( (unsigned int)sub_40AA70(\"/\", &stat_buf) )\n    return 0LL;\n  *a1 = stat_buf.st_ino;\n  a1[1] = stat_buf.st_dev;\n  return a1;\n}\n"], [4228428, "sub_40854C", "__int64 __fastcall sub_40854C(const char **a1, int a2, __int64 a3)\n{\n  int v3; // eax\n  __int64 v5; // [rsp+28h] [rbp-8h]\n\n  v3 = a2;\n  BYTE1(v3) = BYTE1(a2) | 2;\n  v5 = fts_open(a1, v3, a3);\n  if ( !v5 )\n  {\n    if ( *__errno_location() == 22 )\n      __assert_fail(\"(*__errno_location ()) != 22\", \"../../src/lib/xfts.c\", 0x29u, \"xfts_open\");\n    sub_4058E5();\n  }\n  return v5;\n}\n"], [4228532, "sub_4085B4", "_BOOL8 __fastcall sub_4085B4(__int64 a1, __int64 a2)\n{\n  return (*(_DWORD *)(a1 + 72) & 0x10) != 0 && (*(_DWORD *)(a1 + 72) & 1) == 0\n      || (*(_DWORD *)(a1 + 72) & 0x10) != 0 && (*(_DWORD *)(a1 + 72) & 1) != 0 && *(_QWORD *)(a2 + 88);\n}\n"], [4228630, "sub_408616", "__int64 __fastcall sub_408616(int a1, char a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ecx\n  int v7; // er8\n  int v8; // er9\n  unsigned int v9; // eax\n  __int64 result; // rax\n  int v11; // [rsp+18h] [rbp-8h]\n\n  v11 = sub_40A5B5(a1, 1, 0, a4, a5, a6);\n  if ( v11 < 0\n    || (!a2 ? (v9 = v11 & 0xFFFFFFFE) : (v9 = v11 | 1),\n        v11 != v9 && (unsigned int)sub_40A5B5(a1, 2, v9, v6, v7, v8) == -1) )\n  {\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n"], [4228753, "sub_408691", "__int64 __fastcall sub_408691(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_40A5B5(a1, 1030, 0, a4, a5, a6);\n}\n"], [4228791, "sub_4086B7", "__int64 __fastcall sub_4086B7(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = (unsigned int)sub_40A500(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4228930, "sub_408742", "bool __fastcall sub_408742(__int64 a1)\n{\n  return (a1 & (a1 - 1)) == 0;\n}\n"], [4228958, "sub_40875E", "__int64 __fastcall sub_40875E(__int64 a1)\n{\n  __int64 result; // rax\n\n  *(_QWORD *)(a1 + 16) = 0LL;\n  result = a1;\n  *(_DWORD *)(a1 + 24) = 9827862;\n  return result;\n}\n"], [4228991, "sub_40877F", "__int64 __fastcall sub_40877F(__int64 a1, _QWORD *a2)\n{\n  if ( *(_DWORD *)(a1 + 24) != 9827862 )\n    __assert_fail(\"state->magic == 9827862\", \"../../src/lib/cycle-check.c\", 0x3Cu, \"cycle_check\");\n  if ( *(_QWORD *)(a1 + 16) && a2[1] == *(_QWORD *)a1 && *a2 == *(_QWORD *)(a1 + 8) )\n    return 1LL;\n  if ( sub_408742(++*(_QWORD *)(a1 + 16)) )\n  {\n    if ( !*(_QWORD *)(a1 + 16) )\n      return 1LL;\n    *(_QWORD *)(a1 + 8) = *a2;\n    *(_QWORD *)a1 = a2[1];\n  }\n  return 0LL;\n}\n"], [4229203, "sub_408853", "__int64 __fastcall sub_408853(const char *a1, char a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  unsigned int v5; // [rsp+14h] [rbp-CCh]\n\n  v5 = 0;\n  if ( (a2 & 0x40) != 0 )\n    v5 = a3;\n  v3 = open(a1, a2, v5);\n  return sub_40A4B3(v3);\n}\n"], [4229477, "sub_408965", "__int64 __fastcall sub_408965(__int64 a1, char a2)\n{\n  return __ROR8__(a1, a2);\n}\n"], [4229505, "sub_408981", "__int64 __fastcall sub_408981(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 16);\n}\n"], [4229523, "sub_408993", "__int64 __fastcall sub_408993(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 24);\n}\n"], [4229541, "sub_4089A5", "__int64 __fastcall sub_4089A5(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 32);\n}\n"], [4229559, "sub_4089B7", "unsigned __int64 __fastcall sub_4089B7(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  unsigned __int64 v3; // [rsp+10h] [rbp-18h]\n  _QWORD *v4; // [rsp+18h] [rbp-10h]\n  unsigned __int64 j; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v4 = i;\n      for ( j = 1LL; ; ++j )\n      {\n        v4 = (_QWORD *)v4[1];\n        if ( !v4 )\n          break;\n      }\n      if ( j > v3 )\n        v3 = j;\n    }\n  }\n  return v3;\n}\n"], [4229685, "sub_408A35", "_BOOL8 __fastcall sub_408A35(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  __int64 v3; // [rsp+10h] [rbp-18h]\n  __int64 v4; // [rsp+18h] [rbp-10h]\n  _QWORD *v5; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  v4 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v5 = i;\n      ++v3;\n      ++v4;\n      while ( 1 )\n      {\n        v5 = (_QWORD *)v5[1];\n        if ( !v5 )\n          break;\n        ++v4;\n      }\n    }\n  }\n  return *(_QWORD *)(a1 + 24) == v3 && *(_QWORD *)(a1 + 32) == v4;\n}\n"], [4229839, "sub_408ACF", "int __fastcall sub_408ACF(__int64 a1, FILE *a2)\n{\n  double v2; // xmm0_8\n  double v3; // xmm1_8\n  double v4; // xmm0_8\n  __int64 v6; // [rsp+10h] [rbp-20h]\n  __int64 v7; // [rsp+18h] [rbp-18h]\n  __int64 v8; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v9; // [rsp+28h] [rbp-8h]\n\n  v6 = sub_4089A5(a1);\n  v7 = sub_408981(a1);\n  v8 = sub_408993(a1);\n  v9 = sub_4089B7(a1);\n  fprintf(a2, \"# entries:         %lu\\n\", v6);\n  fprintf(a2, \"# buckets:         %lu\\n\", v7);\n  if ( v8 < 0 )\n    v2 = (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1)) + (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1));\n  else\n    v2 = (double)(int)v8;\n  v3 = 100.0 * v2;\n  if ( v7 < 0 )\n    v4 = (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1)) + (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1));\n  else\n    v4 = (double)(int)v7;\n  fprintf(a2, \"# buckets used:    %lu (%.2f%%)\\n\", v8, v3 / v4);\n  return fprintf(a2, \"max bucket length: %lu\\n\", v9);\n}\n"], [4230119, "sub_408BE7", "__int64 __fastcall sub_408BE7(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v3 )\n    abort();\n  return 16 * v3 + *(_QWORD *)a1;\n}\n"], [4230206, "sub_408C3E", "__int64 __fastcall sub_408C3E(__int64 a1, __int64 a2)\n{\n  _QWORD *i; // [rsp+10h] [rbp-10h]\n  _QWORD *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = (_QWORD *)sub_408BE7(a1, a2);\n  if ( !*v4 )\n    return 0LL;\n  for ( i = v4; i; i = (_QWORD *)i[1] )\n  {\n    if ( *i == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *i) )\n      return *i;\n  }\n  return 0LL;\n}\n"], [4230353, "sub_408CD1", "__int64 __fastcall sub_408CD1(unsigned __int64 *a1)\n{\n  unsigned __int64 i; // [rsp+18h] [rbp-8h]\n\n  if ( !a1[4] )\n    return 0LL;\n  for ( i = *a1; ; i += 16LL )\n  {\n    if ( a1[1] <= i )\n      abort();\n    if ( *(_QWORD *)i )\n      break;\n  }\n  return *(_QWORD *)i;\n}\n"], [4230445, "sub_408D2D", "__int64 __fastcall sub_408D2D(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_408BE7(a1, a2);\n  v4 = v3;\n  do\n  {\n    if ( *(_QWORD *)v4 == a2 && *(_QWORD *)(v4 + 8) )\n      return **(_QWORD **)(v4 + 8);\n    v4 = *(_QWORD *)(v4 + 8);\n  }\n  while ( v4 );\n  while ( 1 )\n  {\n    v3 += 16LL;\n    if ( v3 >= *(_QWORD *)(a1 + 8) )\n      break;\n    if ( *(_QWORD *)v3 )\n      return *(_QWORD *)v3;\n  }\n  return 0LL;\n}\n"], [4230599, "sub_408DC7", "unsigned __int64 __fastcall sub_408DC7(__int64 a1, __int64 a2, unsigned __int64 a3)\n{\n  __int64 v4; // rax\n  unsigned __int64 v5; // [rsp+20h] [rbp-18h]\n  _QWORD *i; // [rsp+28h] [rbp-10h]\n  _QWORD *j; // [rsp+30h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( v5 >= a3 )\n          return v5;\n        v4 = v5++;\n        *(_QWORD *)(a2 + 8 * v4) = *j;\n      }\n    }\n  }\n  return v5;\n}\n"], [4230755, "sub_408E63", "__int64 __fastcall sub_408E63(__int64 a1, unsigned __int8 (__fastcall *a2)(_QWORD, __int64), __int64 a3)\n{\n  __int64 v5; // [rsp+28h] [rbp-18h]\n  _QWORD *i; // [rsp+30h] [rbp-10h]\n  _QWORD *j; // [rsp+38h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( a2(*j, a3) != 1 )\n          return v5;\n        ++v5;\n      }\n    }\n  }\n  return v5;\n}\n"], [4230903, "sub_408EF7", "unsigned __int64 __fastcall sub_408EF7(_BYTE *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = 0LL;\n  while ( *a1 )\n    v4 = (31 * v4 + (unsigned __int8)*a1++) % a2;\n  return v4;\n}\n"], [4230989, "sub_408F4D", "bool __fastcall sub_408F4D(unsigned __int64 a1)\n{\n  unsigned __int64 v2; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+10h] [rbp-8h]\n\n  v2 = 3LL;\n  v4 = 9LL;\n  while ( v4 < a1 && a1 % v2 )\n  {\n    v3 = v2 + 1;\n    v4 += 4 * v3;\n    v2 = v3 + 1;\n  }\n  return a1 % v2 != 0;\n}\n"], [4231097, "sub_408FB9", "__int64 __fastcall sub_408FB9(unsigned __int64 a1)\n{\n  __int64 v2; // [rsp+0h] [rbp-8h]\n  __int64 i; // [rsp+0h] [rbp-8h]\n\n  v2 = a1;\n  if ( a1 <= 9 )\n    v2 = 10LL;\n  for ( i = v2 | 1; i != -1 && !sub_408F4D(i); i += 2LL )\n    ;\n  return i;\n}\n"], [4231168, "sub_409000", "__int64 __fastcall sub_409000(__int64 a1)\n{\n  __int64 result; // rax\n\n  *(_DWORD *)a1 = 0;\n  *(_DWORD *)(a1 + 4) = 1065353216;\n  *(_DWORD *)(a1 + 8) = 1061997773;\n  *(_DWORD *)(a1 + 12) = 1068826100;\n  result = a1;\n  *(_BYTE *)(a1 + 16) = 0;\n  return result;\n}\n"], [4231237, "sub_409045", "unsigned __int64 __fastcall sub_409045(__int64 a1, unsigned __int64 a2)\n{\n  return sub_408965(a1, 3) % a2;\n}\n"], [4231292, "sub_40907C", "bool __fastcall sub_40907C(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"], [4231317, "sub_409095", "__int64 __fastcall sub_409095(__int64 a1)\n{\n  __int64 v2; // [rsp+10h] [rbp-8h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( (_UNKNOWN *)v2 == &unk_40BAD0 )\n    return 1LL;\n  if ( *(float *)(v2 + 8) > 0.1\n    && (float)(1.0 - 0.1) > *(float *)(v2 + 8)\n    && *(float *)(v2 + 12) > (float)(0.1 + 1.0)\n    && *(float *)v2 >= 0.0\n    && *(float *)(v2 + 4) > (float)(*(float *)v2 + 0.1)\n    && *(float *)(v2 + 4) <= 1.0\n    && *(float *)(v2 + 8) > (float)(*(float *)v2 + 0.1) )\n  {\n    return 1LL;\n  }\n  *(_QWORD *)(a1 + 40) = &unk_40BAD0;\n  return 0LL;\n}\n"], [4231565, "sub_40918D", "unsigned __int64 __fastcall sub_40918D(__int64 a1, __int64 a2)\n{\n  float v2; // xmm0_4\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // [rsp+8h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-18h]\n  float v6; // [rsp+1Ch] [rbp-4h]\n\n  v4 = a1;\n  if ( *(_BYTE *)(a2 + 16) != 1 )\n  {\n    if ( a1 < 0 )\n      v2 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n         + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n    else\n      v2 = (float)(int)a1;\n    v6 = v2 / *(float *)(a2 + 8);\n    if ( v6 >= 1.8446744e19 )\n      return 0LL;\n    if ( v6 >= 9.223372e18 )\n      v4 = (unsigned int)(int)(float)(v6 - 9.223372e18) ^ 0x8000000000000000LL;\n    else\n      v4 = (unsigned int)(int)v6;\n  }\n  v5 = sub_408FB9(v4);\n  if ( v5 <= 0x1FFFFFFFFFFFFFFFLL )\n    result = v5;\n  else\n    result = 0LL;\n  return result;\n}\n"], [4231799, "sub_409277", "size_t *__fastcall sub_409277(__int64 a1, void *a2, unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2), bool (__fastcall *a4)(__int64 a1, __int64 a2), size_t a5)\n{\n  size_t *result; // rax\n  bool (__fastcall *v7)(__int64, __int64); // [rsp+10h] [rbp-30h]\n  unsigned __int64 (__fastcall *v8)(__int64, unsigned __int64); // [rsp+18h] [rbp-28h]\n  void *v9; // [rsp+20h] [rbp-20h]\n  size_t *ptr; // [rsp+38h] [rbp-8h]\n\n  v9 = a2;\n  v8 = a3;\n  v7 = a4;\n  if ( !a3 )\n    v8 = sub_409045;\n  if ( !a4 )\n    v7 = sub_40907C;\n  ptr = (size_t *)malloc(0x50uLL);\n  if ( !ptr )\n    return 0LL;\n  if ( !a2 )\n    v9 = &unk_40BAD0;\n  ptr[5] = (size_t)v9;\n  if ( (unsigned __int8)sub_409095((__int64)ptr) == 1\n    && (ptr[2] = sub_40918D(a1, (__int64)v9)) != 0\n    && (*ptr = (size_t)calloc(ptr[2], 0x10uLL)) != 0 )\n  {\n    ptr[1] = 16 * ptr[2] + *ptr;\n    ptr[3] = 0LL;\n    ptr[4] = 0LL;\n    ptr[6] = (size_t)v8;\n    ptr[7] = (size_t)v7;\n    ptr[8] = a5;\n    ptr[9] = 0LL;\n    result = ptr;\n  }\n  else\n  {\n    free(ptr);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4232156, "sub_4093DC", "__int64 __fastcall sub_4093DC(__int64 a1)\n{\n  __int64 result; // rax\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+20h] [rbp-10h]\n  _QWORD *v4; // [rsp+28h] [rbp-8h]\n\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (_QWORD *)i[1]; j; j = v4 )\n      {\n        if ( *(_QWORD *)(a1 + 64) )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*j);\n        *j = 0LL;\n        v4 = (_QWORD *)j[1];\n        j[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = j;\n      }\n      if ( *(_QWORD *)(a1 + 64) )\n        (*(void (__fastcall **)(_QWORD))(a1 + 64))(*i);\n      *i = 0LL;\n      i[1] = 0LL;\n    }\n  }\n  *(_QWORD *)(a1 + 24) = 0LL;\n  result = a1;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  return result;\n}\n"], [4232418, "sub_4094E2", "void __fastcall sub_4094E2(__int64 a1)\n{\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+18h] [rbp-18h]\n  _QWORD *ptr; // [rsp+20h] [rbp-10h]\n  _QWORD *ptra; // [rsp+20h] [rbp-10h]\n  _QWORD *ptrb; // [rsp+20h] [rbp-10h]\n  _QWORD *v6; // [rsp+28h] [rbp-8h]\n  _QWORD *v7; // [rsp+28h] [rbp-8h]\n\n  if ( *(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 32) )\n  {\n    for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n    {\n      if ( *i )\n      {\n        for ( ptr = i; ptr; ptr = (_QWORD *)ptr[1] )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*ptr);\n      }\n    }\n  }\n  for ( j = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)j; j += 2 )\n  {\n    for ( ptra = (_QWORD *)j[1]; ptra; ptra = v6 )\n    {\n      v6 = (_QWORD *)ptra[1];\n      free(ptra);\n    }\n  }\n  for ( ptrb = *(_QWORD **)(a1 + 72); ptrb; ptrb = v7 )\n  {\n    v7 = (_QWORD *)ptrb[1];\n    free(ptrb);\n  }\n  free(*(void **)a1);\n  free((void *)a1);\n}\n"], [4232716, "sub_40960C", "void *__fastcall sub_40960C(__int64 a1)\n{\n  __int64 v2; // [rsp+18h] [rbp-8h]\n\n  if ( !*(_QWORD *)(a1 + 72) )\n    return malloc(0x10uLL);\n  v2 = *(_QWORD *)(a1 + 72);\n  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v2 + 8);\n  return (void *)v2;\n}\n"], [4232791, "sub_409657", "__int64 __fastcall sub_409657(__int64 a1, _QWORD *a2)\n{\n  __int64 result; // rax\n\n  *a2 = 0LL;\n  a2[1] = *(_QWORD *)(a1 + 72);\n  result = a1;\n  *(_QWORD *)(a1 + 72) = a2;\n  return result;\n}\n"], [4232844, "sub_40968C", "__int64 __fastcall sub_40968C(__int64 a1, __int64 a2, _QWORD *a3, char a4)\n{\n  __int64 result; // rax\n  __int64 v5; // rdx\n  _QWORD *i; // [rsp+20h] [rbp-30h]\n  _QWORD *v9; // [rsp+28h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-20h]\n  _QWORD *v11; // [rsp+38h] [rbp-18h]\n  __int64 v12; // [rsp+40h] [rbp-10h]\n  _QWORD *v13; // [rsp+48h] [rbp-8h]\n\n  v9 = (_QWORD *)sub_408BE7(a1, a2);\n  *a3 = v9;\n  if ( !*v9 )\n    return 0LL;\n  if ( *v9 == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *v9) )\n  {\n    v12 = *v9;\n    if ( a4 )\n    {\n      if ( v9[1] )\n      {\n        v13 = (_QWORD *)v9[1];\n        v5 = v13[1];\n        *v9 = *v13;\n        v9[1] = v5;\n        sub_409657(a1, v13);\n      }\n      else\n      {\n        *v9 = 0LL;\n      }\n    }\n    result = v12;\n  }\n  else\n  {\n    for ( i = v9; ; i = (_QWORD *)i[1] )\n    {\n      if ( !i[1] )\n        return 0LL;\n      if ( *(_QWORD *)i[1] == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *(_QWORD *)i[1]) )\n        break;\n    }\n    v10 = *(_QWORD *)i[1];\n    if ( a4 )\n    {\n      v11 = (_QWORD *)i[1];\n      i[1] = v11[1];\n      sub_409657(a1, v11);\n    }\n    result = v10;\n  }\n  return result;\n}\n"], [4233249, "sub_409821", "__int64 __fastcall sub_409821(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *i; // [rsp+20h] [rbp-30h]\n  __int64 *j; // [rsp+28h] [rbp-28h]\n  __int64 v7; // [rsp+30h] [rbp-20h]\n  __int64 v8; // [rsp+30h] [rbp-20h]\n  _QWORD *v9; // [rsp+38h] [rbp-18h]\n  _QWORD *v10; // [rsp+38h] [rbp-18h]\n  __int64 *v11; // [rsp+40h] [rbp-10h]\n  _QWORD *v12; // [rsp+48h] [rbp-8h]\n\n  for ( i = *(__int64 **)a2; *(_QWORD *)(a2 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (__int64 *)i[1]; j; j = v11 )\n      {\n        v7 = *j;\n        v9 = (_QWORD *)sub_408BE7(a1, *j);\n        v11 = (__int64 *)j[1];\n        if ( *v9 )\n        {\n          j[1] = v9[1];\n          v9[1] = j;\n        }\n        else\n        {\n          *v9 = v7;\n          ++*(_QWORD *)(a1 + 24);\n          sub_409657(a1, j);\n        }\n      }\n      v8 = *i;\n      i[1] = 0LL;\n      if ( !a3 )\n      {\n        v10 = (_QWORD *)sub_408BE7(a1, v8);\n        if ( *v10 )\n        {\n          v12 = sub_40960C(a1);\n          if ( !v12 )\n            return 0LL;\n          *v12 = v8;\n          v12[1] = v10[1];\n          v10[1] = v12;\n        }\n        else\n        {\n          *v10 = v8;\n          ++*(_QWORD *)(a1 + 24);\n        }\n        *i = 0LL;\n        --*(_QWORD *)(a2 + 24);\n      }\n    }\n  }\n  return 1LL;\n}\n"], [4233711, "sub_4099EF", "__int64 __fastcall sub_4099EF(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 nmemb; // [rsp+10h] [rbp-60h]\n  void *v4; // [rsp+20h] [rbp-50h] BYREF\n  __int64 v5; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v6; // [rsp+30h] [rbp-40h]\n  __int64 v7; // [rsp+38h] [rbp-38h]\n  __int64 v8; // [rsp+40h] [rbp-30h]\n  __int64 v9; // [rsp+48h] [rbp-28h]\n  __int64 v10; // [rsp+50h] [rbp-20h]\n  __int64 v11; // [rsp+58h] [rbp-18h]\n  __int64 v12; // [rsp+60h] [rbp-10h]\n  __int64 v13; // [rsp+68h] [rbp-8h]\n\n  nmemb = sub_40918D(a2, *(_QWORD *)(a1 + 40));\n  if ( !nmemb )\n    return 0LL;\n  if ( *(_QWORD *)(a1 + 16) == nmemb )\n    return 1LL;\n  v4 = calloc(nmemb, 0x10uLL);\n  if ( !v4 )\n    return 0LL;\n  v6 = nmemb;\n  v5 = (__int64)v4 + 16 * nmemb;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = *(_QWORD *)(a1 + 40);\n  v10 = *(_QWORD *)(a1 + 48);\n  v11 = *(_QWORD *)(a1 + 56);\n  v12 = *(_QWORD *)(a1 + 64);\n  v13 = *(_QWORD *)(a1 + 72);\n  if ( (unsigned __int8)sub_409821((__int64)&v4, a1, 0) )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = v4;\n    *(_QWORD *)(a1 + 8) = v5;\n    *(_QWORD *)(a1 + 16) = v6;\n    *(_QWORD *)(a1 + 24) = v7;\n    *(_QWORD *)(a1 + 72) = v13;\n    result = 1LL;\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 72) = v13;\n    if ( (unsigned __int8)sub_409821(a1, (__int64)&v4, 1) != 1 || (unsigned __int8)sub_409821(a1, (__int64)&v4, 0) != 1 )\n      abort();\n    free(v4);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4234227, "sub_409BF3", "__int64 __fastcall sub_409BF3(_QWORD *a1, __int64 a2, _QWORD *a3)\n{\n  __int64 result; // rax\n  __int64 v4; // rax\n  float v5; // xmm0_4\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  float v8; // xmm1_4\n  __int64 v9; // rdx\n  __int64 v10; // rax\n  float v11; // xmm0_4\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  float v14; // xmm1_4\n  __int64 v15; // rdx\n  __int64 v16; // rax\n  float v17; // xmm0_4\n  __int64 v18; // rdx\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  __int64 v23; // rax\n  __int64 *v25; // [rsp+30h] [rbp-20h] BYREF\n  __int64 v26; // [rsp+38h] [rbp-18h]\n  __int64 v27; // [rsp+40h] [rbp-10h]\n  _QWORD *v28; // [rsp+48h] [rbp-8h]\n\n  if ( !a2 )\n    abort();\n  v26 = sub_40968C((__int64)a1, a2, &v25, 0);\n  if ( v26 )\n  {\n    if ( a3 )\n      *a3 = v26;\n    result = 0LL;\n  }\n  else\n  {\n    v4 = a1[3];\n    if ( v4 < 0 )\n    {\n      v6 = a1[3] & 1LL | ((unsigned __int64)v4 >> 1);\n      v5 = (float)(int)v6 + (float)(int)v6;\n    }\n    else\n    {\n      v5 = (float)(int)v4;\n    }\n    v7 = a1[2];\n    if ( v7 < 0 )\n    {\n      v9 = a1[2] & 1LL | ((unsigned __int64)v7 >> 1);\n      v8 = (float)(int)v9 + (float)(int)v9;\n    }\n    else\n    {\n      v8 = (float)(int)v7;\n    }\n    if ( v5 > (float)(v8 * *(float *)(a1[5] + 8LL)) )\n    {\n      sub_409095((__int64)a1);\n      v10 = a1[3];\n      if ( v10 < 0 )\n      {\n        v12 = a1[3] & 1LL | ((unsigned __int64)v10 >> 1);\n        v11 = (float)(int)v12 + (float)(int)v12;\n      }\n      else\n      {\n        v11 = (float)(int)v10;\n      }\n      v13 = a1[2];\n      if ( v13 < 0 )\n      {\n        v15 = a1[2] & 1LL | ((unsigned __int64)v13 >> 1);\n        v14 = (float)(int)v15 + (float)(int)v15;\n      }\n      else\n      {\n        v14 = (float)(int)v13;\n      }\n      if ( v11 > (float)(v14 * *(float *)(a1[5] + 8LL)) )\n      {\n        v27 = a1[5];\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v16 = a1[2];\n          if ( v16 < 0 )\n          {\n            v18 = a1[2] & 1LL | ((unsigned __int64)v16 >> 1);\n            v17 = (float)(int)v18 + (float)(int)v18;\n          }\n          else\n          {\n            v17 = (float)(int)v16;\n          }\n          v19 = v17 * *(float *)(v27 + 12);\n        }\n        else\n        {\n          v20 = a1[2];\n          if ( v20 < 0 )\n          {\n            v22 = a1[2] & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v19 = (float)(v21 * *(float *)(v27 + 12)) * *(float *)(v27 + 8);\n        }\n        if ( v19 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        if ( v19 >= 9.223372e18 )\n          v23 = (unsigned int)(int)(float)(v19 - 9.223372e18) ^ 0x8000000000000000LL;\n        else\n          v23 = (unsigned int)(int)v19;\n        if ( (unsigned __int8)sub_4099EF((__int64)a1, v23) != 1 )\n          return 0xFFFFFFFFLL;\n        if ( sub_40968C((__int64)a1, a2, &v25, 0) )\n          abort();\n      }\n    }\n    if ( *v25 )\n    {\n      v28 = sub_40960C((__int64)a1);\n      if ( v28 )\n      {\n        *v28 = a2;\n        v28[1] = v25[1];\n        v25[1] = (__int64)v28;\n        ++a1[4];\n        result = 1LL;\n      }\n      else\n      {\n        result = 0xFFFFFFFFLL;\n      }\n    }\n    else\n    {\n      *v25 = a2;\n      ++a1[4];\n      ++a1[3];\n      result = 1LL;\n    }\n  }\n  return result;\n}\n"], [4235021, "sub_409F0D", "__int64 __fastcall sub_409F0D(_QWORD *a1, __int64 a2)\n{\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h] BYREF\n\n  v3 = sub_409BF3(a1, a2, &v4);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( v3 )\n    return a2;\n  return v4;\n}\n"], [4235094, "sub_409F56", "__int64 __fastcall sub_409F56(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rax\n  float v4; // xmm0_4\n  __int64 v5; // rdx\n  __int64 v6; // rax\n  float v7; // xmm1_4\n  __int64 v8; // rdx\n  __int64 v9; // rax\n  float v10; // xmm0_4\n  __int64 v11; // rdx\n  __int64 v12; // rax\n  float v13; // xmm1_4\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  float v16; // xmm0_4\n  __int64 v17; // rdx\n  float v18; // xmm0_4\n  __int64 v19; // rax\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  float v23; // xmm0_4\n  _QWORD *v24; // [rsp+10h] [rbp-30h] BYREF\n  void *ptr; // [rsp+18h] [rbp-28h]\n  __int64 v26; // [rsp+20h] [rbp-20h]\n  __int64 v27; // [rsp+28h] [rbp-18h]\n  __int64 v28; // [rsp+30h] [rbp-10h]\n  void *v29; // [rsp+38h] [rbp-8h]\n\n  v26 = sub_40968C(a1, a2, &v24, 1);\n  if ( !v26 )\n    return 0LL;\n  --*(_QWORD *)(a1 + 32);\n  if ( !*v24 )\n  {\n    v3 = --*(_QWORD *)(a1 + 24);\n    if ( v3 < 0 )\n    {\n      v5 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v3 >> 1);\n      v4 = (float)(int)v5 + (float)(int)v5;\n    }\n    else\n    {\n      v4 = (float)(int)v3;\n    }\n    v6 = *(_QWORD *)(a1 + 16);\n    if ( v6 < 0 )\n    {\n      v8 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v6 >> 1);\n      v7 = (float)(int)v8 + (float)(int)v8;\n    }\n    else\n    {\n      v7 = (float)(int)v6;\n    }\n    if ( (float)(v7 * **(float **)(a1 + 40)) > v4 )\n    {\n      sub_409095(a1);\n      v9 = *(_QWORD *)(a1 + 24);\n      if ( v9 < 0 )\n      {\n        v11 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v9 >> 1);\n        v10 = (float)(int)v11 + (float)(int)v11;\n      }\n      else\n      {\n        v10 = (float)(int)v9;\n      }\n      v12 = *(_QWORD *)(a1 + 16);\n      if ( v12 < 0 )\n      {\n        v14 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v12 >> 1);\n        v13 = (float)(int)v14 + (float)(int)v14;\n      }\n      else\n      {\n        v13 = (float)(int)v12;\n      }\n      if ( (float)(v13 * **(float **)(a1 + 40)) > v10 )\n      {\n        v27 = *(_QWORD *)(a1 + 40);\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v15 = *(_QWORD *)(a1 + 16);\n          if ( v15 < 0 )\n          {\n            v17 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v15 >> 1);\n            v16 = (float)(int)v17 + (float)(int)v17;\n          }\n          else\n          {\n            v16 = (float)(int)v15;\n          }\n          v18 = v16 * *(float *)(v27 + 4);\n          if ( v18 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v18;\n        }\n        else\n        {\n          v20 = *(_QWORD *)(a1 + 16);\n          if ( v20 < 0 )\n          {\n            v22 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v23 = (float)(v21 * *(float *)(v27 + 4)) * *(float *)(v27 + 8);\n          if ( v23 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v23 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v23;\n        }\n        v28 = v19;\n        if ( (unsigned __int8)sub_4099EF(a1, v19) != 1 )\n        {\n          for ( ptr = *(void **)(a1 + 72); ptr; ptr = v29 )\n          {\n            v29 = (void *)*((_QWORD *)ptr + 1);\n            free(ptr);\n          }\n          *(_QWORD *)(a1 + 72) = 0LL;\n        }\n      }\n    }\n  }\n  return v26;\n}\n"], [4235781, "sub_40A205", "__int64 __fastcall sub_40A205(__int64 a1, int a2)\n{\n  __int64 result; // rax\n  int i; // [rsp+18h] [rbp-4h]\n\n  *(_BYTE *)(a1 + 28) = 1;\n  *(_DWORD *)(a1 + 20) = 0;\n  *(_DWORD *)(a1 + 24) = 0;\n  for ( i = 0; i <= 3; ++i )\n    *(_DWORD *)(a1 + 4LL * i) = a2;\n  result = a1;\n  *(_DWORD *)(a1 + 16) = a2;\n  return result;\n}\n"], [4235869, "sub_40A25D", "__int64 __fastcall sub_40A25D(__int64 a1)\n{\n  return *(unsigned __int8 *)(a1 + 28);\n}\n"], [4235887, "sub_40A26F", "__int64 __fastcall sub_40A26F(__int64 a1, int a2)\n{\n  int v3; // [rsp+14h] [rbp-8h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = ((unsigned __int8)*(_DWORD *)(a1 + 20) + (*(_BYTE *)(a1 + 28) ^ 1)) & 3;\n  v4 = *(_DWORD *)(a1 + 4LL * (((unsigned __int8)*(_DWORD *)(a1 + 20) + (*(_BYTE *)(a1 + 28) ^ 1)) & 3));\n  *(_DWORD *)(a1 + 4LL * (((unsigned __int8)*(_DWORD *)(a1 + 20) + (*(_BYTE *)(a1 + 28) ^ 1)) & 3)) = a2;\n  *(_DWORD *)(a1 + 20) = v3;\n  if ( *(_DWORD *)(a1 + 24) == v3 )\n    *(_DWORD *)(a1 + 24) = ((unsigned __int8)*(_DWORD *)(a1 + 24) + (*(_BYTE *)(a1 + 28) ^ 1)) & 3;\n  *(_BYTE *)(a1 + 28) = 0;\n  return v4;\n}\n"], [4236023, "sub_40A2F7", "__int64 __fastcall sub_40A2F7(__int64 a1)\n{\n  unsigned int v2; // [rsp+1Ch] [rbp-4h]\n\n  if ( (unsigned __int8)sub_40A25D(a1) )\n    abort();\n  v2 = *(_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  *(_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20)) = *(_DWORD *)(a1 + 16);\n  if ( *(_DWORD *)(a1 + 20) == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((unsigned __int8)*(_DWORD *)(a1 + 20) + 3) & 3;\n  return v2;\n}\n"], [4236153, "sub_40A379", "__int64 __fastcall sub_40A379(int a1, const char *a2, char a3, unsigned int a4)\n{\n  unsigned int v4; // eax\n  unsigned int v6; // [rsp+14h] [rbp-CCh]\n\n  v6 = 0;\n  if ( (a3 & 0x40) != 0 )\n    v6 = a4;\n  v4 = openat(a1, a2, a3, v6);\n  return sub_40A4B3(v4);\n}\n"], [4236429, "sub_40A48D", "__int64 __fastcall sub_40A48D(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_40A5B5(a1, 0, 3, a4, a5, a6);\n}\n"], [4236467, "sub_40A4B3", "__int64 __fastcall sub_40A4B3(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  unsigned int fd; // [rsp+Ch] [rbp-14h]\n  unsigned int v8; // [rsp+18h] [rbp-8h]\n  int v9; // [rsp+1Ch] [rbp-4h]\n\n  fd = a1;\n  if ( a1 >= 0 && a1 <= 2 )\n  {\n    v8 = sub_40A48D(a1, a2, a3, a4, a5, a6);\n    v9 = *__errno_location();\n    close(a1);\n    *__errno_location() = v9;\n    fd = v8;\n  }\n  return fd;\n}\n"], [4236544, "sub_40A500", "int __fastcall sub_40A500(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_40A8A2(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4236725, "sub_40A5B5", "__int64 __fastcall sub_40A5B5(int a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128 a7, __m128 a8, __m128 a9, __m128 a10, __m128 a11, __m128 a12, __m128 a13, __m128 a14)\n{\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  int v18; // [rsp+10h] [rbp-E0h]\n  int v19; // [rsp+14h] [rbp-DCh]\n  int v20; // [rsp+18h] [rbp-D8h]\n  int v21; // [rsp+1Ch] [rbp-D4h]\n  __int64 v22; // [rsp+50h] [rbp-A0h]\n  __int64 v23; // [rsp+58h] [rbp-98h]\n  __int64 v24; // [rsp+60h] [rbp-90h]\n  __int64 v25; // [rsp+68h] [rbp-88h]\n  __m128 v26; // [rsp+70h] [rbp-80h]\n  __m128 v27; // [rsp+80h] [rbp-70h]\n  __m128 v28; // [rsp+90h] [rbp-60h]\n  __m128 v29; // [rsp+A0h] [rbp-50h]\n  __m128 v30; // [rsp+B0h] [rbp-40h]\n  __m128 v31; // [rsp+C0h] [rbp-30h]\n  __m128 v32; // [rsp+D0h] [rbp-20h]\n  __m128 v33; // [rsp+E0h] [rbp-10h]\n\n  v22 = a3;\n  v23 = a4;\n  v24 = a5;\n  v25 = a6;\n  v26 = a7;\n  v27 = a8;\n  v28 = a9;\n  v29 = a10;\n  v30 = a11;\n  v31 = a12;\n  v32 = a13;\n  v33 = a14;\n  if ( a2 != 1030 )\n    return (unsigned int)fcntl(a1, a2, v22);\n  v19 = v22;\n  if ( dword_60E480 < 0 )\n  {\n    v18 = sub_40A5B5(a1, 0, v22, a4, a5, a6);\n  }\n  else\n  {\n    v18 = fcntl(a1, 1030, (unsigned int)v22);\n    if ( v18 < 0 && *__errno_location() == 22 )\n    {\n      v18 = sub_40A5B5(a1, 0, v19, v14, v15, v16);\n      if ( v18 < 0 )\n        return (unsigned int)v18;\n      dword_60E480 = -1;\n    }\n    else\n    {\n      dword_60E480 = 1;\n    }\n  }\n  if ( v18 >= 0 && dword_60E480 == -1 )\n  {\n    v20 = fcntl(v18, 1);\n    if ( v20 < 0 || fcntl(v18, 2, v20 | 1u) == -1 )\n    {\n      v21 = *__errno_location();\n      close(v18);\n      *__errno_location() = v21;\n      v18 = -1;\n    }\n  }\n  return (unsigned int)v18;\n}\n"], [4237423, "sub_40A86F", "__int64 __fastcall sub_40A86F(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_40A8ED(a1, 0LL, 1LL);\n  return result;\n}\n"], [4237474, "sub_40A8A2", "int __fastcall sub_40A8A2(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_40A86F(a1);\n  return fflush(a1);\n}\n"], [4237549, "sub_40A8ED", "int __fastcall sub_40A8ED(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4237744, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_60DE18 - off_60DE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_60DE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4237856, "fini", "void fini(void)\n{\n  ;\n}\n"], [4237872, "sub_40AA30", "int __fastcall sub_40AA30(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_60E218 )\n    v1 = (void *)qword_60E218;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4237904, "sub_40AA50", "int __fastcall sub_40AA50(char *filename, struct stat *stat_buf)\n{\n  return __xstat(1, filename, stat_buf);\n}\n"], [4237920, "sub_40AA60", "int __fastcall sub_40AA60(int fildes, struct stat *stat_buf)\n{\n  return __fxstat(1, fildes, stat_buf);\n}\n"], [4237936, "sub_40AA70", "int __fastcall sub_40AA70(char *filename, struct stat *stat_buf)\n{\n  return __lxstat(1, filename, stat_buf);\n}\n"], [4237952, "sub_40AA80", "int __fastcall sub_40AA80(int fildes, char *filename, struct stat *stat_buf, int flag)\n{\n  return __fxstatat(1, fildes, filename, stat_buf, flag);\n}\n"], [4237976, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]