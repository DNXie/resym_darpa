[[4202016, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4202048, "sub_401E40", "__int64 sub_401E40()\n{\n  return qword_61D010();\n}\n"], [4202064, ".getenv", "// attributes: thunk\nchar *getenv(const char *name)\n{\n  return getenv(name);\n}\n"], [4202080, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4202096, ".utimensat", "// attributes: thunk\nint utimensat(int fd, const char *path, const struct timespec times[2], int flags)\n{\n  return utimensat(fd, path, times, flags);\n}\n"], [4202112, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4202128, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4202144, ".unlink", "// attributes: thunk\nint unlink(const char *name)\n{\n  return unlink(name);\n}\n"], [4202160, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4202176, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4202192, ".strcpy", "// attributes: thunk\nchar *strcpy(char *dest, const char *src)\n{\n  return strcpy(dest, src);\n}\n"], [4202208, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4202224, ".mkdir", "// attributes: thunk\nint mkdir(const char *path, __mode_t mode)\n{\n  return mkdir(path, mode);\n}\n"], [4202240, ".iconv", "// attributes: thunk\nsize_t iconv(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)\n{\n  return iconv(cd, inbuf, inbytesleft, outbuf, outbytesleft);\n}\n"], [4202256, ".getc_unlocked", "// attributes: thunk\nint getc_unlocked(FILE *stream)\n{\n  return getc_unlocked(stream);\n}\n"], [4202272, ".readlink", "// attributes: thunk\nssize_t readlink(const char *path, char *buf, size_t len)\n{\n  return readlink(path, buf, len);\n}\n"], [4202288, ".fcntl", "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\n  return fcntl(fd, cmd);\n}\n"], [4202304, ".clock_gettime", "// attributes: thunk\nint clock_gettime(clockid_t clock_id, struct timespec *tp)\n{\n  return clock_gettime(clock_id, tp);\n}\n"], [4202320, ".write", "// attributes: thunk\nssize_t write(int fd, const void *buf, size_t n)\n{\n  return write(fd, buf, n);\n}\n"], [4202336, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4202352, ".pathconf", "// attributes: thunk\n__int64 pathconf(const char *path, int name)\n{\n  return pathconf(path, name);\n}\n"], [4202368, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4202384, ".opendir", "// attributes: thunk\nDIR *opendir(const char *name)\n{\n  return opendir(name);\n}\n"], [4202400, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4202416, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4202432, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4202448, ".__lxstat", "// attributes: thunk\nint __lxstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _lxstat(ver, filename, stat_buf);\n}\n"], [4202464, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4202480, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4202496, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4202512, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4202528, ".dup2", "// attributes: thunk\nint dup2(int fd, int fd2)\n{\n  return dup2(fd, fd2);\n}\n"], [4202544, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4202560, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4202576, ".symlink", "// attributes: thunk\nint symlink(const char *from, const char *to)\n{\n  return symlink(from, to);\n}\n"], [4202592, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4202608, ".ftruncate", "// attributes: thunk\nint ftruncate(int fd, __off_t length)\n{\n  return ftruncate(fd, length);\n}\n"], [4202624, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4202640, ".gettimeofday", "// attributes: thunk\nint gettimeofday(struct timeval *tv, __timezone_ptr_t tz)\n{\n  return gettimeofday(tv, tz);\n}\n"], [4202656, ".__assert_fail", "// attributes: thunk\nvoid __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\n{\n  _assert_fail(assertion, file, line, function);\n}\n"], [4202672, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4202688, ".geteuid", "// attributes: thunk\n__uid_t geteuid(void)\n{\n  return geteuid();\n}\n"], [4202704, ".fscanf", "// attributes: thunk\nint fscanf(FILE *stream, const char *format, ...)\n{\n  return fscanf(stream, format);\n}\n"], [4202720, ".ioctl", "// attributes: thunk\nint ioctl(int fd, unsigned __int64 request, ...)\n{\n  return ioctl(fd, request);\n}\n"], [4202736, ".strnlen", "// attributes: thunk\nsize_t strnlen(const char *string, size_t maxlen)\n{\n  return strnlen(string, maxlen);\n}\n"], [4202752, ".close", "// attributes: thunk\nint close(int fd)\n{\n  return close(fd);\n}\n"], [4202768, ".closedir", "// attributes: thunk\nint closedir(DIR *dirp)\n{\n  return closedir(dirp);\n}\n"], [4202784, ".memchr", "// attributes: thunk\nvoid *memchr(const void *s, int c, size_t n)\n{\n  return memchr(s, c, n);\n}\n"], [4202800, ".read", "// attributes: thunk\nssize_t read(int fd, void *buf, size_t nbytes)\n{\n  return read(fd, buf, nbytes);\n}\n"], [4202816, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4202832, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4202848, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4202864, ".utimes", "// attributes: thunk\nint utimes(const char *file, const struct timeval tvp[2])\n{\n  return utimes(file, tvp);\n}\n"], [4202880, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4202896, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4202912, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4202928, ".readlinkat", "// attributes: thunk\nssize_t readlinkat(int fd, const char *path, char *buf, size_t len)\n{\n  return readlinkat(fd, path, buf, len);\n}\n"], [4202944, ".dirfd", "// attributes: thunk\nint dirfd(DIR *dirp)\n{\n  return dirfd(dirp);\n}\n"], [4202960, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4202976, ".rpmatch", "// attributes: thunk\nint rpmatch(const char *response)\n{\n  return rpmatch(response);\n}\n"], [4202992, ".mkfifo", "// attributes: thunk\nint mkfifo(const char *path, __mode_t mode)\n{\n  return mkfifo(path, mode);\n}\n"], [4203008, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4203024, ".umask", "// attributes: thunk\n__mode_t umask(__mode_t mask)\n{\n  return umask(mask);\n}\n"], [4203040, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4203056, ".putchar_unlocked", "// attributes: thunk\nint putchar_unlocked(int c)\n{\n  return putchar_unlocked(c);\n}\n"], [4203072, ".__xmknod", "// attributes: thunk\nint __xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)\n{\n  return _xmknod(ver, path, mode, dev);\n}\n"], [4203088, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4203104, ".__xstat", "// attributes: thunk\nint __xstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _xstat(ver, filename, stat_buf);\n}\n"], [4203120, ".readdir", "// attributes: thunk\nstruct dirent *readdir(DIR *dirp)\n{\n  return readdir(dirp);\n}\n"], [4203136, ".putc_unlocked", "// attributes: thunk\nint putc_unlocked(int c, FILE *stream)\n{\n  return putc_unlocked(c, stream);\n}\n"], [4203152, ".iswalnum", "// attributes: thunk\nint iswalnum(wint_t wc)\n{\n  return iswalnum(wc);\n}\n"], [4203168, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4203184, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4203200, ".nl_langinfo", "// attributes: thunk\nchar *nl_langinfo(nl_item item)\n{\n  return nl_langinfo(item);\n}\n"], [4203216, ".ungetc", "// attributes: thunk\nint ungetc(int c, FILE *stream)\n{\n  return ungetc(c, stream);\n}\n"], [4203232, ".__fxstat", "// attributes: thunk\nint __fxstat(int ver, int fildes, struct stat *stat_buf)\n{\n  return _fxstat(ver, fildes, stat_buf);\n}\n"], [4203248, ".lchown", "// attributes: thunk\nint lchown(const char *file, __uid_t owner, __gid_t group)\n{\n  return lchown(file, owner, group);\n}\n"], [4203264, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4203280, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4203296, ".fdopen", "// attributes: thunk\nFILE *fdopen(int fd, const char *modes)\n{\n  return fdopen(fd, modes);\n}\n"], [4203312, ".linkat", "// attributes: thunk\nint linkat(int fromfd, const char *from, int tofd, const char *to, int flags)\n{\n  return linkat(fromfd, from, tofd, to, flags);\n}\n"], [4203328, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4203344, ".iconv_close", "// attributes: thunk\nint iconv_close(iconv_t cd)\n{\n  return iconv_close(cd);\n}\n"], [4203360, ".fchmod", "// attributes: thunk\nint fchmod(int fd, __mode_t mode)\n{\n  return fchmod(fd, mode);\n}\n"], [4203376, ".iswspace", "// attributes: thunk\nint iswspace(wint_t wc)\n{\n  return iswspace(wc);\n}\n"], [4203392, ".chmod", "// attributes: thunk\nint chmod(const char *file, __mode_t mode)\n{\n  return chmod(file, mode);\n}\n"], [4203408, ".mempcpy", "// attributes: thunk\nvoid *mempcpy(void *dest, const void *src, size_t n)\n{\n  return mempcpy(dest, src, n);\n}\n"], [4203424, ".memmove", "// attributes: thunk\nvoid *memmove(void *dest, const void *src, size_t n)\n{\n  return memmove(dest, src, n);\n}\n"], [4203440, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4203456, ".open", "// attributes: thunk\nint open(const char *file, int oflag, ...)\n{\n  return open(file, oflag);\n}\n"], [4203472, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4203488, ".fchown", "// attributes: thunk\nint fchown(int fd, __uid_t owner, __gid_t group)\n{\n  return fchown(fd, owner, group);\n}\n"], [4203504, ".rename", "// attributes: thunk\nint rename(const char *old, const char *a2)\n{\n  return rename(old, a2);\n}\n"], [4203520, ".fdopendir", "// attributes: thunk\nDIR *fdopendir(int fd)\n{\n  return fdopendir(fd);\n}\n"], [4203536, ".futimens", "// attributes: thunk\nint futimens(int fd, const struct timespec times[2])\n{\n  return futimens(fd, times);\n}\n"], [4203552, ".euidaccess", "// attributes: thunk\nint euidaccess(const char *name, int type)\n{\n  return euidaccess(name, type);\n}\n"], [4203568, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4203584, ".getline", "// attributes: thunk\n__ssize_t getline(char **lineptr, size_t *n, FILE *stream)\n{\n  return getline(lineptr, n, stream);\n}\n"], [4203600, ".getpagesize", "// attributes: thunk\nint getpagesize(void)\n{\n  return getpagesize();\n}\n"], [4203616, ".sprintf", "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\n  return sprintf(s, format);\n}\n"], [4203632, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4203648, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4203664, ".strdup", "// attributes: thunk\nchar *strdup(const char *s)\n{\n  return strdup(s);\n}\n"], [4203680, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4203696, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4203712, ".futimesat", "// attributes: thunk\nint futimesat(int fd, const char *file, const struct timeval tvp[2])\n{\n  return futimesat(fd, file, tvp);\n}\n"], [4203728, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4203744, ".iconv_open", "// attributes: thunk\niconv_t iconv_open(const char *tocode, const char *fromcode)\n{\n  return iconv_open(tocode, fromcode);\n}\n"], [4203760, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4203808, "sub_402520", "signed __int64 sub_402520()\n{\n  signed __int64 result; // rax\n\n  result = &unk_61D3DF - &unk_61D3D8;\n  if ( (unsigned __int64)(&unk_61D3DF - &unk_61D3D8) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4203856, "sub_402550", "__int64 sub_402550()\n{\n  return 0LL;\n}\n"], [4203920, "sub_402590", "signed __int64 sub_402590()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_61D438 )\n  {\n    result = sub_402520();\n    byte_61D438 = 1;\n  }\n  return result;\n}\n"], [4203952, "sub_4025B0", "__int64 sub_4025B0()\n{\n  return sub_402550();\n}\n"], [4203997, "sub_4025DD", "int sub_4025DD()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_40B6A4(qword_61D900);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_40B6A4(qword_61D900);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_40B6A4(qword_61D900);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4204263, "sub_4026E7", "__int64 __fastcall sub_4026E7(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 72);\n}\n"], [4204285, "sub_4026FD", "__int64 __fastcall sub_4026FD(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 88);\n}\n"], [4204307, "sub_402713", "void __fastcall __noreturn sub_402713(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  __int64 v3; // r13\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  char *v6; // rax\n  FILE *v7; // rbx\n  char *v8; // rax\n  FILE *v9; // rbx\n  char *v10; // rax\n  FILE *v11; // rbx\n  char *v12; // rax\n  FILE *v13; // rbx\n  char *v14; // rax\n  FILE *v15; // rbx\n  char *v16; // rax\n  FILE *v17; // rbx\n  char *v18; // rax\n  FILE *v19; // rbx\n  char *v20; // rax\n  FILE *v21; // rbx\n  char *v22; // rax\n  FILE *v23; // rbx\n  char *v24; // rax\n  FILE *v25; // rbx\n  char *v26; // rax\n  FILE *v27; // rbx\n  char *v28; // rax\n  FILE *v29; // rbx\n  char *v30; // rax\n  FILE *v31; // rbx\n  char *v32; // rax\n  FILE *v33; // rbx\n  char *v34; // rax\n  FILE *v35; // rbx\n  char *v36; // rax\n  FILE *v37; // rbx\n  char *v38; // rax\n  FILE *v39; // rbx\n  char *v40; // rax\n  FILE *v41; // rbx\n  char *v42; // rax\n\n  if ( a1 )\n  {\n    v1 = qword_61D900;\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = qword_61D900;\n    v4 = qword_61D900;\n    v5 = qword_61D900;\n    v6 = gettext(\n           \"Usage: %s [OPTION]... [-T] SOURCE DEST\\n\"\n           \"  or:  %s [OPTION]... SOURCE... DIRECTORY\\n\"\n           \"  or:  %s [OPTION]... -t DIRECTORY SOURCE...\\n\");\n    printf(v6, v5, v4, v3);\n    v7 = stdout;\n    v8 = gettext(\"Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\\n\\n\");\n    fputs_unlocked(v8, v7);\n    v9 = stdout;\n    v10 = gettext(\"Mandatory arguments to long options are mandatory for short options too.\\n\");\n    fputs_unlocked(v10, v9);\n    v11 = stdout;\n    v12 = gettext(\n            \"  -a, --archive                same as -dR --preserve=all\\n\"\n            \"      --attributes-only        don't copy the file data, just the attributes\\n\"\n            \"      --backup[=CONTROL]       make a backup of each existing destination file\\n\"\n            \"  -b                           like --backup but does not accept an argument\\n\"\n            \"      --copy-contents          copy contents of special files when recursive\\n\"\n            \"  -d                           same as --no-dereference --preserve=links\\n\");\n    fputs_unlocked(v12, v11);\n    v13 = stdout;\n    v14 = gettext(\n            \"  -f, --force                  if an existing destination file cannot be\\n\"\n            \"                                 opened, remove it and try again (redundant if\\n\"\n            \"                                 the -n option is used)\\n\"\n            \"  -i, --interactive            prompt before overwrite (overrides a previous -n\\n\"\n            \"                                  option)\\n\"\n            \"  -H                           follow command-line symbolic links in SOURCE\\n\");\n    fputs_unlocked(v14, v13);\n    v15 = stdout;\n    v16 = gettext(\n            \"  -l, --link                   hard link files instead of copying\\n\"\n            \"  -L, --dereference            always follow symbolic links in SOURCE\\n\");\n    fputs_unlocked(v16, v15);\n    v17 = stdout;\n    v18 = gettext(\n            \"  -n, --no-clobber             do not overwrite an existing file (overrides\\n\"\n            \"                                 a previous -i option)\\n\"\n            \"  -P, --no-dereference         never follow symbolic links in SOURCE\\n\");\n    fputs_unlocked(v18, v17);\n    v19 = stdout;\n    v20 = gettext(\n            \"  -p                           same as --preserve=mode,ownership,timestamps\\n\"\n            \"      --preserve[=ATTR_LIST]   preserve the specified attributes (default:\\n\"\n            \"                                 mode,ownership,timestamps), if possible\\n\"\n            \"                                 additional attributes: context, links, xattr,\\n\"\n            \"                                 all\\n\");\n    fputs_unlocked(v20, v19);\n    v21 = stdout;\n    v22 = gettext(\n            \"      --no-preserve=ATTR_LIST  don't preserve the specified attributes\\n\"\n            \"      --parents                use full source file name under DIRECTORY\\n\");\n    fputs_unlocked(v22, v21);\n    v23 = stdout;\n    v24 = gettext(\n            \"  -R, -r, --recursive          copy directories recursively\\n\"\n            \"      --reflink[=WHEN]         control clone/CoW copies. See below\\n\"\n            \"      --remove-destination     remove each existing destination file before\\n\"\n            \"                                 attempting to open it (contrast with --force)\\n\");\n    fputs_unlocked(v24, v23);\n    v25 = stdout;\n    v26 = gettext(\n            \"      --sparse=WHEN            control creation of sparse files. See below\\n\"\n            \"      --strip-trailing-slashes  remove any trailing slashes from each SOURCE\\n\"\n            \"                                 argument\\n\");\n    fputs_unlocked(v26, v25);\n    v27 = stdout;\n    v28 = gettext(\n            \"  -s, --symbolic-link          make symbolic links instead of copying\\n\"\n            \"  -S, --suffix=SUFFIX          override the usual backup suffix\\n\"\n            \"  -t, --target-directory=DIRECTORY  copy all SOURCE arguments into DIRECTORY\\n\"\n            \"  -T, --no-target-directory    treat DEST as a normal file\\n\");\n    fputs_unlocked(v28, v27);\n    v29 = stdout;\n    v30 = gettext(\n            \"  -u, --update                 copy only when the SOURCE file is newer\\n\"\n            \"                                 than the destination file or when the\\n\"\n            \"                                 destination file is missing\\n\"\n            \"  -v, --verbose                explain what is being done\\n\"\n            \"  -x, --one-file-system        stay on this file system\\n\");\n    fputs_unlocked(v30, v29);\n    v31 = stdout;\n    v32 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v32, v31);\n    v33 = stdout;\n    v34 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v34, v33);\n    v35 = stdout;\n    v36 = gettext(\n            \"\\n\"\n            \"By default, sparse SOURCE files are detected by a crude heuristic and the\\n\"\n            \"corresponding DEST file is made sparse as well.  That is the behavior\\n\"\n            \"selected by --sparse=auto.  Specify --sparse=always to create a sparse DEST\\n\"\n            \"file whenever the SOURCE file contains a long enough sequence of zero bytes.\\n\"\n            \"Use --sparse=never to inhibit creation of sparse files.\\n\"\n            \"\\n\"\n            \"When --reflink[=always] is specified, perform a lightweight copy, where the\\n\"\n            \"data blocks are copied only when modified.  If this is not possible the copy\\n\"\n            \"fails, or if --reflink=auto is specified, fall back to a standard copy.\\n\");\n    fputs_unlocked(v36, v35);\n    v37 = stdout;\n    v38 = gettext(\n            \"\\n\"\n            \"The backup suffix is `~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\n\"\n            \"The version control method may be selected via the --backup option or through\\n\"\n            \"the VERSION_CONTROL environment variable.  Here are the values:\\n\"\n            \"\\n\");\n    fputs_unlocked(v38, v37);\n    v39 = stdout;\n    v40 = gettext(\n            \"  none, off       never make backups (even if --backup is given)\\n\"\n            \"  numbered, t     make numbered backups\\n\"\n            \"  existing, nil   numbered if numbered backups exist, simple otherwise\\n\"\n            \"  simple, never   always make simple backups\\n\");\n    fputs_unlocked(v40, v39);\n    v41 = stdout;\n    v42 = gettext(\n            \"\\n\"\n            \"As a special case, cp makes a backup of SOURCE when the force and backup\\n\"\n            \"options are given and SOURCE and DEST are the same name for an existing,\\n\"\n            \"regular file.\\n\");\n    fputs_unlocked(v42, v41);\n    sub_4025DD();\n  }\n  exit(a1);\n}\n"], [4204952, "sub_402998", "__int64 __fastcall sub_402998(char *a1, __int64 a2, __int64 a3, _BYTE *a4)\n{\n  size_t v4; // rax\n  void *v5; // rsp\n  __int64 v6; // rdx\n  __int64 v7; // rdx\n  __int64 v8; // r12\n  char *v9; // rbx\n  int *v10; // rax\n  __int64 v12; // r12\n  char *v13; // rbx\n  int *v14; // rax\n  __int64 v15; // r12\n  char *v16; // rbx\n  int *v17; // rax\n  __int64 v19; // [rsp+8h] [rbp-88h] BYREF\n  __int64 v20; // [rsp+10h] [rbp-80h]\n  char *v21; // [rsp+18h] [rbp-78h]\n  int v22; // [rsp+2Ch] [rbp-64h]\n  __int64 i; // [rsp+30h] [rbp-60h]\n  char *s; // [rsp+38h] [rbp-58h]\n  size_t n; // [rsp+40h] [rbp-50h]\n  void *dest; // [rsp+48h] [rbp-48h]\n  char *file; // [rsp+50h] [rbp-40h]\n  char *v28; // [rsp+58h] [rbp-38h]\n  __int64 v29[6]; // [rsp+60h] [rbp-30h] BYREF\n\n  v21 = a1;\n  v20 = a2;\n  v19 = a3;\n  s = a1;\n  v4 = strlen(a1);\n  n = v4 + 1;\n  v5 = alloca(16 * ((v4 + 31) / 0x10));\n  dest = (void *)(16 * (((unsigned __int64)&v19 + 7) >> 4));\n  file = (char *)memcpy(dest, a1, v4 + 1);\n  v28 = &file[v20];\n  for ( i = v19; i; i = *(_QWORD *)(i + 160) )\n  {\n    file[*(_QWORD *)(i + 152)] = 0;\n    if ( a4[30] )\n    {\n      v29[0] = sub_4026E7(i);\n      v29[1] = v6;\n      v29[2] = sub_4026FD(i);\n      v29[3] = v7;\n      if ( (unsigned int)sub_411A09(file, v29) )\n      {\n        v8 = sub_40E491(file);\n        v9 = gettext(\"failed to preserve times for %s\");\n        v10 = __errno_location();\n        error(0, *v10, v9, v8);\n        return 0LL;\n      }\n    }\n    if ( a4[28] && lchown(file, *(_DWORD *)(i + 28), *(_DWORD *)(i + 32)) )\n    {\n      if ( (unsigned __int8)sub_409AE5(a4) != 1 )\n      {\n        v12 = sub_40E491(file);\n        v13 = gettext(\"failed to preserve ownership for %s\");\n        v14 = __errno_location();\n        error(0, *v14, v13, v12);\n        return 0LL;\n      }\n      v22 = lchown(file, 0xFFFFFFFF, *(_DWORD *)(i + 32));\n    }\n    if ( a4[29] )\n    {\n      if ( (unsigned int)sub_40A631(v28, 0xFFFFFFFFLL, file, 0xFFFFFFFFLL, *(unsigned int *)(i + 24)) )\n        return 0LL;\n    }\n    else if ( *(_BYTE *)(i + 144) && chmod(file, *(_DWORD *)(i + 24)) )\n    {\n      v15 = sub_40E491(file);\n      v16 = gettext(\"failed to preserve permissions for %s\");\n      v17 = __errno_location();\n      error(0, *v17, v16, v15);\n      return 0LL;\n    }\n    file[*(_QWORD *)(i + 152)] = 47;\n  }\n  return 1LL;\n}\n"], [4205700, "sub_402C84", "__int64 __fastcall sub_402C84(char *a1, __int64 a2, char *a3, __nlink_t *a4, _BYTE *a5, _BYTE *a6)\n{\n  size_t v6; // rax\n  void *v7; // rsp\n  void *v8; // rsp\n  int v9; // eax\n  int v10; // eax\n  __int64 v11; // rbx\n  char *v12; // rax\n  int v14; // eax\n  __int64 v15; // r12\n  char *v16; // rbx\n  int *v17; // rax\n  __int64 v18; // r12\n  char *v19; // rbx\n  int *v20; // rax\n  __int64 v21; // r12\n  char *v22; // rbx\n  int *v23; // rax\n  __int64 v24; // rbx\n  char *v25; // rax\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  _BYTE *v30; // [rsp+8h] [rbp-1B8h] BYREF\n  __nlink_t *v31; // [rsp+10h] [rbp-1B0h]\n  char *format; // [rsp+18h] [rbp-1A8h]\n  __int64 v33; // [rsp+20h] [rbp-1A0h]\n  char *v34; // [rsp+28h] [rbp-198h]\n  bool v35; // [rsp+37h] [rbp-189h]\n  __mode_t v36; // [rsp+38h] [rbp-188h]\n  int errnum; // [rsp+3Ch] [rbp-184h]\n  __mode_t v38; // [rsp+40h] [rbp-180h]\n  __mode_t mode; // [rsp+44h] [rbp-17Ch]\n  char *i; // [rsp+48h] [rbp-178h]\n  struct stat *v41; // [rsp+50h] [rbp-170h]\n  char *s; // [rsp+58h] [rbp-168h]\n  size_t n; // [rsp+60h] [rbp-160h]\n  void *dest; // [rsp+68h] [rbp-158h]\n  void *src; // [rsp+70h] [rbp-150h]\n  char *v46; // [rsp+78h] [rbp-148h]\n  size_t v47; // [rsp+80h] [rbp-140h]\n  char *filename; // [rsp+88h] [rbp-138h]\n  struct stat stat_buf; // [rsp+90h] [rbp-130h] BYREF\n  struct stat v50; // [rsp+120h] [rbp-A0h] BYREF\n\n  v34 = a1;\n  v33 = a2;\n  format = a3;\n  v31 = a4;\n  v30 = a5;\n  s = a1;\n  v6 = strlen(a1);\n  n = v6 + 1;\n  v7 = alloca(16 * ((v6 + 31) / 0x10));\n  dest = (void *)(16 * (((unsigned __int64)&v30 + 7) >> 4));\n  src = memcpy(dest, a1, v6 + 1);\n  v46 = (char *)src + v33;\n  v47 = sub_40B584(src);\n  v8 = alloca(16 * ((v47 + 31) / 0x10));\n  filename = (char *)(16 * (((unsigned __int64)&v30 + 7) >> 4));\n  memcpy(filename, src, v47);\n  filename[v47] = 0;\n  *v31 = 0LL;\n  if ( (unsigned int)sub_416100(filename, &stat_buf) )\n  {\n    for ( i = v46; *i == 47; ++i )\n      ;\n    while ( 1 )\n    {\n      i = strchr(i, 47);\n      if ( !i )\n        break;\n      *i = 0;\n      v9 = sub_416100((char *)src, &stat_buf);\n      v35 = v9 != 0;\n      if ( v9 || a6[28] || a6[29] || a6[30] )\n      {\n        if ( (unsigned int)sub_416100(v46, &v50) )\n        {\n          v10 = *__errno_location();\n        }\n        else if ( (v50.st_mode & 0xF000) == 0x4000 )\n        {\n          v10 = 0;\n        }\n        else\n        {\n          v10 = 20;\n        }\n        errnum = v10;\n        if ( v10 )\n        {\n          v11 = sub_40E491(v46);\n          v12 = gettext(\"failed to get attributes of %s\");\n          error(0, errnum, v12, v11);\n          return 0LL;\n        }\n        v41 = (struct stat *)sub_4126C5(168LL);\n        qmemcpy(v41, &v50, sizeof(struct stat));\n        v41[1].st_ino = i - (_BYTE *)src;\n        LOBYTE(v41[1].st_dev) = 0;\n        v41[1].st_nlink = *v31;\n        *v31 = (__nlink_t)v41;\n      }\n      if ( v35 )\n      {\n        *v30 = 1;\n        v38 = v41->st_mode;\n        if ( a6[28] != 1 )\n        {\n          if ( a6[29] )\n            v14 = 18;\n          else\n            v14 = 0;\n        }\n        else\n        {\n          v14 = 63;\n        }\n        v36 = v38 & v14;\n        mode = (unsigned __int16)v38 & (unsigned __int16)~(v38 & v14) & 0xFFF;\n        if ( mkdir((const char *)src, mode) )\n        {\n          v15 = sub_40E491(src);\n          v16 = gettext(\"cannot make directory %s\");\n          v17 = __errno_location();\n          error(0, *v17, v16, v15);\n          return 0LL;\n        }\n        if ( format )\n          printf(format, v46, src);\n        if ( (unsigned int)sub_416120((char *)src, &stat_buf) )\n        {\n          v18 = sub_40E491(src);\n          v19 = gettext(\"failed to get attributes of %s\");\n          v20 = __errno_location();\n          error(0, *v20, v19, v18);\n          return 0LL;\n        }\n        if ( a6[29] != 1 )\n        {\n          if ( (v36 & ~stat_buf.st_mode) != 0 )\n            v36 &= ~(unsigned int)sub_409B6D();\n          if ( (v36 & ~stat_buf.st_mode) != 0 || (stat_buf.st_mode & 0x1C0) != 448 )\n          {\n            v41->st_mode = v36 | stat_buf.st_mode;\n            LOBYTE(v41[1].st_dev) = 1;\n          }\n        }\n        if ( (stat_buf.st_mode & 0x1C0) != 448 && chmod((const char *)src, stat_buf.st_mode | 0x1C0) )\n        {\n          v21 = sub_40E491(src);\n          v22 = gettext(\"setting permissions for %s\");\n          v23 = __errno_location();\n          error(0, *v23, v22, v21);\n          return 0LL;\n        }\n      }\n      else\n      {\n        if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n        {\n          v24 = sub_40E491(src);\n          v25 = gettext(\"%s exists but is not a directory\");\n          error(0, 0, v25, v24);\n          return 0LL;\n        }\n        *v30 = 0;\n      }\n      v26 = i++;\n      *v26 = 47;\n      while ( *i == 47 )\n        ++i;\n    }\n  }\n  else\n  {\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n    {\n      v27 = sub_40E491(filename);\n      v28 = gettext(\"%s exists but is not a directory\");\n      error(0, 0, v28, v27);\n      return 0LL;\n    }\n    *v30 = 0;\n  }\n  return 1LL;\n}\n"], [4207455, "sub_40335F", "_BOOL8 __fastcall sub_40335F(char *a1, struct stat *a2, _BYTE *a3)\n{\n  int v3; // eax\n  bool v4; // al\n  __int64 v5; // rbx\n  char *v6; // rax\n  bool v9; // [rsp+2Bh] [rbp-15h]\n  int errnum; // [rsp+2Ch] [rbp-14h]\n\n  if ( (unsigned int)sub_416100(a1, a2) )\n    v3 = *__errno_location();\n  else\n    v3 = 0;\n  errnum = v3;\n  v4 = !v3 && (a2->st_mode & 0xF000) == 0x4000;\n  v9 = v4;\n  if ( errnum )\n  {\n    if ( errnum != 2 )\n    {\n      v5 = sub_40E491(a1);\n      v6 = gettext(\"accessing %s\");\n      error(1, errnum, v6, v5);\n    }\n    *a3 = 1;\n  }\n  return v9;\n}\n"], [4207641, "sub_403419", "_BOOL8 __fastcall sub_403419(int a1, char **a2, __int64 a3, char a4, unsigned int *a5)\n{\n  char *v5; // rax\n  __int64 v6; // rbx\n  char *v7; // rax\n  char *v8; // rax\n  __int64 v9; // rbx\n  char *v10; // rax\n  __int64 v11; // rbx\n  char *v12; // rax\n  size_t v13; // rax\n  void *v14; // rsp\n  char *v15; // rax\n  size_t v16; // rax\n  void *v17; // rsp\n  void *v18; // rax\n  bool v19; // bl\n  bool v20; // bl\n  char *v21; // rax\n  char v22; // al\n  char *v25; // [rsp+8h] [rbp-158h] BYREF\n  char **v26; // [rsp+10h] [rbp-150h]\n  char v27; // [rsp+18h] [rbp-148h]\n  int v28; // [rsp+1Ch] [rbp-144h]\n  unsigned __int8 v29; // [rsp+2Fh] [rbp-131h] BYREF\n  char v30; // [rsp+30h] [rbp-130h] BYREF\n  bool v31; // [rsp+31h] [rbp-12Fh]\n  char v32; // [rsp+32h] [rbp-12Eh]\n  bool v33; // [rsp+33h] [rbp-12Dh]\n  int i; // [rsp+34h] [rbp-12Ch]\n  _QWORD *v35; // [rsp+38h] [rbp-128h] BYREF\n  __int64 v36; // [rsp+40h] [rbp-120h] BYREF\n  void *v37; // [rsp+48h] [rbp-118h]\n  char *v38; // [rsp+50h] [rbp-110h]\n  char *v39; // [rsp+58h] [rbp-108h]\n  char *s; // [rsp+60h] [rbp-100h]\n  size_t n; // [rsp+68h] [rbp-F8h]\n  void *dest; // [rsp+70h] [rbp-F0h]\n  void *v43; // [rsp+78h] [rbp-E8h]\n  char *v44; // [rsp+80h] [rbp-E0h]\n  size_t v45; // [rsp+88h] [rbp-D8h]\n  void *v46; // [rsp+90h] [rbp-D0h]\n  void *v47; // [rsp+98h] [rbp-C8h]\n  char *s1; // [rsp+A0h] [rbp-C0h]\n  void *ptr; // [rsp+A8h] [rbp-B8h]\n  char *v50; // [rsp+B0h] [rbp-B0h]\n  char *s2; // [rsp+B8h] [rbp-A8h]\n  struct stat v52; // [rsp+C0h] [rbp-A0h] BYREF\n\n  v28 = a1;\n  v26 = a2;\n  v25 = (char *)a3;\n  v27 = a4;\n  v29 = 0;\n  v31 = 1;\n  if ( (a3 == 0) >= a1 )\n  {\n    if ( v28 > 0 )\n    {\n      v6 = sub_40E491(*v26);\n      v7 = gettext(\"missing destination file operand after %s\");\n      error(0, 0, v7, v6);\n    }\n    else\n    {\n      v5 = gettext(\"missing file operand\");\n      error(0, 0, v5);\n    }\n    sub_402713(1);\n  }\n  if ( v27 )\n  {\n    if ( v25 )\n    {\n      v8 = gettext(\"cannot combine --target-directory (-t) and --no-target-directory (-T)\");\n      error(1, 0, v8);\n    }\n    if ( v28 > 2 )\n    {\n      v9 = sub_40E491(v26[2]);\n      v10 = gettext(\"extra operand %s\");\n      error(0, 0, v10, v9);\n      sub_402713(1);\n    }\n    v33 = sub_40335F(v26[v28 - 1], &v52, &v29);\n  }\n  else if ( !v25 )\n  {\n    if ( v28 > 1 && sub_40335F(v26[v28 - 1], &v52, &v29) )\n    {\n      v25 = v26[--v28];\n    }\n    else if ( v28 > 2 )\n    {\n      v11 = sub_40E491(v26[v28 - 1]);\n      v12 = gettext(\"target %s is not a directory\");\n      error(1, 0, v12, v11);\n    }\n  }\n  if ( v25 )\n  {\n    if ( v28 > 1 )\n    {\n      sub_406FBE(a5);\n      sub_406FF3(a5);\n    }\n    for ( i = 0; i < v28; ++i )\n    {\n      v32 = 1;\n      v36 = 0LL;\n      v39 = v26[i];\n      if ( byte_61D442 )\n        sub_40B75B(v39);\n      if ( byte_61D441 )\n      {\n        s = v39;\n        v13 = strlen(v39);\n        n = v13 + 1;\n        v14 = alloca(16 * ((v13 + 31) / 0x10));\n        dest = (void *)(16 * (((unsigned __int64)&v25 + 7) >> 4));\n        v43 = memcpy(dest, s, v13 + 1);\n        sub_40B75B(v43);\n        v37 = (void *)sub_40BC5F(v25, v43, &v36);\n        if ( *((_BYTE *)a5 + 43) )\n          v15 = \"%s -> %s\\n\";\n        else\n          v15 = 0LL;\n        v32 = sub_402C84((char *)v37, v36 - (_QWORD)v37, v15, (__nlink_t *)&v35, &v29, a5);\n      }\n      else\n      {\n        v44 = v39;\n        v16 = strlen(v39);\n        v45 = v16 + 1;\n        v17 = alloca(16 * ((v16 + 31) / 0x10));\n        v46 = (void *)(16 * (((unsigned __int64)&v25 + 7) >> 4));\n        v47 = memcpy(v46, v44, v16 + 1);\n        s1 = (char *)sub_40B6A4(v47);\n        sub_40B75B(s1);\n        if ( !strcmp(s1, \"..\") )\n          v18 = (void *)sub_41281A(v25);\n        else\n          v18 = (void *)sub_40BC5F(v25, s1, 0LL);\n        v37 = v18;\n      }\n      if ( v32 != 1 )\n      {\n        v31 = 0;\n      }\n      else\n      {\n        v19 = v31;\n        v31 = (v19 & (unsigned __int8)sub_4099F3(v39, v37, v29, a5, &v30, 0LL)) != 0;\n        if ( byte_61D441 )\n        {\n          v20 = v31;\n          v31 = (v20 & (unsigned __int8)sub_402998((char *)v37, v36 - (_QWORD)v37, (__int64)v35, a5)) != 0;\n        }\n      }\n      if ( byte_61D441 )\n      {\n        while ( v35 )\n        {\n          ptr = v35;\n          v35 = (_QWORD *)v35[20];\n          free(ptr);\n        }\n      }\n      free(v37);\n    }\n  }\n  else\n  {\n    v50 = *v26;\n    s2 = v26[1];\n    if ( byte_61D441 )\n    {\n      v21 = gettext(\"with --parents, the destination must be a directory\");\n      error(0, 0, v21);\n      sub_402713(1);\n    }\n    if ( *((_BYTE *)a5 + 22) && *a5 && !strcmp(v50, s2) && v29 != 1 && (v52.st_mode & 0xF000) == 0x8000 )\n    {\n      v38 = (char *)sub_40B0A7(s2, *a5);\n      qword_61D460 = *(_QWORD *)a5;\n      qword_61D468 = *((_QWORD *)a5 + 1);\n      qword_61D470 = *((_QWORD *)a5 + 2);\n      qword_61D478 = *((_QWORD *)a5 + 3);\n      qword_61D480 = *((_QWORD *)a5 + 4);\n      qword_61D488 = *((_QWORD *)a5 + 5);\n      qword_61D490 = *((_QWORD *)a5 + 6);\n      qword_61D498 = *((_QWORD *)a5 + 7);\n      qword_61D4A0 = *((_QWORD *)a5 + 8);\n      LODWORD(qword_61D460) = 0;\n      v22 = sub_4099F3(v50, v38, 0LL, &qword_61D460, &v36, 0LL);\n    }\n    else\n    {\n      v38 = s2;\n      v22 = sub_4099F3(v50, s2, 0LL, a5, &v36, 0LL);\n    }\n    v31 = v22;\n  }\n  return v31;\n}\n"], [4209734, "sub_403C46", "__int64 __fastcall sub_403C46(__int64 a1)\n{\n  __int64 result; // rax\n\n  sub_409AA1(a1);\n  *(_BYTE *)(a1 + 20) = 1;\n  *(_DWORD *)(a1 + 4) = 1;\n  *(_BYTE *)(a1 + 21) = 0;\n  *(_BYTE *)(a1 + 22) = 0;\n  *(_BYTE *)(a1 + 23) = 0;\n  *(_DWORD *)(a1 + 8) = 4;\n  *(_BYTE *)(a1 + 24) = 0;\n  *(_BYTE *)(a1 + 27) = 0;\n  *(_DWORD *)(a1 + 48) = 0;\n  *(_BYTE *)(a1 + 28) = 0;\n  *(_BYTE *)(a1 + 31) = 0;\n  *(_BYTE *)(a1 + 29) = 0;\n  *(_BYTE *)(a1 + 30) = 0;\n  *(_BYTE *)(a1 + 34) = 0;\n  *(_BYTE *)(a1 + 35) = 0;\n  *(_BYTE *)(a1 + 36) = 0;\n  *(_BYTE *)(a1 + 38) = 0;\n  *(_BYTE *)(a1 + 37) = 0;\n  *(_BYTE *)(a1 + 32) = 1;\n  *(_BYTE *)(a1 + 33) = 0;\n  *(_BYTE *)(a1 + 39) = 0;\n  *(_DWORD *)(a1 + 12) = 2;\n  *(_BYTE *)(a1 + 41) = 0;\n  *(_BYTE *)(a1 + 40) = 0;\n  *(_DWORD *)(a1 + 16) = 0;\n  *(_BYTE *)(a1 + 44) = 0;\n  *(_BYTE *)(a1 + 42) = 0;\n  *(_BYTE *)(a1 + 43) = 0;\n  *(_BYTE *)(a1 + 45) = getenv(\"POSIXLY_CORRECT\") != 0LL;\n  *(_QWORD *)(a1 + 56) = 0LL;\n  result = a1;\n  *(_QWORD *)(a1 + 64) = 0LL;\n  return result;\n}\n"], [4210046, "sub_403D7E", "void __fastcall sub_403D7E(__int64 a1, _BYTE *a2, char a3)\n{\n  char *v3; // rax\n  unsigned int v4; // eax\n  char *s; // [rsp+28h] [rbp-18h]\n  char *v7; // [rsp+30h] [rbp-10h]\n  char *ptr; // [rsp+38h] [rbp-8h]\n\n  ptr = (char *)sub_41281A(a1);\n  s = ptr;\n  do\n  {\n    v7 = strchr(s, 44);\n    if ( v7 )\n    {\n      v3 = v7++;\n      *v3 = 0;\n    }\n    v4 = dword_417E40[sub_40AB4A(\"--preserve\", s, off_417E00, dword_417E40, 4LL, off_61D398)];\n    if ( v4 == 3 )\n    {\n      a2[31] = a3;\n    }\n    else if ( v4 > 3 )\n    {\n      if ( v4 == 5 )\n      {\n        a2[36] = a3;\n        a2[37] = a3;\n      }\n      else if ( v4 < 5 )\n      {\n        a2[34] = a3;\n        a2[35] = a3;\n      }\n      else\n      {\n        if ( v4 != 6 )\n          abort();\n        a2[29] = a3;\n        a2[30] = a3;\n        a2[28] = a3;\n        a2[31] = a3;\n        if ( byte_61D440 )\n          a2[34] = a3;\n        a2[36] = a3;\n      }\n    }\n    else if ( v4 == 1 )\n    {\n      a2[30] = a3;\n    }\n    else if ( v4 > 1 )\n    {\n      a2[28] = a3;\n    }\n    else\n    {\n      a2[29] = a3;\n    }\n    s = v7;\n  }\n  while ( v7 );\n  free(ptr);\n}\n"], [4210461, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  char *v3; // rax\n  __int64 v4; // r12\n  char *v5; // rbx\n  int *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  int v9; // eax\n  char *v10; // rax\n  char *v11; // rax\n  char *v12; // rax\n  char *v13; // rax\n  unsigned int v14; // eax\n  char *v15; // rax\n  char *v16; // rax\n  char v17; // [rsp+20h] [rbp-110h]\n  char v18; // [rsp+21h] [rbp-10Fh]\n  char v19; // [rsp+22h] [rbp-10Eh]\n  bool v20; // [rsp+23h] [rbp-10Dh]\n  int v21; // [rsp+24h] [rbp-10Ch]\n  char *v22; // [rsp+28h] [rbp-108h]\n  char *v23; // [rsp+30h] [rbp-100h]\n  char *v24; // [rsp+38h] [rbp-F8h]\n  unsigned int v25; // [rsp+40h] [rbp-F0h] BYREF\n  int v26; // [rsp+44h] [rbp-ECh]\n  int v27; // [rsp+48h] [rbp-E8h]\n  int v28; // [rsp+4Ch] [rbp-E4h]\n  char v29; // [rsp+54h] [rbp-DCh]\n  char v30; // [rsp+55h] [rbp-DBh]\n  char v31; // [rsp+56h] [rbp-DAh]\n  char v32; // [rsp+57h] [rbp-D9h]\n  char v33; // [rsp+5Bh] [rbp-D5h]\n  char v34; // [rsp+5Ch] [rbp-D4h]\n  char v35; // [rsp+5Dh] [rbp-D3h]\n  char v36; // [rsp+5Eh] [rbp-D2h]\n  char v37; // [rsp+5Fh] [rbp-D1h]\n  char v38; // [rsp+60h] [rbp-D0h]\n  char v39; // [rsp+61h] [rbp-CFh]\n  char v40; // [rsp+62h] [rbp-CEh]\n  char v41; // [rsp+64h] [rbp-CCh]\n  char v42; // [rsp+65h] [rbp-CBh]\n  char v43; // [rsp+66h] [rbp-CAh]\n  char v44; // [rsp+67h] [rbp-C9h]\n  char v45; // [rsp+69h] [rbp-C7h]\n  char v46; // [rsp+6Ah] [rbp-C6h]\n  char v47; // [rsp+6Bh] [rbp-C5h]\n  int v48; // [rsp+70h] [rbp-C0h]\n  struct stat stat_buf; // [rsp+90h] [rbp-A0h] BYREF\n\n  v17 = 0;\n  v23 = 0LL;\n  v18 = 0;\n  v24 = 0LL;\n  v19 = 0;\n  sub_40D935(*a2, a2, a3);\n  setlocale(6, &locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_4160E0(sub_40B281);\n  byte_61D440 = 0;\n  sub_403C46((__int64)&v25);\n  v22 = getenv(\"SIMPLE_BACKUP_SUFFIX\");\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v21 = getopt_long(a1, a2, \"abdfHilLnprst:uvxPRS:T\", &longopts, 0LL);\n      if ( v21 == -1 )\n      {\n        if ( v32 && v45 )\n        {\n          v10 = gettext(\"cannot make both hard and symbolic links\");\n          error(0, 0, v10);\n          sub_402713(1);\n        }\n        if ( v17 && v27 == 2 )\n        {\n          v11 = gettext(\"options --backup and --no-clobber are mutually exclusive\");\n          error(0, 0, v11);\n          sub_402713(1);\n        }\n        if ( v48 == 2 && v28 != 2 )\n        {\n          v12 = gettext(\"--reflink can be used only with --sparse=auto\");\n          error(0, 0, v12);\n          sub_402713(1);\n        }\n        if ( v22 )\n          src = (char *)sub_41281A(v22);\n        if ( v17 )\n        {\n          v13 = gettext(\"backup type\");\n          v14 = sub_40B21C(v13, v23);\n        }\n        else\n        {\n          v14 = 0;\n        }\n        v25 = v14;\n        if ( v26 == 1 )\n        {\n          if ( v44 )\n            v26 = 2;\n          else\n            v26 = 4;\n        }\n        if ( v44 )\n          v29 = v18;\n        if ( v31 && (v32 || v45) )\n          v30 = 1;\n        if ( v40 && byte_61D440 != 1 )\n        {\n          v15 = gettext(\"cannot preserve security context without an SELinux-enabled kernel\");\n          error(1, 0, v15);\n        }\n        if ( v42 )\n        {\n          v16 = gettext(\"cannot preserve extended attributes, cp is built without xattr support\");\n          error(1, 0, v16);\n        }\n        sub_409D97();\n        v20 = sub_403419(a1 - optind, &a2[optind], (__int64)v24, v19, &v25);\n        sub_409DD4();\n        exit(!v20);\n      }\n      if ( v21 != 112 )\n        break;\nLABEL_69:\n      v34 = 1;\n      v35 = 1;\n      v36 = 1;\n      v39 = 1;\n    }\n    if ( v21 > 112 )\n    {\n      if ( v21 == 129 )\n      {\n        v18 = 1;\n      }\n      else if ( v21 > 129 )\n      {\n        if ( v21 == 133 )\n        {\n          if ( optarg )\n            v48 = dword_416348[sub_40AB4A(\"--reflink\", optarg, off_416330, dword_416348, 4LL, off_61D398)];\n          else\n            v48 = 2;\n        }\n        else if ( v21 > 133 )\n        {\n          if ( v21 == 135 )\n          {\n            byte_61D442 = 1;\n          }\n          else if ( v21 < 135 )\n          {\n            v28 = dword_416320[sub_40AB4A(\"--sparse\", optarg, off_416300, dword_416320, 4LL, off_61D398)];\n          }\n          else\n          {\n            if ( v21 != 136 )\n              goto LABEL_89;\n            v30 = 1;\n          }\n        }\n        else if ( v21 == 131 )\n        {\n          byte_61D441 = 1;\n        }\n        else if ( v21 > 131 )\n        {\n          if ( !optarg )\n            goto LABEL_69;\n          sub_403D7E((__int64)optarg, &v25, 1);\n          v39 = 1;\n        }\n        else\n        {\n          sub_403D7E((__int64)optarg, &v25, 0);\n        }\n      }\n      else if ( v21 == 117 )\n      {\n        v46 = 1;\n      }\n      else if ( v21 > 117 )\n      {\n        switch ( v21 )\n        {\n          case 120:\n            v33 = 1;\n            break;\n          case 128:\n            v38 = 0;\n            break;\n          case 118:\n            v47 = 1;\n            break;\n          default:\n            goto LABEL_89;\n        }\n      }\n      else if ( v21 == 115 )\n      {\n        v45 = 1;\n      }\n      else if ( v21 > 115 )\n      {\n        if ( v24 )\n        {\n          v3 = gettext(\"multiple target directories specified\");\n          error(1, 0, v3);\n        }\n        else\n        {\n          if ( (unsigned int)sub_416100(optarg, &stat_buf) )\n          {\n            v4 = sub_40E491(optarg);\n            v5 = gettext(\"accessing %s\");\n            v6 = __errno_location();\n            error(1, *v6, v5, v4);\n          }\n          if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n          {\n            v7 = sub_40E491(optarg);\n            v8 = gettext(\"target %s is not a directory\");\n            error(1, 0, v8, v7);\n          }\n        }\n        v24 = optarg;\n      }\n      else\n      {\n        if ( v21 != 114 )\n          goto LABEL_89;\nLABEL_71:\n        v44 = 1;\n      }\n    }\n    else if ( v21 == 84 )\n    {\n      v19 = 1;\n    }\n    else if ( v21 > 84 )\n    {\n      if ( v21 == 102 )\n      {\n        v31 = 1;\n      }\n      else if ( v21 > 102 )\n      {\n        switch ( v21 )\n        {\n          case 'l':\n            v32 = 1;\n            break;\n          case 'n':\n            v27 = 2;\n            break;\n          case 'i':\n            v27 = 3;\n            break;\n          default:\n            goto LABEL_89;\n        }\n      }\n      else\n      {\n        switch ( v21 )\n        {\n          case 'b':\n            v17 = 1;\n            if ( optarg )\n              v23 = optarg;\n            break;\n          case 'd':\n            v37 = 1;\n            v26 = 2;\n            break;\n          case 'a':\n            v26 = 2;\n            v37 = 1;\n            v34 = 1;\n            v35 = 1;\n            v36 = 1;\n            v39 = 1;\n            if ( byte_61D440 )\n              v40 = 1;\n            v41 = 1;\n            v43 = 1;\n            v44 = 1;\n            break;\n          default:\n            goto LABEL_89;\n        }\n      }\n    }\n    else if ( v21 == 76 )\n    {\n      v26 = 4;\n    }\n    else if ( v21 > 76 )\n    {\n      if ( v21 == 82 )\n        goto LABEL_71;\n      if ( v21 > 82 )\n      {\n        v17 = 1;\n        v22 = optarg;\n      }\n      else\n      {\n        if ( v21 != 80 )\n          goto LABEL_89;\n        v26 = 2;\n      }\n    }\n    else\n    {\n      if ( v21 == -130 )\n        sub_402713(0);\n      if ( v21 != 72 )\n      {\n        if ( v21 == -131 )\n        {\n          v9 = sub_40E1A1(\"Torbjorn Granlund\", &unk_417C0E);\n          sub_41241C(\n            (_DWORD)stdout,\n            (unsigned int)\"cp\",\n            (unsigned int)\"GNU coreutils\",\n            (_DWORD)off_61D390,\n            v9,\n            (unsigned int)\"David MacKenzie\",\n            \"Jim Meyering\",\n            0LL);\n          exit(0);\n        }\nLABEL_89:\n        sub_402713(1);\n      }\n      v26 = 3;\n    }\n  }\n}\n"], [4212707, "sub_4047E3", "void sub_4047E3()\n{\n  ;\n}\n"], [4212717, "sub_4047ED", "__int64 sub_4047ED()\n{\n  *__errno_location() = 95;\n  return 0xFFFFFFFFLL;\n}\n"], [4212747, "sub_40480B", "__int64 sub_40480B()\n{\n  *__errno_location() = 95;\n  return 0xFFFFFFFFLL;\n}\n"], [4212777, "sub_404829", "__int64 sub_404829()\n{\n  *__errno_location() = 95;\n  return 0xFFFFFFFFLL;\n}\n"], [4212811, "sub_40484B", "__int64 sub_40484B()\n{\n  *__errno_location() = 95;\n  return 0xFFFFFFFFLL;\n}\n"], [4212844, "sub_40486C", "_BOOL8 __fastcall sub_40486C(_BYTE *a1)\n{\n  __int64 v1; // rax\n  char v4; // [rsp+17h] [rbp-1h]\n\n  if ( *a1 != 46 )\n    return 0LL;\n  if ( a1[1] == 46 )\n    v1 = 2LL;\n  else\n    v1 = 1LL;\n  v4 = a1[v1];\n  return !v4 || v4 == 47;\n}\n"], [4212939, "sub_4048CB", "unsigned __int64 __fastcall sub_4048CB(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v5; // [rsp+18h] [rbp-8h]\n\n  do\n  {\n    v5 = a1 % a2;\n    a1 = a2;\n    a2 = v5;\n  }\n  while ( v5 );\n  return a1;\n}\n"], [4212997, "sub_404905", "unsigned __int64 __fastcall sub_404905(unsigned __int64 a1, unsigned __int64 a2)\n{\n  return a1 * (a2 / sub_4048CB(a1, a2));\n}\n"], [4213054, "sub_40493E", "unsigned __int64 __fastcall sub_40493E(__int64 a1, unsigned __int64 a2)\n{\n  return a2 - 1 + a1 - (a2 - 1 + a1) % a2;\n}\n"], [4213124, "sub_404984", "__int64 __fastcall sub_404984(__int64 a1)\n{\n  __int64 result; // rax\n\n  free(*(void **)(a1 + 32));\n  *(_QWORD *)(a1 + 32) = 0LL;\n  result = a1;\n  *(_DWORD *)(a1 + 20) = 0;\n  return result;\n}\n"], [4213177, "sub_4049B9", "__int64 __fastcall sub_4049B9(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, __int64 a14)\n{\n  __int64 result; // rax\n\n  if ( a14 <= 0 || (unsigned __int64)a14 > 0x2000000000000000LL || a14 <= 0x7FFF )\n    result = 0x8000LL;\n  else\n    result = a14;\n  return result;\n}\n"], [4213275, "sub_404A1B", "__int64 __fastcall sub_404A1B(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 72);\n}\n"], [4213297, "sub_404A31", "__int64 __fastcall sub_404A31(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 88);\n}\n"], [4213319, "sub_404A47", "__int64 __fastcall sub_404A47(__int64 a1, __int64 a2)\n{\n  unsigned int v3; // [rsp+1Ch] [rbp-4h]\n\n  v3 = sub_411A30(a1, a2);\n  if ( v3 && *__errno_location() == 38 )\n    v3 = 0;\n  return v3;\n}\n"], [4213387, "sub_404A8B", "__int64 __fastcall sub_404A8B(int a1, unsigned int a2, char *a3, unsigned __int64 a4, char a5, __int64 a6, __int64 a7, unsigned __int64 a8, _QWORD *a9, _BYTE *a10)\n{\n  size_t v10; // rax\n  __int64 v11; // r12\n  char *v12; // rbx\n  int *v13; // rax\n  _QWORD *v15; // rax\n  char *v16; // rax\n  __int64 v17; // r12\n  char *v18; // rbx\n  int *v19; // rax\n  __int64 v20; // r12\n  char *v21; // rbx\n  int *v22; // rax\n  _QWORD *v27; // [rsp+30h] [rbp-30h]\n  char *v28; // [rsp+38h] [rbp-28h]\n  ssize_t offset; // [rsp+40h] [rbp-20h]\n\n  *a10 = 0;\n  *a9 = 0LL;\n  while ( a8 )\n  {\n    v27 = 0LL;\n    v10 = a8;\n    if ( a4 <= a8 )\n      v10 = a4;\n    offset = read(a1, a3, v10);\n    if ( offset >= 0 )\n    {\n      if ( !offset )\n        return 1LL;\n      a8 -= offset;\n      *a9 += offset;\n      if ( a5 )\n      {\n        a3[offset] = 1;\n        v27 = a3;\n        do\n          v15 = v27++;\n        while ( !*v15 );\n        v28 = (char *)(v27 - 1);\n        do\n          v16 = v28++;\n        while ( !*v16 );\n        if ( &a3[offset] < v28 )\n        {\n          if ( lseek(a2, offset, 1) < 0 )\n          {\n            v17 = sub_40E491(a7);\n            v18 = gettext(\"cannot lseek %s\");\n            v19 = __errno_location();\n            error(0, *v19, v18, v17);\n            return 0LL;\n          }\n          *a10 = 1;\n        }\n        else\n        {\n          v27 = 0LL;\n        }\n      }\n      if ( !v27 )\n      {\n        if ( sub_40BE7E(a2, a3, offset) != offset )\n        {\n          v20 = sub_40E491(a7);\n          v21 = gettext(\"writing %s\");\n          v22 = __errno_location();\n          error(0, *v22, v21, v20);\n          return 0LL;\n        }\n        *a10 = 0;\n      }\n    }\n    else if ( *__errno_location() != 4 )\n    {\n      v11 = sub_40E491(a6);\n      v12 = gettext(\"reading %s\");\n      v13 = __errno_location();\n      error(0, *v13, v12, v11);\n      return 0LL;\n    }\n  }\n  return 1LL;\n}\n"], [4213974, "sub_404CD6", "int __fastcall sub_404CD6(int a1, unsigned int a2)\n{\n  return ioctl(a1, 0x40049409uLL, a2);\n}\n"], [4214013, "sub_404CFD", "__int64 __fastcall sub_404CFD(unsigned int a1, size_t a2)\n{\n  size_t v2; // rax\n  size_t v5; // [rsp+18h] [rbp-8h]\n\n  if ( !qword_61D4D0 )\n  {\n    qword_61D4D0 = (__int64)calloc(nmemb, 1uLL);\n    if ( !qword_61D4D0 )\n    {\n      qword_61D4D0 = (__int64)&unk_61D4E0;\n      nmemb = 1024LL;\n    }\n  }\n  while ( a2 )\n  {\n    v2 = nmemb;\n    if ( a2 <= nmemb )\n      v2 = a2;\n    v5 = v2;\n    if ( sub_40BE7E(a1, qword_61D4D0, v2) != v2 )\n      return 0LL;\n    a2 -= v5;\n  }\n  return 1LL;\n}\n"], [4214184, "sub_404DA8", "__int64 __fastcall sub_404DA8(unsigned int a1, unsigned int a2, char *a3, unsigned __int64 a4, __off_t a5, int a6, __int64 a7, __int64 a8, _BYTE *a9)\n{\n  __int64 v10; // r12\n  char *v11; // rbx\n  int *v12; // rax\n  __int64 v13; // r12\n  char *v14; // rbx\n  int *v15; // rax\n  __int64 v16; // r12\n  char *v17; // rbx\n  int *v18; // rax\n  unsigned __int64 v19; // rax\n  __int64 v20; // r12\n  char *v21; // rbx\n  int *v22; // rax\n  __off_t v23; // rax\n  char v24; // al\n  __int64 v25; // r12\n  char *v26; // rbx\n  int *v27; // rax\n  char v32; // [rsp+59h] [rbp-87h] BYREF\n  char v33; // [rsp+5Ah] [rbp-86h]\n  char v34; // [rsp+5Bh] [rbp-85h]\n  unsigned int i; // [rsp+5Ch] [rbp-84h]\n  __int64 v36; // [rsp+60h] [rbp-80h] BYREF\n  __off_t v37; // [rsp+68h] [rbp-78h]\n  unsigned __int64 v38; // [rsp+70h] [rbp-70h]\n  __off_t v39; // [rsp+78h] [rbp-68h]\n  __off_t offset; // [rsp+80h] [rbp-60h]\n  unsigned __int64 v41; // [rsp+88h] [rbp-58h]\n  size_t v42; // [rsp+90h] [rbp-50h]\n  unsigned __int64 v43; // [rsp+98h] [rbp-48h]\n  char v44[20]; // [rsp+A0h] [rbp-40h] BYREF\n  unsigned int v45; // [rsp+B4h] [rbp-2Ch]\n  char v46; // [rsp+B8h] [rbp-28h]\n  char v47; // [rsp+B9h] [rbp-27h]\n  __int64 v48; // [rsp+C0h] [rbp-20h]\n\n  v37 = 0LL;\n  v38 = 0LL;\n  v39 = 0LL;\n  sub_409DF4(a1, v44);\n  *a9 = 0;\n  v32 = 1;\n  while ( 1 )\n  {\n    v34 = sub_409E50(v44);\n    if ( v34 != 1 )\n      break;\n    v33 = 0;\n    for ( i = 0; ; ++i )\n    {\n      if ( v45 <= i && !v33 )\n        goto LABEL_38;\n      if ( v45 <= i )\n      {\n        offset = *(_QWORD *)(v48 + 24LL * --i + 8) + v37;\n        v41 = 0LL;\n      }\n      else\n      {\n        offset = *(_QWORD *)(v48 + 24LL * i);\n        v41 = *(_QWORD *)(v48 + 24LL * i + 8);\n      }\n      v43 = offset - v37 - v38;\n      v32 = 0;\n      if ( offset - v37 != v38 )\n      {\n        if ( lseek(a1, offset, 0) < 0 )\n        {\n          v13 = sub_40E491(a7);\n          v14 = gettext(\"cannot lseek %s\");\n          v15 = __errno_location();\n          error(0, *v15, v14, v13);\nLABEL_15:\n          sub_404984((__int64)v44);\n          return 0LL;\n        }\n        if ( v33 && a6 == 3 || v33 != 1 && a6 != 1 )\n        {\n          if ( lseek(a2, offset, 0) < 0 )\n          {\n            v16 = sub_40E491(a8);\n            v17 = gettext(\"cannot lseek %s\");\n            v18 = __errno_location();\n            error(0, *v18, v17, v16);\n            goto LABEL_15;\n          }\n          v32 = 1;\n        }\n        else\n        {\n          v42 = v43;\n          if ( v33 )\n          {\n            v19 = v43;\n            if ( a5 - v39 <= v43 )\n              v19 = a5 - v39;\n            v42 = v19;\n          }\n          if ( (unsigned __int8)sub_404CFD(a2, v42) != 1 )\n          {\n            v20 = sub_40E491(a8);\n            v21 = gettext(\"%s: write failed\");\n            v22 = __errno_location();\n            error(0, *v22, v21, v20);\n            goto LABEL_15;\n          }\n          v23 = a5;\n          if ( offset <= a5 )\n            v23 = offset;\n          v39 = v23;\n        }\n      }\n      v37 = offset;\n      v33 = 0;\n      v38 = v41;\n      if ( (unsigned __int8)sub_404A8B(a1, a2, a3, a4, a6 == 3, a7, a8, v41, &v36, &v32) != 1 )\n        goto LABEL_15;\n      v39 = v36 + offset;\n      if ( v36 + offset == a5 )\n        break;\n    }\n    v47 = 1;\nLABEL_38:\n    sub_404984((__int64)v44);\n    if ( v47 == 1 )\n    {\nLABEL_39:\n      if ( v39 >= a5 && !v32 )\n        return 1LL;\n      v24 = a6 == 1 ? sub_404CFD(a2, a5 - v39) ^ 1 : ftruncate(a2, a5) != 0;\n      if ( !v24 )\n        return 1LL;\n      v25 = sub_40E491(a8);\n      v26 = gettext(\"failed to extend %s\");\n      v27 = __errno_location();\n      error(0, *v27, v26, v25);\n      return 0LL;\n    }\n  }\n  if ( v47 )\n    goto LABEL_39;\n  if ( v46 )\n  {\n    *a9 = 1;\n  }\n  else\n  {\n    v10 = sub_40E491(a7);\n    v11 = gettext(\"%s: failed to get extents info\");\n    v12 = __errno_location();\n    error(0, *v12, v11, v10);\n  }\n  return 0LL;\n}\n"], [4215455, "sub_40529F", "__int64 __fastcall sub_40529F(_QWORD *a1, _QWORD *a2)\n{\n  while ( a2 )\n  {\n    if ( a2[1] == a1[1] && a2[2] == *a1 )\n      return 1LL;\n    a2 = (_QWORD *)*a2;\n  }\n  return 0LL;\n}\n"], [4215542, "sub_4052F6", "_BOOL8 __fastcall sub_4052F6(int a1)\n{\n  return a1 == 95 || a1 == 61;\n}\n"], [4215578, "sub_40531A", "__int64 sub_40531A()\n{\n  return 1LL;\n}\n"], [4215607, "sub_405337", "_BOOL8 __fastcall sub_405337(__int64 a1, __int64 a2, unsigned __int8 a3, _QWORD *a4, int a5, __int64 a6, char *a7, bool *a8)\n{\n  __int64 v8; // r12\n  char *v9; // rbx\n  int *v10; // rax\n  _BOOL8 result; // rax\n  bool v12; // bl\n  size_t v13; // rax\n  unsigned __int8 v18; // [rsp+5Ch] [rbp-84h] BYREF\n  unsigned __int8 v19; // [rsp+5Dh] [rbp-83h] BYREF\n  bool v20; // [rsp+5Eh] [rbp-82h]\n  bool v21; // [rsp+5Fh] [rbp-81h]\n  char *s; // [rsp+60h] [rbp-80h]\n  void *v23; // [rsp+68h] [rbp-78h]\n  void *v24; // [rsp+70h] [rbp-70h]\n  void *ptr; // [rsp+78h] [rbp-68h]\n  __int64 v26[12]; // [rsp+80h] [rbp-60h] BYREF\n\n  v26[0] = *(_QWORD *)a6;\n  v26[1] = *(_QWORD *)(a6 + 8);\n  v26[2] = *(_QWORD *)(a6 + 16);\n  v26[3] = *(_QWORD *)(a6 + 24);\n  v26[4] = *(_QWORD *)(a6 + 32);\n  v26[5] = *(_QWORD *)(a6 + 40);\n  v26[6] = *(_QWORD *)(a6 + 48);\n  v26[7] = *(_QWORD *)(a6 + 56);\n  v26[8] = *(_QWORD *)(a6 + 64);\n  v20 = 1;\n  v23 = (void *)sub_410096(a1);\n  if ( v23 )\n  {\n    if ( *(_DWORD *)(a6 + 4) == 3 )\n      HIDWORD(v26[0]) = 2;\n    v21 = 0;\n    for ( s = (char *)v23; *s; s += v13 + 1 )\n    {\n      v24 = (void *)sub_40BC5F(a1, s, 0LL);\n      ptr = (void *)sub_40BC5F(a2, s, 0LL);\n      v19 = *a7;\n      v12 = v20;\n      v20 = (v12 & (unsigned __int8)sub_407340(\n                                      (_DWORD)v24,\n                                      (_DWORD)ptr,\n                                      a3,\n                                      *a4,\n                                      a5,\n                                      (unsigned int)v26,\n                                      0,\n                                      (__int64)&v19,\n                                      (__int64)&v18,\n                                      0LL)) != 0;\n      *a8 = (*a8 | v18) != 0;\n      free(ptr);\n      free(v24);\n      if ( v18 )\n        break;\n      v21 = (v21 | v19) != 0;\n      v13 = strlen(s);\n    }\n    free(v23);\n    *a7 = v21;\n    result = v20;\n  }\n  else\n  {\n    v8 = sub_40E491(a1);\n    v9 = gettext(\"cannot access %s\");\n    v10 = __errno_location();\n    error(0, *v10, v9, v8);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4216247, "sub_4055B7", "__int64 __fastcall sub_4055B7(__int64 a1, const char *a2, unsigned int a3, _DWORD *a4, char a5, __int64 a6)\n{\n  int v6; // eax\n  unsigned __int16 v7; // ax\n  __int64 v8; // r12\n  char *v9; // rbx\n  int *v10; // rax\n  __int64 result; // rax\n  __int64 v12; // r12\n  char *v13; // rbx\n  int *v14; // rax\n  __uid_t owner; // [rsp+3Ch] [rbp-34h]\n  __gid_t group; // [rsp+40h] [rbp-30h]\n  int v18; // [rsp+44h] [rbp-2Ch]\n  unsigned int v19; // [rsp+4Ch] [rbp-24h]\n  int v20; // [rsp+50h] [rbp-20h]\n  int v21; // [rsp+58h] [rbp-18h]\n\n  owner = a4[7];\n  group = a4[8];\n  if ( a5 != 1\n    && (*(_BYTE *)(a1 + 29) || *(_BYTE *)(a1 + 24) || *(_BYTE *)(a1 + 40))\n    && ((v18 = *(_DWORD *)(a6 + 24), !*(_BYTE *)(a1 + 29)) && !*(_BYTE *)(a1 + 24) ? (v6 = *(_DWORD *)(a1 + 16)) : (v6 = a4[6]),\n        (v19 = (unsigned __int16)v18 & (unsigned __int16)v6 & 0x1C0,\n         v7 = ~(_WORD)v6,\n         HIBYTE(v7) |= 0xEu,\n         ((unsigned __int16)v18 & v7 & 0xFFF) != 0)\n     && (unsigned int)sub_40A561(a2, a3, v19)) )\n  {\n    if ( (unsigned __int8)sub_409B29(a1) != 1 )\n    {\n      v8 = sub_40E491(a2);\n      v9 = gettext(\"clearing permissions for %s\");\n      v10 = __errno_location();\n      error(0, *v10, v9, v8);\n    }\n    result = (unsigned int)-*(unsigned __int8 *)(a1 + 33);\n  }\n  else\n  {\n    if ( a3 == -1 )\n    {\n      if ( !lchown(a2, owner, group) )\n        return 1LL;\n      if ( *__errno_location() == 1 || *__errno_location() == 22 )\n      {\n        v21 = *__errno_location();\n        lchown(a2, 0xFFFFFFFF, group);\n        *__errno_location() = v21;\n      }\n    }\n    else\n    {\n      if ( !fchown(a3, owner, group) )\n        return 1LL;\n      if ( *__errno_location() == 1 || *__errno_location() == 22 )\n      {\n        v20 = *__errno_location();\n        fchown(a3, 0xFFFFFFFF, group);\n        *__errno_location() = v20;\n      }\n    }\n    if ( (unsigned __int8)sub_409AE5(a1) != 1\n      && (v12 = sub_40E491(a2),\n          v13 = gettext(\"failed to preserve ownership for %s\"),\n          v14 = __errno_location(),\n          error(0, *v14, v13, v12),\n          *(_BYTE *)(a1 + 33)) )\n    {\n      result = 0xFFFFFFFFLL;\n    }\n    else\n    {\n      result = 0LL;\n    }\n  }\n  return result;\n}\n"], [4216886, "sub_405836", "void sub_405836()\n{\n  ;\n}\n"], [4216903, "sub_405847", "int __fastcall sub_405847(int a1, const char *a2, __mode_t a3)\n{\n  int result; // eax\n\n  if ( a1 < 0 )\n    result = chmod(a2, a3);\n  else\n    result = fchmod(a1, a3);\n  return result;\n}\n"], [4216963, "sub_405883", "_BOOL8 __fastcall sub_405883(__int64 a1)\n{\n  return (*(_DWORD *)(a1 + 24) & 0xF000) == 0x8000 && *(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 48) / 512LL;\n}\n"], [4217046, "sub_4058D6", "__int64 __fastcall sub_4058D6(__int64 a1, char *a2, __int64 a3, __mode_t a4, int a5, char *a6, __int64 a7)\n{\n  int v7; // eax\n  __int64 v8; // r12\n  char *v9; // rbx\n  int *v10; // rax\n  int v12; // ecx\n  int v13; // er8\n  int v14; // er9\n  __int64 v15; // r12\n  char *v16; // rbx\n  int *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  bool v20; // al\n  bool v21; // al\n  int *v22; // rax\n  char *v23; // rbx\n  int *v24; // rax\n  int *v25; // rax\n  __int64 v26; // r13\n  __int64 v27; // r12\n  char *v28; // rbx\n  int *v29; // rax\n  __int64 v30; // r12\n  char *v31; // rbx\n  int *v32; // rax\n  __int64 v33; // rbx\n  char *v34; // rax\n  int v35; // er8\n  int v36; // er9\n  __int64 v37; // rbx\n  char *v38; // rax\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  char *v42; // rbx\n  int *v43; // rax\n  int v44; // eax\n  __int64 v45; // r13\n  __int64 v46; // r12\n  char *v47; // rbx\n  int *v48; // rax\n  int v49; // eax\n  __int64 v50; // r8\n  __int64 v51; // r9\n  __int64 v52; // r8\n  __int64 v53; // r9\n  __int64 v54; // rax\n  int v55; // eax\n  __int64 v56; // r12\n  char *v57; // rbx\n  int *v58; // rax\n  __off_t v59; // rdx\n  __off_t v60; // rdx\n  __int64 v61; // r12\n  char *v62; // rbx\n  int *v63; // rax\n  int v64; // eax\n  __int64 v65; // rsi\n  char *v66; // rdi\n  int v67; // eax\n  __int64 v68; // r12\n  char *v69; // rbx\n  int *v70; // rax\n  __int64 v71; // r12\n  char *v72; // rbx\n  int *v73; // rax\n  __int64 v74; // r12\n  char *v75; // rbx\n  int *v76; // rax\n  __int64 v77[18]; // [rsp+0h] [rbp-280h] BYREF\n  __int64 v78; // [rsp+90h] [rbp-1F0h] BYREF\n  char *v79; // [rsp+98h] [rbp-1E8h]\n  int v80; // [rsp+A0h] [rbp-1E0h]\n  __mode_t v81; // [rsp+A4h] [rbp-1DCh]\n  __int64 v82; // [rsp+A8h] [rbp-1D8h]\n  char *name; // [rsp+B0h] [rbp-1D0h]\n  __int64 v84; // [rsp+B8h] [rbp-1C8h]\n  char v85; // [rsp+C3h] [rbp-1BDh] BYREF\n  unsigned __int8 v86; // [rsp+C4h] [rbp-1BCh]\n  char v87; // [rsp+C5h] [rbp-1BBh]\n  char v88; // [rsp+C6h] [rbp-1BAh]\n  bool v89; // [rsp+C7h] [rbp-1B9h]\n  bool v90; // [rsp+C8h] [rbp-1B8h]\n  bool v91; // [rsp+C9h] [rbp-1B7h]\n  bool v92; // [rsp+CAh] [rbp-1B6h]\n  bool v93; // [rsp+CBh] [rbp-1B5h]\n  int fd; // [rsp+CCh] [rbp-1B4h]\n  int errnum; // [rsp+D0h] [rbp-1B0h]\n  unsigned int v96; // [rsp+D4h] [rbp-1ACh]\n  int fildes; // [rsp+D8h] [rbp-1A8h]\n  int v98; // [rsp+DCh] [rbp-1A4h]\n  void *ptr; // [rsp+E0h] [rbp-1A0h]\n  unsigned __int64 v100; // [rsp+E8h] [rbp-198h]\n  void *v101; // [rsp+F0h] [rbp-190h]\n  unsigned __int64 v102; // [rsp+F8h] [rbp-188h]\n  __int64 v103; // [rsp+100h] [rbp-180h]\n  unsigned __int64 v104; // [rsp+108h] [rbp-178h]\n  unsigned __int64 v105; // [rsp+110h] [rbp-170h]\n  char *v106; // [rsp+118h] [rbp-168h]\n  __off_t length[4]; // [rsp+120h] [rbp-160h] BYREF\n  struct stat stat_buf; // [rsp+140h] [rbp-140h] BYREF\n  struct stat v109; // [rsp+1D0h] [rbp-B0h] BYREF\n  __int64 v110; // [rsp+260h] [rbp-20h] BYREF\n\n  v84 = a1;\n  name = a2;\n  v82 = a3;\n  v81 = a4;\n  v80 = a5;\n  v79 = a6;\n  ptr = 0LL;\n  v101 = 0LL;\n  v96 = *(_DWORD *)(a7 + 24);\n  v86 = 1;\n  v87 = *(_BYTE *)(a3 + 32);\n  if ( *(_DWORD *)(a3 + 4) == 2 )\n    v7 = 0x20000;\n  else\n    v7 = 0;\n  fildes = sub_40B7BD(v84, v7, v84, a4, a5, (_DWORD)a6, v77[0]);\n  if ( fildes < 0 )\n  {\n    v8 = sub_40E491(v84);\n    v9 = gettext(\"cannot open %s for reading\");\n    v10 = __errno_location();\n    error(0, *v10, v9, v8);\n    return 0LL;\n  }\n  if ( !(unsigned int)sub_416110(fildes, &stat_buf) )\n  {\n    if ( *(_QWORD *)(a7 + 8) != stat_buf.st_ino || *(_QWORD *)a7 != stat_buf.st_dev )\n    {\n      v18 = sub_40E491(v84);\n      v19 = gettext(\"skipping file %s, as it was replaced while being copied\");\n      error(0, 0, v19, v18);\n      v86 = 0;\n      goto LABEL_134;\n    }\n    if ( *v79 != 1 )\n    {\n      fd = sub_40B7BD((_DWORD)name, 513, *(_QWORD *)a7, v12, v13, v14, v77[0]);\n      errnum = *__errno_location();\n      if ( *(_BYTE *)(v82 + 34) && fd >= 0 )\n      {\n        v20 = *(_BYTE *)(v82 + 32) != 1 || *(_BYTE *)(v82 + 35);\n        v91 = v20;\n        v21 = !v20 && *(_BYTE *)(v82 + 38) != 1;\n        v92 = v21;\n        v109.st_dev = 0LL;\n        if ( (int)sub_4047ED(&v109) < 0 )\n        {\n          if ( v91 || v92 && (v22 = __errno_location(), !sub_4052F6(*v22)) )\n          {\n            v23 = gettext(\"failed to get file system create context\");\n            v24 = __errno_location();\n            error(0, *v24, v23);\n          }\n          if ( *(_BYTE *)(v82 + 35) )\n          {\n            v86 = 0;\n            goto LABEL_132;\n          }\n        }\n        if ( v109.st_dev )\n        {\n          if ( (int)sub_40484B((unsigned int)fd, v109.st_dev) < 0 )\n          {\n            if ( v91 || v92 && (v25 = __errno_location(), !sub_4052F6(*v25)) )\n            {\n              v26 = sub_40E46D(1LL, v109.st_dev);\n              v27 = sub_40E46D(0LL, name);\n              v28 = gettext(\"failed to set the security context of %s to %s\");\n              v29 = __errno_location();\n              error(0, *v29, v28, v27, v26);\n            }\n            if ( *(_BYTE *)(v82 + 35) )\n            {\n              v86 = 0;\n              sub_4047E3();\n              goto LABEL_132;\n            }\n          }\n          sub_4047E3();\n        }\n      }\n      if ( fd < 0 && *(_BYTE *)(v82 + 22) )\n      {\n        if ( unlink(name) )\n        {\n          v30 = sub_40E491(name);\n          v31 = gettext(\"cannot remove %s\");\n          v32 = __errno_location();\n          error(0, *v32, v31, v30);\n          v86 = 0;\n          goto LABEL_134;\n        }\n        if ( *(_BYTE *)(v82 + 43) )\n        {\n          v33 = sub_40E491(name);\n          v34 = gettext(\"removed %s\\n\");\n          printf(v34, v33);\n        }\n        *v79 = 1;\n      }\n    }\n    if ( *v79 )\n    {\n      v98 = 65;\n      fd = sub_40B7BD((_DWORD)name, 193, v81 & ~v80, 193, v13, v14, v77[0]);\n      errnum = *__errno_location();\n      if ( fd < 0\n        && errnum == 17\n        && *(_BYTE *)(v82 + 24) != 1\n        && !(unsigned int)sub_416120(name, &v109)\n        && (v109.st_mode & 0xF000) == 40960 )\n      {\n        if ( !*(_BYTE *)(v82 + 45) )\n        {\n          v37 = sub_40E491(name);\n          v38 = gettext(\"not writing through dangling symlink %s\");\n          error(0, 0, v38, v37);\n          v86 = 0;\n          goto LABEL_134;\n        }\n        fd = sub_40B7BD((_DWORD)name, v98, v81 & ~v80, v98, v35, v36, v77[0]);\n        errnum = *__errno_location();\n      }\n      if ( fd < 0 && errnum == 21 && *name && name[strlen(name) - 1] == 47 )\n        errnum = 20;\n    }\n    else\n    {\n      v80 = 0;\n    }\n    if ( fd < 0 )\n    {\n      v39 = sub_40E491(name);\n      v40 = gettext(\"cannot create regular file %s\");\n      error(0, errnum, v40, v39);\n      v86 = 0;\n      goto LABEL_134;\n    }\n    if ( (unsigned int)sub_416110(fd, &v109) )\n    {\n      v41 = sub_40E491(name);\n      v42 = gettext(\"cannot fstat %s\");\n      v43 = __errno_location();\n      error(0, *v43, v42, v41);\n      v86 = 0;\n      goto LABEL_132;\n    }\n    if ( v87 )\n    {\n      if ( *(_DWORD *)(v82 + 48) )\n      {\n        v44 = sub_404CD6(fd, fildes);\n        v93 = v44 == 0;\n        if ( !v44 || *(_DWORD *)(v82 + 48) == 2 )\n        {\n          if ( !v93 )\n          {\n            v45 = sub_40E46D(1LL, v84);\n            v46 = sub_40E46D(0LL, name);\n            v47 = gettext(\"failed to clone %s from %s\");\n            v48 = __errno_location();\n            error(0, *v48, v47, v46, v45);\n            v86 = 0;\n            goto LABEL_132;\n          }\n          v87 = 0;\n        }\n      }\n    }\n    if ( v87 )\n    {\n      v49 = getpagesize();\n      v102 = sub_404905(v49, 8uLL);\n      v103 = v102 + 7;\n      qmemcpy(v77, &v109, sizeof(v77));\n      v100 = sub_4049B9(\n               (__int64)&v78,\n               (__int64)&v110,\n               (__int64)v77,\n               0LL,\n               v50,\n               v51,\n               v77[0],\n               v77[1],\n               v77[2],\n               v77[3],\n               v77[4],\n               v77[5],\n               v77[6],\n               v77[7]);\n      v88 = 0;\n      v89 = 0;\n      if ( (v109.st_mode & 0xF000) == 0x8000 )\n      {\n        if ( *(_DWORD *)(v82 + 12) == 3 )\n          v88 = 1;\n        v89 = sub_405883((__int64)&stat_buf);\n        if ( *(_DWORD *)(v82 + 12) == 2 && v89 )\n          v88 = 1;\n      }\n      if ( v88 != 1 )\n      {\n        v104 = 0x7FFFFFFFFFFFFFFFLL - v103;\n        qmemcpy(v77, &stat_buf, sizeof(v77));\n        v54 = sub_4049B9(\n                (__int64)&v78,\n                (__int64)&v109,\n                (__int64)v77,\n                0LL,\n                v52,\n                v53,\n                v77[0],\n                v77[1],\n                v77[2],\n                v77[3],\n                v77[4],\n                v77[5],\n                v77[6],\n                v77[7]);\n        v105 = sub_4129E3(v54, v100, v104);\n        if ( (stat_buf.st_mode & 0xF000) == 0x8000 && stat_buf.st_size < v100 )\n          v100 = stat_buf.st_size + 1;\n        v100 = v105 + v100 - 1;\n        v100 -= v100 % v105;\n        if ( !v100 || v104 < v100 )\n          v100 = v105;\n      }\n      ptr = (void *)sub_4126C5(v100 + v103);\n      v106 = (char *)sub_40493E((__int64)ptr, v102);\n      if ( v89 )\n      {\n        if ( (v109.st_mode & 0xF000) == 0x8000 )\n          v55 = *(_DWORD *)(v82 + 12);\n        else\n          v55 = 1;\n        if ( (unsigned __int8)sub_404DA8(fildes, fd, v106, v100, stat_buf.st_size, v55, v84, (__int64)name, length) )\n          goto LABEL_97;\n        if ( LOBYTE(length[0]) != 1 )\n        {\n          v86 = 0;\n          goto LABEL_132;\n        }\n      }\n      if ( (unsigned __int8)sub_404A8B(\n                              fildes,\n                              fd,\n                              v106,\n                              v100,\n                              v88,\n                              v84,\n                              (__int64)name,\n                              0xFFFFFFFFFFFFFFFFLL,\n                              length,\n                              &v85) != 1\n        || v85 && ftruncate(fd, length[0]) < 0 )\n      {\n        v56 = sub_40E491(name);\n        v57 = gettext(\"failed to extend %s\");\n        v58 = __errno_location();\n        error(0, *v58, v57, v56);\n        v86 = 0;\n        goto LABEL_132;\n      }\n    }\nLABEL_97:\n    if ( *(_BYTE *)(v82 + 30) )\n    {\n      length[0] = sub_404A1B(a7);\n      length[1] = v59;\n      length[2] = sub_404A31(a7);\n      length[3] = v60;\n      if ( (unsigned int)sub_4113BA((unsigned int)fd, name, length) )\n      {\n        v61 = sub_40E491(name);\n        v62 = gettext(\"preserving times for %s\");\n        v63 = __errno_location();\n        error(0, *v63, v62, v61);\n        if ( *(_BYTE *)(v82 + 33) )\n        {\n          v86 = 0;\n          goto LABEL_132;\n        }\n      }\n    }\n    if ( *(_BYTE *)(v82 + 28) && (*(_DWORD *)(a7 + 28) != v109.st_uid || *(_DWORD *)(a7 + 32) != v109.st_gid) )\n    {\n      v64 = sub_4055B7(v82, name, fd, (_DWORD *)a7, *v79, (__int64)&v109);\n      if ( v64 == -1 )\n      {\n        v86 = 0;\nLABEL_132:\n        if ( close(fd) < 0 )\n        {\n          v71 = sub_40E491(name);\n          v72 = gettext(\"closing %s\");\n          v73 = __errno_location();\n          error(0, *v73, v72, v71);\n          v86 = 0;\n        }\n        goto LABEL_134;\n      }\n      if ( !v64 )\n        v96 &= 0xFFFFF1FF;\n    }\n    if ( *(_BYTE *)(v82 + 36) )\n    {\n      v90 = 0;\n      if ( (v109.st_mode & 0x80) == 0 && geteuid() )\n        v90 = sub_405847(fd, name, 0x180u) == 0;\n      if ( (unsigned __int8)sub_40531A(v84, (unsigned int)fildes, name, (unsigned int)fd, v82) != 1\n        && *(_BYTE *)(v82 + 37) )\n      {\n        v86 = 0;\n      }\n      if ( v90 )\n        sub_405847(fd, name, v81 & ~v80);\n    }\n    v65 = (unsigned int)fd;\n    v66 = name;\n    sub_405836();\n    if ( *(_BYTE *)(v82 + 29) || *(_BYTE *)(v82 + 24) )\n    {\n      if ( (unsigned int)sub_40A631(v84, (unsigned int)fildes, name, (unsigned int)fd, v96) && *(_BYTE *)(v82 + 33) )\n        v86 = 0;\n    }\n    else if ( *(_BYTE *)(v82 + 40) )\n    {\n      if ( (unsigned int)sub_40A589(name, (unsigned int)fd, *(unsigned int *)(v82 + 16)) )\n        v86 = 0;\n    }\n    else if ( v80 )\n    {\n      v67 = sub_409B6D(v66, v65);\n      v80 &= ~v67;\n      if ( v80 )\n      {\n        if ( sub_405847(fd, name, v81) )\n        {\n          v68 = sub_40E491(name);\n          v69 = gettext(\"preserving permissions for %s\");\n          v70 = __errno_location();\n          error(0, *v70, v69, v68);\n          if ( *(_BYTE *)(v82 + 33) )\n            v86 = 0;\n        }\n      }\n    }\n    goto LABEL_132;\n  }\n  v15 = sub_40E491(v84);\n  v16 = gettext(\"cannot fstat %s\");\n  v17 = __errno_location();\n  error(0, *v17, v16, v15);\n  v86 = 0;\nLABEL_134:\n  if ( close(fildes) < 0 )\n  {\n    v74 = sub_40E491(v84);\n    v75 = gettext(\"closing %s\");\n    v76 = __errno_location();\n    error(0, *v76, v75, v74);\n    v86 = 0;\n  }\n  free(ptr);\n  free(v101);\n  return v86;\n}\n"], [4221107, "sub_4068B3", "bool __fastcall sub_4068B3(char *a1, struct stat *a2, char *a3, struct stat *a4, __int64 a5, _BYTE *a6, _BYTE *a7)\n{\n  bool v7; // al\n  bool result; // al\n  bool v9; // al\n  bool v13; // [rsp+3Eh] [rbp-132h]\n  struct stat *v14; // [rsp+40h] [rbp-130h]\n  struct stat *v15; // [rsp+48h] [rbp-128h]\n  struct stat v16; // [rsp+50h] [rbp-120h] BYREF\n  struct stat stat_buf; // [rsp+E0h] [rbp-90h] BYREF\n\n  v7 = a2->st_ino == a4->st_ino && a2->st_dev == a4->st_dev;\n  *a6 = 0;\n  *a7 = 0;\n  if ( v7 && *(_BYTE *)(a5 + 23) )\n  {\n    *a6 = 1;\n    return 1;\n  }\n  if ( *(_DWORD *)(a5 + 4) == 2 )\n  {\n    v13 = v7;\n    if ( (a2->st_mode & 0xF000) == 40960 && (a4->st_mode & 0xF000) == 40960 )\n      return (unsigned __int8)sub_40FC9A(a1, a3) == 0;\n    v14 = a2;\n    v15 = a4;\n  }\n  else\n  {\n    if ( !v7 )\n      return 1;\n    if ( (unsigned int)sub_416120(a3, &v16) || (unsigned int)sub_416120(a1, &stat_buf) )\n      return 1;\n    v14 = &stat_buf;\n    v15 = &v16;\n    v9 = stat_buf.st_ino == v16.st_ino && stat_buf.st_dev == v16.st_dev;\n    v13 = v9;\n    if ( (stat_buf.st_mode & 0xF000) == 40960 && (v16.st_mode & 0xF000) == 40960 && *(_BYTE *)(a5 + 21) )\n      return 1;\n  }\n  if ( *(_DWORD *)a5 )\n  {\n    if ( !v13 )\n      result = *(_BYTE *)(a5 + 24) == 1\n            || *(_DWORD *)(a5 + 4) == 2\n            || (v14->st_mode & 0xF000) != 40960\n            || (v15->st_mode & 0xF000) == 40960;\n    else\n      result = (unsigned __int8)sub_40FC9A(a1, a3) == 0;\n  }\n  else\n  {\n    if ( !*(_BYTE *)(a5 + 24) && !*(_BYTE *)(a5 + 21) )\n      goto LABEL_72;\n    if ( (v15->st_mode & 0xF000) == 40960 )\n      return 1;\n    if ( v13 && v15->st_nlink > 1 && (unsigned __int8)sub_40FC9A(a1, a3) != 1 )\n    {\n      if ( *(_BYTE *)(a5 + 24) )\n      {\n        *a7 = 1;\n        *a6 = 1;\n      }\n      result = 1;\n    }\n    else\n    {\nLABEL_72:\n      if ( (v14->st_mode & 0xF000) != 40960 && (v15->st_mode & 0xF000) != 40960 )\n      {\n        if ( v14->st_ino != v15->st_ino || v14->st_dev != v15->st_dev )\n          return 1;\n        if ( *(_BYTE *)(a5 + 23) )\n        {\n          *a6 = 1;\n          return 1;\n        }\n      }\n      if ( *(_BYTE *)(a5 + 21) && (v15->st_mode & 0xF000) == 40960 )\n        return v15->st_dev == v14->st_dev;\n      if ( *(_DWORD *)(a5 + 4) != 2 )\n        goto LABEL_69;\n      if ( (v14->st_mode & 0xF000) == 40960 )\n      {\n        if ( (unsigned int)sub_416100(a1, &stat_buf) )\n          return 1;\n      }\n      else\n      {\n        qmemcpy(&stat_buf, v14, sizeof(stat_buf));\n      }\n      if ( (v15->st_mode & 0xF000) == 40960 )\n      {\n        if ( (unsigned int)sub_416100(a3, &v16) )\n          return 1;\n      }\n      else\n      {\n        qmemcpy(&v16, v15, sizeof(v16));\n      }\n      if ( stat_buf.st_ino != v16.st_ino || stat_buf.st_dev != v16.st_dev )\n        return 1;\n      if ( *(_BYTE *)(a5 + 23) )\n      {\n        *a6 = 1;\n        result = 1;\n      }\n      else\n      {\nLABEL_69:\n        result = 0;\n      }\n    }\n  }\n  return result;\n}\n"], [4222558, "sub_406E5E", "_BOOL8 __fastcall sub_406E5E(const char *a1, __int16 a2)\n{\n  return (a2 & 0xF000) == 40960 || (unsigned __int8)sub_41253B() || !euidaccess(a1, 2);\n}\n"], [4222635, "sub_406EAB", "unsigned __int64 __fastcall sub_406EAB(const char *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  char *v5; // rax\n  __int64 v6; // r12\n  __int64 v7; // rbx\n  char *v8; // rax\n  char v10; // [rsp+10h] [rbp-40h] BYREF\n  _BYTE v11[23]; // [rsp+11h] [rbp-3Fh] BYREF\n  unsigned __int64 v12; // [rsp+28h] [rbp-28h]\n\n  v12 = __readfsqword(0x28u);\n  if ( !sub_406E5E(a1, *(_DWORD *)(a2 + 24)) )\n  {\n    sub_40BA71(*(unsigned int *)(a2 + 24), &v10);\n    v11[9] = 0;\n    v2 = *(_DWORD *)(a2 + 24) & 0xFFF;\n    v3 = sub_40E491(a1);\n    v4 = qword_61D900;\n    v5 = gettext(\"%s: try to overwrite %s, overriding mode %04lo (%s)? \");\n    fprintf(stderr, v5, v4, v3, v2, v11);\n  }\n  else\n  {\n    v6 = sub_40E491(a1);\n    v7 = qword_61D900;\n    v8 = gettext(\"%s: overwrite %s? \");\n    fprintf(stderr, v8, v7, v6);\n  }\n  return __readfsqword(0x28u) ^ v12;\n}\n"], [4222910, "sub_406FBE", "__int64 __fastcall sub_406FBE(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = sub_40C810(61LL, 0LL, sub_40D79E, sub_40D814, sub_40D904);\n  *(_QWORD *)(a1 + 56) = result;\n  return result;\n}\n"], [4222963, "sub_406FF3", "__int64 __fastcall sub_406FF3(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = sub_40C810(61LL, 0LL, sub_40D7EA, sub_40D814, sub_40D904);\n  *(_QWORD *)(a1 + 64) = result;\n  return result;\n}\n"], [4223016, "sub_407028", "_BOOL8 __fastcall sub_407028(__int64 a1, const char *a2, __int64 a3)\n{\n  bool v3; // al\n\n  if ( !*(_BYTE *)(a1 + 24) )\n    __assert_fail(\"x->move_mode\", \"../../src/src/copy.c\", 0x5B6u, \"abandon_move\");\n  v3 = 1;\n  if ( *(_DWORD *)(a1 + 8) != 2 )\n  {\n    if ( *(_DWORD *)(a1 + 8) != 3\n      && (*(_DWORD *)(a1 + 8) != 4 || !*(_BYTE *)(a1 + 44) || sub_406E5E(a2, *(_DWORD *)(a3 + 24)))\n      || (sub_406EAB(a2, a3), (unsigned __int8)sub_412968() == 1) )\n    {\n      v3 = 0;\n    }\n  }\n  return v3;\n}\n"], [4223197, "sub_4070DD", "int __fastcall sub_4070DD(__int64 a1, __int64 a2, __int64 a3)\n{\n  const char *v3; // rbx\n  const char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n\n  v3 = (const char *)sub_40E46D(1LL, a2);\n  v4 = (const char *)sub_40E46D(0LL, a1);\n  printf(\"%s -> %s\", v4, v3);\n  if ( a3 )\n  {\n    v5 = sub_40E491(a3);\n    v6 = gettext(\" (backup: %s)\");\n    printf(v6, v5);\n  }\n  return putchar_unlocked(10);\n}\n"], [4223341, "sub_40716D", "void sub_40716D()\n{\n  char *v0; // rbx\n  int *v1; // rax\n\n  if ( (unsigned int)sub_40480B(0LL) )\n  {\n    v0 = gettext(\"failed to restore the default file creation context\");\n    v1 = __errno_location();\n    error(1, *v1, v0);\n  }\n}\n"], [4223411, "sub_4071B3", "__int64 __fastcall sub_4071B3(__int64 a1, const char *a2, char a3, char a4)\n{\n  int v4; // eax\n  __int64 v5; // r12\n  char *v6; // rbx\n  int *v7; // rax\n  __int64 v9; // rbx\n  char *v10; // rax\n  __int64 v11; // r13\n  __int64 v12; // r12\n  char *v13; // rbx\n  int *v14; // rax\n  bool v17; // [rsp+2Fh] [rbp-21h]\n\n  v4 = sub_41306B(4294967196LL, a1, 4294967196LL, a2, 0LL);\n  v17 = v4 != 0;\n  if ( v4 && a3 && *__errno_location() == 17 )\n  {\n    if ( unlink(a2) )\n    {\n      v5 = sub_40E491(a2);\n      v6 = gettext(\"cannot remove %s\");\n      v7 = __errno_location();\n      error(0, *v7, v6, v5);\n      return 0LL;\n    }\n    if ( a4 )\n    {\n      v9 = sub_40E491(a2);\n      v10 = gettext(\"removed %s\\n\");\n      printf(v10, v9);\n    }\n    v17 = (unsigned int)sub_41306B(4294967196LL, a1, 4294967196LL, a2, 0LL) != 0;\n  }\n  if ( !v17 )\n    return 1LL;\n  v11 = sub_40E46D(1LL, a1);\n  v12 = sub_40E46D(0LL, a2);\n  v13 = gettext(\"cannot create hard link %s to %s\");\n  v14 = __errno_location();\n  error(0, *v14, v13, v12, v11);\n  return 0LL;\n}\n"], [4223808, "sub_407340", "__int64 __fastcall sub_407340(char *a1, char *a2, char a3, __int64 a4, _QWORD *a5, unsigned int *a6, char a7, char *a8, bool *a9, _BYTE *a10)\n{\n  bool v10; // al\n  __int64 v11; // r12\n  char *v12; // rbx\n  int *v13; // rax\n  __int64 v15; // rbx\n  char *v16; // rax\n  __int64 v17; // rbx\n  char *v18; // rax\n  bool v19; // al\n  bool v20; // al\n  __int64 v21; // r12\n  char *v22; // rbx\n  int *v23; // rax\n  __int64 v24; // r12\n  __int64 v25; // rbx\n  char *v26; // rax\n  _BOOL4 v27; // eax\n  __int64 v28; // rbx\n  char *v29; // rax\n  __int64 v30; // r12\n  char *v31; // rbx\n  int *v32; // rax\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r12\n  __int64 v37; // rbx\n  char *v38; // rax\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // rbx\n  char *v43; // rax\n  _BYTE *v44; // rax\n  char *v45; // rax\n  __int64 v46; // rbx\n  __int64 v47; // rax\n  size_t v48; // rax\n  void *v49; // rsp\n  __int64 v50; // r12\n  char *v51; // rbx\n  int *v52; // rax\n  __int64 v53; // r12\n  char *v54; // rbx\n  int *v55; // rax\n  __int64 v56; // rbx\n  char *v57; // rax\n  __int64 v58; // r12\n  __int64 v59; // rbx\n  char *v60; // rax\n  char *v61; // rax\n  __int64 v62; // r12\n  __int64 v63; // rbx\n  char *v64; // rax\n  __int64 v65; // r12\n  __int64 v66; // rbx\n  char *v67; // rax\n  char *v68; // rax\n  __int64 v69; // r12\n  __int64 v70; // rbx\n  char *v71; // rax\n  __int64 v72; // r13\n  __int64 v73; // r12\n  char *v74; // rbx\n  int *v75; // rax\n  __int64 v76; // r13\n  __int64 v77; // r12\n  char *v78; // rbx\n  int *v79; // rax\n  int v80; // eax\n  int v81; // eax\n  bool v82; // al\n  bool v83; // al\n  int *v84; // rax\n  __int64 v85; // r12\n  char *v86; // rbx\n  int *v87; // rax\n  int *v88; // rax\n  __int64 v89; // r12\n  char *v90; // rbx\n  int *v91; // rax\n  __int64 v92; // rbx\n  char *v93; // rax\n  void *v94; // rsp\n  __int64 v95; // r12\n  char *v96; // rbx\n  int *v97; // rax\n  __int64 v98; // r12\n  char *v99; // rbx\n  int *v100; // rax\n  __int64 v101; // r12\n  char *v102; // rbx\n  int *v103; // rax\n  bool v104; // al\n  __int64 v105; // rbx\n  char *v106; // rax\n  __int64 v107; // r13\n  __int64 v108; // r12\n  char *v109; // rbx\n  int *v110; // rax\n  int v111; // eax\n  __int64 v112; // r12\n  char *v113; // rbx\n  int *v114; // rax\n  __int64 v115; // r12\n  char *v116; // rbx\n  int *v117; // rax\n  __int64 v118; // r12\n  char *v119; // rbx\n  int *v120; // rax\n  __off_t v121; // rbx\n  __int64 v122; // rbx\n  char *v123; // rax\n  char *v124; // rbx\n  int *v125; // rax\n  __int64 v126; // rbx\n  char *v127; // rax\n  __ino_t v128; // rdx\n  __int64 v129; // rdx\n  __int64 v131; // r12\n  char *v132; // rbx\n  int *v133; // rax\n  int v134; // eax\n  char *v135; // rdi\n  int v136; // eax\n  __int64 v137; // r12\n  char *v138; // rbx\n  int *v139; // rax\n  __int64 v140; // r12\n  char *v141; // rbx\n  int *v142; // rax\n  __int64 v143; // r12\n  char *v144; // rbx\n  int *v145; // rax\n  __int64 v146; // r12\n  __int64 v147; // rbx\n  char *v148; // rax\n  _QWORD *v150; // [rsp+18h] [rbp-318h] BYREF\n  __int64 v151; // [rsp+20h] [rbp-310h]\n  char v152; // [rsp+28h] [rbp-308h]\n  char v153[4]; // [rsp+2Ch] [rbp-304h] BYREF\n  char *old; // [rsp+30h] [rbp-300h]\n  char *name; // [rsp+38h] [rbp-2F8h]\n  char v156; // [rsp+4Ch] [rbp-2E4h]\n  char v157; // [rsp+4Dh] [rbp-2E3h]\n  bool v158; // [rsp+4Eh] [rbp-2E2h]\n  char v159; // [rsp+4Fh] [rbp-2E1h]\n  char v160; // [rsp+50h] [rbp-2E0h]\n  bool v161; // [rsp+51h] [rbp-2DFh]\n  char v162; // [rsp+52h] [rbp-2DEh]\n  char v163; // [rsp+53h] [rbp-2DDh]\n  bool v164; // [rsp+54h] [rbp-2DCh]\n  bool v165; // [rsp+55h] [rbp-2DBh]\n  bool v166; // [rsp+56h] [rbp-2DAh]\n  bool v167; // [rsp+57h] [rbp-2D9h]\n  __mode_t v168; // [rsp+58h] [rbp-2D8h]\n  __int64 v169; // [rsp+5Ch] [rbp-2D4h]\n  _BOOL4 v170; // [rsp+64h] [rbp-2CCh]\n  int v171; // [rsp+68h] [rbp-2C8h]\n  int errnum; // [rsp+6Ch] [rbp-2C4h]\n  __int64 v173; // [rsp+70h] [rbp-2C0h]\n  char *newa; // [rsp+78h] [rbp-2B8h]\n  struct stat *v175; // [rsp+80h] [rbp-2B0h]\n  char *s1; // [rsp+88h] [rbp-2A8h]\n  char *format; // [rsp+90h] [rbp-2A0h]\n  char *s; // [rsp+98h] [rbp-298h]\n  size_t n; // [rsp+A0h] [rbp-290h]\n  void *dest; // [rsp+A8h] [rbp-288h]\n  _QWORD *v181; // [rsp+B0h] [rbp-280h]\n  char *s2; // [rsp+B8h] [rbp-278h]\n  char *from; // [rsp+C0h] [rbp-270h]\n  char *v184; // [rsp+C8h] [rbp-268h]\n  struct stat stat_buf; // [rsp+D0h] [rbp-260h] BYREF\n  struct stat v186; // [rsp+160h] [rbp-1D0h] BYREF\n  struct stat v187; // [rsp+1F0h] [rbp-140h] BYREF\n  struct stat v188; // [rsp+280h] [rbp-B0h] BYREF\n\n  name = a1;\n  old = a2;\n  v151 = a4;\n  v150 = a5;\n  v153[0] = a3;\n  v152 = a7;\n  v156 = 0;\n  v173 = 0LL;\n  newa = 0LL;\n  v157 = 0;\n  v159 = 0;\n  v160 = 0;\n  v161 = 0;\n  if ( *((_BYTE *)a6 + 24) && a10 )\n    *a10 = 0;\n  *a9 = 0;\n  if ( a6[1] == 2 )\n    v10 = (unsigned int)sub_416120(name, &stat_buf) != 0;\n  else\n    v10 = (unsigned int)sub_416100(name, &stat_buf) != 0;\n  if ( v10 )\n  {\n    v11 = sub_40E491(name);\n    v12 = gettext(\"cannot stat %s\");\n    v13 = __errno_location();\n    error(0, *v13, v12, v11);\n    return 0LL;\n  }\n  v168 = stat_buf.st_mode;\n  if ( (stat_buf.st_mode & 0xF000) == 0x4000 && *((_BYTE *)a6 + 39) != 1 )\n  {\n    v15 = sub_40E491(name);\n    v16 = gettext(\"omitting directory %s\");\n    error(0, 0, v16, v15);\n    return 0LL;\n  }\n  if ( v152 )\n  {\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000\n      && !*a6\n      && (unsigned __int8)sub_40B96A(*((_QWORD *)a6 + 8), name, &stat_buf) )\n    {\n      v17 = sub_40E491(name);\n      v18 = gettext(\"warning: source file %s specified more than once\");\n      error(0, 0, v18, v17);\n      return 1LL;\n    }\n    sub_40B8CF(*((_QWORD *)a6 + 8), name, &stat_buf);\n  }\n  if ( v153[0] != 1 )\n  {\n    v19 = ((v168 & 0xF000) == 0x8000 || *((_BYTE *)a6 + 20) && (v168 & 0xF000) != 0x4000 && (v168 & 0xF000) != 40960)\n       && *((_BYTE *)a6 + 24) != 1\n       && *((_BYTE *)a6 + 41) != 1\n       && *((_BYTE *)a6 + 23) != 1\n       && !*a6\n       && *((_BYTE *)a6 + 21) != 1;\n    v164 = v19;\n    if ( v19 )\n      v20 = (unsigned int)sub_416100(old, &v186) != 0;\n    else\n      v20 = (unsigned int)sub_416120(old, &v186) != 0;\n    if ( v20 )\n    {\n      if ( *__errno_location() != 2 )\n      {\n        v21 = sub_40E491(old);\n        v22 = gettext(\"cannot stat %s\");\n        v23 = __errno_location();\n        error(0, *v23, v22, v21);\n        return 0LL;\n      }\n      v153[0] = 1;\n    }\n    else\n    {\n      v161 = !v164;\n      if ( !sub_4068B3(name, &stat_buf, old, &v186, (__int64)a6, &v187, &v188) )\n      {\n        v24 = sub_40E46D(1LL, old);\n        v25 = sub_40E46D(0LL, name);\n        v26 = gettext(\"%s and %s are the same file\");\n        error(0, 0, v26, v25, v24);\n        return 0LL;\n      }\n      if ( (v168 & 0xF000) != 0x4000 && *((_BYTE *)a6 + 42) )\n      {\n        v27 = *((_BYTE *)a6 + 30) && (*((_BYTE *)a6 + 24) != 1 || v186.st_dev != stat_buf.st_dev);\n        v170 = v27;\n        if ( (int)sub_41079C(old, &v186, &stat_buf, v27) >= 0 )\n        {\n          if ( a10 )\n            *a10 = 1;\n          v173 = sub_409CFA(old, stat_buf.st_ino, stat_buf.st_dev);\n          if ( !v173 || (unsigned __int8)sub_4071B3(v173, old, 1, *((_BYTE *)a6 + 43)) == 1 )\n            return 1LL;\n          goto LABEL_340;\n        }\n      }\n      if ( *((_BYTE *)a6 + 24) )\n      {\n        if ( sub_407028((__int64)a6, old, (__int64)&v186) || LOBYTE(v188.st_dev) && !unlink(name) )\n        {\n          if ( a10 )\n            *a10 = 1;\n          if ( LOBYTE(v188.st_dev) && *((_BYTE *)a6 + 43) )\n          {\n            v28 = sub_40E491(name);\n            v29 = gettext(\"removed %s\\n\");\n            printf(v29, v28);\n          }\n          return 1LL;\n        }\n        if ( LOBYTE(v188.st_dev) )\n        {\n          v30 = sub_40E491(name);\n          v31 = gettext(\"cannot remove %s\");\n          v32 = __errno_location();\n          error(0, *v32, v31, v30);\n          return 0LL;\n        }\n      }\n      else if ( (v168 & 0xF000) != 0x4000 )\n      {\n        if ( a6[2] == 2 )\n          return 1LL;\n        if ( a6[2] == 3 )\n        {\n          sub_406EAB(old, (__int64)&v186);\n          if ( (unsigned __int8)sub_412968() != 1 )\n            return 1LL;\n        }\n      }\n      if ( LOBYTE(v187.st_dev) )\n        return 1LL;\n      if ( (v186.st_mode & 0xF000) != 0x4000 )\n      {\n        if ( (v168 & 0xF000) == 0x4000 && (!*((_BYTE *)a6 + 24) || !*a6) )\n        {\n          v33 = sub_40E46D(1LL, name);\n          v34 = sub_40E46D(0LL, old);\n          v35 = gettext(\"cannot overwrite non-directory %s with directory %s\");\n          error(0, 0, v35, v34, v33);\n          return 0LL;\n        }\n        if ( v152 && *a6 != 3 && (unsigned __int8)sub_40B96A(*((_QWORD *)a6 + 7), old, &v186) )\n        {\n          v36 = sub_40E46D(1LL, name);\n          v37 = sub_40E46D(0LL, old);\n          v38 = gettext(\"will not overwrite just-created %s with %s\");\n          error(0, 0, v38, v37, v36);\n          return 0LL;\n        }\n      }\n      if ( (v168 & 0xF000) != 0x4000 && (v186.st_mode & 0xF000) == 0x4000 && (!*((_BYTE *)a6 + 24) || !*a6) )\n      {\n        v39 = sub_40E491(old);\n        v40 = gettext(\"cannot overwrite directory %s with non-directory\");\n        error(0, 0, v40, v39);\n        return 0LL;\n      }\n      if ( *((_BYTE *)a6 + 24) && (stat_buf.st_mode & 0xF000) == 0x4000 && (v186.st_mode & 0xF000) != 0x4000 && !*a6 )\n      {\n        v41 = sub_40E46D(0LL, old);\n        v42 = sub_40E46D(0LL, name);\n        v43 = gettext(\"cannot move directory onto non-directory: %s -> %s\");\n        error(0, 0, v43, v42, v41);\n        return 0LL;\n      }\n      if ( *a6\n        && (v44 = (_BYTE *)sub_40B6A4(name), !sub_40486C(v44))\n        && (*((_BYTE *)a6 + 24) || (v186.st_mode & 0xF000) != 0x4000) )\n      {\n        s1 = (char *)sub_40B0A7(old, *a6);\n        if ( !strcmp(s1, name) )\n        {\n          if ( *((_BYTE *)a6 + 24) )\n            v45 = gettext(\"backing up %s would destroy source;  %s not moved\");\n          else\n            v45 = gettext(\"backing up %s would destroy source;  %s not copied\");\n          format = v45;\n          v46 = sub_40E46D(1LL, name);\n          v47 = sub_40E46D(0LL, old);\n          error(0, 0, format, v47, v46);\n          free(s1);\n          return 0LL;\n        }\n        s = s1;\n        v48 = strlen(s1);\n        n = v48 + 1;\n        v49 = alloca(16 * ((v48 + 31) / 0x10));\n        dest = (void *)(16 * (((unsigned __int64)&v150 + 7) >> 4));\n        newa = (char *)memcpy(dest, s1, v48 + 1);\n        free(s1);\n        if ( rename(old, newa) )\n        {\n          if ( *__errno_location() != 2 )\n          {\n            v50 = sub_40E491(old);\n            v51 = gettext(\"cannot backup %s\");\n            v52 = __errno_location();\n            error(0, *v52, v51, v50);\n            return 0LL;\n          }\n          newa = 0LL;\n        }\n        else\n        {\n          v157 = 1;\n        }\n        v153[0] = 1;\n      }\n      else if ( (v186.st_mode & 0xF000) != 0x4000\n             && *((_BYTE *)a6 + 24) != 1\n             && (*((_BYTE *)a6 + 21)\n              || *((_BYTE *)a6 + 31) && v186.st_nlink > 1\n              || a6[1] == 2 && (stat_buf.st_mode & 0xF000) != 0x8000) )\n      {\n        if ( unlink(old) && *__errno_location() != 2 )\n        {\n          v53 = sub_40E491(old);\n          v54 = gettext(\"cannot remove %s\");\n          v55 = __errno_location();\n          error(0, *v55, v54, v53);\n          return 0LL;\n        }\n        v153[0] = 1;\n        if ( *((_BYTE *)a6 + 43) )\n        {\n          v56 = sub_40E491(old);\n          v57 = gettext(\"removed %s\\n\");\n          printf(v57, v56);\n        }\n      }\n    }\n  }\n  if ( v152 && *((_QWORD *)a6 + 7) && *((_BYTE *)a6 + 24) != 1 && !*a6 )\n  {\n    v162 = 1;\n    if ( v161 )\n    {\n      v175 = &v186;\n    }\n    else if ( (unsigned int)sub_416120(old, &v188) )\n    {\n      v162 = 0;\n    }\n    else\n    {\n      v175 = &v188;\n    }\n    if ( v162 && (v175->st_mode & 0xF000) == 40960 && (unsigned __int8)sub_40B96A(*((_QWORD *)a6 + 7), old, v175) )\n    {\n      v58 = sub_40E46D(1LL, old);\n      v59 = sub_40E46D(0LL, name);\n      v60 = gettext(\"will not copy %s through just-created symlink %s\");\n      error(0, 0, v60, v59, v58);\n      return 0LL;\n    }\n  }\n  if ( *((_BYTE *)a6 + 43) && (v168 & 0xF000) != 0x4000 )\n  {\n    if ( v157 )\n      v61 = newa;\n    else\n      v61 = 0LL;\n    sub_4070DD((__int64)name, (__int64)old, (__int64)v61);\n  }\n  if ( *((_BYTE *)a6 + 24) && stat_buf.st_nlink == 1 )\n    goto LABEL_149;\n  if ( *((_BYTE *)a6 + 31) && *((_BYTE *)a6 + 23) != 1 && (stat_buf.st_nlink > 1 || v152 && a6[1] == 3 || a6[1] == 4) )\n    goto LABEL_148;\n  if ( !*((_BYTE *)a6 + 39) || (v168 & 0xF000) != 0x4000 )\n    goto LABEL_150;\n  if ( v152 )\nLABEL_148:\n    v173 = sub_409CFA(old, stat_buf.st_ino, stat_buf.st_dev);\n  else\nLABEL_149:\n    v173 = sub_409CA8(stat_buf.st_ino, stat_buf.st_dev);\nLABEL_150:\n  if ( v173 )\n  {\n    if ( (v168 & 0xF000) != 0x4000 )\n    {\n      if ( (unsigned __int8)sub_4071B3(v173, old, 1, *((_BYTE *)a6 + 43)) == 1 )\n        return 1LL;\n      goto LABEL_340;\n    }\n    if ( (unsigned __int8)sub_40FC9A(name, v173) )\n    {\n      v62 = sub_40E46D(1LL, qword_61D4C8);\n      v63 = sub_40E46D(0LL, qword_61D4C0);\n      v64 = gettext(\"cannot copy a directory, %s, into itself, %s\");\n      error(0, 0, v64, v63, v62);\n      *a9 = 1;\nLABEL_340:\n      if ( *((_BYTE *)a6 + 34) )\n        sub_40716D();\n      if ( !v173 )\n        sub_409C51(stat_buf.st_ino, stat_buf.st_dev);\n      if ( newa )\n      {\n        if ( rename(newa, old) )\n        {\n          v143 = sub_40E491(old);\n          v144 = gettext(\"cannot un-backup %s\");\n          v145 = __errno_location();\n          error(0, *v145, v144, v143);\n        }\n        else if ( *((_BYTE *)a6 + 43) )\n        {\n          v146 = sub_40E46D(1LL, old);\n          v147 = sub_40E46D(0LL, newa);\n          v148 = gettext(\"%s -> %s (unbackup)\\n\");\n          printf(v148, v147, v146);\n        }\n      }\n      return 0LL;\n    }\n    if ( a6[1] != 4 )\n    {\n      v65 = sub_40E46D(1LL, v173);\n      v66 = sub_40E46D(0LL, old);\n      v67 = gettext(\"will not create hard link %s to directory %s\");\n      error(0, 0, v67, v66, v65);\n      goto LABEL_340;\n    }\n  }\n  if ( *((_BYTE *)a6 + 24) )\n  {\n    if ( !rename(name, old) )\n    {\n      if ( *((_BYTE *)a6 + 43) && (v168 & 0xF000) == 0x4000 )\n      {\n        if ( v157 )\n          v68 = newa;\n        else\n          v68 = 0LL;\n        sub_4070DD((__int64)name, (__int64)old, (__int64)v68);\n      }\n      if ( a10 )\n        *a10 = 1;\n      if ( v152 )\n        sub_40B8CF(*((_QWORD *)a6 + 7), old, &stat_buf);\n      return 1LL;\n    }\n    if ( *__errno_location() == 22 )\n    {\n      v69 = sub_40E46D(1LL, qword_61D4C8);\n      v70 = sub_40E46D(0LL, qword_61D4C0);\n      v71 = gettext(\"cannot move %s to a subdirectory of itself, %s\");\n      error(0, 0, v71, v70, v69);\n      *a9 = 1;\n      return 1LL;\n    }\n    if ( *__errno_location() != 18 )\n    {\n      v72 = sub_40E46D(1LL, old);\n      v73 = sub_40E46D(0LL, name);\n      v74 = gettext(\"cannot move %s to %s\");\n      v75 = __errno_location();\n      error(0, *v75, v74, v73, v72);\n      sub_409C51(stat_buf.st_ino, stat_buf.st_dev);\n      return 0LL;\n    }\n    if ( unlink(old) && *__errno_location() != 2 )\n    {\n      v76 = sub_40E46D(1LL, old);\n      v77 = sub_40E46D(0LL, name);\n      v78 = gettext(\"inter-device move failed: %s to %s; unable to remove target\");\n      v79 = __errno_location();\n      error(0, *v79, v78, v77, v76);\n      sub_409C51(stat_buf.st_ino, stat_buf.st_dev);\n      return 0LL;\n    }\n    v153[0] = 1;\n  }\n  if ( *((_BYTE *)a6 + 40) )\n    v80 = a6[4] & 0xFFF;\n  else\n    v80 = v168 & 0xFFF;\n  v171 = v80;\n  if ( *((_BYTE *)a6 + 28) != 1 )\n  {\n    if ( (v168 & 0xF000) == 0x4000 )\n      v81 = 18;\n    else\n      v81 = 0;\n  }\n  else\n  {\n    v81 = 63;\n  }\n  HIDWORD(v169) = v171 & v81;\n  v158 = 1;\n  if ( *((_BYTE *)a6 + 34) )\n  {\n    v82 = *((_BYTE *)a6 + 32) != 1 || *((_BYTE *)a6 + 35);\n    v165 = v82;\n    v83 = !v82 && *((_BYTE *)a6 + 38) != 1;\n    v166 = v83;\n    if ( (int)sub_404829(name, &v188) < 0 )\n    {\n      if ( v165 || v166 && (v88 = __errno_location(), !sub_4052F6(*v88)) )\n      {\n        v89 = sub_40E491(name);\n        v90 = gettext(\"failed to get security context of %s\");\n        v91 = __errno_location();\n        error(0, *v91, v90, v89);\n      }\n      if ( *((_BYTE *)a6 + 35) )\n        return 0LL;\n    }\n    else\n    {\n      if ( (int)sub_40480B(v188.st_dev) < 0 )\n      {\n        if ( v165 || v166 && (v84 = __errno_location(), !sub_4052F6(*v84)) )\n        {\n          v85 = sub_40E491(v188.st_dev);\n          v86 = gettext(\"failed to set default file creation context to %s\");\n          v87 = __errno_location();\n          error(0, *v87, v86, v85);\n        }\n        if ( *((_BYTE *)a6 + 35) )\n        {\n          sub_4047E3();\n          return 0LL;\n        }\n      }\n      sub_4047E3();\n    }\n  }\n  if ( (v168 & 0xF000) == 0x4000 )\n  {\n    if ( (unsigned __int8)sub_40529F(&stat_buf, v150) )\n    {\n      v92 = sub_40E491(name);\n      v93 = gettext(\"cannot copy cyclic symbolic link %s\");\n      error(0, 0, v93, v92);\n      goto LABEL_340;\n    }\n    v94 = alloca(48LL);\n    v181 = (_QWORD *)(16 * (((unsigned __int64)&v150 + 7) >> 4));\n    *v181 = v150;\n    v181[1] = stat_buf.st_ino;\n    v181[2] = stat_buf.st_dev;\n    if ( !v153[0] && (v186.st_mode & 0xF000) == 0x4000 )\n    {\n      HIDWORD(v169) = 0;\n    }\n    else\n    {\n      if ( mkdir(old, v171 & ~HIDWORD(v169)) )\n      {\n        v95 = sub_40E491(old);\n        v96 = gettext(\"cannot create directory %s\");\n        v97 = __errno_location();\n        error(0, *v97, v96, v95);\n        goto LABEL_340;\n      }\n      if ( (unsigned int)sub_416120(old, &v186) )\n      {\n        v98 = sub_40E491(old);\n        v99 = gettext(\"cannot stat %s\");\n        v100 = __errno_location();\n        error(0, *v100, v99, v98);\n        goto LABEL_340;\n      }\n      if ( (v186.st_mode & 0x1C0) != 448 )\n      {\n        LODWORD(v169) = v186.st_mode;\n        v156 = 1;\n        if ( chmod(old, v186.st_mode | 0x1C0) )\n        {\n          v101 = sub_40E491(old);\n          v102 = gettext(\"setting permissions for %s\");\n          v103 = __errno_location();\n          error(0, *v103, v102, v101);\n          goto LABEL_340;\n        }\n      }\n      if ( *a8 != 1 )\n      {\n        sub_409CFA(old, v186.st_ino, v186.st_dev);\n        *a8 = 1;\n      }\n      if ( *((_BYTE *)a6 + 43) )\n        sub_4070DD((__int64)name, (__int64)old, 0LL);\n    }\n    if ( !*((_BYTE *)a6 + 27) || !v151 || stat_buf.st_dev == v151 )\n      v158 = sub_405337((__int64)name, (__int64)old, v153[0], &stat_buf, (int)v181, (__int64)a6, a8, a9);\n  }\n  else if ( *((_BYTE *)a6 + 41) )\n  {\n    v160 = 1;\n    if ( *name != 47 )\n    {\n      s2 = (char *)sub_40B556(old);\n      v104 = !strcmp(\".\", s2)\n          || (unsigned int)sub_416100(\".\", &v187)\n          || (unsigned int)sub_416100(s2, &v188)\n          || v187.st_ino == v188.st_ino && v187.st_dev == v188.st_dev;\n      v167 = v104;\n      free(s2);\n      if ( !v167 )\n      {\n        v105 = sub_40E491(old);\n        v106 = gettext(\"%s: can make relative symbolic links only in current directory\");\n        error(0, 0, v106, v105);\n        goto LABEL_340;\n      }\n    }\n    if ( symlink(name, old) )\n    {\n      v107 = sub_40E46D(1LL, name);\n      v108 = sub_40E46D(0LL, old);\n      v109 = gettext(\"cannot create symbolic link %s to %s\");\n      v110 = __errno_location();\n      error(0, *v110, v109, v108, v107);\n      goto LABEL_340;\n    }\n  }\n  else if ( *((_BYTE *)a6 + 23) )\n  {\n    if ( (unsigned __int8)sub_4071B3((__int64)name, old, 0, 0) != 1 )\n      goto LABEL_340;\n  }\n  else if ( (v168 & 0xF000) == 0x8000 || *((_BYTE *)a6 + 20) && (v168 & 0xF000) != 40960 )\n  {\n    v159 = 1;\n    if ( (unsigned __int8)sub_4058D6(\n                            (__int64)name,\n                            old,\n                            (__int64)a6,\n                            v168 & 0x1FF,\n                            SHIDWORD(v169),\n                            v153,\n                            (__int64)&stat_buf) != 1 )\n      goto LABEL_340;\n  }\n  else\n  {\n    switch ( v168 & 0xF000 )\n    {\n      case 0x1000u:\n        if ( (unsigned int)sub_416130(old, v168 & ~HIDWORD(v169)) )\n        {\n          v111 = v168 & ~HIDWORD(v169);\n          BYTE1(v111) &= 0xEFu;\n          if ( mkfifo(old, v111) )\n          {\n            v112 = sub_40E491(old);\n            v113 = gettext(\"cannot create fifo %s\");\n            v114 = __errno_location();\n            error(0, *v114, v113, v112);\n            goto LABEL_340;\n          }\n        }\n        break;\n      case 0x6000u:\n      case 0x2000u:\n      case 0xC000u:\n        if ( (unsigned int)sub_416130(old, v168 & ~HIDWORD(v169)) )\n        {\n          v115 = sub_40E491(old);\n          v116 = gettext(\"cannot create special file %s\");\n          v117 = __errno_location();\n          error(0, *v117, v116, v115);\n          goto LABEL_340;\n        }\n        break;\n      case 0xA000u:\n        from = (char *)sub_40A701(name, stat_buf.st_size);\n        v160 = 1;\n        if ( !from )\n        {\n          v118 = sub_40E491(name);\n          v119 = gettext(\"cannot read symbolic link %s\");\n          v120 = __errno_location();\n          error(0, *v120, v119, v118);\n          goto LABEL_340;\n        }\n        if ( symlink(from, old) )\n        {\n          errnum = *__errno_location();\n          v163 = 0;\n          if ( *((_BYTE *)a6 + 42) )\n          {\n            if ( v153[0] != 1 && (v186.st_mode & 0xF000) == 40960 )\n            {\n              v121 = v186.st_size;\n              if ( v121 == strlen(from) )\n              {\n                v184 = (char *)sub_40A701(old, v186.st_size);\n                if ( v184 && !strcmp(v184, from) )\n                  v163 = 1;\n                free(v184);\n              }\n            }\n          }\n          free(from);\n          if ( v163 != 1 )\n          {\n            v122 = sub_40E491(old);\n            v123 = gettext(\"cannot create symbolic link %s\");\n            error(0, errnum, v123, v122);\n            goto LABEL_340;\n          }\n        }\n        else\n        {\n          free(from);\n        }\n        if ( *((_BYTE *)a6 + 34) )\n          sub_40716D();\n        if ( *((_BYTE *)a6 + 28)\n          && lchown(old, stat_buf.st_uid, stat_buf.st_gid)\n          && (unsigned __int8)sub_409AE5(a6) != 1 )\n        {\n          v124 = gettext(\"failed to preserve ownership for %s\");\n          v125 = __errno_location();\n          error(0, *v125, v124, old);\n          goto LABEL_340;\n        }\n        break;\n      default:\n        v126 = sub_40E491(name);\n        v127 = gettext(\"%s has unknown file type\");\n        error(0, 0, v127, v126);\n        goto LABEL_340;\n    }\n  }\n  if ( v152 && *((_QWORD *)a6 + 7) && !(unsigned int)sub_416120(old, &v188) )\n    sub_40B8CF(*((_QWORD *)a6 + 7), old, &v188);\n  if ( *((_BYTE *)a6 + 23) && (v168 & 0xF000) != 0x4000 )\n    return v158;\n  if ( v159 )\n    return v158;\n  if ( *((_BYTE *)a6 + 30) )\n  {\n    v188.st_dev = sub_404A1B((__int64)&stat_buf);\n    v188.st_ino = v128;\n    v188.st_nlink = sub_404A31((__int64)&stat_buf);\n    *(_QWORD *)&v188.st_mode = v129;\n    if ( v160 ? (unsigned int)sub_404A47((__int64)old, (__int64)&v188) != 0 : (unsigned int)sub_411A09(old, &v188) != 0 )\n    {\n      v131 = sub_40E491(old);\n      v132 = gettext(\"preserving times for %s\");\n      v133 = __errno_location();\n      error(0, *v133, v132, v131);\n      if ( *((_BYTE *)a6 + 33) )\n        return 0LL;\n    }\n  }\n  if ( v160 )\n    return v158;\n  if ( *((_BYTE *)a6 + 28) && (v153[0] || stat_buf.st_uid != v186.st_uid || stat_buf.st_gid != v186.st_gid) )\n  {\n    v134 = sub_4055B7((__int64)a6, old, 0xFFFFFFFF, &stat_buf, v153[0], (__int64)&v186);\n    if ( v134 == -1 )\n      return 0LL;\n    if ( !v134 )\n      v168 &= 0xFFFFF1FF;\n  }\n  v135 = old;\n  sub_405836();\n  if ( *((_BYTE *)a6 + 36) )\n  {\n    v135 = name;\n    if ( (unsigned __int8)sub_40531A(name, 0xFFFFFFFFLL, old, 0xFFFFFFFFLL, a6) != 1 )\n    {\n      if ( *((_BYTE *)a6 + 37) )\n        return 0LL;\n    }\n  }\n  if ( *((_BYTE *)a6 + 29) || *((_BYTE *)a6 + 24) )\n  {\n    if ( (unsigned int)sub_40A631(name, 0xFFFFFFFFLL, old, 0xFFFFFFFFLL, v168) && *((_BYTE *)a6 + 33) )\n      return 0LL;\n  }\n  else if ( *((_BYTE *)a6 + 40) )\n  {\n    if ( (unsigned int)sub_40A589(old, 0xFFFFFFFFLL, a6[4]) )\n      return 0LL;\n  }\n  else\n  {\n    if ( HIDWORD(v169) )\n    {\n      v136 = sub_409B6D(v135, 0xFFFFFFFFLL);\n      HIDWORD(v169) &= ~v136;\n      if ( HIDWORD(v169) )\n      {\n        if ( v156 != 1 )\n        {\n          if ( v153[0] && (unsigned int)sub_416120(old, &v186) )\n          {\n            v137 = sub_40E491(old);\n            v138 = gettext(\"cannot stat %s\");\n            v139 = __errno_location();\n            error(0, *v139, v138, v137);\n            return 0LL;\n          }\n          LODWORD(v169) = v186.st_mode;\n          if ( (HIDWORD(v169) & ~v186.st_mode) != 0 )\n            v156 = 1;\n        }\n      }\n    }\n    if ( v156 )\n    {\n      if ( chmod(old, HIDWORD(v169) | v169) )\n      {\n        v140 = sub_40E491(old);\n        v141 = gettext(\"preserving permissions for %s\");\n        v142 = __errno_location();\n        error(0, *v142, v141, v140);\n        if ( *((_BYTE *)a6 + 33) )\n          return 0LL;\n      }\n    }\n  }\n  return v158;\n}\n"], [4233409, "sub_4098C1", "__int64 __fastcall sub_4098C1(__int64 a1)\n{\n  if ( !a1 )\n    __assert_fail(\"co != ((void *)0)\", \"../../src/src/copy.c\", 0xA11u, \"valid_options\");\n  if ( *(_DWORD *)a1 > 3u )\n    __assert_fail(\n      \"((unsigned int) (co->backup_type) <= numbered_backups)\",\n      \"../../src/src/copy.c\",\n      0xA12u,\n      \"valid_options\");\n  if ( *(_DWORD *)(a1 + 12) != 1 && *(_DWORD *)(a1 + 12) != 2 && *(_DWORD *)(a1 + 12) != 3 )\n    __assert_fail(\n      \"((co->sparse_mode) == SPARSE_NEVER || (co->sparse_mode) == SPARSE_AUTO || (co->sparse_mode) == SPARSE_ALWAYS)\",\n      \"../../src/src/copy.c\",\n      0xA13u,\n      \"valid_options\");\n  if ( *(_DWORD *)(a1 + 48) && *(_DWORD *)(a1 + 48) != 1 && *(_DWORD *)(a1 + 48) != 2 )\n    __assert_fail(\n      \"((co->reflink_mode) == REFLINK_NEVER || (co->reflink_mode) == REFLINK_AUTO || (co->reflink_mode) == REFLINK_ALWAYS)\",\n      \"../../src/src/copy.c\",\n      0xA14u,\n      \"valid_options\");\n  if ( *(_BYTE *)(a1 + 23) && *(_BYTE *)(a1 + 41) )\n    __assert_fail(\"!(co->hard_link && co->symbolic_link)\", \"../../src/src/copy.c\", 0xA15u, \"valid_options\");\n  if ( *(_DWORD *)(a1 + 48) == 2 && *(_DWORD *)(a1 + 12) != 2 )\n    __assert_fail(\n      \"! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)\",\n      \"../../src/src/copy.c\",\n      0xA18u,\n      \"valid_options\");\n  return 1LL;\n}\n"], [4233715, "sub_4099F3", "__int64 __fastcall sub_4099F3(char *a1, char *a2, char a3, unsigned int *a4, bool *a5, _BYTE *a6)\n{\n  char v11; // [rsp+5Fh] [rbp-1h] BYREF\n\n  if ( !(unsigned __int8)sub_4098C1((__int64)a4) )\n    __assert_fail(\"valid_options (options)\", \"../../src/src/copy.c\", 0xA2Au, \"copy\");\n  qword_61D4C0 = (__int64)a1;\n  qword_61D4C8 = (__int64)a2;\n  v11 = 0;\n  return sub_407340(a1, a2, a3, 0LL, 0LL, a4, 1, &v11, a5, a6);\n}\n"], [4233889, "sub_409AA1", "_BYTE *__fastcall sub_409AA1(_BYTE *a1)\n{\n  _BYTE *result; // rax\n\n  memset(a1, 0, 0x48uLL);\n  a1[26] = geteuid() == 0;\n  result = a1;\n  a1[25] = a1[26];\n  return result;\n}\n"], [4233957, "sub_409AE5", "_BOOL8 __fastcall sub_409AE5(__int64 a1)\n{\n  return (*__errno_location() == 1 || *__errno_location() == 22) && *(_BYTE *)(a1 + 25) != 1;\n}\n"], [4234025, "sub_409B29", "_BOOL8 __fastcall sub_409B29(__int64 a1)\n{\n  return (*__errno_location() == 1 || *__errno_location() == 22) && *(_BYTE *)(a1 + 26) != 1;\n}\n"], [4234093, "sub_409B6D", "__int64 sub_409B6D()\n{\n  if ( mask == -1 )\n  {\n    mask = umask(0);\n    umask(mask);\n  }\n  return mask;\n}\n"], [4234145, "sub_409BA1", "unsigned __int64 __fastcall sub_409BA1(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"], [4234186, "sub_409BCA", "_BOOL8 __fastcall sub_409BCA(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2 && a1[1] == a2[1];\n}\n"], [4234271, "sub_409C1F", "void __fastcall sub_409C1F(void **a1)\n{\n  free(a1[2]);\n  free(a1);\n}\n"], [4234321, "sub_409C51", "void __fastcall sub_409C51(__int64 a1, __int64 a2)\n{\n  void **v2; // [rsp+18h] [rbp-28h]\n  __int64 v3[4]; // [rsp+20h] [rbp-20h] BYREF\n\n  v3[0] = a1;\n  v3[1] = a2;\n  v3[2] = 0LL;\n  v2 = (void **)sub_40D4EF(qword_61D8E0, v3);\n  if ( v2 )\n    sub_409C1F(v2);\n}\n"], [4234408, "sub_409CA8", "__int64 __fastcall sub_409CA8(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v3; // [rsp+18h] [rbp-28h]\n  __int64 v4[4]; // [rsp+20h] [rbp-20h] BYREF\n\n  v4[0] = a1;\n  v4[1] = a2;\n  v3 = sub_40C1D7(qword_61D8E0, v4);\n  if ( v3 )\n    result = *(_QWORD *)(v3 + 16);\n  else\n    result = 0LL;\n  return result;\n}\n"], [4234490, "sub_409CFA", "__int64 __fastcall sub_409CFA(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v5; // [rsp+20h] [rbp-10h]\n  __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v5 = sub_4126C5(24LL);\n  *(_QWORD *)(v5 + 16) = sub_41281A(a1);\n  *(_QWORD *)v5 = a2;\n  *(_QWORD *)(v5 + 8) = a3;\n  v6 = sub_40D4A6(qword_61D8E0, v5);\n  if ( !v6 )\n    sub_412847();\n  if ( v6 == v5 )\n    return 0LL;\n  sub_409C1F((void **)v5);\n  return *(_QWORD *)(v6 + 16);\n}\n"], [4234647, "sub_409D97", "__int64 sub_409D97()\n{\n  __int64 result; // rax\n\n  qword_61D8E0 = sub_40C810(103LL, 0LL, sub_409BA1, sub_409BCA, sub_409C1F);\n  result = qword_61D8E0;\n  if ( !qword_61D8E0 )\n    sub_412847();\n  return result;\n}\n"], [4234708, "sub_409DD4", "__int64 sub_409DD4()\n{\n  return sub_40CA7B(qword_61D8E0);\n}\n"], [4234729, "sub_409DE9", "__int64 sub_409DE9()\n{\n  return 1LL;\n}\n"], [4234740, "sub_409DF4", "__int64 __fastcall sub_409DF4(int a1, __int64 a2)\n{\n  int v2; // edx\n  __int64 result; // rax\n\n  *(_DWORD *)a2 = a1;\n  *(_DWORD *)(a2 + 20) = 0;\n  *(_QWORD *)(a2 + 32) = 0LL;\n  *(_QWORD *)(a2 + 8) = 0LL;\n  *(_BYTE *)(a2 + 24) = 0;\n  *(_BYTE *)(a2 + 25) = 0;\n  v2 = (unsigned __int8)sub_409DE9();\n  result = a2;\n  *(_DWORD *)(a2 + 16) = v2;\n  return result;\n}\n"], [4234832, "sub_409E50", "bool __fastcall sub_409E50(__int64 a1)\n{\n  unsigned int v2; // [rsp+10h] [rbp-1050h]\n  unsigned int i; // [rsp+14h] [rbp-104Ch]\n  __int64 v4; // [rsp+18h] [rbp-1048h]\n  __int64 v5; // [rsp+20h] [rbp-1040h]\n  unsigned __int64 v6; // [rsp+38h] [rbp-1028h]\n  _QWORD s[2]; // [rsp+40h] [rbp-1020h] BYREF\n  int v8; // [rsp+50h] [rbp-1010h]\n  unsigned int v9; // [rsp+54h] [rbp-100Ch]\n  int v10; // [rsp+58h] [rbp-1008h]\n  _QWORD v11[512]; // [rsp+60h] [rbp-1000h] BYREF\n\n  v11[509] = __readfsqword(0x28u);\n  v2 = 0;\n  while ( 1 )\n  {\n    memset(s, 0, 0x1000uLL);\n    s[0] = *(_QWORD *)(a1 + 8);\n    v8 = *(_DWORD *)(a1 + 16);\n    v10 = 72;\n    s[1] = ~*(_QWORD *)(a1 + 8);\n    if ( ioctl(*(_DWORD *)a1, 0xC020660BuLL, s) < 0 )\n      break;\n    if ( !v9 )\n    {\n      *(_BYTE *)(a1 + 25) = 1;\n      return *(_QWORD *)(a1 + 8) != 0LL;\n    }\n    if ( *(unsigned int *)(a1 + 20) > ~(unsigned __int64)v9 )\n      __assert_fail(\n        \"scan->ei_count <= (18446744073709551615UL) - fiemap->fm_mapped_extents\",\n        \"../../src/src/extent-scan.c\",\n        0x80u,\n        \"extent_scan_read\");\n    *(_DWORD *)(a1 + 20) += v9;\n    *(_QWORD *)(a1 + 32) = sub_4125BA(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 20), 24LL);\n    for ( i = 0; v9 > i; ++i )\n    {\n      if ( v11[7 * i] > (unsigned __int64)(0x7FFFFFFFFFFFFFFFLL - v11[7 * i + 2]) )\n        __assert_fail(\n          \"fm_extents[i].fe_logical <= ((off_t) (! (! ((off_t) 0 < (off_t) -1)) ? (off_t) -1 : ((((off_t) 1 << (sizeof (o\"\n          \"ff_t) * 8 - 2)) - 1) * 2 + 1))) - fm_extents[i].fe_length\",\n          \"../../src/src/extent-scan.c\",\n          0x89u,\n          \"extent_scan_read\");\n      if ( v2\n        && *(_DWORD *)(v4 + 16) == (v11[7 * i + 5] & 0xFFFFFFFE)\n        && *(_QWORD *)v4 + *(_QWORD *)(v4 + 8) == v11[7 * i] )\n      {\n        *(_QWORD *)(v4 + 8) += v11[7 * i + 2];\n        *(_DWORD *)(v4 + 16) = v11[7 * i + 5];\n      }\n      else if ( (v2 || *(_QWORD *)(a1 + 8) <= v11[7 * i]) && (!v2 || *(_QWORD *)v4 + *(_QWORD *)(v4 + 8) <= v11[7 * i]) )\n      {\n        v4 = *(_QWORD *)(a1 + 32) + 24LL * v2;\n        *(_QWORD *)v4 = v11[7 * i];\n        *(_QWORD *)(v4 + 8) = v11[7 * i + 2];\n        *(_DWORD *)(v4 + 16) = v11[7 * i + 5];\n        ++v2;\n      }\n      else\n      {\n        if ( v2 )\n          v5 = *(_QWORD *)v4 + *(_QWORD *)(v4 + 8);\n        else\n          v5 = *(_QWORD *)(a1 + 8);\n        v6 = v5 - v11[7 * i];\n        if ( v11[7 * i + 2] > v6 )\n        {\n          if ( !*(_QWORD *)(a1 + 8) )\n            *(_BYTE *)(a1 + 24) = 1;\n          return 0;\n        }\n        v11[7 * i] = v5;\n        v11[7 * i-- + 2] -= v6;\n      }\n    }\n    if ( (*(_DWORD *)(v4 + 16) & 1) != 0 )\n      *(_BYTE *)(a1 + 25) = 1;\n    if ( v2 > 0x48 && *(_BYTE *)(a1 + 25) != 1 )\n      v4 = *(_QWORD *)(a1 + 32) + 24LL * --v2 - 24;\n    *(_DWORD *)(a1 + 20) = v2;\n    if ( !*(_BYTE *)(a1 + 25) )\n    {\n      *(_QWORD *)(a1 + 8) = *(_QWORD *)v4 + *(_QWORD *)(v4 + 8);\n      if ( v2 <= 0x47 )\n        continue;\n    }\n    return 1;\n  }\n  if ( !*(_QWORD *)(a1 + 8) )\n    *(_BYTE *)(a1 + 24) = 1;\n  return 0;\n}\n"], [4236581, "sub_40A525", "int __fastcall sub_40A525(const char *a1, int a2, __mode_t a3)\n{\n  int result; // eax\n\n  if ( a2 == -1 )\n    result = chmod(a1, a3);\n  else\n    result = fchmod(a2, a3);\n  return result;\n}\n"], [4236641, "sub_40A561", "int __fastcall sub_40A561(const char *a1, int a2, __mode_t a3)\n{\n  return sub_40A525(a1, a2, a3);\n}\n"], [4236681, "sub_40A589", "__int64 __fastcall sub_40A589(const char *a1, int a2, __mode_t a3)\n{\n  __int64 v3; // r12\n  char *v4; // rbx\n  int *v5; // rax\n  unsigned int v7; // [rsp+1Ch] [rbp-14h]\n\n  v7 = sub_40A561(a1, a2, a3);\n  if ( v7 )\n  {\n    v3 = sub_40E491(a1);\n    v4 = gettext(\"setting permissions for %s\");\n    v5 = __errno_location();\n    error(0, *v5, v4, v3);\n  }\n  return v7;\n}\n"], [4236801, "sub_40A601", "int __fastcall sub_40A601(__int64 a1, __int64 a2, const char *a3, int a4, __mode_t a5)\n{\n  return sub_40A561(a3, a4, a5);\n}\n"], [4236849, "sub_40A631", "__int64 __fastcall sub_40A631(__int64 a1, unsigned int a2, const char *a3, int a4, __mode_t a5)\n{\n  int v5; // eax\n  const char *v6; // rbx\n  int *v7; // rax\n  __int64 v8; // r12\n  char *v9; // rbx\n  int *v10; // rax\n  __int64 result; // rax\n\n  v5 = sub_40A601(a1, a2, a3, a4, a5);\n  if ( v5 == -2 )\n  {\n    v6 = (const char *)sub_40E491(a1);\n    v7 = __errno_location();\n    error(0, *v7, \"%s\", v6);\n    result = 0xFFFFFFFFLL;\n  }\n  else if ( v5 == -1 )\n  {\n    v8 = sub_40E491(a3);\n    v9 = gettext(\"preserving permissions for %s\");\n    v10 = __errno_location();\n    error(0, *v10, v9, v8);\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n"], [4237057, "sub_40A701", "char *__fastcall sub_40A701(const char *a1, unsigned __int64 a2)\n{\n  __int64 v2; // rax\n  char *i; // rax\n  int v5; // [rsp+14h] [rbp-3Ch]\n  size_t size; // [rsp+18h] [rbp-38h]\n  char *buf; // [rsp+38h] [rbp-18h]\n  ssize_t v8; // [rsp+48h] [rbp-8h]\n\n  if ( a2 >= 0x401 )\n    v2 = 1025LL;\n  else\n    v2 = a2 + 1;\n  size = v2;\nLABEL_5:\n  for ( i = (char *)malloc(size); ; i = (char *)malloc(0x7FFFFFFFFFFFFFFFuLL) )\n  {\n    buf = i;\n    if ( !i )\n      return 0LL;\n    v8 = readlink(a1, i, size);\n    if ( v8 < 0 && *__errno_location() != 34 )\n    {\n      v5 = *__errno_location();\n      free(buf);\n      *__errno_location() = v5;\n      return 0LL;\n    }\n    if ( v8 < size )\n    {\n      buf[v8] = 0;\n      return buf;\n    }\n    free(buf);\n    if ( size <= 0x3FFFFFFFFFFFFFFFLL )\n    {\n      size *= 2LL;\n      goto LABEL_5;\n    }\n    if ( size > 0x7FFFFFFFFFFFFFFELL )\n      break;\n    size = 0x7FFFFFFFFFFFFFFFLL;\n  }\n  *__errno_location() = 12;\n  return 0LL;\n}\n"], [4237392, "sub_40A850", "void __noreturn sub_40A850()\n{\n  sub_402713(1);\n}\n"], [4237408, "sub_40A860", "__int64 __fastcall sub_40A860(const char *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 result; // rax\n  char v7; // [rsp+27h] [rbp-19h]\n  __int64 i; // [rsp+28h] [rbp-18h]\n  __int64 v9; // [rsp+30h] [rbp-10h]\n  size_t n; // [rsp+38h] [rbp-8h]\n\n  v9 = -1LL;\n  v7 = 0;\n  n = strlen(a1);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !strncmp(*(const char **)(8 * i + a2), a1, n) )\n    {\n      if ( strlen(*(const char **)(8 * i + a2)) == n )\n        return i;\n      if ( v9 == -1 )\n      {\n        v9 = i;\n      }\n      else if ( !a3 || memcmp((const void *)(a4 * v9 + a3), (const void *)(i * a4 + a3), a4) )\n      {\n        v7 = 1;\n      }\n    }\n  }\n  if ( v7 )\n    result = -2LL;\n  else\n    result = v9;\n  return result;\n}\n"], [4237711, "sub_40A98F", "void __fastcall sub_40A98F(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  __int64 v4; // rbx\n  __int64 v5; // rax\n  char *format; // [rsp+28h] [rbp-18h]\n\n  if ( a3 == -1 )\n    v3 = gettext(\"invalid argument %s for %s\");\n  else\n    v3 = gettext(\"ambiguous argument %s for %s\");\n  format = v3;\n  v4 = sub_40E46D(1LL, a1);\n  v5 = sub_40F91C(0LL, 6LL, a2);\n  error(0, 0, format, v5, v4);\n}\n"], [4237850, "sub_40AA1A", "int __fastcall sub_40AA1A(__int64 a1, __int64 a2, size_t a3)\n{\n  char *v3; // rax\n  __int64 i; // [rsp+20h] [rbp-10h]\n  void *s1; // [rsp+28h] [rbp-8h]\n\n  s1 = 0LL;\n  v3 = gettext(\"Valid arguments are:\");\n  fprintf(stderr, v3);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a1); ++i )\n  {\n    if ( i && !memcmp(s1, (const void *)(i * a3 + a2), a3) )\n    {\n      fprintf(stderr, \", `%s'\", *(const char **)(8 * i + a1));\n    }\n    else\n    {\n      fprintf(stderr, \"\\n  - `%s'\", *(const char **)(8 * i + a1));\n      s1 = (void *)(i * a3 + a2);\n    }\n  }\n  return putc_unlocked(10, stderr);\n}\n"], [4238154, "sub_40AB4A", "__int64 __fastcall sub_40AB4A(__int64 a1, const char *a2, __int64 a3, __int64 a4, size_t a5, void (*a6)(void))\n{\n  __int64 v11; // [rsp+38h] [rbp-8h]\n\n  v11 = sub_40A860(a2, a3, a4, a5);\n  if ( v11 >= 0 )\n    return v11;\n  sub_40A98F(a1, (__int64)a2, v11);\n  sub_40AA1A(a3, a4, a5);\n  a6();\n  return -1LL;\n}\n"], [4238288, "sub_40ABD0", "__int64 __fastcall sub_40ABD0(const void *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 i; // [rsp+28h] [rbp-8h]\n\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !memcmp(a1, (const void *)(i * a4 + a3), a4) )\n      return *(_QWORD *)(8 * i + a2);\n  }\n  return 0LL;\n}\n"], [4238428, "sub_40AC5C", "char *__fastcall sub_40AC5C(const char *a1, __int64 a2, char a3)\n{\n  char *result; // rax\n  __int16 v5; // [rsp+20h] [rbp-30h]\n  unsigned __int64 v6; // [rsp+28h] [rbp-28h]\n  unsigned __int64 v7; // [rsp+28h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+30h] [rbp-20h]\n  char *v9; // [rsp+38h] [rbp-18h]\n  __int64 v10; // [rsp+40h] [rbp-10h]\n\n  v9 = (char *)sub_40B6A4(a1);\n  v6 = sub_40B70D(v9);\n  v8 = 255LL;\n  if ( v6 > 0xE )\n  {\n    v5 = *(_WORD *)v9;\n    *(_WORD *)v9 = 46;\n    *__errno_location() = 0;\n    v10 = pathconf(a1, 3);\n    if ( v10 >= 0 || !*__errno_location() )\n      v8 = v10;\n    *(_WORD *)v9 = v5;\n  }\n  result = (char *)v8;\n  if ( v8 < v6 )\n  {\n    v7 = &a1[a2] - v9;\n    if ( v8 <= v7 )\n      v7 = v8 - 1;\n    v9[v7] = a3;\n    result = &v9[v7 + 1];\n    *result = 0;\n  }\n  return result;\n}\n"], [4238708, "sub_40AD74", "__int64 __fastcall sub_40AD74(__int64 *a1, unsigned __int64 a2, __int64 a3)\n{\n  bool v6; // [rsp+2Fh] [rbp-61h]\n  __int16 v7; // [rsp+30h] [rbp-60h]\n  unsigned int v8; // [rsp+34h] [rbp-5Ch]\n  __int64 v9; // [rsp+38h] [rbp-58h]\n  unsigned __int64 v10; // [rsp+40h] [rbp-50h]\n  _BYTE *desta; // [rsp+48h] [rbp-48h]\n  char *destb; // [rsp+48h] [rbp-48h]\n  char *dest; // [rsp+48h] [rbp-48h]\n  size_t n; // [rsp+50h] [rbp-40h]\n  char *v15; // [rsp+58h] [rbp-38h]\n  char *v16; // [rsp+60h] [rbp-30h]\n  __int64 v17; // [rsp+68h] [rbp-28h]\n  DIR *dirp; // [rsp+70h] [rbp-20h]\n  struct dirent *v19; // [rsp+78h] [rbp-18h]\n  char *s2; // [rsp+80h] [rbp-10h]\n  unsigned __int64 v21; // [rsp+88h] [rbp-8h]\n\n  v8 = 2;\n  v9 = *a1;\n  v10 = 1LL;\n  v15 = (char *)sub_40B6A4(*a1);\n  v16 = &v15[-v9];\n  v17 = sub_40B70D(v15);\n  v7 = *(_WORD *)v15;\n  *(_WORD *)v15 = 46;\n  dirp = (DIR *)sub_40B4A0(v9);\n  *(_WORD *)v15 = v7;\n  strcpy(&v15[v17], \".~1~\");\n  if ( !dirp )\n    return 2LL;\n  while ( 1 )\n  {\n    v19 = readdir(dirp);\n    if ( !v19 )\n      break;\n    if ( v19->d_ino )\n    {\n      if ( strlen(v19->d_name) >= v17 + 4 && !memcmp(&v16[v9], v19->d_name, v17 + 2) )\n      {\n        s2 = &v19->d_name[v17 + 2];\n        if ( *s2 > 48 && *s2 <= 57 )\n        {\n          v6 = *s2 == 57;\n          for ( n = 1LL; (unsigned int)(s2[n] - 48) <= 9; ++n )\n            v6 = v6 && s2[n] == 57;\n          if ( s2[n] == 126 && !s2[n + 1] && (v10 < n || v10 == n && memcmp((const void *)(a3 + 2 + v9), s2, n) <= 0) )\n          {\n            v10 = v6 + n;\n            v8 = v6;\n            v21 = a3 + v10 + 3;\n            if ( a2 <= v21 )\n            {\n              v9 = sub_4125BA(v9, 2LL, v21);\n              a2 = 2 * v21;\n            }\n            *(_BYTE *)(v9 + a3) = 46;\n            desta = (_BYTE *)(v9 + a3 + 2);\n            *(_BYTE *)(v9 + a3 + 1) = 126;\n            *desta = 48;\n            destb = &desta[v6];\n            memcpy(destb, s2, n + 2);\n            for ( dest = &destb[n]; *--dest == 57; *dest = 48 )\n              ;\n            ++*dest;\n          }\n        }\n      }\n    }\n  }\n  closedir(dirp);\n  *a1 = v9;\n  return v8;\n}\n"], [4239527, "sub_40B0A7", "void *__fastcall sub_40B0A7(const char *a1, int a2)\n{\n  int v2; // eax\n  bool v4; // [rsp+17h] [rbp-29h]\n  void *dest; // [rsp+18h] [rbp-28h] BYREF\n  size_t v6; // [rsp+20h] [rbp-20h]\n  __int64 v7; // [rsp+28h] [rbp-18h]\n  size_t n; // [rsp+30h] [rbp-10h]\n  unsigned __int64 v9; // [rsp+38h] [rbp-8h]\n\n  v7 = strlen(a1);\n  v4 = 1;\n  n = strlen(src) + 1;\n  v6 = n;\n  if ( n <= 8 )\n    v6 = 9LL;\n  v9 = v7 + v6 + 1;\n  dest = (void *)sub_4126C5(v9);\n  memcpy(dest, a1, v7 + 1);\n  if ( a2 != 1 )\n  {\n    v2 = sub_40AD74((__int64 *)&dest, v9, v7);\n    switch ( v2 )\n    {\n      case 1:\n        v4 = 0;\n        break;\n      case 0:\n        return dest;\n      case 2:\n        v4 = a2 == 2;\n        break;\n    }\n  }\n  if ( v4 )\n    memcpy((char *)dest + v7, src, n);\n  sub_40AC5C((const char *)dest, v7, 126);\n  return dest;\n}\n"], [4239808, "sub_40B1C0", "__int64 __fastcall sub_40B1C0(__int64 a1, const char *a2)\n{\n  __int64 result; // rax\n\n  if ( a2 && *a2 )\n    result = (unsigned int)dword_418AA0[sub_40AB4A(\n                                          a1,\n                                          a2,\n                                          (__int64)off_418A40,\n                                          (__int64)dword_418AA0,\n                                          4uLL,\n                                          (void (*)(void))off_61D398)];\n  else\n    result = 2LL;\n  return result;\n}\n"], [4239900, "sub_40B21C", "__int64 __fastcall sub_40B21C(__int64 a1, const char *a2)\n{\n  char *v3; // rax\n\n  if ( a2 && *a2 )\n    return sub_40B1C0(a1, a2);\n  v3 = getenv(\"VERSION_CONTROL\");\n  return sub_40B1C0((__int64)\"$VERSION_CONTROL\", v3);\n}\n"], [4239980, "sub_40B26C", "__int64 __fastcall sub_40B26C(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_61D8E8 = a1;\n  return result;\n}\n"], [4240001, "sub_40B281", "__int64 sub_40B281()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char v4; // [rsp+7h] [rbp-19h]\n  char *v5; // [rsp+8h] [rbp-18h]\n\n  v4 = 0;\n  if ( sub_40BE0D(stdin) && !(unsigned int)sub_412DE6(stdin, 0LL, 1LL) && (unsigned int)sub_412D9B(stdin) )\n    v4 = 1;\n  if ( (unsigned int)sub_413582(stdin) )\n    v4 = 1;\n  if ( v4 )\n  {\n    v5 = gettext(\"error closing file\");\n    if ( qword_61D8E8 )\n    {\n      v0 = (const char *)sub_40FAAA(qword_61D8E8);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v5);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v5);\n    }\n  }\n  result = sub_40B3B5();\n  if ( v4 )\n    _exit(status);\n  return result;\n}\n"], [4240267, "sub_40B38B", "__int64 __fastcall sub_40B38B(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_61D8F0 = a1;\n  return result;\n}\n"], [4240288, "sub_40B3A0", "__int64 __fastcall sub_40B3A0(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_61D8F8 = a1;\n  return result;\n}\n"], [4240309, "sub_40B3B5", "__int64 sub_40B3B5()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_413582(stdout) && (byte_61D8F8 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_61D8F0 )\n    {\n      v0 = (const char *)sub_40FAAA(qword_61D8F0);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_413582(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4240544, "sub_40B4A0", "DIR *__fastcall sub_40B4A0(const char *a1)\n{\n  int v2; // [rsp+14h] [rbp-1Ch]\n  int v3; // [rsp+18h] [rbp-18h]\n  int fd; // [rsp+1Ch] [rbp-14h]\n  DIR *dirp; // [rsp+20h] [rbp-10h]\n  DIR *v6; // [rsp+28h] [rbp-8h]\n\n  dirp = opendir(a1);\n  if ( dirp )\n  {\n    v3 = dirfd(dirp);\n    if ( v3 >= 0 && v3 <= 2 )\n    {\n      fd = sub_410698((unsigned int)v3);\n      if ( fd >= 0 )\n      {\n        v6 = fdopendir(fd);\n        v2 = *__errno_location();\n        if ( !v6 )\n          close(fd);\n      }\n      else\n      {\n        v2 = *__errno_location();\n        v6 = 0LL;\n      }\n      closedir(dirp);\n      *__errno_location() = v2;\n      dirp = v6;\n    }\n  }\n  return dirp;\n}\n"], [4240726, "sub_40B556", "__int64 __fastcall sub_40B556(__int64 a1)\n{\n  __int64 v2; // [rsp+18h] [rbp-8h]\n\n  v2 = sub_40B60D(a1);\n  if ( !v2 )\n    sub_412847();\n  return v2;\n}\n"], [4240772, "sub_40B584", "unsigned __int64 __fastcall sub_40B584(_BYTE *a1)\n{\n  unsigned __int64 i; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = *a1 == 47;\n  for ( i = sub_40B6A4(a1) - (_QWORD)a1; v3 < i && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4240909, "sub_40B60D", "_BYTE *__fastcall sub_40B60D(_BYTE *a1)\n{\n  unsigned __int64 n; // [rsp+20h] [rbp-10h]\n  _BYTE *dest; // [rsp+28h] [rbp-8h]\n\n  n = sub_40B584(a1);\n  dest = malloc((n == 0) + n + 1);\n  if ( !dest )\n    return 0LL;\n  memcpy(dest, a1, n);\n  if ( !n )\n  {\n    n = 1LL;\n    *dest = 46;\n  }\n  dest[n] = 0;\n  return dest;\n}\n"], [4241060, "sub_40B6A4", "_BYTE *__fastcall sub_40B6A4(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4241165, "sub_40B70D", "size_t __fastcall sub_40B70D(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4241243, "sub_40B75B", "_BOOL8 __fastcall sub_40B75B(char *a1)\n{\n  char v1; // al\n  const char *v3; // [rsp+20h] [rbp-10h]\n  const char *v4; // [rsp+28h] [rbp-8h]\n\n  v3 = sub_40B6A4(a1);\n  if ( !*v3 )\n    v3 = a1;\n  v4 = &v3[sub_40B70D(v3)];\n  v1 = *v4;\n  *v4 = 0;\n  return v1 != 0;\n}\n"], [4241341, "sub_40B7BD", "__int64 __fastcall sub_40B7BD(const char *a1, char a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  unsigned int v5; // [rsp+14h] [rbp-CCh]\n\n  v5 = 0;\n  if ( (a2 & 0x40) != 0 )\n    v5 = a3;\n  v3 = open(a1, a2, v5);\n  return sub_4106BE(v3);\n}\n"], [4241615, "sub_40B8CF", "void __fastcall sub_40B8CF(__int64 a1, __int64 a2, _QWORD *a3)\n{\n  _QWORD *v4; // [rsp+20h] [rbp-10h]\n  __int64 v5; // [rsp+28h] [rbp-8h]\n\n  if ( a1 )\n  {\n    v4 = (_QWORD *)sub_4126C5(24LL);\n    *v4 = sub_41281A(a2);\n    v4[1] = a3[1];\n    v4[2] = *a3;\n    v5 = sub_40D4A6(a1, v4);\n    if ( !v5 )\n      sub_412847();\n    if ( (_QWORD *)v5 != v4 )\n      sub_40D904(v4);\n  }\n}\n"], [4241770, "sub_40B96A", "bool __fastcall sub_40B96A(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v4[4]; // [rsp+20h] [rbp-20h] BYREF\n\n  if ( !a1 )\n    return 0;\n  v4[0] = a2;\n  v4[1] = a3[1];\n  v4[2] = *a3;\n  return sub_40C1D7(a1, v4) != 0;\n}\n"], [4241862, "sub_40B9C6", "__int64 __fastcall sub_40B9C6(__int16 a1)\n{\n  switch ( a1 & 0xF000 )\n  {\n    case 32768:\n      return 45LL;\n    case 16384:\n      return 100LL;\n    case 24576:\n      return 98LL;\n    case 8192:\n      return 99LL;\n    case 40960:\n      return 108LL;\n    case 4096:\n      return 112LL;\n    case 49152:\n      return 115LL;\n  }\n  return 63LL;\n}\n"], [4242033, "sub_40BA71", "_BYTE *__fastcall sub_40BA71(__int16 a1, _BYTE *a2)\n{\n  char v2; // al\n  char v3; // al\n  char v4; // al\n  char v5; // al\n  char v6; // al\n  char v7; // al\n  char v8; // al\n  char v9; // al\n  char v10; // al\n  _BYTE *result; // rax\n\n  *a2 = sub_40B9C6(a1);\n  if ( (a1 & 0x100) != 0 )\n    v2 = 114;\n  else\n    v2 = 45;\n  a2[1] = v2;\n  if ( (a1 & 0x80) != 0 )\n    v3 = 119;\n  else\n    v3 = 45;\n  a2[2] = v3;\n  if ( (a1 & 0x800) != 0 )\n  {\n    if ( (a1 & 0x40) != 0 )\n      v4 = 115;\n    else\n      v4 = 83;\n  }\n  else if ( (a1 & 0x40) != 0 )\n  {\n    v4 = 120;\n  }\n  else\n  {\n    v4 = 45;\n  }\n  a2[3] = v4;\n  if ( (a1 & 0x20) != 0 )\n    v5 = 114;\n  else\n    v5 = 45;\n  a2[4] = v5;\n  if ( (a1 & 0x10) != 0 )\n    v6 = 119;\n  else\n    v6 = 45;\n  a2[5] = v6;\n  if ( (a1 & 0x400) != 0 )\n  {\n    if ( (a1 & 8) != 0 )\n      v7 = 115;\n    else\n      v7 = 83;\n  }\n  else if ( (a1 & 8) != 0 )\n  {\n    v7 = 120;\n  }\n  else\n  {\n    v7 = 45;\n  }\n  a2[6] = v7;\n  if ( (a1 & 4) != 0 )\n    v8 = 114;\n  else\n    v8 = 45;\n  a2[7] = v8;\n  if ( (a1 & 2) != 0 )\n    v9 = 119;\n  else\n    v9 = 45;\n  a2[8] = v9;\n  if ( (a1 & 0x200) != 0 )\n  {\n    if ( (a1 & 1) != 0 )\n      v10 = 116;\n    else\n      v10 = 84;\n  }\n  else if ( (a1 & 1) != 0 )\n  {\n    v10 = 120;\n  }\n  else\n  {\n    v10 = 45;\n  }\n  a2[9] = v10;\n  a2[10] = 32;\n  result = a2 + 11;\n  a2[11] = 0;\n  return result;\n}\n"], [4242488, "sub_40BC38", "_BYTE *__fastcall sub_40BC38(__int64 a1, _BYTE *a2)\n{\n  return sub_40BA71(*(_DWORD *)(a1 + 24), a2);\n}\n"], [4242527, "sub_40BC5F", "__int64 __fastcall sub_40BC5F(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  v4 = sub_40BCC0(a1, a2, a3);\n  if ( !v4 )\n    sub_412847();\n  return v4;\n}\n"], [4242592, "sub_40BCA0", "_BYTE *__fastcall sub_40BCA0(_BYTE *a1)\n{\n  while ( *a1 == 47 )\n    ++a1;\n  return a1;\n}\n"], [4242624, "sub_40BCC0", "void *__fastcall sub_40BCC0(_BYTE *a1, _BYTE *a2, _QWORD *a3)\n{\n  _BOOL4 v3; // eax\n  const char *v6; // [rsp+20h] [rbp-40h]\n  size_t v7; // [rsp+28h] [rbp-38h]\n  size_t n; // [rsp+30h] [rbp-30h]\n  _BOOL8 v9; // [rsp+38h] [rbp-28h]\n  char *s; // [rsp+40h] [rbp-20h]\n  size_t v11; // [rsp+48h] [rbp-18h]\n  void *dest; // [rsp+50h] [rbp-10h]\n  _BYTE *v13; // [rsp+58h] [rbp-8h]\n  char *v14; // [rsp+58h] [rbp-8h]\n\n  v6 = sub_40B6A4(a1);\n  v7 = sub_40B70D(v6);\n  n = v6 - a1 + v7;\n  v3 = v7 && v6[v7 - 1] != 47;\n  v9 = v3;\n  s = sub_40BCA0(a2);\n  v11 = strlen(s);\n  dest = malloc(v9 + n + v11 + 1);\n  if ( !dest )\n    return 0LL;\n  v13 = mempcpy(dest, a1, n);\n  *v13 = 47;\n  v14 = &v13[v9];\n  if ( a3 )\n    *a3 = &v14[-(*a2 == 47)];\n  *(_BYTE *)mempcpy(v14, s, v11) = 0;\n  return dest;\n}\n"], [4242957, "sub_40BE0D", "__int64 __fastcall sub_40BE0D(__int64 a1)\n{\n  __int64 v2; // rax\n\n  if ( *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 32) )\n    return 0LL;\n  if ( (*(_DWORD *)a1 & 0x100) != 0 )\n    v2 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72);\n  else\n    v2 = 0LL;\n  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) + v2;\n}\n"], [4243070, "sub_40BE7E", "__int64 __fastcall sub_40BE7E(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v5; // [rsp+28h] [rbp-18h]\n  __int64 v7; // [rsp+38h] [rbp-8h]\n\n  v5 = 0LL;\n  while ( a3 )\n  {\n    v7 = sub_40FC29(a1, a2, a3);\n    if ( v7 == -1 )\n      break;\n    if ( !v7 )\n    {\n      *__errno_location() = 28;\n      return v5;\n    }\n    v5 += v7;\n    a2 += v7;\n    a3 -= v7;\n  }\n  return v5;\n}\n"], [4243198, "sub_40BEFE", "__int64 __fastcall sub_40BEFE(__int64 a1, char a2)\n{\n  return __ROR8__(a1, a2);\n}\n"], [4243226, "sub_40BF1A", "__int64 __fastcall sub_40BF1A(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 16);\n}\n"], [4243244, "sub_40BF2C", "__int64 __fastcall sub_40BF2C(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 24);\n}\n"], [4243262, "sub_40BF3E", "__int64 __fastcall sub_40BF3E(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 32);\n}\n"], [4243280, "sub_40BF50", "unsigned __int64 __fastcall sub_40BF50(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  unsigned __int64 v3; // [rsp+10h] [rbp-18h]\n  _QWORD *v4; // [rsp+18h] [rbp-10h]\n  unsigned __int64 j; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v4 = i;\n      for ( j = 1LL; ; ++j )\n      {\n        v4 = (_QWORD *)v4[1];\n        if ( !v4 )\n          break;\n      }\n      if ( j > v3 )\n        v3 = j;\n    }\n  }\n  return v3;\n}\n"], [4243406, "sub_40BFCE", "_BOOL8 __fastcall sub_40BFCE(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  __int64 v3; // [rsp+10h] [rbp-18h]\n  __int64 v4; // [rsp+18h] [rbp-10h]\n  _QWORD *v5; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  v4 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v5 = i;\n      ++v3;\n      ++v4;\n      while ( 1 )\n      {\n        v5 = (_QWORD *)v5[1];\n        if ( !v5 )\n          break;\n        ++v4;\n      }\n    }\n  }\n  return *(_QWORD *)(a1 + 24) == v3 && *(_QWORD *)(a1 + 32) == v4;\n}\n"], [4243560, "sub_40C068", "int __fastcall sub_40C068(__int64 a1, FILE *a2)\n{\n  double v2; // xmm0_8\n  double v3; // xmm1_8\n  double v4; // xmm0_8\n  __int64 v6; // [rsp+10h] [rbp-20h]\n  __int64 v7; // [rsp+18h] [rbp-18h]\n  __int64 v8; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v9; // [rsp+28h] [rbp-8h]\n\n  v6 = sub_40BF3E(a1);\n  v7 = sub_40BF1A(a1);\n  v8 = sub_40BF2C(a1);\n  v9 = sub_40BF50(a1);\n  fprintf(a2, \"# entries:         %lu\\n\", v6);\n  fprintf(a2, \"# buckets:         %lu\\n\", v7);\n  if ( v8 < 0 )\n    v2 = (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1)) + (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1));\n  else\n    v2 = (double)(int)v8;\n  v3 = 100.0 * v2;\n  if ( v7 < 0 )\n    v4 = (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1)) + (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1));\n  else\n    v4 = (double)(int)v7;\n  fprintf(a2, \"# buckets used:    %lu (%.2f%%)\\n\", v8, v3 / v4);\n  return fprintf(a2, \"max bucket length: %lu\\n\", v9);\n}\n"], [4243840, "sub_40C180", "__int64 __fastcall sub_40C180(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v3 )\n    abort();\n  return 16 * v3 + *(_QWORD *)a1;\n}\n"], [4243927, "sub_40C1D7", "__int64 __fastcall sub_40C1D7(__int64 a1, __int64 a2)\n{\n  _QWORD *i; // [rsp+10h] [rbp-10h]\n  _QWORD *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = (_QWORD *)sub_40C180(a1, a2);\n  if ( !*v4 )\n    return 0LL;\n  for ( i = v4; i; i = (_QWORD *)i[1] )\n  {\n    if ( *i == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *i) )\n      return *i;\n  }\n  return 0LL;\n}\n"], [4244074, "sub_40C26A", "__int64 __fastcall sub_40C26A(unsigned __int64 *a1)\n{\n  unsigned __int64 i; // [rsp+18h] [rbp-8h]\n\n  if ( !a1[4] )\n    return 0LL;\n  for ( i = *a1; ; i += 16LL )\n  {\n    if ( a1[1] <= i )\n      abort();\n    if ( *(_QWORD *)i )\n      break;\n  }\n  return *(_QWORD *)i;\n}\n"], [4244166, "sub_40C2C6", "__int64 __fastcall sub_40C2C6(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_40C180(a1, a2);\n  v4 = v3;\n  do\n  {\n    if ( *(_QWORD *)v4 == a2 && *(_QWORD *)(v4 + 8) )\n      return **(_QWORD **)(v4 + 8);\n    v4 = *(_QWORD *)(v4 + 8);\n  }\n  while ( v4 );\n  while ( 1 )\n  {\n    v3 += 16LL;\n    if ( v3 >= *(_QWORD *)(a1 + 8) )\n      break;\n    if ( *(_QWORD *)v3 )\n      return *(_QWORD *)v3;\n  }\n  return 0LL;\n}\n"], [4244320, "sub_40C360", "unsigned __int64 __fastcall sub_40C360(__int64 a1, __int64 a2, unsigned __int64 a3)\n{\n  __int64 v4; // rax\n  unsigned __int64 v5; // [rsp+20h] [rbp-18h]\n  _QWORD *i; // [rsp+28h] [rbp-10h]\n  _QWORD *j; // [rsp+30h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( v5 >= a3 )\n          return v5;\n        v4 = v5++;\n        *(_QWORD *)(a2 + 8 * v4) = *j;\n      }\n    }\n  }\n  return v5;\n}\n"], [4244476, "sub_40C3FC", "__int64 __fastcall sub_40C3FC(__int64 a1, unsigned __int8 (__fastcall *a2)(_QWORD, __int64), __int64 a3)\n{\n  __int64 v5; // [rsp+28h] [rbp-18h]\n  _QWORD *i; // [rsp+30h] [rbp-10h]\n  _QWORD *j; // [rsp+38h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( a2(*j, a3) != 1 )\n          return v5;\n        ++v5;\n      }\n    }\n  }\n  return v5;\n}\n"], [4244624, "sub_40C490", "unsigned __int64 __fastcall sub_40C490(_BYTE *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = 0LL;\n  while ( *a1 )\n    v4 = (31 * v4 + (unsigned __int8)*a1++) % a2;\n  return v4;\n}\n"], [4244710, "sub_40C4E6", "bool __fastcall sub_40C4E6(unsigned __int64 a1)\n{\n  unsigned __int64 v2; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+10h] [rbp-8h]\n\n  v2 = 3LL;\n  v4 = 9LL;\n  while ( v4 < a1 && a1 % v2 )\n  {\n    v3 = v2 + 1;\n    v4 += 4 * v3;\n    v2 = v3 + 1;\n  }\n  return a1 % v2 != 0;\n}\n"], [4244818, "sub_40C552", "__int64 __fastcall sub_40C552(unsigned __int64 a1)\n{\n  __int64 v2; // [rsp+0h] [rbp-8h]\n  __int64 i; // [rsp+0h] [rbp-8h]\n\n  v2 = a1;\n  if ( a1 <= 9 )\n    v2 = 10LL;\n  for ( i = v2 | 1; i != -1 && !sub_40C4E6(i); i += 2LL )\n    ;\n  return i;\n}\n"], [4244889, "sub_40C599", "__int64 __fastcall sub_40C599(__int64 a1)\n{\n  __int64 result; // rax\n\n  *(_DWORD *)a1 = 0;\n  *(_DWORD *)(a1 + 4) = 1065353216;\n  *(_DWORD *)(a1 + 8) = 1061997773;\n  *(_DWORD *)(a1 + 12) = 1068826100;\n  result = a1;\n  *(_BYTE *)(a1 + 16) = 0;\n  return result;\n}\n"], [4244958, "sub_40C5DE", "unsigned __int64 __fastcall sub_40C5DE(__int64 a1, unsigned __int64 a2)\n{\n  return sub_40BEFE(a1, 3) % a2;\n}\n"], [4245013, "sub_40C615", "bool __fastcall sub_40C615(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"], [4245038, "sub_40C62E", "__int64 __fastcall sub_40C62E(__int64 a1)\n{\n  __int64 v2; // [rsp+10h] [rbp-8h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( (_UNKNOWN *)v2 == &unk_418B20 )\n    return 1LL;\n  if ( *(float *)(v2 + 8) > 0.1\n    && (float)(1.0 - 0.1) > *(float *)(v2 + 8)\n    && *(float *)(v2 + 12) > (float)(0.1 + 1.0)\n    && *(float *)v2 >= 0.0\n    && *(float *)(v2 + 4) > (float)(*(float *)v2 + 0.1)\n    && *(float *)(v2 + 4) <= 1.0\n    && *(float *)(v2 + 8) > (float)(*(float *)v2 + 0.1) )\n  {\n    return 1LL;\n  }\n  *(_QWORD *)(a1 + 40) = &unk_418B20;\n  return 0LL;\n}\n"], [4245286, "sub_40C726", "unsigned __int64 __fastcall sub_40C726(__int64 a1, __int64 a2)\n{\n  float v2; // xmm0_4\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // [rsp+8h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-18h]\n  float v6; // [rsp+1Ch] [rbp-4h]\n\n  v4 = a1;\n  if ( *(_BYTE *)(a2 + 16) != 1 )\n  {\n    if ( a1 < 0 )\n      v2 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n         + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n    else\n      v2 = (float)(int)a1;\n    v6 = v2 / *(float *)(a2 + 8);\n    if ( v6 >= 1.8446744e19 )\n      return 0LL;\n    if ( v6 >= 9.223372e18 )\n      v4 = (unsigned int)(int)(float)(v6 - 9.223372e18) ^ 0x8000000000000000LL;\n    else\n      v4 = (unsigned int)(int)v6;\n  }\n  v5 = sub_40C552(v4);\n  if ( v5 <= 0x1FFFFFFFFFFFFFFFLL )\n    result = v5;\n  else\n    result = 0LL;\n  return result;\n}\n"], [4245520, "sub_40C810", "size_t *__fastcall sub_40C810(__int64 a1, void *a2, unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2), bool (__fastcall *a4)(__int64 a1, __int64 a2), size_t a5)\n{\n  size_t *result; // rax\n  bool (__fastcall *v7)(__int64, __int64); // [rsp+10h] [rbp-30h]\n  unsigned __int64 (__fastcall *v8)(__int64, unsigned __int64); // [rsp+18h] [rbp-28h]\n  void *v9; // [rsp+20h] [rbp-20h]\n  size_t *ptr; // [rsp+38h] [rbp-8h]\n\n  v9 = a2;\n  v8 = a3;\n  v7 = a4;\n  if ( !a3 )\n    v8 = sub_40C5DE;\n  if ( !a4 )\n    v7 = sub_40C615;\n  ptr = (size_t *)malloc(0x50uLL);\n  if ( !ptr )\n    return 0LL;\n  if ( !a2 )\n    v9 = &unk_418B20;\n  ptr[5] = (size_t)v9;\n  if ( (unsigned __int8)sub_40C62E((__int64)ptr) == 1\n    && (ptr[2] = sub_40C726(a1, (__int64)v9)) != 0\n    && (*ptr = (size_t)calloc(ptr[2], 0x10uLL)) != 0 )\n  {\n    ptr[1] = 16 * ptr[2] + *ptr;\n    ptr[3] = 0LL;\n    ptr[4] = 0LL;\n    ptr[6] = (size_t)v8;\n    ptr[7] = (size_t)v7;\n    ptr[8] = a5;\n    ptr[9] = 0LL;\n    result = ptr;\n  }\n  else\n  {\n    free(ptr);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4245877, "sub_40C975", "__int64 __fastcall sub_40C975(__int64 a1)\n{\n  __int64 result; // rax\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+20h] [rbp-10h]\n  _QWORD *v4; // [rsp+28h] [rbp-8h]\n\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (_QWORD *)i[1]; j; j = v4 )\n      {\n        if ( *(_QWORD *)(a1 + 64) )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*j);\n        *j = 0LL;\n        v4 = (_QWORD *)j[1];\n        j[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = j;\n      }\n      if ( *(_QWORD *)(a1 + 64) )\n        (*(void (__fastcall **)(_QWORD))(a1 + 64))(*i);\n      *i = 0LL;\n      i[1] = 0LL;\n    }\n  }\n  *(_QWORD *)(a1 + 24) = 0LL;\n  result = a1;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  return result;\n}\n"], [4246139, "sub_40CA7B", "void __fastcall sub_40CA7B(__int64 a1)\n{\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+18h] [rbp-18h]\n  _QWORD *ptr; // [rsp+20h] [rbp-10h]\n  _QWORD *ptra; // [rsp+20h] [rbp-10h]\n  _QWORD *ptrb; // [rsp+20h] [rbp-10h]\n  _QWORD *v6; // [rsp+28h] [rbp-8h]\n  _QWORD *v7; // [rsp+28h] [rbp-8h]\n\n  if ( *(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 32) )\n  {\n    for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n    {\n      if ( *i )\n      {\n        for ( ptr = i; ptr; ptr = (_QWORD *)ptr[1] )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*ptr);\n      }\n    }\n  }\n  for ( j = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)j; j += 2 )\n  {\n    for ( ptra = (_QWORD *)j[1]; ptra; ptra = v6 )\n    {\n      v6 = (_QWORD *)ptra[1];\n      free(ptra);\n    }\n  }\n  for ( ptrb = *(_QWORD **)(a1 + 72); ptrb; ptrb = v7 )\n  {\n    v7 = (_QWORD *)ptrb[1];\n    free(ptrb);\n  }\n  free(*(void **)a1);\n  free((void *)a1);\n}\n"], [4246437, "sub_40CBA5", "void *__fastcall sub_40CBA5(__int64 a1)\n{\n  __int64 v2; // [rsp+18h] [rbp-8h]\n\n  if ( !*(_QWORD *)(a1 + 72) )\n    return malloc(0x10uLL);\n  v2 = *(_QWORD *)(a1 + 72);\n  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v2 + 8);\n  return (void *)v2;\n}\n"], [4246512, "sub_40CBF0", "__int64 __fastcall sub_40CBF0(__int64 a1, _QWORD *a2)\n{\n  __int64 result; // rax\n\n  *a2 = 0LL;\n  a2[1] = *(_QWORD *)(a1 + 72);\n  result = a1;\n  *(_QWORD *)(a1 + 72) = a2;\n  return result;\n}\n"], [4246565, "sub_40CC25", "__int64 __fastcall sub_40CC25(__int64 a1, __int64 a2, _QWORD *a3, char a4)\n{\n  __int64 result; // rax\n  __int64 v5; // rdx\n  _QWORD *i; // [rsp+20h] [rbp-30h]\n  _QWORD *v9; // [rsp+28h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-20h]\n  _QWORD *v11; // [rsp+38h] [rbp-18h]\n  __int64 v12; // [rsp+40h] [rbp-10h]\n  _QWORD *v13; // [rsp+48h] [rbp-8h]\n\n  v9 = (_QWORD *)sub_40C180(a1, a2);\n  *a3 = v9;\n  if ( !*v9 )\n    return 0LL;\n  if ( *v9 == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *v9) )\n  {\n    v12 = *v9;\n    if ( a4 )\n    {\n      if ( v9[1] )\n      {\n        v13 = (_QWORD *)v9[1];\n        v5 = v13[1];\n        *v9 = *v13;\n        v9[1] = v5;\n        sub_40CBF0(a1, v13);\n      }\n      else\n      {\n        *v9 = 0LL;\n      }\n    }\n    result = v12;\n  }\n  else\n  {\n    for ( i = v9; ; i = (_QWORD *)i[1] )\n    {\n      if ( !i[1] )\n        return 0LL;\n      if ( *(_QWORD *)i[1] == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *(_QWORD *)i[1]) )\n        break;\n    }\n    v10 = *(_QWORD *)i[1];\n    if ( a4 )\n    {\n      v11 = (_QWORD *)i[1];\n      i[1] = v11[1];\n      sub_40CBF0(a1, v11);\n    }\n    result = v10;\n  }\n  return result;\n}\n"], [4246970, "sub_40CDBA", "__int64 __fastcall sub_40CDBA(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *i; // [rsp+20h] [rbp-30h]\n  __int64 *j; // [rsp+28h] [rbp-28h]\n  __int64 v7; // [rsp+30h] [rbp-20h]\n  __int64 v8; // [rsp+30h] [rbp-20h]\n  _QWORD *v9; // [rsp+38h] [rbp-18h]\n  _QWORD *v10; // [rsp+38h] [rbp-18h]\n  __int64 *v11; // [rsp+40h] [rbp-10h]\n  _QWORD *v12; // [rsp+48h] [rbp-8h]\n\n  for ( i = *(__int64 **)a2; *(_QWORD *)(a2 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (__int64 *)i[1]; j; j = v11 )\n      {\n        v7 = *j;\n        v9 = (_QWORD *)sub_40C180(a1, *j);\n        v11 = (__int64 *)j[1];\n        if ( *v9 )\n        {\n          j[1] = v9[1];\n          v9[1] = j;\n        }\n        else\n        {\n          *v9 = v7;\n          ++*(_QWORD *)(a1 + 24);\n          sub_40CBF0(a1, j);\n        }\n      }\n      v8 = *i;\n      i[1] = 0LL;\n      if ( !a3 )\n      {\n        v10 = (_QWORD *)sub_40C180(a1, v8);\n        if ( *v10 )\n        {\n          v12 = sub_40CBA5(a1);\n          if ( !v12 )\n            return 0LL;\n          *v12 = v8;\n          v12[1] = v10[1];\n          v10[1] = v12;\n        }\n        else\n        {\n          *v10 = v8;\n          ++*(_QWORD *)(a1 + 24);\n        }\n        *i = 0LL;\n        --*(_QWORD *)(a2 + 24);\n      }\n    }\n  }\n  return 1LL;\n}\n"], [4247432, "sub_40CF88", "__int64 __fastcall sub_40CF88(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 nmemb; // [rsp+10h] [rbp-60h]\n  void *v4; // [rsp+20h] [rbp-50h] BYREF\n  __int64 v5; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v6; // [rsp+30h] [rbp-40h]\n  __int64 v7; // [rsp+38h] [rbp-38h]\n  __int64 v8; // [rsp+40h] [rbp-30h]\n  __int64 v9; // [rsp+48h] [rbp-28h]\n  __int64 v10; // [rsp+50h] [rbp-20h]\n  __int64 v11; // [rsp+58h] [rbp-18h]\n  __int64 v12; // [rsp+60h] [rbp-10h]\n  __int64 v13; // [rsp+68h] [rbp-8h]\n\n  nmemb = sub_40C726(a2, *(_QWORD *)(a1 + 40));\n  if ( !nmemb )\n    return 0LL;\n  if ( *(_QWORD *)(a1 + 16) == nmemb )\n    return 1LL;\n  v4 = calloc(nmemb, 0x10uLL);\n  if ( !v4 )\n    return 0LL;\n  v6 = nmemb;\n  v5 = (__int64)v4 + 16 * nmemb;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = *(_QWORD *)(a1 + 40);\n  v10 = *(_QWORD *)(a1 + 48);\n  v11 = *(_QWORD *)(a1 + 56);\n  v12 = *(_QWORD *)(a1 + 64);\n  v13 = *(_QWORD *)(a1 + 72);\n  if ( (unsigned __int8)sub_40CDBA((__int64)&v4, a1, 0) )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = v4;\n    *(_QWORD *)(a1 + 8) = v5;\n    *(_QWORD *)(a1 + 16) = v6;\n    *(_QWORD *)(a1 + 24) = v7;\n    *(_QWORD *)(a1 + 72) = v13;\n    result = 1LL;\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 72) = v13;\n    if ( (unsigned __int8)sub_40CDBA(a1, (__int64)&v4, 1) != 1 || (unsigned __int8)sub_40CDBA(a1, (__int64)&v4, 0) != 1 )\n      abort();\n    free(v4);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4247948, "sub_40D18C", "__int64 __fastcall sub_40D18C(_QWORD *a1, __int64 a2, _QWORD *a3)\n{\n  __int64 result; // rax\n  __int64 v4; // rax\n  float v5; // xmm0_4\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  float v8; // xmm1_4\n  __int64 v9; // rdx\n  __int64 v10; // rax\n  float v11; // xmm0_4\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  float v14; // xmm1_4\n  __int64 v15; // rdx\n  __int64 v16; // rax\n  float v17; // xmm0_4\n  __int64 v18; // rdx\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  __int64 v23; // rax\n  __int64 *v25; // [rsp+30h] [rbp-20h] BYREF\n  __int64 v26; // [rsp+38h] [rbp-18h]\n  __int64 v27; // [rsp+40h] [rbp-10h]\n  _QWORD *v28; // [rsp+48h] [rbp-8h]\n\n  if ( !a2 )\n    abort();\n  v26 = sub_40CC25((__int64)a1, a2, &v25, 0);\n  if ( v26 )\n  {\n    if ( a3 )\n      *a3 = v26;\n    result = 0LL;\n  }\n  else\n  {\n    v4 = a1[3];\n    if ( v4 < 0 )\n    {\n      v6 = a1[3] & 1LL | ((unsigned __int64)v4 >> 1);\n      v5 = (float)(int)v6 + (float)(int)v6;\n    }\n    else\n    {\n      v5 = (float)(int)v4;\n    }\n    v7 = a1[2];\n    if ( v7 < 0 )\n    {\n      v9 = a1[2] & 1LL | ((unsigned __int64)v7 >> 1);\n      v8 = (float)(int)v9 + (float)(int)v9;\n    }\n    else\n    {\n      v8 = (float)(int)v7;\n    }\n    if ( v5 > (float)(v8 * *(float *)(a1[5] + 8LL)) )\n    {\n      sub_40C62E((__int64)a1);\n      v10 = a1[3];\n      if ( v10 < 0 )\n      {\n        v12 = a1[3] & 1LL | ((unsigned __int64)v10 >> 1);\n        v11 = (float)(int)v12 + (float)(int)v12;\n      }\n      else\n      {\n        v11 = (float)(int)v10;\n      }\n      v13 = a1[2];\n      if ( v13 < 0 )\n      {\n        v15 = a1[2] & 1LL | ((unsigned __int64)v13 >> 1);\n        v14 = (float)(int)v15 + (float)(int)v15;\n      }\n      else\n      {\n        v14 = (float)(int)v13;\n      }\n      if ( v11 > (float)(v14 * *(float *)(a1[5] + 8LL)) )\n      {\n        v27 = a1[5];\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v16 = a1[2];\n          if ( v16 < 0 )\n          {\n            v18 = a1[2] & 1LL | ((unsigned __int64)v16 >> 1);\n            v17 = (float)(int)v18 + (float)(int)v18;\n          }\n          else\n          {\n            v17 = (float)(int)v16;\n          }\n          v19 = v17 * *(float *)(v27 + 12);\n        }\n        else\n        {\n          v20 = a1[2];\n          if ( v20 < 0 )\n          {\n            v22 = a1[2] & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v19 = (float)(v21 * *(float *)(v27 + 12)) * *(float *)(v27 + 8);\n        }\n        if ( v19 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        if ( v19 >= 9.223372e18 )\n          v23 = (unsigned int)(int)(float)(v19 - 9.223372e18) ^ 0x8000000000000000LL;\n        else\n          v23 = (unsigned int)(int)v19;\n        if ( (unsigned __int8)sub_40CF88((__int64)a1, v23) != 1 )\n          return 0xFFFFFFFFLL;\n        if ( sub_40CC25((__int64)a1, a2, &v25, 0) )\n          abort();\n      }\n    }\n    if ( *v25 )\n    {\n      v28 = sub_40CBA5((__int64)a1);\n      if ( v28 )\n      {\n        *v28 = a2;\n        v28[1] = v25[1];\n        v25[1] = (__int64)v28;\n        ++a1[4];\n        result = 1LL;\n      }\n      else\n      {\n        result = 0xFFFFFFFFLL;\n      }\n    }\n    else\n    {\n      *v25 = a2;\n      ++a1[4];\n      ++a1[3];\n      result = 1LL;\n    }\n  }\n  return result;\n}\n"], [4248742, "sub_40D4A6", "__int64 __fastcall sub_40D4A6(_QWORD *a1, __int64 a2)\n{\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h] BYREF\n\n  v3 = sub_40D18C(a1, a2, &v4);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( v3 )\n    return a2;\n  return v4;\n}\n"], [4248815, "sub_40D4EF", "__int64 __fastcall sub_40D4EF(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rax\n  float v4; // xmm0_4\n  __int64 v5; // rdx\n  __int64 v6; // rax\n  float v7; // xmm1_4\n  __int64 v8; // rdx\n  __int64 v9; // rax\n  float v10; // xmm0_4\n  __int64 v11; // rdx\n  __int64 v12; // rax\n  float v13; // xmm1_4\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  float v16; // xmm0_4\n  __int64 v17; // rdx\n  float v18; // xmm0_4\n  __int64 v19; // rax\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  float v23; // xmm0_4\n  _QWORD *v24; // [rsp+10h] [rbp-30h] BYREF\n  void *ptr; // [rsp+18h] [rbp-28h]\n  __int64 v26; // [rsp+20h] [rbp-20h]\n  __int64 v27; // [rsp+28h] [rbp-18h]\n  __int64 v28; // [rsp+30h] [rbp-10h]\n  void *v29; // [rsp+38h] [rbp-8h]\n\n  v26 = sub_40CC25(a1, a2, &v24, 1);\n  if ( !v26 )\n    return 0LL;\n  --*(_QWORD *)(a1 + 32);\n  if ( !*v24 )\n  {\n    v3 = --*(_QWORD *)(a1 + 24);\n    if ( v3 < 0 )\n    {\n      v5 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v3 >> 1);\n      v4 = (float)(int)v5 + (float)(int)v5;\n    }\n    else\n    {\n      v4 = (float)(int)v3;\n    }\n    v6 = *(_QWORD *)(a1 + 16);\n    if ( v6 < 0 )\n    {\n      v8 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v6 >> 1);\n      v7 = (float)(int)v8 + (float)(int)v8;\n    }\n    else\n    {\n      v7 = (float)(int)v6;\n    }\n    if ( (float)(v7 * **(float **)(a1 + 40)) > v4 )\n    {\n      sub_40C62E(a1);\n      v9 = *(_QWORD *)(a1 + 24);\n      if ( v9 < 0 )\n      {\n        v11 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v9 >> 1);\n        v10 = (float)(int)v11 + (float)(int)v11;\n      }\n      else\n      {\n        v10 = (float)(int)v9;\n      }\n      v12 = *(_QWORD *)(a1 + 16);\n      if ( v12 < 0 )\n      {\n        v14 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v12 >> 1);\n        v13 = (float)(int)v14 + (float)(int)v14;\n      }\n      else\n      {\n        v13 = (float)(int)v12;\n      }\n      if ( (float)(v13 * **(float **)(a1 + 40)) > v10 )\n      {\n        v27 = *(_QWORD *)(a1 + 40);\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v15 = *(_QWORD *)(a1 + 16);\n          if ( v15 < 0 )\n          {\n            v17 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v15 >> 1);\n            v16 = (float)(int)v17 + (float)(int)v17;\n          }\n          else\n          {\n            v16 = (float)(int)v15;\n          }\n          v18 = v16 * *(float *)(v27 + 4);\n          if ( v18 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v18;\n        }\n        else\n        {\n          v20 = *(_QWORD *)(a1 + 16);\n          if ( v20 < 0 )\n          {\n            v22 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v23 = (float)(v21 * *(float *)(v27 + 4)) * *(float *)(v27 + 8);\n          if ( v23 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v23 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v23;\n        }\n        v28 = v19;\n        if ( (unsigned __int8)sub_40CF88(a1, v19) != 1 )\n        {\n          for ( ptr = *(void **)(a1 + 72); ptr; ptr = v29 )\n          {\n            v29 = (void *)*((_QWORD *)ptr + 1);\n            free(ptr);\n          }\n          *(_QWORD *)(a1 + 72) = 0LL;\n        }\n      }\n    }\n  }\n  return v26;\n}\n"], [4249502, "sub_40D79E", "unsigned __int64 __fastcall sub_40D79E(_QWORD *a1, unsigned __int64 a2)\n{\n  return ((unsigned __int64)sub_413661(*a1, a2) ^ a1[1]) % a2;\n}\n"], [4249578, "sub_40D7EA", "unsigned __int64 __fastcall sub_40D7EA(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n"], [4249620, "sub_40D814", "_BOOL8 __fastcall sub_40D814(_QWORD *a1, _QWORD *a2)\n{\n  return a1[1] == a2[1] && a1[2] == a2[2] && (unsigned __int8)sub_40FC9A(*a1, *a2);\n}\n"], [4249740, "sub_40D88C", "_BOOL8 __fastcall sub_40D88C(__int64 a1, __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)\n      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)\n      && !strcmp(*(const char **)a1, *(const char **)a2);\n}\n"], [4249860, "sub_40D904", "void __fastcall sub_40D904(void **a1)\n{\n  free(*a1);\n  free(a1);\n}\n"], [4249909, "sub_40D935", "char *__fastcall sub_40D935(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_61D900 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4250140, "sub_40DA1C", "bool __fastcall sub_40DA1C(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_419220[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4250194, "sub_40DA52", "__int64 __fastcall sub_40DA52(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  size_t v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_40DA1C(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_4100D7(*(_QWORD *)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4250674, "sub_40DC32", "__int64 __fastcall sub_40DC32(_BYTE *a1, __int64 a2)\n{\n  size_t v7; // rax\n  unsigned __int8 v10; // [rsp+13h] [rbp-ADh]\n  char v11; // [rsp+14h] [rbp-ACh]\n  char v12; // [rsp+15h] [rbp-ABh]\n  char v13; // [rsp+16h] [rbp-AAh]\n  char v14; // [rsp+17h] [rbp-A9h]\n  char *s; // [rsp+18h] [rbp-A8h]\n  _BYTE *v16; // [rsp+20h] [rbp-A0h]\n  char v17[4]; // [rsp+30h] [rbp-90h] BYREF\n  int v18; // [rsp+34h] [rbp-8Ch] BYREF\n  char v19; // [rsp+3Ch] [rbp-84h]\n  unsigned __int64 v20; // [rsp+40h] [rbp-80h]\n  __int64 v21; // [rsp+48h] [rbp-78h]\n  __int64 v22; // [rsp+50h] [rbp-70h]\n  __int64 v23; // [rsp+58h] [rbp-68h]\n  __int64 v24; // [rsp+60h] [rbp-60h]\n  __int64 v25; // [rsp+68h] [rbp-58h]\n  unsigned __int64 v26; // [rsp+70h] [rbp-50h] BYREF\n  __int64 v27; // [rsp+78h] [rbp-48h]\n  wint_t wc[2]; // [rsp+80h] [rbp-40h]\n  __int64 v29; // [rsp+88h] [rbp-38h]\n  __int64 v30; // [rsp+90h] [rbp-30h]\n  __int64 v31; // [rsp+98h] [rbp-28h]\n  unsigned __int64 v32; // [rsp+B8h] [rbp-8h]\n\n  v32 = __readfsqword(0x28u);\n  s = (char *)sub_410339(a2, 2LL);\n  v10 = 0;\n  while ( *a1 )\n  {\n    v16 = (_BYTE *)sub_4148B7(a1, s);\n    if ( !v16 )\n      break;\n    if ( __ctype_get_mb_cur_max() <= 1 )\n    {\n      v13 = 1;\n      if ( a1 < v16 && ((*__ctype_b_loc())[(unsigned __int8)*(v16 - 1)] & 8) != 0 )\n        v13 = 0;\n      v7 = strlen(s);\n      v14 = 1;\n      if ( v16[v7] && ((*__ctype_b_loc())[(unsigned __int8)v16[v7]] & 8) != 0 )\n        v14 = 0;\n      if ( v13 && v14 )\n      {\n        v10 = 1;\n        break;\n      }\n      if ( !*v16 )\n        break;\n      a1 = v16 + 1;\n    }\n    else\n    {\n      v20 = (unsigned __int64)a1;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      v11 = 1;\n      if ( v20 < (unsigned __int64)v16 )\n      {\n        do\n        {\n          sub_40DA52((__int64)v17);\n          if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n            abort();\n          v26 = v20;\n          v27 = v21;\n          *(_QWORD *)wc = v22;\n          v29 = v23;\n          v30 = v24;\n          v31 = v25;\n          v20 += v21;\n          v19 = 0;\n        }\n        while ( v20 < (unsigned __int64)v16 );\n        if ( LOBYTE(wc[0]) && iswalnum(wc[1]) )\n          v11 = 0;\n      }\n      v20 = (unsigned __int64)v16;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      *(_QWORD *)wc = s;\n      LOBYTE(v26) = 0;\n      memset((char *)&v26 + 4, 0, sizeof(unsigned __int64));\n      for ( BYTE4(v27) = 0; ; BYTE4(v27) = 0 )\n      {\n        sub_40DA52((__int64)&v26);\n        if ( (unsigned __int8)v30 == 1 && !HIDWORD(v30) )\n          break;\n        sub_40DA52((__int64)v17);\n        if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n          abort();\n        v20 += v21;\n        v19 = 0;\n        *(_QWORD *)wc += v29;\n      }\n      v12 = 1;\n      sub_40DA52((__int64)v17);\n      if ( (unsigned __int8)v22 != 1 || HIDWORD(v22) )\n      {\n        v26 = v20;\n        v27 = v21;\n        *(_QWORD *)wc = v22;\n        v29 = v23;\n        v30 = v24;\n        v31 = v25;\n        if ( (_BYTE)v22 )\n        {\n          if ( iswalnum(wc[1]) )\n            v12 = 0;\n        }\n      }\n      if ( v11 && v12 )\n      {\n        v10 = 1;\n        break;\n      }\n      v20 = (unsigned __int64)v16;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      sub_40DA52((__int64)v17);\n      if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n        break;\n      a1 = &v16[v21];\n    }\n  }\n  free(s);\n  return v10;\n}\n"], [4251904, "sub_40E100", "const char *__fastcall sub_40E100(const char *a1)\n{\n  size_t v2; // rbx\n  size_t v3; // rax\n  char *s; // [rsp+10h] [rbp-20h]\n  char *v5; // [rsp+18h] [rbp-18h]\n\n  s = gettext(a1);\n  if ( s == a1 )\n    return a1;\n  if ( (unsigned __int8)sub_40DC32(s, (__int64)a1) )\n    return s;\n  v2 = strlen(s);\n  v3 = strlen(a1);\n  v5 = (char *)sub_4126C5(v2 + v3 + 4);\n  sprintf(v5, \"%s (%s)\", s, a1);\n  return v5;\n}\n"], [4252065, "sub_40E1A1", "char *__fastcall sub_40E1A1(const char *a1, __int64 a2)\n{\n  char *v2; // rax\n  char *result; // rax\n  size_t v4; // rbx\n  size_t v5; // rax\n  char *ptr; // [rsp+18h] [rbp-68h]\n  char *v7; // [rsp+20h] [rbp-60h]\n  __int64 v8; // [rsp+28h] [rbp-58h]\n  __int64 v9; // [rsp+30h] [rbp-50h]\n  char *s1; // [rsp+38h] [rbp-48h]\n  char *s; // [rsp+40h] [rbp-40h]\n  size_t n; // [rsp+48h] [rbp-38h]\n  char *dest; // [rsp+50h] [rbp-30h]\n  char *v14; // [rsp+58h] [rbp-28h]\n  char *v15; // [rsp+60h] [rbp-20h]\n  char *v16; // [rsp+68h] [rbp-18h]\n\n  s1 = gettext(a1);\n  s = (char *)sub_413BA1();\n  ptr = 0LL;\n  v7 = 0LL;\n  v9 = 0LL;\n  if ( (unsigned int)sub_413166(s, \"UTF-8\") )\n  {\n    ptr = (char *)sub_41291B(a2, \"UTF-8\", s);\n    v8 = (__int64)ptr;\n    n = strlen(s);\n    dest = (char *)sub_4126C5(n + 11);\n    memcpy(dest, s, n);\n    memcpy(&dest[n], \"//TRANSLIT\", 0xBuLL);\n    v14 = (char *)sub_41291B(a2, \"UTF-8\", dest);\n    free(dest);\n    if ( v14 )\n    {\n      if ( strchr(v14, 63) )\n      {\n        free(v14);\n      }\n      else\n      {\n        v7 = v14;\n        v9 = (__int64)v14;\n      }\n    }\n  }\n  else\n  {\n    v8 = a2;\n    v9 = a2;\n  }\n  if ( v8 )\n  {\n    v2 = (char *)v8;\n  }\n  else if ( v9 )\n  {\n    v2 = (char *)v9;\n  }\n  else\n  {\n    v2 = (char *)a1;\n  }\n  v15 = v2;\n  if ( !strcmp(s1, a1) )\n  {\n    if ( ptr && ptr != v15 )\n      free(ptr);\n    if ( v7 && v7 != v15 )\n      free(v7);\n    result = v15;\n  }\n  else if ( (unsigned __int8)sub_40DC32(s1, (__int64)a1)\n         || v8 && (unsigned __int8)sub_40DC32(s1, v8)\n         || v9 && (unsigned __int8)sub_40DC32(s1, v9) )\n  {\n    if ( ptr )\n      free(ptr);\n    if ( v7 )\n      free(v7);\n    result = s1;\n  }\n  else\n  {\n    v4 = strlen(s1);\n    v5 = strlen(v15);\n    v16 = (char *)sub_4126C5(v4 + v5 + 4);\n    sprintf(v16, \"%s (%s)\", s1, v15);\n    if ( ptr )\n      free(ptr);\n    if ( v7 )\n      free(v7);\n    result = v16;\n  }\n  return result;\n}\n"], [4252781, "sub_40E46D", "__int64 __fastcall sub_40E46D(unsigned int a1, __int64 a2)\n{\n  return sub_40F91C(a1, 6LL, a2);\n}\n"], [4252817, "sub_40E491", "__int64 __fastcall sub_40E491(__int64 a1)\n{\n  return sub_40E46D(0, a1);\n}\n"], [4252848, "sub_40E4B0", "__int64 __fastcall sub_40E4B0(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_61D920;\n  v4 = sub_4127E9(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4252921, "sub_40E4F9", "__int64 __fastcall sub_40E4F9(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_61D920;\n  return *(unsigned int *)v1;\n}\n"], [4252951, "sub_40E517", "__int64 *__fastcall sub_40E517(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_61D920;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4252987, "sub_40E53B", "__int64 __fastcall sub_40E53B(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_61D920;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4253123, "sub_40E5C3", "__int64 __fastcall sub_40E5C3(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_61D920;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4253174, "sub_40E5F6", "__int64 *__fastcall sub_40E5F6(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_61D920;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4253264, "sub_40E650", "_QWORD *__fastcall sub_40E650(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4253384, "sub_40E6C8", "char *__fastcall sub_40E6C8(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)asc_418D80;\n  return v3;\n}\n"], [4253445, "sub_40E705", "unsigned __int64 __fastcall sub_40E705(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_40E6C8((const char *)&asc_418D80[1], a5);\n        a9 = sub_40E6C8((const char *)&asc_418D80[2], a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)asc_418D80;\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(asc_418D80 + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_40E705(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4256592, "sub_40F350", "unsigned __int64 __fastcall sub_40F350(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_61D920;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_40E705(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4256752, "sub_40F3F0", "__int64 __fastcall sub_40F3F0(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_40F422(a1, a2, 0LL, a3);\n}\n"], [4256802, "sub_40F422", "__int64 __fastcall sub_40F422(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_61D920;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_40E705(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_4126AB(v10);\n  sub_40E705(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4257102, "sub_40F54E", "void sub_40F54E()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_61D3D0;\n  for ( i = 1; i < dword_61D3B0; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_61D960 )\n  {\n    free(ptr[1]);\n    qword_61D3C0 = 256LL;\n    off_61D3C8 = &unk_61D960;\n  }\n  if ( ptr != (void **)&qword_61D3C0 )\n  {\n    free(ptr);\n    off_61D3D0 = &qword_61D3C0;\n  }\n  dword_61D3B0 = 1;\n}\n"], [4257273, "sub_40F5F9", "void *__fastcall sub_40F5F9(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_61D3D0;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_61D3B0 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_61D3D0 == &qword_61D3C0;\n    if ( off_61D3D0 == &qword_61D3C0 )\n      v4 = 0LL;\n    else\n      v4 = off_61D3D0;\n    v12 = (__int64 *)sub_4126FA(v4, 16 * v14);\n    off_61D3D0 = v12;\n    if ( v9 )\n    {\n      v5 = off_61D3C8;\n      *v12 = qword_61D3C0;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_61D3B0], 0, 16 * (v14 - (unsigned int)dword_61D3B0));\n    dword_61D3B0 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_40E705((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_61D960 )\n      free(ptr);\n    ptr = (void *)sub_4126AB(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_40E705((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4257919, "sub_40F87F", "void *__fastcall sub_40F87F(int a1, __int64 a2)\n{\n  return sub_40F5F9(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_61D920);\n}\n"], [4257962, "sub_40F8AA", "void *__fastcall sub_40F8AA(int a1, __int64 a2, size_t a3)\n{\n  return sub_40F5F9(a1, a2, a3, (__int64)&qword_61D920);\n}\n"], [4258006, "sub_40F8D6", "void *__fastcall sub_40F8D6(__int64 a1)\n{\n  return sub_40F87F(0, a1);\n}\n"], [4258037, "sub_40F8F5", "void *__fastcall sub_40F8F5(__int64 a1, size_t a2)\n{\n  return sub_40F8AA(0, a1, a2);\n}\n"], [4258076, "sub_40F91C", "void *__fastcall sub_40F91C(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_40E650(v5, a2);\n  return sub_40F5F9(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4258141, "sub_40F95D", "void *__fastcall sub_40F95D(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_40E650(v7, a2);\n  return sub_40F5F9(a1, a3, a4, (__int64)v7);\n}\n"], [4258204, "sub_40F99C", "void *__fastcall sub_40F99C(int a1, __int64 a2)\n{\n  return sub_40F91C(0, a1, a2);\n}\n"], [4258240, "sub_40F9C0", "void *__fastcall sub_40F9C0(int a1, __int64 a2, size_t a3)\n{\n  return sub_40F95D(0, a1, a2, a3);\n}\n"], [4258284, "sub_40F9EC", "void *__fastcall sub_40F9EC(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_61D920;\n  v4[1] = qword_61D928;\n  v4[2] = qword_61D930;\n  v4[3] = qword_61D938;\n  v4[4] = qword_61D940;\n  v4[5] = qword_61D948;\n  v4[6] = qword_61D950;\n  sub_40E53B(v4, a3, 1);\n  return sub_40F5F9(0, a1, a2, (__int64)v4);\n}\n"], [4258432, "sub_40FA80", "void *__fastcall sub_40FA80(__int64 a1, unsigned __int8 a2)\n{\n  return sub_40F9EC(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4258474, "sub_40FAAA", "void *__fastcall sub_40FAAA(__int64 a1)\n{\n  return sub_40FA80(a1, 0x3Au);\n}\n"], [4258505, "sub_40FAC9", "void *__fastcall sub_40FAC9(__int64 a1, size_t a2)\n{\n  return sub_40F9EC(a1, a2, 0x3Au);\n}\n"], [4258547, "sub_40FAF3", "__int64 __fastcall sub_40FAF3(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_40FB29(a1, a2, a3, a4, -1LL);\n}\n"], [4258601, "sub_40FB29", "void *__fastcall sub_40FB29(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_61D920;\n  v8[1] = qword_61D928;\n  v8[2] = qword_61D930;\n  v8[3] = qword_61D938;\n  v8[4] = qword_61D940;\n  v8[5] = qword_61D948;\n  v8[6] = qword_61D950;\n  sub_40E5F6(v8, a2, a3);\n  return sub_40F5F9(a1, a4, a5, (__int64)v8);\n}\n"], [4258752, "sub_40FBC0", "__int64 __fastcall sub_40FBC0(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_40FAF3(0, a1, a2, a3);\n}\n"], [4258799, "sub_40FBEF", "void *__fastcall sub_40FBEF(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_40FB29(0, a1, a2, a3, a4);\n}\n"], [4258857, "sub_40FC29", "ssize_t __fastcall sub_40FC29(int a1, const void *a2, size_t a3)\n{\n  ssize_t result; // rax\n  ssize_t v5; // [rsp+28h] [rbp-8h]\n\nLABEL_1:\n  for ( result = write(a1, a2, a3); ; result = write(a1, a2, 0x7FFFE000uLL) )\n  {\n    v5 = result;\n    if ( result >= 0 )\n      break;\n    if ( *__errno_location() == 4 )\n      goto LABEL_1;\n    if ( *__errno_location() != 22 || a3 <= 0x7FFFE000 )\n      return v5;\n    a3 = 2147475456LL;\n  }\n  return result;\n}\n"], [4258970, "sub_40FC9A", "_BOOL8 __fastcall sub_40FC9A(_BYTE *a1, _BYTE *a2)\n{\n  bool v2; // al\n  int *v3; // rax\n  int *v4; // rax\n  bool v5; // al\n  bool v7; // [rsp+1Dh] [rbp-153h]\n  const char *s1; // [rsp+20h] [rbp-150h]\n  const char *s2; // [rsp+28h] [rbp-148h]\n  size_t v10; // [rsp+30h] [rbp-140h]\n  size_t n; // [rsp+38h] [rbp-138h]\n  char *ptr; // [rsp+40h] [rbp-130h]\n  char *filename; // [rsp+48h] [rbp-128h]\n  struct stat stat_buf; // [rsp+50h] [rbp-120h] BYREF\n  struct stat v15; // [rsp+E0h] [rbp-90h] BYREF\n\n  s1 = sub_40B6A4(a1);\n  s2 = sub_40B6A4(a2);\n  v10 = sub_40B70D(s1);\n  n = sub_40B70D(s2);\n  v2 = v10 == n && !memcmp(s1, s2, n);\n  v7 = 0;\n  if ( v2 )\n  {\n    ptr = (char *)sub_40B556((__int64)a1);\n    filename = (char *)sub_40B556((__int64)a2);\n    if ( (unsigned int)sub_416100(ptr, &stat_buf) )\n    {\n      v3 = __errno_location();\n      error(1, *v3, \"%s\", ptr);\n    }\n    if ( (unsigned int)sub_416100(filename, &v15) )\n    {\n      v4 = __errno_location();\n      error(1, *v4, \"%s\", filename);\n    }\n    v5 = stat_buf.st_ino == v15.st_ino && stat_buf.st_dev == v15.st_dev;\n    v7 = v5;\n    free(ptr);\n    free(filename);\n  }\n  return v7;\n}\n"], [4259475, "sub_40FE93", "_BYTE *__fastcall sub_40FE93(DIR *a1)\n{\n  __int64 v2; // rax\n  int v3; // [rsp+1Ch] [rbp-34h]\n  _BYTE *ptr; // [rsp+20h] [rbp-30h]\n  unsigned __int64 v5; // [rsp+28h] [rbp-28h]\n  size_t v6; // [rsp+30h] [rbp-20h]\n  struct dirent *v7; // [rsp+38h] [rbp-18h]\n  char *src; // [rsp+40h] [rbp-10h]\n  size_t n; // [rsp+48h] [rbp-8h]\n\n  v5 = 512LL;\n  v6 = 0LL;\n  if ( !a1 )\n    return 0LL;\n  ptr = (_BYTE *)sub_4126C5(512LL);\n  while ( 1 )\n  {\n    *__errno_location() = 0;\n    v7 = readdir(a1);\n    if ( !v7 )\n      break;\n    src = v7->d_name;\n    if ( v7->d_name[0] == 46 )\n    {\n      if ( v7->d_name[1] == 46 )\n        v2 = 2LL;\n      else\n        v2 = 1LL;\n    }\n    else\n    {\n      v2 = 0LL;\n    }\n    if ( src[v2] )\n    {\n      n = strlen(v7->d_name) + 1;\n      if ( v6 + n < v6 )\n        sub_412847();\n      if ( v6 + n >= v5 )\n      {\n        do\n        {\n          if ( 2 * v5 < v5 )\n            sub_412847();\n          v5 *= 2LL;\n        }\n        while ( v6 + n >= v5 );\n        ptr = (_BYTE *)sub_4126FA(ptr, v5);\n      }\n      memcpy(&ptr[v6], src, n);\n      v6 += n;\n    }\n  }\n  ptr[v6] = 0;\n  v3 = *__errno_location();\n  if ( !v3 )\n    return ptr;\n  free(ptr);\n  *__errno_location() = v3;\n  return 0LL;\n}\n"], [4259894, "sub_410036", "_BYTE *__fastcall sub_410036(DIR *a1)\n{\n  int v2; // [rsp+14h] [rbp-Ch]\n  _BYTE *ptr; // [rsp+18h] [rbp-8h]\n\n  ptr = sub_40FE93(a1);\n  if ( !a1 || !closedir(a1) )\n    return ptr;\n  v2 = *__errno_location();\n  free(ptr);\n  *__errno_location() = v2;\n  return 0LL;\n}\n"], [4259990, "sub_410096", "_BYTE *__fastcall sub_410096(const char *a1)\n{\n  DIR *v1; // rax\n\n  v1 = sub_40B4A0(a1);\n  return sub_410036(v1);\n}\n"], [4260024, "sub_4100B8", "_BYTE *__fastcall sub_4100B8(int a1)\n{\n  DIR *v1; // rax\n\n  v1 = fdopendir(a1);\n  return sub_410036(v1);\n}\n"], [4260055, "sub_4100D7", "__int64 __fastcall sub_4100D7(const void *a1, size_t a2)\n{\n  __int64 result; // rax\n  _BYTE *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = memchr(a1, 0, a2);\n  if ( v3 )\n    result = v3 - (_BYTE *)a1 + 1;\n  else\n    result = a2;\n  return result;\n}\n"], [4260129, "sub_410121", "bool __fastcall sub_410121(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_419220[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4260183, "sub_410157", "__int64 __fastcall sub_410157(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = *(unsigned __int8 *)(a1 + 20);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)(a1 + 8) )\n    {\n      if ( sub_410121(**(_BYTE **)(a1 + 24)) )\n      {\n        *(_QWORD *)(a1 + 32) = 1LL;\n        *(_DWORD *)(a1 + 44) = **(char **)(a1 + 24);\n        *(_BYTE *)(a1 + 40) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 20) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 12)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbiter.h\", 0x86u, \"mbiter_multi_next\");\n      *(_BYTE *)(a1 + 8) = 1;\n    }\n    *(_QWORD *)(a1 + 32) = mbrtowc(\n                             (wchar_t *)(a1 + 44),\n                             *(const char **)(a1 + 24),\n                             *(_QWORD *)a1 - *(_QWORD *)(a1 + 24),\n                             (mbstate_t *)(a1 + 12));\n    if ( *(_QWORD *)(a1 + 32) == -1LL )\n    {\n      *(_QWORD *)(a1 + 32) = 1LL;\n      *(_BYTE *)(a1 + 40) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 32) == -2LL )\n    {\n      *(_QWORD *)(a1 + 32) = *(_QWORD *)a1 - *(_QWORD *)(a1 + 24);\n      *(_BYTE *)(a1 + 40) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 32) )\n      {\n        *(_QWORD *)(a1 + 32) = 1LL;\n        if ( **(_BYTE **)(a1 + 24) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbiter.h\", 0xA1u, \"mbiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 44) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbiter.h\", 0xA2u, \"mbiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 40) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 12)) )\n        *(_BYTE *)(a1 + 8) = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4260665, "sub_410339", "char *__fastcall sub_410339(const char *a1, int a2)\n{\n  size_t v2; // rax\n  size_t v3; // rax\n  int v5; // [rsp+14h] [rbp-7Ch]\n  char *v6; // [rsp+18h] [rbp-78h]\n  char *i; // [rsp+20h] [rbp-70h]\n  char *j; // [rsp+20h] [rbp-70h]\n  char *v9; // [rsp+28h] [rbp-68h]\n  unsigned __int64 v10; // [rsp+30h] [rbp-60h] BYREF\n  char v11; // [rsp+38h] [rbp-58h]\n  int v12; // [rsp+3Ch] [rbp-54h] BYREF\n  char k; // [rsp+44h] [rbp-4Ch]\n  char *v14; // [rsp+48h] [rbp-48h]\n  __int64 v15; // [rsp+50h] [rbp-40h]\n  char v16; // [rsp+58h] [rbp-38h]\n  wint_t wc; // [rsp+5Ch] [rbp-34h]\n  unsigned __int64 v18; // [rsp+78h] [rbp-18h]\n\n  v18 = __readfsqword(0x28u);\n  v9 = strdup(a1);\n  if ( !v9 )\n    sub_412847();\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( a2 )\n    {\n      for ( i = v9; *i && ((*__ctype_b_loc())[(unsigned __int8)*i] & 0x2000) != 0; ++i )\n        ;\n      v3 = strlen(i);\n      memmove(v9, i, v3 + 1);\n    }\n    if ( a2 != 1 )\n    {\n      for ( j = &v9[strlen(v9) - 1]; j >= v9 && ((*__ctype_b_loc())[(unsigned __int8)*j] & 0x2000) != 0; --j )\n        *j = 0;\n    }\n  }\n  else\n  {\n    if ( a2 )\n    {\n      v14 = v9;\n      v10 = (unsigned __int64)&v9[strlen(v9)];\n      v11 = 0;\n      memset(&v12, 0, 8uLL);\n      for ( k = 0; (unsigned __int64)v14 < v10; k = 0 )\n      {\n        sub_410157((__int64)&v10);\n        if ( !v16 || !iswspace(wc) )\n          break;\n        v14 += v15;\n      }\n      v2 = strlen(v14);\n      memmove(v9, v14, v2 + 1);\n    }\n    if ( a2 != 1 )\n    {\n      v5 = 0;\n      v14 = v9;\n      v10 = (unsigned __int64)&v9[strlen(v9)];\n      v11 = 0;\n      memset(&v12, 0, 8uLL);\n      k = 0;\n      while ( (unsigned __int64)v14 < v10 )\n      {\n        sub_410157((__int64)&v10);\n        if ( v5 || !v16 || !iswspace(wc) )\n        {\n          if ( v5 || v16 == 1 && iswspace(wc) )\n          {\n            if ( v5 != 1 || v16 == 1 && iswspace(wc) )\n            {\n              if ( v5 == 1 && v16 && iswspace(wc) )\n              {\n                v5 = 2;\n                v6 = v14;\n              }\n              else if ( v5 != 2 || !v16 || !iswspace(wc) )\n              {\n                v5 = 1;\n              }\n            }\n          }\n          else\n          {\n            v5 = 1;\n          }\n        }\n        v14 += v15;\n        k = 0;\n      }\n      if ( v5 == 2 )\n        *v6 = 0;\n    }\n  }\n  return v9;\n}\n"], [4261528, "sub_410698", "__int64 __fastcall sub_410698(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_412AAE(a1, 0, 3, a4, a5, a6);\n}\n"], [4261566, "sub_4106BE", "__int64 __fastcall sub_4106BE(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  unsigned int fd; // [rsp+Ch] [rbp-14h]\n  unsigned int v8; // [rsp+18h] [rbp-8h]\n  int v9; // [rsp+1Ch] [rbp-4h]\n\n  fd = a1;\n  if ( a1 >= 0 && a1 <= 2 )\n  {\n    v8 = sub_410698(a1, a2, a3, a4, a5, a6);\n    v9 = *__errno_location();\n    close(a1);\n    *__errno_location() = v9;\n    fd = v8;\n  }\n  return fd;\n}\n"], [4261643, "sub_41070B", "__int64 __fastcall sub_41070B(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 80);\n}\n"], [4261661, "sub_41071D", "__int64 __fastcall sub_41071D(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 112);\n}\n"], [4261679, "sub_41072F", "__int64 __fastcall sub_41072F(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 96);\n}\n"], [4261697, "sub_410741", "unsigned __int64 __fastcall sub_410741(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"], [4261738, "sub_41076A", "bool __fastcall sub_41076A(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n"], [4261788, "sub_41079C", "__int64 __fastcall sub_41079C(char *a1, __int64 a2, __int64 a3, char a4)\n{\n  bool v5; // al\n  int v6; // eax\n  __time_t v7; // rbx\n  int v8; // ebx\n  int v11; // [rsp+24h] [rbp-13Ch]\n  int v12; // [rsp+28h] [rbp-138h]\n  int v13; // [rsp+2Ch] [rbp-134h]\n  int v14; // [rsp+30h] [rbp-130h]\n  int v15; // [rsp+30h] [rbp-130h]\n  int i; // [rsp+34h] [rbp-12Ch]\n  int j; // [rsp+38h] [rbp-128h]\n  int v18; // [rsp+3Ch] [rbp-124h]\n  int v19; // [rsp+40h] [rbp-120h]\n  int v20; // [rsp+50h] [rbp-110h]\n  int v21; // [rsp+54h] [rbp-10Ch]\n  __int64 v22; // [rsp+58h] [rbp-108h]\n  __int64 *v23; // [rsp+60h] [rbp-100h]\n  __int64 v24; // [rsp+68h] [rbp-F8h]\n  __int64 v25; // [rsp+70h] [rbp-F0h]\n  __int64 v26; // [rsp+78h] [rbp-E8h]\n  __int64 v27; // [rsp+88h] [rbp-D8h]\n  __int64 v28; // [rsp+90h] [rbp-D0h] BYREF\n  int v29; // [rsp+98h] [rbp-C8h]\n  char v30; // [rsp+9Ch] [rbp-C4h]\n  __int64 v31[2]; // [rsp+A0h] [rbp-C0h] BYREF\n  __int64 v32; // [rsp+B0h] [rbp-B0h]\n  __int64 v33; // [rsp+B8h] [rbp-A8h]\n  struct stat stat_buf; // [rsp+C0h] [rbp-A0h] BYREF\n\n  v24 = *(_QWORD *)(a2 + 88);\n  v22 = *(_QWORD *)(a3 + 88);\n  v18 = sub_41072F(a2);\n  v11 = sub_41072F(a3);\n  if ( (a4 & 1) == 0 )\n    goto LABEL_64;\n  v23 = 0LL;\n  if ( v24 == v22 && v18 == v11 )\n    return 0LL;\n  if ( v22 - 2 >= v24 )\n    return 0xFFFFFFFFLL;\n  if ( v24 - 2 >= v22 )\n    return 1LL;\n  if ( !qword_61DA60 )\n    qword_61DA60 = (__int64)sub_40C810(\n                              16LL,\n                              0LL,\n                              (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_410741,\n                              (bool (__fastcall *)(__int64, __int64))sub_41076A,\n                              (size_t)free);\n  if ( !qword_61DA60 )\n    goto LABEL_18;\n  if ( !qword_61DA68 )\n  {\n    qword_61DA68 = (__int64)malloc(0x10uLL);\n    if ( !qword_61DA68 )\n    {\nLABEL_18:\n      if ( qword_61DA60 )\n      {\n        v28 = *(_QWORD *)a2;\n        v23 = (__int64 *)sub_40C1D7(qword_61DA60, (__int64)&v28);\n      }\n      if ( !v23 )\n      {\n        v23 = &v28;\n        v29 = 2000000000;\n        v30 = 0;\n      }\n      goto LABEL_22;\n    }\n    *(_DWORD *)(qword_61DA68 + 8) = 2000000000;\n    *(_BYTE *)(qword_61DA68 + 12) = 0;\n  }\n  *(_QWORD *)qword_61DA68 = *(_QWORD *)a2;\n  v23 = (__int64 *)sub_40D4A6((_QWORD *)qword_61DA60, qword_61DA68);\n  if ( !v23 )\n    goto LABEL_18;\n  if ( v23 == (__int64 *)qword_61DA68 )\n    qword_61DA68 = 0LL;\nLABEL_22:\n  v12 = *((_DWORD *)v23 + 2);\n  if ( *((_BYTE *)v23 + 12) != 1 )\n  {\n    v25 = *(_QWORD *)(a2 + 72);\n    v26 = *(_QWORD *)(a2 + 104);\n    v19 = sub_41070B(a2);\n    v14 = sub_41071D(a2);\n    if ( (v14 % 10) | (v19 % 10) | (v18 % 10) )\n    {\n      v12 = 1;\n    }\n    else\n    {\n      v12 = 10;\n      v13 = v19 / 10;\n      v15 = v14 / 10;\n      for ( i = v18 / 10; *((_DWORD *)v23 + 2) > v12 && !((i % 10) | (v15 % 10) | (v13 % 10)); i /= 10 )\n      {\n        if ( v12 == 1000000000 )\n        {\n          if ( (((unsigned __int8)v24 | (unsigned __int8)(v25 | v26)) & 1) == 0 )\n            v12 = 2000000000;\n          break;\n        }\n        v12 *= 10;\n        v13 /= 10;\n        v15 /= 10;\n      }\n    }\n    *((_DWORD *)v23 + 2) = v12;\n    if ( v12 > 1 )\n    {\n      v27 = v22 & ~(v12 == 2000000000);\n      if ( v22 < v24 || v22 == v24 && v11 <= v18 )\n        return 1LL;\n      if ( v24 < v27 || v24 == v27 && v11 - v11 % v12 > v18 )\n        return 0xFFFFFFFFLL;\n      v31[0] = v25;\n      v31[1] = v19;\n      v32 = v24 | (v12 == 2000000000);\n      v33 = v12 / 9 + v18;\n      if ( (*(_DWORD *)(a2 + 24) & 0xF000) == 40960 )\n        v5 = (unsigned int)sub_411A30(a1, v31) != 0;\n      else\n        v5 = (unsigned int)sub_411A09(a1, v31) != 0;\n      if ( v5 )\n        return 4294967294LL;\n      if ( (*(_DWORD *)(a2 + 24) & 0xF000) == 40960 )\n        v6 = sub_416120(a1, &stat_buf);\n      else\n        v6 = sub_416100(a1, &stat_buf);\n      v20 = v6;\n      v7 = v24 ^ stat_buf.st_mtim.tv_sec | v6;\n      if ( v7 | v18 ^ (unsigned __int64)sub_41072F((__int64)&stat_buf) )\n      {\n        v32 = v24;\n        v33 = v18;\n        if ( (*(_DWORD *)(a2 + 24) & 0xF000) == 40960 )\n          sub_411A30(a1, v31);\n        else\n          sub_411A09(a1, v31);\n      }\n      if ( v20 )\n        return 4294967294LL;\n      v21 = v12;\n      v8 = 1000000000 * (stat_buf.st_mtim.tv_sec & 1);\n      v12 = 1;\n      for ( j = v8 + sub_41072F((__int64)&stat_buf); !(j % 10); j /= 10 )\n      {\n        if ( v12 == 1000000000 )\n        {\n          v12 = 2000000000;\n          break;\n        }\n        v12 *= 10;\n        if ( v12 == v21 )\n          break;\n      }\n    }\n    *((_DWORD *)v23 + 2) = v12;\n    *((_BYTE *)v23 + 12) = 1;\n  }\n  v22 = ~(v12 == 2000000000) & (unsigned __int64)v22;\n  v11 -= v11 % v12;\nLABEL_64:\n  if ( v24 < v22 )\n    return 0xFFFFFFFFLL;\n  if ( v24 > v22 )\n    return 1LL;\n  if ( v18 < v11 )\n    return 0xFFFFFFFFLL;\n  return v18 > v11;\n}\n"], [4264123, "sub_4110BB", "__int64 __fastcall sub_4110BB(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 80);\n}\n"], [4264141, "sub_4110CD", "__int64 __fastcall sub_4110CD(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 96);\n}\n"], [4264159, "sub_4110DF", "__int64 __fastcall sub_4110DF(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 72);\n}\n"], [4264181, "sub_4110F5", "__int64 __fastcall sub_4110F5(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 88);\n}\n"], [4264203, "sub_41110B", "__int64 __fastcall sub_41110B(_QWORD *a1)\n{\n  __int64 result; // rax\n  int v2; // [rsp+18h] [rbp-8h]\n  int v3; // [rsp+1Ch] [rbp-4h]\n\n  v2 = 0;\n  v3 = 0;\n  if ( !a1 )\n    __assert_fail(\"timespec\", \"../../src/lib/utimens.c\", 0x59u, \"validate_timespec\");\n  if ( (a1[1] == 0x3FFFFFFFLL || a1[1] == 1073741822LL || (__int64)a1[1] >= 0 && (__int64)a1[1] <= 999999999)\n    && (a1[3] == 0x3FFFFFFFLL || a1[3] == 1073741822LL || (__int64)a1[3] >= 0 && (__int64)a1[3] <= 999999999) )\n  {\n    if ( a1[1] == 0x3FFFFFFFLL || a1[1] == 1073741822LL )\n    {\n      *a1 = 0LL;\n      v2 = 1;\n      if ( a1[1] == 1073741822LL )\n        v3 = 1;\n    }\n    if ( a1[3] == 0x3FFFFFFFLL || a1[3] == 1073741822LL )\n    {\n      a1[2] = 0LL;\n      v2 = 1;\n      if ( a1[3] == 1073741822LL )\n        ++v3;\n    }\n    result = (unsigned int)(v3 == 1) + v2;\n  }\n  else\n  {\n    *__errno_location() = 22;\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"], [4264593, "sub_411291", "__int64 __fastcall sub_411291(__int64 a1, __int64 **a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n  __int64 v4; // rdx\n  __int64 *v5; // [rsp+18h] [rbp-18h]\n\n  v5 = *a2;\n  if ( (*a2)[1] == 1073741822 && v5[3] == 1073741822 )\n    return 1LL;\n  if ( v5[1] == 0x3FFFFFFF && v5[3] == 0x3FFFFFFF )\n  {\n    *a2 = 0LL;\n    result = 0LL;\n  }\n  else\n  {\n    if ( v5[1] == 1073741822 )\n    {\n      *v5 = sub_4110DF(a1);\n      v5[1] = v3;\n    }\n    else if ( v5[1] == 0x3FFFFFFF )\n    {\n      sub_41360D(v5);\n    }\n    if ( v5[3] == 1073741822 )\n    {\n      v5[2] = sub_4110F5(a1);\n      v5[3] = v4;\n    }\n    else if ( v5[3] == 0x3FFFFFFF )\n    {\n      sub_41360D(v5 + 2);\n    }\n    result = 0LL;\n  }\n  return result;\n}\n"], [4264890, "sub_4113BA", "int __fastcall sub_4113BA(int a1, char *a2, __int64 *a3)\n{\n  struct timespec *v3; // rax\n  __int64 v4; // rdx\n  __int64 v5; // rdx\n  int result; // eax\n  bool v7; // al\n  struct timespec *v8; // rbx\n  __syscall_slong_t v9; // rdx\n  struct timespec *v10; // rbx\n  __syscall_slong_t v11; // rdx\n  __suseconds_t v13; // rdx\n  __suseconds_t v14; // rdx\n  bool v16; // [rsp+2Eh] [rbp-132h]\n  bool v17; // [rsp+2Fh] [rbp-131h]\n  int v18; // [rsp+30h] [rbp-130h]\n  int v19; // [rsp+34h] [rbp-12Ch]\n  int v20; // [rsp+34h] [rbp-12Ch]\n  struct timespec *times; // [rsp+38h] [rbp-128h] BYREF\n  struct timeval *tvp; // [rsp+40h] [rbp-120h]\n  struct timeval *v23; // [rsp+48h] [rbp-118h]\n  __time_t v24; // [rsp+50h] [rbp-110h]\n  __time_t v25; // [rsp+58h] [rbp-108h]\n  __int64 v26[4]; // [rsp+60h] [rbp-100h] BYREF\n  __int64 v27[4]; // [rsp+80h] [rbp-E0h] BYREF\n  __time_t v28; // [rsp+A0h] [rbp-C0h] BYREF\n  __suseconds_t v29; // [rsp+A8h] [rbp-B8h]\n  __time_t v30; // [rsp+B0h] [rbp-B0h]\n  __suseconds_t v31; // [rsp+B8h] [rbp-A8h]\n  struct stat stat_buf; // [rsp+C0h] [rbp-A0h] BYREF\n\n  if ( a3 )\n    v3 = (struct timespec *)v26;\n  else\n    v3 = 0LL;\n  times = v3;\n  v18 = 0;\n  if ( v3 )\n  {\n    v4 = a3[1];\n    v26[0] = *a3;\n    v26[1] = v4;\n    v5 = a3[3];\n    v26[2] = a3[2];\n    v26[3] = v5;\n    v18 = sub_41110B(times);\n  }\n  if ( v18 < 0 )\n    return -1;\n  if ( !a2 )\n  {\n    if ( a1 < 0 )\n    {\n      *__errno_location() = 9;\n      return -1;\n    }\n    if ( dup2(a1, a1) != a1 )\n      return -1;\n  }\n  if ( dword_61DA70 >= 0 )\n  {\n    if ( v18 == 2 )\n    {\n      if ( a1 >= 0 )\n        v7 = (unsigned int)sub_416110(a1, &stat_buf) != 0;\n      else\n        v7 = (unsigned int)sub_416100(a2, &stat_buf) != 0;\n      if ( v7 )\n        return -1;\n      if ( times->tv_nsec == 1073741822 )\n      {\n        v8 = times;\n        times->tv_sec = sub_4110DF((__int64)&stat_buf);\n        v8->tv_nsec = v9;\n      }\n      else if ( times[1].tv_nsec == 1073741822 )\n      {\n        v10 = times + 1;\n        times[1].tv_sec = sub_4110F5((__int64)&stat_buf);\n        v10->tv_nsec = v11;\n      }\n      v18 = 3;\n    }\n    if ( a1 < 0 )\n    {\n      v19 = utimensat(-100, a2, times, 0);\n      if ( v19 > 0 )\n        *__errno_location() = 38;\n      if ( !v19 || *__errno_location() != 38 )\n      {\n        dword_61DA70 = 1;\n        return v19;\n      }\n    }\n    if ( a1 >= 0 )\n    {\n      v20 = futimens(a1, times);\n      if ( v20 > 0 )\n        *__errno_location() = 38;\n      if ( !v20 || *__errno_location() != 38 )\n      {\n        dword_61DA70 = 1;\n        return v20;\n      }\n    }\n  }\n  dword_61DA70 = -1;\n  dword_61DA74 = -1;\n  if ( !v18 )\n    goto LABEL_47;\n  if ( v18 != 3 )\n  {\n    if ( a1 >= 0 ? (unsigned int)sub_416110(a1, &stat_buf) != 0 : (unsigned int)sub_416100(a2, &stat_buf) != 0 )\n      return -1;\n  }\n  if ( times && (unsigned __int8)sub_411291((__int64)&stat_buf, (__int64 **)&times) )\n    return 0;\nLABEL_47:\n  if ( times )\n  {\n    v27[0] = times->tv_sec;\n    v27[1] = times->tv_nsec / 1000;\n    v27[2] = times[1].tv_sec;\n    v27[3] = times[1].tv_nsec / 1000;\n    tvp = (struct timeval *)v27;\n  }\n  else\n  {\n    tvp = 0LL;\n  }\n  if ( a1 < 0 )\n    return futimesat(-100, a2, tvp);\n  if ( futimesat(a1, 0LL, tvp) )\n  {\n    if ( a2 )\n      result = utimes(a2, tvp);\n    else\n      result = -1;\n  }\n  else\n  {\n    if ( tvp )\n    {\n      v16 = tvp->tv_usec > 499999;\n      v17 = tvp[1].tv_usec > 499999;\n      if ( (v16 || v17) && !(unsigned int)sub_416110(a1, &stat_buf) )\n      {\n        v24 = stat_buf.st_atim.tv_sec - tvp->tv_sec;\n        v25 = stat_buf.st_mtim.tv_sec - tvp[1].tv_sec;\n        v23 = 0LL;\n        v13 = tvp->tv_usec;\n        v28 = tvp->tv_sec;\n        v29 = v13;\n        v14 = tvp[1].tv_usec;\n        v30 = tvp[1].tv_sec;\n        v31 = v14;\n        if ( v16 && v24 == 1 && !sub_4110BB((__int64)&stat_buf) )\n        {\n          v23 = (struct timeval *)&v28;\n          v29 = 0LL;\n        }\n        if ( v17 && v25 == 1 && !sub_4110CD((__int64)&stat_buf) )\n        {\n          v23 = (struct timeval *)&v28;\n          v31 = 0LL;\n        }\n        if ( v23 )\n          futimesat(a1, 0LL, v23);\n      }\n    }\n    result = 0;\n  }\n  return result;\n}\n"], [4266505, "sub_411A09", "int __fastcall sub_411A09(char *a1, __int64 *a2)\n{\n  return sub_4113BA(-1, a1, a2);\n}\n"], [4266544, "sub_411A30", "int __fastcall sub_411A30(char *a1, __int64 *a2)\n{\n  struct timespec *v2; // rax\n  __int64 v3; // rdx\n  __int64 v4; // rdx\n  struct timespec *v6; // rbx\n  __syscall_slong_t v7; // rdx\n  struct timespec *v8; // rbx\n  __syscall_slong_t v9; // rdx\n  int v10; // [rsp+10h] [rbp-D0h]\n  int v11; // [rsp+14h] [rbp-CCh]\n  struct timespec *times; // [rsp+18h] [rbp-C8h] BYREF\n  __int64 v13[4]; // [rsp+20h] [rbp-C0h] BYREF\n  struct stat stat_buf; // [rsp+40h] [rbp-A0h] BYREF\n\n  if ( a2 )\n    v2 = (struct timespec *)v13;\n  else\n    v2 = 0LL;\n  times = v2;\n  v10 = 0;\n  if ( v2 )\n  {\n    v3 = a2[1];\n    v13[0] = *a2;\n    v13[1] = v3;\n    v4 = a2[3];\n    v13[2] = a2[2];\n    v13[3] = v4;\n    v10 = sub_41110B(times);\n  }\n  if ( v10 < 0 )\n    return -1;\n  if ( dword_61DA74 >= 0 )\n  {\n    if ( v10 == 2 )\n    {\n      if ( (unsigned int)sub_416120(a1, &stat_buf) )\n        return -1;\n      if ( times->tv_nsec == 1073741822 )\n      {\n        v6 = times;\n        times->tv_sec = sub_4110DF((__int64)&stat_buf);\n        v6->tv_nsec = v7;\n      }\n      else if ( times[1].tv_nsec == 1073741822 )\n      {\n        v8 = times + 1;\n        times[1].tv_sec = sub_4110F5((__int64)&stat_buf);\n        v8->tv_nsec = v9;\n      }\n      v10 = 3;\n    }\n    v11 = utimensat(-100, a1, times, 256);\n    if ( v11 > 0 )\n      *__errno_location() = 38;\n    if ( !v11 || *__errno_location() != 38 )\n    {\n      dword_61DA70 = 1;\n      dword_61DA74 = 1;\n      return v11;\n    }\n  }\n  dword_61DA74 = -1;\n  if ( !v10 )\n    goto LABEL_37;\n  if ( v10 != 3 && (unsigned int)sub_416120(a1, &stat_buf) )\n    return -1;\n  if ( times && (unsigned __int8)sub_411291((__int64)&stat_buf, (__int64 **)&times) )\n    return 0;\nLABEL_37:\n  if ( !v10 && (unsigned int)sub_416120(a1, &stat_buf) )\n    return -1;\n  if ( (stat_buf.st_mode & 0xF000) != 40960 )\n    return sub_4113BA(-1, a1, &times->tv_sec);\n  *__errno_location() = 38;\n  return -1;\n}\n"], [4267242, "sub_411CEA", "int __fastcall sub_411CEA(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4268757, "sub_4122D5", "int __fastcall sub_4122D5(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_411CEA(a1, a2, a3, a4, a5, i);\n}\n"], [4268867, "sub_412343", "int __fastcall sub_412343(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_411CEA(a1, a2, a3, a4, v8, i);\n}\n"], [4269084, "sub_41241C", "int sub_41241C(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_412343(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4269266, "sub_4124D2", "int sub_4124D2()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4269371, "sub_41253B", "__int64 sub_41253B()\n{\n  if ( byte_61DA78 != 1 )\n  {\n    byte_61DA79 = geteuid() == 0;\n    byte_61DA78 = 1;\n  }\n  return (unsigned __int8)byte_61DA79;\n}\n"], [4269436, "sub_41257C", "__int64 __fastcall sub_41257C(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_412847(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_4126C5(a2 * a1);\n}\n"], [4269498, "sub_4125BA", "__int64 __fastcall sub_4125BA(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_412847(a1, a2, v4);\n  return sub_4126FA(a1, a3 * a2);\n}\n"], [4269574, "sub_412606", "__int64 __fastcall sub_412606(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_412847(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_4126FA(a1, a3 * v6);\n}\n"], [4269739, "sub_4126AB", "__int64 __fastcall sub_4126AB(__int64 a1)\n{\n  return sub_4126C5(a1);\n}\n"], [4269765, "sub_4126C5", "void *__fastcall sub_4126C5(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_412847(a1, a2, v2);\n  return v4;\n}\n"], [4269818, "sub_4126FA", "void *__fastcall sub_4126FA(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_412847(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4269915, "sub_41275B", "__int64 __fastcall sub_41275B(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_412606(a1, a2, 1uLL);\n}\n"], [4269957, "sub_412785", "void *__fastcall sub_412785(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_4126C5(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4270000, "sub_4127B0", "void *__fastcall sub_4127B0(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_412847(a1, a2, v2);\n  return v4;\n}\n"], [4270057, "sub_4127E9", "void *__fastcall sub_4127E9(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_4126C5(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4270106, "sub_41281A", "void *__fastcall sub_41281A(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_4127E9(a1, v1 + 1);\n}\n"], [4270151, "sub_412847", "void __noreturn sub_412847()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4270294, "sub_4128D6", "__int64 __fastcall sub_4128D6(__int64 a1, __int64 a2)\n{\n  __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_41547B(a1, a2);\n  if ( !v3 && *__errno_location() == 12 )\n    sub_412847();\n  return v3;\n}\n"], [4270363, "sub_41291B", "__int64 __fastcall sub_41291B(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  v4 = sub_4157B0(a1, a2, a3);\n  if ( !v4 && *__errno_location() == 12 )\n    sub_412847();\n  return v4;\n}\n"], [4270440, "sub_412968", "_BOOL8 sub_412968()\n{\n  bool v1; // [rsp+7h] [rbp-19h]\n  char *lineptr; // [rsp+8h] [rbp-18h] BYREF\n  size_t n; // [rsp+10h] [rbp-10h] BYREF\n  __ssize_t v4; // [rsp+18h] [rbp-8h]\n\n  lineptr = 0LL;\n  n = 0LL;\n  v4 = getline(&lineptr, &n, stdin);\n  if ( v4 > 0 )\n  {\n    lineptr[v4 - 1] = 0;\n    v1 = rpmatch(lineptr) > 0;\n  }\n  else\n  {\n    v1 = 0;\n  }\n  free(lineptr);\n  return v1;\n}\n"], [4270563, "sub_4129E3", "unsigned __int64 __fastcall sub_4129E3(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  __int64 v3; // rax\n  unsigned __int64 result; // rax\n  unsigned __int64 v5; // [rsp+18h] [rbp-30h]\n  unsigned __int64 v6; // [rsp+20h] [rbp-28h]\n  unsigned __int64 i; // [rsp+28h] [rbp-20h]\n  unsigned __int64 v8; // [rsp+30h] [rbp-18h]\n\n  if ( a1 )\n  {\n    if ( a2 )\n    {\n      v6 = a1;\n      for ( i = a2; ; i = v8 )\n      {\n        v8 = v6 % i;\n        if ( !(v6 % i) )\n          break;\n        v6 = i;\n      }\n      if ( a2 * (a1 / i) <= a3 && a2 * (a1 / i) / a2 == a1 / i )\n        return a2 * (a1 / i);\n    }\n    v5 = a1;\n  }\n  else\n  {\n    if ( a2 )\n      v3 = a2;\n    else\n      v3 = 0x2000LL;\n    v5 = v3;\n  }\n  result = a3;\n  if ( v5 <= a3 )\n    result = v5;\n  return result;\n}\n"], [4270766, "sub_412AAE", "__int64 __fastcall sub_412AAE(int a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128 a7, __m128 a8, __m128 a9, __m128 a10, __m128 a11, __m128 a12, __m128 a13, __m128 a14)\n{\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  int v18; // [rsp+10h] [rbp-E0h]\n  int v19; // [rsp+14h] [rbp-DCh]\n  int v20; // [rsp+18h] [rbp-D8h]\n  int v21; // [rsp+1Ch] [rbp-D4h]\n  __int64 v22; // [rsp+50h] [rbp-A0h]\n  __int64 v23; // [rsp+58h] [rbp-98h]\n  __int64 v24; // [rsp+60h] [rbp-90h]\n  __int64 v25; // [rsp+68h] [rbp-88h]\n  __m128 v26; // [rsp+70h] [rbp-80h]\n  __m128 v27; // [rsp+80h] [rbp-70h]\n  __m128 v28; // [rsp+90h] [rbp-60h]\n  __m128 v29; // [rsp+A0h] [rbp-50h]\n  __m128 v30; // [rsp+B0h] [rbp-40h]\n  __m128 v31; // [rsp+C0h] [rbp-30h]\n  __m128 v32; // [rsp+D0h] [rbp-20h]\n  __m128 v33; // [rsp+E0h] [rbp-10h]\n\n  v22 = a3;\n  v23 = a4;\n  v24 = a5;\n  v25 = a6;\n  v26 = a7;\n  v27 = a8;\n  v28 = a9;\n  v29 = a10;\n  v30 = a11;\n  v31 = a12;\n  v32 = a13;\n  v33 = a14;\n  if ( a2 != 1030 )\n    return (unsigned int)fcntl(a1, a2, v22);\n  v19 = v22;\n  if ( dword_61DA7C < 0 )\n  {\n    v18 = sub_412AAE(a1, 0, v22, a4, a5, a6);\n  }\n  else\n  {\n    v18 = fcntl(a1, 1030, (unsigned int)v22);\n    if ( v18 < 0 && *__errno_location() == 22 )\n    {\n      v18 = sub_412AAE(a1, 0, v19, v14, v15, v16);\n      if ( v18 < 0 )\n        return (unsigned int)v18;\n      dword_61DA7C = -1;\n    }\n    else\n    {\n      dword_61DA7C = 1;\n    }\n  }\n  if ( v18 >= 0 && dword_61DA7C == -1 )\n  {\n    v20 = fcntl(v18, 1);\n    if ( v20 < 0 || fcntl(v18, 2, v20 | 1u) == -1 )\n    {\n      v21 = *__errno_location();\n      close(v18);\n      *__errno_location() = v21;\n      v18 = -1;\n    }\n  }\n  return (unsigned int)v18;\n}\n"], [4271464, "sub_412D68", "__int64 __fastcall sub_412D68(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_412DE6(a1, 0LL, 1LL);\n  return result;\n}\n"], [4271515, "sub_412D9B", "int __fastcall sub_412D9B(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_412D68(a1);\n  return fflush(a1);\n}\n"], [4271590, "sub_412DE6", "int __fastcall sub_412DE6(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4271774, "sub_412E9E", "__int64 __fastcall sub_412E9E(unsigned int a1, _BYTE *a2, int a3, const char *a4)\n{\n  __int64 result; // rax\n  int v8; // [rsp+28h] [rbp-28h]\n  int v9; // [rsp+2Ch] [rbp-24h]\n  unsigned int v10; // [rsp+30h] [rbp-20h]\n  int v11; // [rsp+34h] [rbp-1Ch]\n  _BYTE *ptr; // [rsp+38h] [rbp-18h]\n  _BYTE *v13; // [rsp+40h] [rbp-10h]\n  _BYTE *v14; // [rsp+48h] [rbp-8h]\n\n  ptr = a2;\n  v8 = 20;\n  while ( v8-- )\n  {\n    v13 = (_BYTE *)sub_413131(a1, ptr);\n    if ( !v13 )\n      break;\n    if ( *v13 == 47 )\n    {\n      if ( ptr != a2 )\n        free(ptr);\n      ptr = v13;\n    }\n    else\n    {\n      v14 = sub_40B60D(ptr);\n      if ( ptr != a2 )\n        free(ptr);\n      if ( !v14 )\n      {\n        free(v13);\n        *__errno_location() = 12;\n        return 0xFFFFFFFFLL;\n      }\n      ptr = sub_40BCC0(v14, v13, 0LL);\n      free(v14);\n      free(v13);\n      if ( !ptr )\n      {\n        *__errno_location() = 12;\n        return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  if ( v8 < 0 )\n  {\n    v13 = 0LL;\n    *__errno_location() = 40;\n  }\n  if ( v13 || *__errno_location() == 22 )\n  {\n    v10 = linkat(a1, ptr, a3, a4, 0);\n    if ( ptr != a2 )\n    {\n      v11 = *__errno_location();\n      free(ptr);\n      *__errno_location() = v11;\n    }\n    result = v10;\n  }\n  else\n  {\n    if ( ptr != a2 )\n    {\n      v9 = *__errno_location();\n      free(ptr);\n      *__errno_location() = v9;\n    }\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"], [4272235, "sub_41306B", "int __fastcall sub_41306B(unsigned int a1, char *a2, int a3, const char *a4, int a5)\n{\n  int v5; // eax\n  int v9; // [rsp+2Ch] [rbp-4h]\n\n  v5 = a5;\n  BYTE1(v5) = BYTE1(a5) & 0xFB;\n  if ( v5 )\n  {\n    *__errno_location() = 22;\n    return -1;\n  }\n  if ( !a5 )\n    return linkat(a1, a2, a3, a4, 0);\n  if ( dword_61DA80 >= 0 )\n  {\n    v9 = linkat(a1, a2, a3, a4, a5);\n    if ( v9 != -1 || *__errno_location() != 22 )\n    {\n      dword_61DA80 = 1;\n      return v9;\n    }\n    dword_61DA80 = -1;\n  }\n  return sub_412E9E(a1, a2, a3, a4);\n}\n"], [4272433, "sub_413131", "__int64 __fastcall sub_413131(unsigned int a1, __int64 a2)\n{\n  return sub_413218(a1, a2, 0LL, 0LL, 0LL, readlinkat, a2);\n}\n"], [4272486, "sub_413166", "__int64 __fastcall sub_413166(unsigned __int8 *a1, unsigned __int8 *a2)\n{\n  unsigned __int8 *v2; // r12\n  unsigned __int8 *v3; // rbx\n  unsigned __int8 v5; // [rsp+1Eh] [rbp-12h]\n  unsigned __int8 v6; // [rsp+1Fh] [rbp-11h]\n\n  v2 = a1;\n  v3 = a2;\n  if ( a1 == a2 )\n    return 0LL;\n  do\n  {\n    v5 = sub_415BB0(*v2);\n    v6 = sub_415BB0(*v3);\n    if ( !v5 )\n      break;\n    ++v2;\n    ++v3;\n  }\n  while ( v5 == v6 );\n  return v5 - (unsigned int)v6;\n}\n"], [4272605, "sub_4131DD", "ssize_t __fastcall sub_4131DD(int a1, const char *a2, char *a3, size_t a4)\n{\n  if ( a1 != -100 )\n    abort();\n  return readlink(a2, a3, a4);\n}\n"], [4272664, "sub_413218", "char *__fastcall sub_413218(unsigned int a1, __int64 a2, char *a3, __int64 a4, void *(**a5)(size_t size), __int64 (__fastcall *a6)(_QWORD, __int64, char *, unsigned __int64))\n{\n  __int64 v7; // rax\n  void *(**v9)(size_t); // [rsp+8h] [rbp-488h]\n  __int64 v10; // [rsp+10h] [rbp-480h]\n  int v12; // [rsp+34h] [rbp-45Ch]\n  char *src; // [rsp+38h] [rbp-458h]\n  unsigned __int64 v14; // [rsp+40h] [rbp-450h]\n  __int64 v15; // [rsp+50h] [rbp-440h]\n  size_t n; // [rsp+58h] [rbp-438h]\n  void *dest; // [rsp+60h] [rbp-430h]\n  __int64 v18; // [rsp+68h] [rbp-428h]\n  char v19[1032]; // [rsp+70h] [rbp-420h] BYREF\n  unsigned __int64 v20; // [rsp+478h] [rbp-18h]\n\n  v10 = a4;\n  v9 = a5;\n  v20 = __readfsqword(0x28u);\n  if ( !a5 )\n    v9 = &off_4192C0;\n  if ( !a4 )\n  {\n    a3 = v19;\n    v10 = 1024LL;\n  }\n  src = a3;\n  v14 = v10;\n  while ( 1 )\n  {\n    v15 = a6(a1, a2, src, v14);\n    if ( v15 < 0 )\n    {\n      v12 = *__errno_location();\n      if ( v12 != 34 )\n      {\n        if ( src != a3 )\n        {\n          v9[2]((size_t)src);\n          *__errno_location() = v12;\n        }\n        return 0LL;\n      }\n    }\n    if ( v15 < v14 )\n      break;\n    if ( src != a3 )\n      v9[2]((size_t)src);\n    if ( v14 > 0x4000000000000000LL )\n    {\n      if ( v14 >= 0x8000000000000000LL )\n      {\n        *__errno_location() = 36;\n        return 0LL;\n      }\n      v14 = 0x8000000000000000LL;\n      v7 = (__int64)(*v9)(0x8000000000000000LL);\n    }\n    else\n    {\n      v14 *= 2LL;\n      v7 = (__int64)(*v9)(v14);\n    }\n    src = (char *)v7;\n    if ( !v7 )\n      goto LABEL_29;\n  }\n  n = v15 + 1;\n  src[v15] = 0;\n  if ( src != v19 )\n  {\n    if ( n < v14 && src != a3 )\n    {\n      if ( v9[1] )\n      {\n        v18 = ((__int64 (__fastcall *)(char *, size_t))v9[1])(src, n);\n        if ( v18 )\n          src = (char *)v18;\n      }\n    }\n    return src;\n  }\n  dest = (*v9)(n);\n  v14 = v15 + 1;\n  if ( dest )\n  {\n    memcpy(dest, src, n);\n    return (char *)dest;\n  }\nLABEL_29:\n  if ( v9[3] )\n    v9[3](v14);\n  *__errno_location() = 12;\n  return 0LL;\n}\n"], [4273538, "sub_413582", "__int64 __fastcall sub_413582(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = (unsigned int)sub_4158B3(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4273677, "sub_41360D", "int __fastcall sub_41360D(struct timespec *a1)\n{\n  int result; // eax\n  struct timeval tv; // [rsp+10h] [rbp-10h] BYREF\n\n  result = clock_gettime(0, a1);\n  if ( result )\n  {\n    gettimeofday(&tv, 0LL);\n    a1->tv_sec = tv.tv_sec;\n    result = (int)a1;\n    a1->tv_nsec = 1000 * tv.tv_usec;\n  }\n  return result;\n}\n"], [4273761, "sub_413661", "unsigned __int64 __fastcall sub_413661(_BYTE *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = 0LL;\n  while ( *a1 )\n    v4 = __ROR8__(v4, 55) + (char)*a1++;\n  return v4 % a2;\n}\n"], [4273851, "sub_4136BB", "void *sub_4136BB()\n{\n  _BOOL4 v0; // eax\n  size_t v1; // rax\n  _BOOL4 v3; // [rsp+4h] [rbp-FCh]\n  int fd; // [rsp+8h] [rbp-F8h]\n  int c; // [rsp+Ch] [rbp-F4h]\n  int ca; // [rsp+Ch] [rbp-F4h]\n  void *v7; // [rsp+10h] [rbp-F0h]\n  const char *s; // [rsp+18h] [rbp-E8h]\n  void *ptr; // [rsp+20h] [rbp-E0h]\n  __int64 v10; // [rsp+28h] [rbp-D8h]\n  size_t n; // [rsp+38h] [rbp-C8h]\n  size_t v12; // [rsp+40h] [rbp-C0h]\n  char *dest; // [rsp+48h] [rbp-B8h]\n  FILE *stream; // [rsp+50h] [rbp-B0h]\n  size_t v15; // [rsp+58h] [rbp-A8h]\n  size_t v16; // [rsp+60h] [rbp-A0h]\n  void *v17; // [rsp+68h] [rbp-98h]\n  char src[64]; // [rsp+70h] [rbp-90h] BYREF\n  char v19[56]; // [rsp+B0h] [rbp-50h] BYREF\n  unsigned __int64 v20; // [rsp+E8h] [rbp-18h]\n\n  v20 = __readfsqword(0x28u);\n  v7 = (void *)qword_61DA88;\n  if ( !qword_61DA88 )\n  {\n    s = getenv(\"CHARSETALIASDIR\");\n    if ( !s || !*s )\n      s = \"/root/Product/coreutils/exe/lib\";\n    n = strlen(s);\n    v12 = strlen(\"charset.alias\");\n    v0 = n && s[n - 1] != 47;\n    v3 = v0;\n    dest = (char *)malloc(n + v0 + v12 + 1);\n    if ( dest )\n    {\n      memcpy(dest, s, n);\n      if ( v3 )\n        dest[n] = 47;\n      memcpy(&dest[n + v3], \"charset.alias\", v12 + 1);\n    }\n    if ( dest )\n    {\n      fd = open(dest, 0x20000);\n      if ( fd >= 0 )\n      {\n        stream = fdopen(fd, \"r\");\n        if ( stream )\n        {\n          ptr = 0LL;\n          v10 = 0LL;\n          while ( 1 )\n          {\n            c = getc_unlocked(stream);\n            if ( c == -1 )\n              break;\n            if ( c != 10 && c != 32 && c != 9 )\n            {\n              if ( c == 35 )\n              {\n                do\n                  ca = getc_unlocked(stream);\n                while ( ca != -1 && ca != 10 );\n                if ( ca == -1 )\n                  break;\n              }\n              else\n              {\n                ungetc(c, stream);\n                if ( fscanf(stream, \"%50s %50s\", src, v19) <= 1 )\n                  break;\n                v15 = strlen(src);\n                v16 = strlen(v19);\n                v17 = ptr;\n                if ( v10 )\n                {\n                  v1 = v16 + v15 + v10;\n                  v10 = v1 + 2;\n                  ptr = realloc(ptr, v1 + 3);\n                }\n                else\n                {\n                  v10 = v15 + v16 + 2;\n                  ptr = malloc(v15 + v16 + 3);\n                }\n                if ( !ptr )\n                {\n                  v10 = 0LL;\n                  free(v17);\n                  break;\n                }\n                strcpy((char *)ptr + v10 - v16 - v15 - 2, src);\n                strcpy((char *)ptr + v10 - v16 - 1, v19);\n              }\n            }\n          }\n          sub_4158B3(stream);\n          if ( v10 )\n          {\n            *((_BYTE *)ptr + v10) = 0;\n            v7 = ptr;\n          }\n          else\n          {\n            v7 = &unk_419208;\n          }\n        }\n        else\n        {\n          close(fd);\n          v7 = &unk_419208;\n        }\n      }\n      else\n      {\n        v7 = &unk_419208;\n      }\n      free(dest);\n    }\n    else\n    {\n      v7 = &unk_419208;\n    }\n    qword_61DA88 = (__int64)v7;\n  }\n  return v7;\n}\n"], [4275105, "sub_413BA1", "const char *sub_413BA1()\n{\n  const char *s1; // [rsp+0h] [rbp-10h]\n  char *s2; // [rsp+8h] [rbp-8h]\n  char *s2a; // [rsp+8h] [rbp-8h]\n\n  s1 = nl_langinfo(14);\n  if ( !s1 )\n    s1 = (const char *)&unk_419208;\n  for ( s2 = (char *)sub_4136BB(); *s2; s2 = &s2a[strlen(s2a) + 1] )\n  {\n    if ( !strcmp(s1, s2) || *s2 == 42 && !s2[1] )\n    {\n      s1 = &s2[strlen(s2) + 1];\n      break;\n    }\n    s2a = &s2[strlen(s2) + 1];\n  }\n  if ( !*s1 )\n    s1 = \"ASCII\";\n  return s1;\n}\n"], [4275311, "sub_413C6F", "__int64 __fastcall sub_413C6F(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( *(_QWORD *)a2 == a2 + 24 )\n  {\n    memcpy((void *)(a1 + 24), (const void *)(a2 + 24), *(_QWORD *)(a2 + 8));\n    *(_QWORD *)a1 = a1 + 24;\n  }\n  else\n  {\n    *(_QWORD *)a1 = *(_QWORD *)a2;\n  }\n  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);\n  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);\n  result = *(unsigned __int8 *)(a1 + 16);\n  if ( (_BYTE)result )\n  {\n    result = a1;\n    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);\n  }\n  return result;\n}\n"], [4275472, "sub_413D10", "bool __fastcall sub_413D10(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_419220[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4275526, "sub_413D46", "__int64 __fastcall sub_413D46(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_413D10(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_4100D7(*(const void **)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4276006, "sub_413F26", "__int64 __fastcall sub_413F26(_BYTE *a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)\n{\n  void *v4; // rsp\n  unsigned __int64 v5; // rax\n  __int64 v8; // [rsp+8h] [rbp-68h] BYREF\n  __int64 v9; // [rsp+10h] [rbp-60h]\n  _BYTE *v10; // [rsp+18h] [rbp-58h]\n  char v11; // [rsp+27h] [rbp-49h]\n  unsigned __int64 i; // [rsp+28h] [rbp-48h]\n  __int64 v13; // [rsp+30h] [rbp-40h]\n  __int64 v14; // [rsp+38h] [rbp-38h]\n  _BYTE *v15; // [rsp+40h] [rbp-30h]\n  _BYTE *v16; // [rsp+48h] [rbp-28h]\n  unsigned __int64 v17; // [rsp+50h] [rbp-20h]\n  unsigned __int64 v18; // [rsp+58h] [rbp-18h]\n\n  v10 = a1;\n  v9 = a2;\n  HIBYTE(v8) = HIBYTE(a3);\n  v17 = a3;\n  if ( a3 > 0x1FFFFFFFFFFFFFFFLL )\n  {\n    v5 = 0LL;\n  }\n  else if ( 8 * v17 > 0xFAF )\n  {\n    v5 = sub_415BF0(8 * v17);\n  }\n  else\n  {\n    v4 = alloca(16 * ((8 * (v17 + 2) + 30) / 0x10));\n    v5 = 16 * (((unsigned __int64)&v8 + 7) >> 4) + 16;\n  }\n  v18 = v5;\n  if ( !v5 )\n    return 0LL;\n  *(_QWORD *)(v18 + 8) = 1LL;\n  v13 = 0LL;\n  for ( i = 2LL; i < v17; ++i )\n  {\n    v11 = *(_BYTE *)(i - 1 + v9);\n    while ( 1 )\n    {\n      if ( *(_BYTE *)(v9 + v13) == v11 )\n      {\n        ++v13;\n        *(_QWORD *)(8 * i + v18) = i - v13;\n        goto LABEL_15;\n      }\n      if ( !v13 )\n        break;\n      v13 -= *(_QWORD *)(8 * v13 + v18);\n    }\n    *(_QWORD *)(v18 + 8 * i) = i;\nLABEL_15:\n    ;\n  }\n  *a4 = 0LL;\n  v14 = 0LL;\n  v15 = v10;\n  v16 = v10;\n  while ( *v16 )\n  {\n    if ( *(_BYTE *)(v9 + v14) == *v16 )\n    {\n      ++v14;\n      ++v16;\n      if ( v14 == v17 )\n      {\n        *a4 = v15;\n        break;\n      }\n    }\n    else if ( v14 )\n    {\n      v15 += *(_QWORD *)(8 * v14 + v18);\n      v14 -= *(_QWORD *)(8 * v14 + v18);\n    }\n    else\n    {\n      ++v15;\n      ++v16;\n    }\n  }\n  sub_415CAB(v18);\n  return 1LL;\n}\n"], [4276592, "sub_414170", "__int64 __fastcall sub_414170(char *a1, void *a2, _QWORD *a3)\n{\n  void *v3; // rsp\n  unsigned __int64 v4; // rax\n  bool v7; // al\n  bool v8; // al\n  bool v9; // al\n  bool v10; // al\n  _QWORD *v14; // [rsp+8h] [rbp-108h] BYREF\n  void *v15; // [rsp+10h] [rbp-100h]\n  char *v16; // [rsp+18h] [rbp-F8h]\n  __int64 v17; // [rsp+20h] [rbp-F0h]\n  unsigned __int64 i; // [rsp+28h] [rbp-E8h]\n  __int64 v19; // [rsp+30h] [rbp-E0h]\n  __int64 v20; // [rsp+38h] [rbp-D8h]\n  __int64 v21; // [rsp+40h] [rbp-D0h]\n  unsigned __int64 v22; // [rsp+48h] [rbp-C8h]\n  unsigned __int64 v23; // [rsp+50h] [rbp-C0h]\n  unsigned __int64 v24; // [rsp+58h] [rbp-B8h]\n  unsigned __int64 v25; // [rsp+60h] [rbp-B0h]\n  unsigned __int64 v26; // [rsp+68h] [rbp-A8h]\n  char v27[4]; // [rsp+70h] [rbp-A0h] BYREF\n  int v28; // [rsp+74h] [rbp-9Ch] BYREF\n  char v29; // [rsp+7Ch] [rbp-94h]\n  char *v30; // [rsp+80h] [rbp-90h]\n  __int64 v31; // [rsp+88h] [rbp-88h]\n  char v32; // [rsp+90h] [rbp-80h]\n  int v33; // [rsp+94h] [rbp-7Ch]\n  char v34[4]; // [rsp+B0h] [rbp-60h] BYREF\n  int v35; // [rsp+B4h] [rbp-5Ch] BYREF\n  char v36; // [rsp+BCh] [rbp-54h]\n  void *s2; // [rsp+C0h] [rbp-50h] BYREF\n  __int64 v38; // [rsp+C8h] [rbp-48h]\n  char v39; // [rsp+D0h] [rbp-40h]\n  int v40; // [rsp+D4h] [rbp-3Ch]\n  unsigned __int64 v41; // [rsp+F8h] [rbp-18h]\n\n  v16 = a1;\n  v15 = a2;\n  v14 = a3;\n  v41 = __readfsqword(0x28u);\n  v22 = sub_415F8A(a2);\n  if ( v22 > 0x492492492492492LL )\n  {\n    v4 = 0LL;\n  }\n  else if ( 56 * v22 > 0xFAF )\n  {\n    v4 = sub_415BF0(56 * v22);\n  }\n  else\n  {\n    v3 = alloca(16 * ((56 * v22 + 46) / 0x10));\n    v4 = 16 * (((unsigned __int64)&v14 + 7) >> 4) + 16;\n  }\n  v23 = v4;\n  if ( !v4 )\n    return 0LL;\n  v24 = v23;\n  v25 = 48 * v22 + v23;\n  v17 = 0LL;\n  s2 = v15;\n  v34[0] = 0;\n  memset(&v35, 0, 8uLL);\n  v36 = 0;\n  while ( 1 )\n  {\n    sub_413D46((__int64)v34);\n    if ( v39 == 1 && !v40 )\n      break;\n    sub_413C6F(48 * v17 + v24, (__int64)&s2);\n    s2 = (char *)s2 + v38;\n    v36 = 0;\n    ++v17;\n  }\n  *(_QWORD *)(v25 + 8) = 1LL;\n  v19 = 0LL;\n  for ( i = 2LL; i < v22; ++i )\n  {\n    v26 = 48 * i - 48 + v24;\n    while ( 1 )\n    {\n      if ( *(_BYTE *)(v26 + 16) && *(_BYTE *)(48 * v19 + v24 + 16) )\n      {\n        v7 = *(_DWORD *)(v26 + 20) == *(_DWORD *)(48 * v19 + v24 + 20);\n      }\n      else\n      {\n        v8 = *(_QWORD *)(v26 + 8) == *(_QWORD *)(48 * v19 + v24 + 8)\n          && !memcmp(*(const void **)v26, *(const void **)(48 * v19 + v24), *(_QWORD *)(v26 + 8));\n        v7 = v8;\n      }\n      if ( v7 )\n      {\n        ++v19;\n        *(_QWORD *)(8 * i + v25) = i - v19;\n        goto LABEL_30;\n      }\n      if ( !v19 )\n        break;\n      v19 -= *(_QWORD *)(8 * v19 + v25);\n    }\n    *(_QWORD *)(v25 + 8 * i) = i;\nLABEL_30:\n    ;\n  }\n  *v14 = 0LL;\n  v20 = 0LL;\n  v30 = v16;\n  v27[0] = 0;\n  memset(&v28, 0, 8uLL);\n  v29 = 0;\n  s2 = v16;\n  v34[0] = 0;\n  memset(&v35, 0, 8uLL);\n  v36 = 0;\n  while ( 1 )\n  {\n    sub_413D46((__int64)v34);\n    if ( v39 == 1 && !v40 )\n      break;\n    if ( *(_BYTE *)(48 * v20 + v24 + 16) && v39 )\n    {\n      v9 = *(_DWORD *)(48 * v20 + v24 + 20) == v40;\n    }\n    else\n    {\n      v10 = *(_QWORD *)(48 * v20 + v24 + 8) == v38\n         && !memcmp(*(const void **)(48 * v20 + v24), s2, *(_QWORD *)(48 * v20 + v24 + 8));\n      v9 = v10;\n    }\n    if ( v9 )\n    {\n      ++v20;\n      s2 = (char *)s2 + v38;\n      v36 = 0;\n      if ( v20 == v22 )\n      {\n        *v14 = v30;\n        break;\n      }\n    }\n    else if ( v20 )\n    {\n      v21 = *(_QWORD *)(8 * v20 + v25);\n      v20 -= v21;\n      while ( v21 )\n      {\n        sub_413D46((__int64)v27);\n        if ( v32 == 1 && !v33 )\n          abort();\n        v30 += v31;\n        v29 = 0;\n        --v21;\n      }\n    }\n    else\n    {\n      sub_413D46((__int64)v27);\n      if ( v32 == 1 && !v33 )\n        abort();\n      v30 += v31;\n      v29 = 0;\n      s2 = (char *)s2 + v38;\n      v36 = 0;\n    }\n  }\n  sub_415CAB(v23);\n  return 1LL;\n}\n"], [4278455, "sub_4148B7", "_BYTE *__fastcall sub_4148B7(_BYTE *a1, char *a2)\n{\n  _BYTE *result; // rax\n  bool v7; // al\n  bool v8; // al\n  bool v12; // al\n  bool v13; // al\n  size_t v14; // rax\n  unsigned __int64 v15; // rax\n  _BYTE *v16; // [rsp+8h] [rbp-1C8h]\n  char v17; // [rsp+13h] [rbp-1BDh]\n  char v18; // [rsp+14h] [rbp-1BCh]\n  char v19; // [rsp+16h] [rbp-1BAh]\n  __int64 v20; // [rsp+18h] [rbp-1B8h] BYREF\n  unsigned __int64 v21; // [rsp+20h] [rbp-1B0h]\n  unsigned __int64 v22; // [rsp+28h] [rbp-1A8h]\n  unsigned __int64 v23; // [rsp+30h] [rbp-1A0h]\n  unsigned __int64 j; // [rsp+38h] [rbp-198h]\n  unsigned __int64 v25; // [rsp+40h] [rbp-190h]\n  unsigned __int64 v26; // [rsp+48h] [rbp-188h]\n  unsigned __int64 v27; // [rsp+50h] [rbp-180h]\n  char *string; // [rsp+58h] [rbp-178h]\n  _BYTE *v29; // [rsp+60h] [rbp-170h]\n  _BYTE *i; // [rsp+68h] [rbp-168h]\n  char v31[4]; // [rsp+70h] [rbp-160h] BYREF\n  _BYTE v32[12]; // [rsp+74h] [rbp-15Ch] BYREF\n  void *s2; // [rsp+80h] [rbp-150h]\n  __int64 v34; // [rsp+88h] [rbp-148h]\n  char v35; // [rsp+90h] [rbp-140h]\n  int v36; // [rsp+94h] [rbp-13Ch]\n  char v37[4]; // [rsp+B0h] [rbp-120h] BYREF\n  int v38; // [rsp+B4h] [rbp-11Ch] BYREF\n  char v39; // [rsp+BCh] [rbp-114h]\n  char *v40; // [rsp+C0h] [rbp-110h]\n  __int64 v41; // [rsp+C8h] [rbp-108h]\n  char v42; // [rsp+D0h] [rbp-100h]\n  int v43; // [rsp+D4h] [rbp-FCh]\n  __int64 v44; // [rsp+F0h] [rbp-E0h] BYREF\n  __int64 v45; // [rsp+F8h] [rbp-D8h]\n  void *s1; // [rsp+100h] [rbp-D0h]\n  size_t n; // [rsp+108h] [rbp-C8h]\n  __int64 v48; // [rsp+110h] [rbp-C0h]\n  __int64 v49; // [rsp+118h] [rbp-B8h]\n  __int64 v50; // [rsp+120h] [rbp-B0h]\n  __int64 v51; // [rsp+128h] [rbp-A8h]\n  __int64 v52; // [rsp+130h] [rbp-A0h] BYREF\n  __int64 v53; // [rsp+138h] [rbp-98h]\n  void *v54; // [rsp+140h] [rbp-90h]\n  size_t v55; // [rsp+148h] [rbp-88h]\n  __int64 v56; // [rsp+150h] [rbp-80h]\n  __int64 v57; // [rsp+158h] [rbp-78h]\n  __int64 v58; // [rsp+160h] [rbp-70h]\n  __int64 v59; // [rsp+168h] [rbp-68h]\n  char v60[4]; // [rsp+170h] [rbp-60h] BYREF\n  int v61; // [rsp+174h] [rbp-5Ch] BYREF\n  char k; // [rsp+17Ch] [rbp-54h]\n  void *v63; // [rsp+180h] [rbp-50h]\n  __int64 v64; // [rsp+188h] [rbp-48h]\n  char v65; // [rsp+190h] [rbp-40h]\n  int v66; // [rsp+194h] [rbp-3Ch]\n  unsigned __int64 v67; // [rsp+1B8h] [rbp-18h]\n\n  v16 = a1;\n  v67 = __readfsqword(0x28u);\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( *a2 )\n    {\n      v18 = 1;\n      v25 = 0LL;\n      v26 = 0LL;\n      v27 = 0LL;\n      string = a2;\n      v19 = *a2;\n      while ( 1 )\n      {\n        if ( !*v16 )\n          return 0LL;\n        if ( v18 && v25 > 9 && 5 * v25 <= v26 )\n        {\n          if ( string )\n          {\n            v14 = strnlen(string, v26 - v27);\n            string += v14;\n            if ( !*string )\n              string = 0LL;\n            v27 = v26;\n          }\n          if ( !string )\n          {\n            v15 = strlen(a2);\n            if ( (unsigned __int8)sub_413F26(v16, (__int64)a2, v15, &v20) )\n              return (_BYTE *)v20;\n            v18 = 0;\n          }\n        }\n        ++v25;\n        ++v26;\n        if ( *v16 == v19 )\n          break;\nLABEL_96:\n        ++v16;\n      }\n      v29 = v16 + 1;\n      for ( i = a2 + 1; ; ++i )\n      {\n        if ( !*i )\n          return v16;\n        if ( !*v29 )\n          break;\n        ++v26;\n        if ( *v29 != *i )\n          goto LABEL_96;\n        ++v29;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      result = a1;\n    }\n  }\n  else\n  {\n    s2 = a2;\n    v31[0] = 0;\n    memset(v32, 0, 8uLL);\n    v32[8] = 0;\n    sub_413D46((__int64)v31);\n    if ( v35 != 1 || v36 )\n    {\n      v17 = 1;\n      v21 = 0LL;\n      v22 = 0LL;\n      v23 = 0LL;\n      v40 = a2;\n      v37[0] = 0;\n      memset(&v38, 0, 8uLL);\n      v39 = 0;\n      s1 = a1;\n      LOBYTE(v44) = 0;\n      memset((char *)&v44 + 4, 0, sizeof(__int64));\n      for ( BYTE4(v45) = 0; ; BYTE4(v45) = 0 )\n      {\n        sub_413D46((__int64)&v44);\n        if ( (unsigned __int8)v48 == 1 && !HIDWORD(v48) )\n          return 0LL;\n        if ( v17 && v21 > 9 && 5 * v21 <= v22 )\n        {\n          for ( j = v22 - v23; j; --j )\n          {\n            sub_413D46((__int64)v37);\n            if ( v42 == 1 && !v43 )\n              break;\n            v40 += v41;\n            v39 = 0;\n          }\n          v23 = v22;\n          sub_413D46((__int64)v37);\n          if ( v42 == 1 && !v43 )\n          {\n            if ( (unsigned __int8)sub_414170(a1, a2, &v20) )\n              return (_BYTE *)v20;\n            v17 = 0;\n          }\n        }\n        ++v21;\n        ++v22;\n        if ( (_BYTE)v48 && v35 )\n        {\n          v7 = HIDWORD(v48) == v36;\n        }\n        else\n        {\n          v8 = n == v34 && !memcmp(s1, s2, n);\n          v7 = v8;\n        }\n        if ( v7 )\n          break;\nLABEL_71:\n        s1 = (char *)s1 + n;\n      }\n      v52 = v44;\n      v53 = v45;\n      v55 = n;\n      v56 = v48;\n      v57 = v49;\n      v58 = v50;\n      v59 = v51;\n      v54 = (char *)s1 + n;\n      BYTE4(v53) = 0;\n      v63 = a2;\n      v60[0] = 0;\n      memset(&v61, 0, 8uLL);\n      k = 0;\n      sub_413D46((__int64)v60);\n      if ( v65 == 1 && !v66 )\n        abort();\n      v63 = (char *)v63 + v64;\n      for ( k = 0; ; k = 0 )\n      {\n        sub_413D46((__int64)v60);\n        if ( v65 == 1 && !v66 )\n          return s1;\n        sub_413D46((__int64)&v52);\n        if ( (unsigned __int8)v56 == 1 && !HIDWORD(v56) )\n          break;\n        ++v22;\n        if ( (_BYTE)v56 && v65 )\n        {\n          v12 = HIDWORD(v56) != v66;\n        }\n        else\n        {\n          v13 = v55 != v64 || memcmp(v54, v63, v55);\n          v12 = v13;\n        }\n        if ( v12 )\n          goto LABEL_71;\n        v54 = (char *)v54 + v55;\n        BYTE4(v53) = 0;\n        v63 = (char *)v63 + v64;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      result = a1;\n    }\n  }\n  return result;\n}\n"], [4280471, "sub_415097", "__int64 __fastcall sub_415097(char *a1, size_t a2, void *a3, void **a4, size_t *a5)\n{\n  int v9; // [rsp+34h] [rbp-107Ch]\n  char *inbuf; // [rsp+38h] [rbp-1078h] BYREF\n  size_t inbytesleft; // [rsp+40h] [rbp-1070h] BYREF\n  char *outbuf; // [rsp+48h] [rbp-1068h] BYREF\n  size_t outbytesleft; // [rsp+50h] [rbp-1060h] BYREF\n  void *ptr; // [rsp+58h] [rbp-1058h]\n  size_t v15; // [rsp+60h] [rbp-1050h]\n  size_t v16; // [rsp+68h] [rbp-1048h]\n  size_t v17; // [rsp+70h] [rbp-1040h]\n  size_t size; // [rsp+78h] [rbp-1038h]\n  size_t v19; // [rsp+80h] [rbp-1030h]\n  size_t v20; // [rsp+88h] [rbp-1028h]\n  char v21[4104]; // [rsp+90h] [rbp-1020h] BYREF\n  unsigned __int64 v22; // [rsp+1098h] [rbp-18h]\n\n  v22 = __readfsqword(0x28u);\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  v15 = 0LL;\n  inbuf = a1;\n  inbytesleft = a2;\n  while ( inbytesleft )\n  {\n    outbuf = v21;\n    outbytesleft = 4096LL;\n    v16 = iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n    if ( v16 == -1LL && *__errno_location() != 7 )\n    {\n      if ( *__errno_location() != 22 )\n        return 0xFFFFFFFFLL;\n      break;\n    }\n    v15 += outbuf - v21;\n  }\n  outbuf = v21;\n  outbytesleft = 4096LL;\n  v17 = iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft);\n  if ( v17 == -1LL )\n    return 0xFFFFFFFFLL;\n  v15 += outbuf - v21;\n  size = v15;\n  if ( !v15 )\n  {\n    *a5 = 0LL;\n    return 0LL;\n  }\n  if ( *a4 && *a5 >= size )\n  {\n    ptr = *a4;\n  }\n  else\n  {\n    ptr = malloc(size);\n    if ( !ptr )\n    {\n      *__errno_location() = 12;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  inbytesleft = a2;\n  outbuf = (char *)ptr;\n  outbytesleft = size;\n  while ( inbytesleft )\n  {\n    v19 = iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n    if ( v19 == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_26;\n      break;\n    }\n  }\n  v20 = iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft);\n  if ( v20 != -1LL )\n  {\n    if ( outbytesleft )\n      abort();\n    *a4 = ptr;\n    *a5 = size;\n    return 0LL;\n  }\nLABEL_26:\n  if ( *a4 != ptr )\n  {\n    v9 = *__errno_location();\n    free(ptr);\n    *__errno_location() = v9;\n  }\n  return 0xFFFFFFFFLL;\n}\n"], [4281467, "sub_41547B", "void *__fastcall sub_41547B(char *a1, void *a2)\n{\n  void *result; // rax\n  char *v3; // rax\n  int v4; // [rsp+14h] [rbp-8Ch]\n  char *inbuf; // [rsp+18h] [rbp-88h] BYREF\n  size_t inbytesleft; // [rsp+20h] [rbp-80h] BYREF\n  char *outbuf; // [rsp+28h] [rbp-78h] BYREF\n  size_t outbytesleft; // [rsp+30h] [rbp-70h] BYREF\n  void *ptr; // [rsp+38h] [rbp-68h]\n  size_t size; // [rsp+40h] [rbp-60h]\n  __int64 v11; // [rsp+48h] [rbp-58h]\n  size_t v12; // [rsp+50h] [rbp-50h]\n  __int64 v13; // [rsp+58h] [rbp-48h]\n  size_t v14; // [rsp+60h] [rbp-40h]\n  char *v15; // [rsp+68h] [rbp-38h]\n  size_t v16; // [rsp+70h] [rbp-30h]\n  __int64 v17; // [rsp+78h] [rbp-28h]\n  size_t v18; // [rsp+80h] [rbp-20h]\n  char *v19; // [rsp+88h] [rbp-18h]\n  size_t v20; // [rsp+90h] [rbp-10h]\n  void *v21; // [rsp+98h] [rbp-8h]\n\n  inbuf = a1;\n  inbytesleft = strlen(a1);\n  size = inbytesleft;\n  v11 = 0xFFFFFFFFLL;\n  if ( inbytesleft <= 0xFFFFFFF )\n    size *= 16LL;\n  ptr = malloc(++size);\n  if ( ptr )\n  {\n    iconv(a2, 0LL, 0LL, 0LL, 0LL);\n    outbuf = (char *)ptr;\n    for ( outbytesleft = size - 1; ; outbytesleft = v14 - v13 - 1 )\n    {\n      v12 = iconv(a2, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n      if ( v12 != -1LL || *__errno_location() == 22 )\n        break;\n      if ( *__errno_location() != 7 )\n        goto LABEL_23;\n      v13 = outbuf - (_BYTE *)ptr;\n      v14 = 2 * size;\n      if ( 2 * size <= size || (v15 = (char *)realloc(ptr, v14)) == 0LL )\n      {\nLABEL_18:\n        *__errno_location() = 12;\nLABEL_23:\n        v4 = *__errno_location();\n        free(ptr);\n        *__errno_location() = v4;\n        return 0LL;\n      }\n      ptr = v15;\n      size = v14;\n      outbuf = &v15[v13];\n    }\n    while ( 1 )\n    {\n      v16 = iconv(a2, 0LL, 0LL, &outbuf, &outbytesleft);\n      if ( v16 != -1LL )\n        break;\n      if ( *__errno_location() != 7 )\n        goto LABEL_23;\n      v17 = outbuf - (_BYTE *)ptr;\n      v18 = 2 * size;\n      if ( 2 * size <= size )\n        goto LABEL_18;\n      v19 = (char *)realloc(ptr, v18);\n      if ( !v19 )\n        goto LABEL_18;\n      ptr = v19;\n      size = v18;\n      outbuf = &v19[v17];\n      outbytesleft = v18 - v17 - 1;\n    }\n    v3 = outbuf++;\n    *v3 = 0;\n    v20 = outbuf - (_BYTE *)ptr;\n    if ( outbuf - (_BYTE *)ptr < size )\n    {\n      v21 = realloc(ptr, v20);\n      if ( v21 )\n        ptr = v21;\n    }\n    result = ptr;\n  }\n  else\n  {\n    *__errno_location() = 12;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4282288, "sub_4157B0", "char *__fastcall sub_4157B0(char *a1, char *a2, char *a3)\n{\n  char *result; // rax\n  int v5; // [rsp+20h] [rbp-20h]\n  int v6; // [rsp+24h] [rbp-1Ch]\n  iconv_t cd; // [rsp+28h] [rbp-18h]\n  void *ptr; // [rsp+30h] [rbp-10h]\n  char *v9; // [rsp+38h] [rbp-8h]\n\n  if ( *a1 && (unsigned int)sub_413166((unsigned __int8 *)a2, (unsigned __int8 *)a3) )\n  {\n    cd = iconv_open(a3, a2);\n    if ( cd == (iconv_t)-1LL )\n      return 0LL;\n    ptr = sub_41547B(a1, cd);\n    if ( ptr )\n    {\n      if ( iconv_close(cd) < 0 )\n      {\n        v6 = *__errno_location();\n        free(ptr);\n        *__errno_location() = v6;\n        return 0LL;\n      }\n    }\n    else\n    {\n      v5 = *__errno_location();\n      iconv_close(cd);\n      *__errno_location() = v5;\n    }\n    result = (char *)ptr;\n  }\n  else\n  {\n    v9 = strdup(a1);\n    if ( !v9 )\n      *__errno_location() = 12;\n    result = v9;\n  }\n  return result;\n}\n"], [4282547, "sub_4158B3", "int __fastcall sub_4158B3(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( sub_412D9B(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4282728, "sub_415968", "_BOOL8 __fastcall sub_415968(int a1)\n{\n  return a1 >= 0 && a1 <= 127;\n}\n"], [4282764, "sub_41598C", "_BOOL8 __fastcall sub_41598C(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4282822, "sub_4159C6", "_BOOL8 __fastcall sub_4159C6(int a1)\n{\n  return (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4282868, "sub_4159F4", "_BOOL8 __fastcall sub_4159F4(int a1)\n{\n  return a1 == 32 || a1 == 9;\n}\n"], [4282904, "sub_415A18", "_BOOL8 __fastcall sub_415A18(int a1)\n{\n  return (a1 & 0xFFFFFFE0) == 0 || a1 == 127;\n}\n"], [4282944, "sub_415A40", "_BOOL8 __fastcall sub_415A40(int a1)\n{\n  return a1 > 47 && a1 <= 57;\n}\n"], [4282980, "sub_415A64", "_BOOL8 __fastcall sub_415A64(int a1)\n{\n  return a1 > 96 && a1 <= 122;\n}\n"], [4283016, "sub_415A88", "_BOOL8 __fastcall sub_415A88(int a1)\n{\n  return a1 > 32 && a1 <= 126;\n}\n"], [4283052, "sub_415AAC", "_BOOL8 __fastcall sub_415AAC(int a1)\n{\n  return a1 > 31 && a1 <= 126;\n}\n"], [4283088, "sub_415AD0", "_BOOL8 __fastcall sub_415AD0(int a1)\n{\n  return a1 > 32 && a1 <= 126 && (a1 <= 47 || a1 > 57) && ((int)(a1 & 0xFFFFFFDF) <= 64 || (int)(a1 & 0xFFFFFFDF) > 90);\n}\n"], [4283158, "sub_415B16", "_BOOL8 __fastcall sub_415B16(int a1)\n{\n  return a1 == 32 || a1 == 9 || a1 == 10 || a1 == 11 || a1 == 12 || a1 == 13;\n}\n"], [4283218, "sub_415B52", "_BOOL8 __fastcall sub_415B52(int a1)\n{\n  return a1 > 64 && a1 <= 90;\n}\n"], [4283254, "sub_415B76", "_BOOL8 __fastcall sub_415B76(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 70;\n}\n"], [4283312, "sub_415BB0", "__int64 __fastcall sub_415BB0(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 64 || a1 > 90 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 + 32);\n  return result;\n}\n"], [4283344, "sub_415BD0", "__int64 __fastcall sub_415BD0(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 96 || a1 > 122 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 - 32);\n  return result;\n}\n"], [4283376, "sub_415BF0", "unsigned __int64 __fastcall sub_415BF0(unsigned __int64 a1)\n{\n  void *v2; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+20h] [rbp-10h]\n\n  if ( a1 + 16 < a1 )\n    return 0LL;\n  v2 = malloc(a1 + 16);\n  if ( !v2 )\n    return 0LL;\n  v3 = (unsigned __int64)v2 + 16;\n  *(_DWORD *)(v3 - 4) = 336984906;\n  *(_QWORD *)(v3 - 16) = qword_61DAA0[v3 % 0x101];\n  qword_61DAA0[v3 % 0x101] = v3;\n  return v3;\n}\n"], [4283563, "sub_415CAB", "void __fastcall sub_415CAB(unsigned __int64 a1)\n{\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n\n  if ( a1 && *(_DWORD *)(a1 - 4) == 336984906 )\n  {\n    for ( i = (_QWORD *)(8 * (a1 % 0x101) + 6412960); *i; i = (_QWORD *)(*i - 16LL) )\n    {\n      if ( *i == a1 )\n      {\n        *i = *(_QWORD *)(a1 - 16);\n        free((void *)(a1 - 16));\n        return;\n      }\n    }\n  }\n}\n"], [4283764, "sub_415D74", "bool __fastcall sub_415D74(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_419220[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4283818, "sub_415DAA", "__int64 __fastcall sub_415DAA(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_415D74(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_4100D7(*(const void **)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4284298, "sub_415F8A", "size_t __fastcall sub_415F8A(const char *a1)\n{\n  __int64 v3; // [rsp+18h] [rbp-58h]\n  char v4[4]; // [rsp+20h] [rbp-50h] BYREF\n  int v5; // [rsp+24h] [rbp-4Ch] BYREF\n  char i; // [rsp+2Ch] [rbp-44h]\n  const char *v7; // [rsp+30h] [rbp-40h]\n  __int64 v8; // [rsp+38h] [rbp-38h]\n  char v9; // [rsp+40h] [rbp-30h]\n  int v10; // [rsp+44h] [rbp-2Ch]\n  unsigned __int64 v11; // [rsp+68h] [rbp-8h]\n\n  v11 = __readfsqword(0x28u);\n  if ( __ctype_get_mb_cur_max() <= 1 )\n    return strlen(a1);\n  v3 = 0LL;\n  v7 = a1;\n  v4[0] = 0;\n  memset(&v5, 0, 8uLL);\n  for ( i = 0; ; i = 0 )\n  {\n    sub_415DAA((__int64)v4);\n    if ( v9 == 1 && !v10 )\n      break;\n    ++v3;\n    v7 += v8;\n  }\n  return v3;\n}\n"], [4284512, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_61CE18 - off_61CE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_61CE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4284624, "fini", "void fini(void)\n{\n  ;\n}\n"], [4284640, "sub_4160E0", "int __fastcall sub_4160E0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_61D378 )\n    v1 = (void *)qword_61D378;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4284672, "sub_416100", "int __fastcall sub_416100(char *filename, struct stat *stat_buf)\n{\n  return __xstat(1, filename, stat_buf);\n}\n"], [4284688, "sub_416110", "int __fastcall sub_416110(int fildes, struct stat *stat_buf)\n{\n  return __fxstat(1, fildes, stat_buf);\n}\n"], [4284704, "sub_416120", "int __fastcall sub_416120(char *filename, struct stat *stat_buf)\n{\n  return __lxstat(1, filename, stat_buf);\n}\n"], [4284720, "sub_416130", "int __fastcall sub_416130(char *path, __mode_t mode, __dev_t a3)\n{\n  __dev_t dev[2]; // [rsp+8h] [rbp-10h] BYREF\n\n  dev[0] = a3;\n  return __xmknod(0, path, mode, dev);\n}\n"], [4284752, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]