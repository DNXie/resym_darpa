[[4201288, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4201328, "sub_401B70", "__int64 sub_401B70()\n{\n  return qword_618010();\n}\n"], [4201344, ".getenv", "// attributes: thunk\nchar *getenv(const char *name)\n{\n  return getenv(name);\n}\n"], [4201360, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4201376, ".endmntent", "// attributes: thunk\nint endmntent(FILE *stream)\n{\n  return endmntent(stream);\n}\n"], [4201392, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4201408, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4201424, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4201440, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4201456, ".strcpy", "// attributes: thunk\nchar *strcpy(char *dest, const char *src)\n{\n  return strcpy(dest, src);\n}\n"], [4201472, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4201488, ".iconv", "// attributes: thunk\nsize_t iconv(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)\n{\n  return iconv(cd, inbuf, inbytesleft, outbuf, outbytesleft);\n}\n"], [4201504, ".getc_unlocked", "// attributes: thunk\nint getc_unlocked(FILE *stream)\n{\n  return getc_unlocked(stream);\n}\n"], [4201520, ".iswcntrl", "// attributes: thunk\nint iswcntrl(wint_t wc)\n{\n  return iswcntrl(wc);\n}\n"], [4201536, ".wcswidth", "// attributes: thunk\nint wcswidth(const wchar_t *s, size_t n)\n{\n  return wcswidth(s, n);\n}\n"], [4201552, ".localeconv", "// attributes: thunk\nstruct lconv *localeconv(void)\n{\n  return localeconv();\n}\n"], [4201568, ".mbstowcs", "// attributes: thunk\nsize_t mbstowcs(wchar_t *pwcs, const char *s, size_t n)\n{\n  return mbstowcs(pwcs, s, n);\n}\n"], [4201584, ".fcntl", "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\n  return fcntl(fd, cmd);\n}\n"], [4201600, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4201616, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4201632, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4201648, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4201664, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4201680, ".__lxstat", "// attributes: thunk\nint __lxstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _lxstat(ver, filename, stat_buf);\n}\n"], [4201696, ".openat", "// attributes: thunk\nint openat(int fd, const char *file, int oflag, ...)\n{\n  return openat(fd, file, oflag);\n}\n"], [4201712, ".chdir", "// attributes: thunk\nint chdir(const char *path)\n{\n  return chdir(path);\n}\n"], [4201728, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4201744, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4201760, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4201776, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4201792, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4201808, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4201824, ".__fxstatat", "// attributes: thunk\nint __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)\n{\n  return _fxstatat(ver, fildes, filename, stat_buf, flag);\n}\n"], [4201840, ".snprintf", "// attributes: thunk\nint snprintf(char *s, size_t maxlen, const char *format, ...)\n{\n  return snprintf(s, maxlen, format);\n}\n"], [4201856, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4201872, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4201888, ".__assert_fail", "// attributes: thunk\nvoid __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\n{\n  _assert_fail(assertion, file, line, function);\n}\n"], [4201904, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4201920, ".fscanf", "// attributes: thunk\nint fscanf(FILE *stream, const char *format, ...)\n{\n  return fscanf(stream, format);\n}\n"], [4201936, ".strnlen", "// attributes: thunk\nsize_t strnlen(const char *string, size_t maxlen)\n{\n  return strnlen(string, maxlen);\n}\n"], [4201952, ".getcwd", "// attributes: thunk\nchar *getcwd(char *buf, size_t size)\n{\n  return getcwd(buf, size);\n}\n"], [4201968, ".canonicalize_file_name", "// attributes: thunk\nchar *canonicalize_file_name(const char *name)\n{\n  return canonicalize_file_name(name);\n}\n"], [4201984, ".close", "// attributes: thunk\nint close(int fd)\n{\n  return close(fd);\n}\n"], [4202000, ".rewinddir", "// attributes: thunk\nvoid rewinddir(DIR *dirp)\n{\n  rewinddir(dirp);\n}\n"], [4202016, ".strspn", "// attributes: thunk\nsize_t strspn(const char *s, const char *accept)\n{\n  return strspn(s, accept);\n}\n"], [4202032, ".closedir", "// attributes: thunk\nint closedir(DIR *dirp)\n{\n  return closedir(dirp);\n}\n"], [4202048, ".memchr", "// attributes: thunk\nvoid *memchr(const void *s, int c, size_t n)\n{\n  return memchr(s, c, n);\n}\n"], [4202064, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4202080, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4202096, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4202112, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4202128, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4202144, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4202160, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4202176, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4202192, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4202208, ".putchar_unlocked", "// attributes: thunk\nint putchar_unlocked(int c)\n{\n  return putchar_unlocked(c);\n}\n"], [4202224, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4202240, ".statfs", "// attributes: thunk\nint statfs(const char *file, struct statfs *buf)\n{\n  return statfs(file, buf);\n}\n"], [4202256, ".__xstat", "// attributes: thunk\nint __xstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _xstat(ver, filename, stat_buf);\n}\n"], [4202272, ".readdir", "// attributes: thunk\nstruct dirent *readdir(DIR *dirp)\n{\n  return readdir(dirp);\n}\n"], [4202288, ".sync", "// attributes: thunk\nvoid sync(void)\n{\n  sync();\n}\n"], [4202304, ".wcwidth", "// attributes: thunk\nint wcwidth(wchar_t c)\n{\n  return wcwidth(c);\n}\n"], [4202320, ".putc_unlocked", "// attributes: thunk\nint putc_unlocked(int c, FILE *stream)\n{\n  return putc_unlocked(c, stream);\n}\n"], [4202336, ".iswalnum", "// attributes: thunk\nint iswalnum(wint_t wc)\n{\n  return iswalnum(wc);\n}\n"], [4202352, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4202368, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4202384, ".getmntent", "// attributes: thunk\nstruct mntent *getmntent(FILE *stream)\n{\n  return getmntent(stream);\n}\n"], [4202400, ".setmntent", "// attributes: thunk\nFILE *setmntent(const char *file, const char *mode)\n{\n  return setmntent(file, mode);\n}\n"], [4202416, ".nl_langinfo", "// attributes: thunk\nchar *nl_langinfo(nl_item item)\n{\n  return nl_langinfo(item);\n}\n"], [4202432, ".ungetc", "// attributes: thunk\nint ungetc(int c, FILE *stream)\n{\n  return ungetc(c, stream);\n}\n"], [4202448, ".__fxstat", "// attributes: thunk\nint __fxstat(int ver, int fildes, struct stat *stat_buf)\n{\n  return _fxstat(ver, fildes, stat_buf);\n}\n"], [4202464, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4202480, ".fchdir", "// attributes: thunk\nint fchdir(int fd)\n{\n  return fchdir(fd);\n}\n"], [4202496, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4202512, ".fdopen", "// attributes: thunk\nFILE *fdopen(int fd, const char *modes)\n{\n  return fdopen(fd, modes);\n}\n"], [4202528, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4202544, ".iconv_close", "// attributes: thunk\nint iconv_close(iconv_t cd)\n{\n  return iconv_close(cd);\n}\n"], [4202560, ".iswspace", "// attributes: thunk\nint iswspace(wint_t wc)\n{\n  return iswspace(wc);\n}\n"], [4202576, ".mempcpy", "// attributes: thunk\nvoid *mempcpy(void *dest, const void *src, size_t n)\n{\n  return mempcpy(dest, src, n);\n}\n"], [4202592, ".memmove", "// attributes: thunk\nvoid *memmove(void *dest, const void *src, size_t n)\n{\n  return memmove(dest, src, n);\n}\n"], [4202608, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4202624, ".memrchr", "// attributes: thunk\nvoid *memrchr(const void *s, int c, size_t n)\n{\n  return memrchr(s, c, n);\n}\n"], [4202640, ".open", "// attributes: thunk\nint open(const char *file, int oflag, ...)\n{\n  return open(file, oflag);\n}\n"], [4202656, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4202672, ".strtoumax", "// attributes: thunk\nuintmax_t strtoumax(const char *nptr, char **endptr, int base)\n{\n  return strtoumax(nptr, endptr, base);\n}\n"], [4202688, ".fdopendir", "// attributes: thunk\nDIR *fdopendir(int fd)\n{\n  return fdopendir(fd);\n}\n"], [4202704, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4202720, ".wcstombs", "// attributes: thunk\nsize_t wcstombs(char *s, const wchar_t *pwcs, size_t n)\n{\n  return wcstombs(s, pwcs, n);\n}\n"], [4202736, ".sprintf", "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\n  return sprintf(s, format);\n}\n"], [4202752, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4202768, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4202784, ".strdup", "// attributes: thunk\nchar *strdup(const char *s)\n{\n  return strdup(s);\n}\n"], [4202800, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4202816, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4202832, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4202848, ".iconv_open", "// attributes: thunk\niconv_t iconv_open(const char *tocode, const char *fromcode)\n{\n  return iconv_open(tocode, fromcode);\n}\n"], [4202864, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4202912, "sub_4021A0", "__int64 sub_4021A0()\n{\n  __int64 result; // rax\n\n  result = 6390983LL - (_QWORD)&program_invocation_short_name;\n  if ( (unsigned __int64)(6390983LL - (_QWORD)&program_invocation_short_name) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4202960, "sub_4021D0", "__int64 sub_4021D0()\n{\n  return 0LL;\n}\n"], [4203024, "sub_402210", "__int64 sub_402210()\n{\n  __int64 result; // rax\n\n  if ( !byte_618518 )\n  {\n    result = sub_4021A0();\n    byte_618518 = 1;\n  }\n  return result;\n}\n"], [4203056, "sub_402230", "__int64 sub_402230()\n{\n  return sub_4021D0();\n}\n"], [4203101, "sub_40225D", "int sub_40225D()\n{\n  FILE *v0; // rbx\n  char *v1; // rax\n\n  v0 = stdout;\n  v1 = gettext(\n         \"\\n\"\n         \"SIZE may be (or may be an integer optionally followed by) one of following:\\n\"\n         \"KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.\\n\");\n  return fputs_unlocked(v1, v0);\n}\n"], [4203145, "sub_402289", "int __fastcall sub_402289(__int64 a1)\n{\n  char *v1; // rax\n\n  v1 = gettext(\n         \"\\n\"\n         \"Display values are in units of the first available SIZE from --block-size,\\n\"\n         \"and the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.\\n\"\n         \"Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).\\n\");\n  return printf(v1, a1);\n}\n"], [4203189, "sub_4022B5", "int sub_4022B5()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_404CF9(qword_6185C0);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_404CF9(qword_6185C0);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_404CF9(qword_6185C0);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4203455, "sub_4023BF", "__int64 sub_4023BF()\n{\n  __int64 *v0; // rbx\n  __int64 result; // rax\n\n  qword_6185A0 = sub_409761(qword_6185A0, ++qword_6185A8, 8LL);\n  v0 = (__int64 *)(qword_6185A0 + 8 * qword_6185A8 - 8);\n  result = sub_409723(7LL, 8LL);\n  *v0 = result;\n  return result;\n}\n"], [4203570, "sub_402432", "__int64 sub_402432()\n{\n  char *v0; // rax\n  __int64 result; // rax\n  __int64 v2; // [rsp+0h] [rbp-20h] BYREF\n  unsigned __int64 j; // [rsp+8h] [rbp-18h]\n  unsigned __int64 i; // [rsp+10h] [rbp-10h]\n  char *s; // [rsp+18h] [rbp-8h]\n\n  for ( i = 0LL; ; ++i )\n  {\n    result = qword_6185A8;\n    if ( i >= qword_6185A8 )\n      break;\n    for ( j = 0LL; j <= 6; ++j )\n    {\n      v2 = qword_618440[j];\n      s = *(char **)(8 * j + *(_QWORD *)(8 * i + qword_6185A0));\n      if ( s )\n      {\n        if ( j )\n          putchar_unlocked(32);\n        if ( j == 6 )\n        {\n          fputs_unlocked(s, stdout);\n        }\n        else\n        {\n          s = (char *)sub_40617E(s, &v2, (unsigned int)dword_618420[j], 0LL);\n          if ( s )\n            v0 = s;\n          else\n            v0 = *(char **)(8 * j + *(_QWORD *)(8 * i + qword_6185A0));\n          fputs_unlocked(v0, stdout);\n          free(s);\n        }\n      }\n    }\n    putchar_unlocked(10);\n  }\n  return result;\n}\n"], [4203882, "sub_40256A", "unsigned __int64 sub_40256A()\n{\n  int v0; // eax\n  int v1; // er8\n  int v2; // er9\n  int v3; // er8\n  int v4; // er9\n  unsigned __int64 v5; // rbx\n  __int64 v6; // rax\n  char v8; // [rsp+0h] [rbp-2F0h]\n  bool v9; // [rsp+2h] [rbp-2EEh]\n  bool v10; // [rsp+3h] [rbp-2EDh]\n  unsigned int v11; // [rsp+4h] [rbp-2ECh]\n  char *v12; // [rsp+8h] [rbp-2E8h] BYREF\n  unsigned __int64 i; // [rsp+10h] [rbp-2E0h]\n  char *s; // [rsp+18h] [rbp-2D8h]\n  unsigned __int64 v15; // [rsp+20h] [rbp-2D0h]\n  unsigned __int64 v16; // [rsp+28h] [rbp-2C8h]\n  __int64 v17; // [rsp+30h] [rbp-2C0h]\n  __int64 v18; // [rsp+38h] [rbp-2B8h]\n  char v19[664]; // [rsp+40h] [rbp-2B0h] BYREF\n  unsigned __int64 v20; // [rsp+2D8h] [rbp-18h]\n\n  v20 = __readfsqword(0x28u);\n  sub_4023BF();\n  for ( i = 0LL; i <= 6; ++i )\n  {\n    if ( i == 1 && byte_618550 != 1 )\n    {\n      *(_QWORD *)(8 * i + *(_QWORD *)(8 * qword_6185A8 - 8 + qword_6185A0)) = 0LL;\n    }\n    else\n    {\n      v12 = 0LL;\n      s = gettext((&(&off_618340)[4 * i])[dword_618598]);\n      if ( !s )\n        s = gettext((&off_618340)[4 * i]);\n      if ( dword_618598 || i != 2 )\n      {\n        if ( dword_618598 == 3 && i == 2 )\n        {\n          v18 = sub_405C59(qword_618528, v19);\n          if ( (unsigned int)sub_40A174((unsigned int)&v12, (unsigned int)\"%s-%s\", v18, (_DWORD)s, v3, v4, v8) == -1 )\n            v12 = 0LL;\n        }\n        else\n        {\n          v12 = strdup(s);\n        }\n      }\n      else\n      {\n        v0 = dword_618524 & 0x124;\n        LOBYTE(v0) = dword_618524 & 0x24 | 0x98;\n        v11 = v0;\n        v15 = qword_618528;\n        v16 = qword_618528;\n        do\n        {\n          v9 = v15 % 0x3E8 == 0;\n          v15 /= 0x3E8uLL;\n          v10 = (v16 & 0x3FF) == 0;\n          v16 >>= 10;\n        }\n        while ( v9 && v10 );\n        if ( v9 < v10 )\n          v11 = v0 | 0x20;\n        if ( v10 < v9 )\n          v11 &= 0xFFFFFFDF;\n        if ( (v11 & 0x20) == 0 )\n          v11 |= 0x100u;\n        v17 = sub_404FDE(qword_618528, v19, v11, 1LL, 1LL);\n        if ( (unsigned int)sub_40A174((unsigned int)&v12, (unsigned int)\"%s-%s\", v17, (_DWORD)s, v1, v2, v8) == -1 )\n          v12 = 0LL;\n      }\n      if ( !v12 )\n        sub_4099EE();\n      *(_QWORD *)(*(_QWORD *)(8 * qword_6185A8 - 8 + qword_6185A0) + 8 * i) = v12;\n      v5 = qword_618440[i];\n      if ( v5 <= (int)sub_40626C(v12, 0LL) )\n        v6 = (int)sub_40626C(v12, 0LL);\n      else\n        v6 = qword_618440[i];\n      qword_618440[i] = v6;\n    }\n  }\n  return __readfsqword(0x28u) ^ v20;\n}\n"], [4204882, "sub_402952", "__int64 __fastcall sub_402952(const char *a1)\n{\n  __int64 i; // [rsp+18h] [rbp-8h]\n\n  if ( !qword_618538 || !a1 )\n    return 1LL;\n  for ( i = qword_618538; i; i = *(_QWORD *)(i + 8) )\n  {\n    if ( !strcmp(a1, *(const char **)i) )\n      return 1LL;\n  }\n  return 0LL;\n}\n"], [4204992, "sub_4029C0", "__int64 __fastcall sub_4029C0(const char *a1)\n{\n  __int64 i; // [rsp+18h] [rbp-8h]\n\n  if ( !qword_618540 || !a1 )\n    return 0LL;\n  for ( i = qword_618540; i; i = *(_QWORD *)(i + 8) )\n  {\n    if ( !strcmp(a1, *(const char **)i) )\n      return 1LL;\n  }\n  return 0LL;\n}\n"], [4205102, "sub_402A2E", "bool __fastcall sub_402A2E(unsigned __int64 a1)\n{\n  return a1 <= 0xFFFFFFFFFFFFFFFDLL;\n}\n"], [4205120, "sub_402A40", "const char *__fastcall sub_402A40(unsigned __int8 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  unsigned __int64 v6; // rax\n  __int64 v10; // [rsp+38h] [rbp-8h]\n\n  if ( !sub_402A2E(a2) && a1 != 1 )\n    return \"-\";\n  if ( a1 )\n    v6 = -(__int64)a2;\n  else\n    v6 = a2;\n  v10 = sub_404FDE(v6, a1 + a3, (unsigned int)dword_618524, a4, a5);\n  if ( a1 )\n    *(_BYTE *)--v10 = 45;\n  return (const char *)v10;\n}\n"], [4205270, "sub_402AD6", "unsigned __int64 __fastcall sub_402AD6(unsigned __int64 *a1, unsigned __int8 *a2, unsigned __int64 a3, unsigned __int8 a4)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v5; // [rsp+4h] [rbp-18h]\n\n  v5 = a3;\n  if ( a4 ^ *a2 ^ 1 )\n  {\n    result = (unsigned __int64)a1;\n    *a1 += a3;\n  }\n  else\n  {\n    if ( *a2 )\n      *a1 = -(__int64)*a1;\n    if ( a4 )\n      v5 = -(__int64)a3;\n    if ( *a1 <= v5 )\n    {\n      *a1 = v5 - *a1;\n      *a2 = a4;\n    }\n    else\n    {\n      *a1 -= v5;\n    }\n    result = *a2;\n    if ( (_BYTE)result )\n    {\n      result = (unsigned __int64)a1;\n      *a1 = -(__int64)*a1;\n    }\n  }\n  return result;\n}\n"], [4205475, "sub_402BA3", "unsigned __int64 __fastcall sub_402BA3(const char *a1, const char *a2, const char *a3, const char *a4, char a5, char a6, __int64 *a7)\n{\n  const char *v7; // rax\n  const char *v8; // rbx\n  int *v9; // rax\n  bool v10; // al\n  char *v11; // rax\n  const char *v12; // rax\n  const char *v13; // rax\n  const char *v14; // rax\n  unsigned __int64 v15; // rcx\n  int v16; // er8\n  int v17; // er9\n  __int64 v18; // rax\n  double v19; // xmm0_8\n  unsigned __int64 v20; // rax\n  double v21; // xmm0_8\n  double v22; // xmm0_8\n  unsigned __int64 v23; // rax\n  double v24; // xmm0_8\n  double v25; // xmm0_8\n  double v26; // rax\n  double v27; // xmm0_8\n  unsigned __int64 v28; // rbx\n  __int64 v29; // rax\n  char v31; // [rsp+0h] [rbp-3C0h]\n  const char *v32; // [rsp+20h] [rbp-3A0h]\n  const char *v34; // [rsp+38h] [rbp-388h]\n  unsigned __int8 v35; // [rsp+4Eh] [rbp-372h]\n  bool v36; // [rsp+4Fh] [rbp-371h]\n  char *v37; // [rsp+50h] [rbp-370h] BYREF\n  __int64 v38; // [rsp+58h] [rbp-368h]\n  __int64 v39; // [rsp+60h] [rbp-360h]\n  unsigned __int64 v40; // [rsp+68h] [rbp-358h]\n  signed __int64 v41; // [rsp+70h] [rbp-350h]\n  unsigned __int64 v42; // [rsp+78h] [rbp-348h]\n  signed __int64 v43; // [rsp+80h] [rbp-340h]\n  double v44; // [rsp+88h] [rbp-338h]\n  unsigned __int64 i; // [rsp+90h] [rbp-330h]\n  unsigned __int64 v46; // [rsp+98h] [rbp-328h]\n  __int64 v47; // [rsp+A0h] [rbp-320h]\n  double v48; // [rsp+A8h] [rbp-318h]\n  double v49; // [rsp+B0h] [rbp-310h]\n  double v50; // [rsp+B8h] [rbp-308h]\n  __int64 v51; // [rsp+C0h] [rbp-300h]\n  double v52; // [rsp+C8h] [rbp-2F8h]\n  __int64 v53; // [rsp+D0h] [rbp-2F0h] BYREF\n  unsigned __int64 v54; // [rsp+D8h] [rbp-2E8h]\n  unsigned __int64 v55; // [rsp+E0h] [rbp-2E0h]\n  __int64 v56; // [rsp+E8h] [rbp-2D8h]\n  __int64 v57; // [rsp+F0h] [rbp-2D0h]\n  unsigned __int64 v58; // [rsp+F8h] [rbp-2C8h]\n  unsigned __int64 v59; // [rsp+100h] [rbp-2C0h]\n  char v60[664]; // [rsp+110h] [rbp-2B0h] BYREF\n  unsigned __int64 v61; // [rsp+3A8h] [rbp-18h]\n\n  v34 = a1;\n  v32 = a4;\n  v61 = __readfsqword(0x28u);\n  v44 = -1.0;\n  if ( (!a6 || !byte_618522)\n    && (!a5 || byte_618521 == 1 || byte_618523 == 1)\n    && (unsigned __int8)sub_402952(a4) == 1\n    && !(unsigned __int8)sub_4029C0(v32) )\n  {\n    if ( !a3 )\n    {\n      if ( a2 )\n        v7 = a2;\n      else\n        v7 = a1;\n      a3 = v7;\n    }\n    if ( a7 )\n    {\n      v53 = *a7;\n      v54 = a7[1];\n      v55 = a7[2];\n      v56 = a7[3];\n      v57 = a7[4];\n      v58 = a7[5];\n      v59 = a7[6];\n    }\n    else if ( (unsigned int)sub_40A625(a3, a1, &v53) )\n    {\n      v8 = (const char *)sub_407086(a3);\n      v9 = __errno_location();\n      error(0, *v9, \"%s\", v8);\n      status = 1;\n      return __readfsqword(0x28u) ^ v61;\n    }\n    if ( v54 || byte_618521 == 1 || byte_618523 == 1 )\n    {\n      if ( byte_618531 != 1 )\n      {\n        byte_618531 = 1;\n        sub_40256A();\n      }\n      sub_4023BF();\n      if ( !a1 )\n        v34 = \"-\";\n      if ( !v32 )\n        v32 = \"-\";\n      if ( byte_618520 )\n      {\n        v39 = 1LL;\n        v38 = 1LL;\n        v40 = v58;\n        v41 = v59;\n        v35 = 0;\n        v42 = v59;\n        if ( sub_402A2E(v58) )\n          qword_618588 += v40;\n        if ( sub_402A2E(v41) )\n          qword_618590 += v41;\n      }\n      else\n      {\n        v38 = v53;\n        v39 = qword_618528;\n        v40 = v54;\n        v41 = v56;\n        v10 = (_BYTE)v57 && sub_402A2E(v41);\n        v35 = v10;\n        v42 = v55;\n        if ( sub_402A2E(v40) )\n          qword_618568 += v40 * v38;\n        if ( sub_402A2E(v42) )\n          qword_618570 += v42 * v38;\n        if ( sub_402A2E(v41) )\n          sub_402AD6(&qword_618578, byte_618580, v41 * v38, v35);\n      }\n      v43 = -1LL;\n      v36 = 0;\n      if ( sub_402A2E(v40) && sub_402A2E(v42) )\n      {\n        v43 = v40 - v42;\n        v36 = v40 < v42;\n      }\n      for ( i = 0LL; i <= 6; ++i )\n      {\n        if ( i == 3 )\n        {\n          v13 = sub_402A40(v36, v43, (__int64)v60, v38, v39);\n          v37 = (char *)sub_4099C1(v13);\n        }\n        else if ( i > 3 )\n        {\n          if ( i == 5 )\n          {\n            if ( sub_402A2E(v43) && sub_402A2E(v41) )\n            {\n              if ( !v36\n                && (unsigned __int64)v43 <= 0x28F5C28F5C28F5CLL\n                && v43 + v41\n                && v43 + v41 < (unsigned __int64)v43 == v35 )\n              {\n                v46 = 100 * v43;\n                v47 = v43 + v41;\n                v15 = 100 * v43 / (unsigned __int64)(v43 + v41);\n                v18 = v15 + (100 * v43 % (unsigned __int64)(v43 + v41) != 0);\n                if ( v18 < 0 )\n                  v19 = (double)(int)(v18 & 1 | ((unsigned __int64)v18 >> 1))\n                      + (double)(int)(v18 & 1 | ((unsigned __int64)v18 >> 1));\n                else\n                  v19 = (double)(int)v18;\n                v44 = v19;\n              }\n              else\n              {\n                if ( v36 )\n                {\n                  v20 = -v43;\n                  if ( v43 > 0 )\n                    v21 = (double)(int)(v20 & 1 | (v20 >> 1)) + (double)(int)(v20 & 1 | (v20 >> 1));\n                  else\n                    v21 = (double)(int)v20;\n                  v22 = -v21;\n                }\n                else if ( v43 < 0 )\n                {\n                  v22 = (double)(int)(v43 & 1 | ((unsigned __int64)v43 >> 1))\n                      + (double)(int)(v43 & 1 | ((unsigned __int64)v43 >> 1));\n                }\n                else\n                {\n                  v22 = (double)(int)v43;\n                }\n                v48 = v22;\n                if ( v35 )\n                {\n                  v23 = -v41;\n                  if ( v41 > 0 )\n                    v24 = (double)(int)(v23 & 1 | (v23 >> 1)) + (double)(int)(v23 & 1 | (v23 >> 1));\n                  else\n                    v24 = (double)(int)v23;\n                  v25 = -v24;\n                }\n                else if ( v41 < 0 )\n                {\n                  v25 = (double)(int)(v41 & 1 | ((unsigned __int64)v41 >> 1))\n                      + (double)(int)(v41 & 1 | ((unsigned __int64)v41 >> 1));\n                }\n                else\n                {\n                  v25 = (double)(int)v41;\n                }\n                v49 = v25;\n                v50 = v48 + v25;\n                if ( v48 + v25 != 0.0 )\n                {\n                  v44 = 100.0 * v48 / v50;\n                  v51 = (unsigned int)(int)v44;\n                  v52 = (double)(int)v44;\n                  if ( v44 > v52 - 1.0 && v52 + 1.0 >= v44 )\n                  {\n                    if ( v44 <= v52 )\n                      v26 = 0.0;\n                    else\n                      v26 = 1.0;\n                    v44 = v26 + v52;\n                  }\n                }\n              }\n            }\n            v27 = v44;\n            if ( v44 < 0.0 )\n            {\n              v37 = strdup(\"-\");\n            }\n            else\n            {\n              v27 = v44;\n              if ( (unsigned int)sub_40A174(\n                                   (unsigned int)&v37,\n                                   (unsigned int)\"%.0f%%\",\n                                   (unsigned int)&v37,\n                                   v15,\n                                   v16,\n                                   v17,\n                                   v31) == -1 )\n                v37 = 0LL;\n            }\n            if ( !v37 )\n              sub_4099EE(v27);\n          }\n          else if ( i < 5 )\n          {\n            v14 = sub_402A40(v35, v41, (__int64)v60, v38, v39);\n            v37 = (char *)sub_4099C1(v14);\n          }\n          else if ( a2 )\n          {\n            v37 = (char *)sub_4099C1(a2);\n          }\n          else\n          {\n            v37 = 0LL;\n          }\n        }\n        else if ( i == 1 )\n        {\n          if ( byte_618550 )\n            v11 = (char *)sub_4099C1(v32);\n          else\n            v11 = 0LL;\n          v37 = v11;\n        }\n        else if ( i > 1 )\n        {\n          v12 = sub_402A40(0, v40, (__int64)v60, v38, v39);\n          v37 = (char *)sub_4099C1(v12);\n        }\n        else\n        {\n          v37 = (char *)sub_4099C1(v34);\n        }\n        if ( v37 )\n        {\n          v28 = qword_618440[i];\n          if ( v28 <= (int)sub_40626C(v37, 0LL) )\n            v29 = (int)sub_40626C(v37, 0LL);\n          else\n            v29 = qword_618440[i];\n          qword_618440[i] = v29;\n        }\n        *(_QWORD *)(*(_QWORD *)(8 * qword_6185A8 - 8 + qword_6185A0) + 8 * i) = v37;\n      }\n    }\n  }\n  return __readfsqword(0x28u) ^ v61;\n}\n"], [4208197, "sub_403645", "__int64 __fastcall sub_403645(const char *a1)\n{\n  __int64 i; // [rsp+10h] [rbp-10h]\n  __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = 0LL;\n  for ( i = qword_618548; i; i = *(_QWORD *)(i + 40) )\n  {\n    if ( !strcmp(a1, *(const char **)i) )\n      v3 = i;\n  }\n  if ( !v3 )\n    return 0LL;\n  sub_402BA3(\n    *(const char **)v3,\n    *(const char **)(v3 + 8),\n    0LL,\n    *(const char **)(v3 + 16),\n    (*(_BYTE *)(v3 + 32) & 1) != 0,\n    (*(_BYTE *)(v3 + 32) & 2) != 0,\n    0LL);\n  return 1LL;\n}\n"], [4208395, "sub_40370B", "void __fastcall sub_40370B(const char *a1, _QWORD *a2)\n{\n  const char *v2; // rbx\n  int *v3; // rax\n  __int64 i; // [rsp+28h] [rbp-D8h]\n  __int64 j; // [rsp+28h] [rbp-D8h]\n  __int64 v6; // [rsp+30h] [rbp-D0h]\n  size_t v7; // [rsp+38h] [rbp-C8h]\n  char *s; // [rsp+40h] [rbp-C0h]\n  size_t v9; // [rsp+48h] [rbp-B8h]\n  size_t n; // [rsp+50h] [rbp-B0h]\n  char *ptr; // [rsp+58h] [rbp-A8h]\n  struct stat stat_buf; // [rsp+60h] [rbp-A0h] BYREF\n\n  v6 = 0LL;\n  s = canonicalize_file_name(a1);\n  if ( s && *s == 47 )\n  {\n    v9 = strlen(s);\n    v7 = 0LL;\n    for ( i = qword_618548; i; i = *(_QWORD *)(i + 40) )\n    {\n      if ( strcmp(*(const char **)(i + 16), \"lofs\")\n        && (!v6 || (*(_BYTE *)(v6 + 32) & 1) != 0 || (*(_BYTE *)(i + 32) & 1) == 0) )\n      {\n        n = strlen(*(const char **)(i + 8));\n        if ( v7 <= n && n <= v9 && (n == 1 || (n == v9 || s[n] == 47) && !strncmp(*(const char **)(i + 8), s, n)) )\n        {\n          v6 = i;\n          v7 = n;\n        }\n      }\n    }\n  }\n  free(s);\n  if ( v6 && ((unsigned int)sub_413F40(*(char **)(v6 + 8), &stat_buf) || stat_buf.st_dev != *a2) )\n    v6 = 0LL;\n  if ( !v6 )\n  {\n    for ( j = qword_618548; j; j = *(_QWORD *)(j + 40) )\n    {\n      if ( *(_QWORD *)(j + 24) == -1LL )\n      {\n        if ( (unsigned int)sub_413F40(*(char **)(j + 8), &stat_buf) )\n        {\n          if ( *__errno_location() == 5 )\n          {\n            v2 = (const char *)sub_407086(*(_QWORD *)(j + 8));\n            v3 = __errno_location();\n            error(0, *v3, \"%s\", v2);\n            status = 1;\n          }\n          *(_QWORD *)(j + 24) = -2LL;\n        }\n        else\n        {\n          *(_QWORD *)(j + 24) = stat_buf.st_dev;\n        }\n      }\n      if ( *a2 == *(_QWORD *)(j + 24)\n        && strcmp(*(const char **)(j + 16), \"lofs\")\n        && (!v6 || (*(_BYTE *)(v6 + 32) & 1) != 0 || (*(_BYTE *)(j + 32) & 1) == 0) )\n      {\n        if ( !(unsigned int)sub_413F40(*(char **)(j + 8), &stat_buf) && stat_buf.st_dev == *(_QWORD *)(j + 24) )\n          v6 = j;\n        else\n          *(_QWORD *)(j + 24) = -2LL;\n      }\n    }\n  }\n  if ( v6 )\n  {\n    sub_402BA3(\n      *(const char **)v6,\n      *(const char **)(v6 + 8),\n      a1,\n      *(const char **)(v6 + 16),\n      (*(_BYTE *)(v6 + 32) & 1) != 0,\n      (*(_BYTE *)(v6 + 32) & 2) != 0,\n      0LL);\n  }\n  else\n  {\n    ptr = (char *)sub_4046C9(a1, a2);\n    if ( ptr )\n    {\n      sub_402BA3(0LL, ptr, 0LL, 0LL, 0, 0, 0LL);\n      free(ptr);\n    }\n  }\n}\n"], [4209583, "sub_403BAF", "void __fastcall sub_403BAF(const char *a1, __int64 a2)\n{\n  if ( (*(_DWORD *)(a2 + 24) & 0xF000) != 24576 && (*(_DWORD *)(a2 + 24) & 0xF000) != 0x2000\n    || !(unsigned __int8)sub_403645(a1) )\n  {\n    sub_40370B(a1, (_QWORD *)a2);\n  }\n}\n"], [4209676, "sub_403C0C", "__int64 sub_403C0C()\n{\n  __int64 result; // rax\n  __int64 i; // [rsp+18h] [rbp-8h]\n\n  result = qword_618548;\n  for ( i = qword_618548; i; i = result )\n  {\n    sub_402BA3(\n      *(const char **)i,\n      *(const char **)(i + 8),\n      0LL,\n      *(const char **)(i + 16),\n      (*(_BYTE *)(i + 32) & 1) != 0,\n      (*(_BYTE *)(i + 32) & 2) != 0,\n      0LL);\n    result = *(_QWORD *)(i + 40);\n  }\n  return result;\n}\n"], [4209809, "sub_403C91", "_QWORD *__fastcall sub_403C91(__int64 a1)\n{\n  _QWORD *result; // rax\n\n  result = (_QWORD *)sub_40986C(16LL);\n  *result = a1;\n  result[1] = qword_618538;\n  qword_618538 = (__int64)result;\n  return result;\n}\n"], [4209874, "sub_403CD2", "_QWORD *__fastcall sub_403CD2(__int64 a1)\n{\n  _QWORD *result; // rax\n\n  result = (_QWORD *)sub_40986C(16LL);\n  *result = a1;\n  result[1] = qword_618540;\n  qword_618540 = (__int64)result;\n  return result;\n}\n"], [4209939, "sub_403D13", "void __fastcall __noreturn sub_403D13(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbx\n  char *v5; // rax\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rbx\n  char *v9; // rax\n  FILE *v10; // rbx\n  char *v11; // rax\n  FILE *v12; // rbx\n  char *v13; // rax\n  FILE *v14; // rbx\n  char *v15; // rax\n  FILE *v16; // rbx\n  char *v17; // rax\n\n  v1 = qword_6185C0;\n  if ( a1 )\n  {\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = gettext(\"Usage: %s [OPTION]... [FILE]...\\n\");\n    printf(v3, v1);\n    v4 = stdout;\n    v5 = gettext(\"Show information about the file system on which each FILE resides,\\nor all file systems by default.\\n\\n\");\n    fputs_unlocked(v5, v4);\n    v6 = stdout;\n    v7 = gettext(\"Mandatory arguments to long options are mandatory for short options too.\\n\");\n    fputs_unlocked(v7, v6);\n    v8 = stdout;\n    v9 = gettext(\n           \"  -a, --all             include dummy file systems\\n\"\n           \"  -B, --block-size=SIZE  scale sizes by SIZE before printing them.  E.g.,\\n\"\n           \"                           `-BM' prints sizes in units of 1,048,576 bytes.\\n\"\n           \"                           See SIZE format below.\\n\"\n           \"      --total           produce a grand total\\n\"\n           \"  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G)\\n\"\n           \"  -H, --si              likewise, but use powers of 1000 not 1024\\n\");\n    fputs_unlocked(v9, v8);\n    v10 = stdout;\n    v11 = gettext(\n            \"  -i, --inodes          list inode information instead of block usage\\n\"\n            \"  -k                    like --block-size=1K\\n\"\n            \"  -l, --local           limit listing to local file systems\\n\"\n            \"      --no-sync         do not invoke sync before getting usage info (default)\\n\");\n    fputs_unlocked(v11, v10);\n    v12 = stdout;\n    v13 = gettext(\n            \"  -P, --portability     use the POSIX output format\\n\"\n            \"      --sync            invoke sync before getting usage info\\n\"\n            \"  -t, --type=TYPE       limit listing to file systems of type TYPE\\n\"\n            \"  -T, --print-type      print file system type\\n\"\n            \"  -x, --exclude-type=TYPE   limit listing to file systems not of type TYPE\\n\"\n            \"  -v                    (ignored)\\n\");\n    fputs_unlocked(v13, v12);\n    v14 = stdout;\n    v15 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v15, v14);\n    v16 = stdout;\n    v17 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v17, v16);\n    sub_402289((__int64)\"DF\");\n    sub_40225D();\n    sub_4022B5();\n  }\n  exit(a1);\n}\n"], [4210267, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  int v3; // eax\n  __int64 v4; // rax\n  char *v5; // rax\n  __int64 v6; // rbx\n  char *v7; // rax\n  const char *v8; // rbx\n  int *v9; // rax\n  bool v10; // al\n  char *v11; // rax\n  char *v12; // rbx\n  int *v13; // rax\n  char *v14; // rax\n  char v15; // [rsp+23h] [rbp-4Dh]\n  int longind; // [rsp+24h] [rbp-4Ch] BYREF\n  int j; // [rsp+28h] [rbp-48h]\n  int k; // [rsp+2Ch] [rbp-44h]\n  int v19; // [rsp+30h] [rbp-40h]\n  int fd; // [rsp+34h] [rbp-3Ch]\n  int status; // [rsp+38h] [rbp-38h]\n  unsigned int v22; // [rsp+3Ch] [rbp-34h]\n  __int64 v23; // [rsp+40h] [rbp-30h]\n  _QWORD *i; // [rsp+48h] [rbp-28h]\n  __int64 l; // [rsp+50h] [rbp-20h]\n  char *v26; // [rsp+58h] [rbp-18h]\n\n  sub_40652A(*a2, a2, a3);\n  setlocale(6, locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_413F20(sub_404AC0);\n  qword_618538 = 0LL;\n  qword_618540 = 0LL;\n  byte_618520 = 0;\n  byte_618521 = 0;\n  byte_618523 = 0;\n  dword_618524 = -1;\n  byte_618550 = 0;\n  byte_618531 = 0;\n  byte_618530 = 0;\n  ::status = 0;\n  byte_618551 = 0;\n  qword_618560 = 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      longind = -1;\n      v19 = getopt_long(a1, a2, \"aB:iF:hHklmPTt:vx:\", &longopts, &longind);\n      if ( v19 == -1 )\n      {\n        if ( dword_618524 == -1 )\n        {\n          if ( byte_618530 )\n          {\n            dword_618524 = 0;\n            if ( getenv(\"POSIXLY_CORRECT\") )\n              v4 = 512LL;\n            else\n              v4 = 1024LL;\n            qword_618528 = v4;\n          }\n          else\n          {\n            v5 = getenv(\"DF_BLOCK_SIZE\");\n            sub_405C07(v5, &dword_618524, &qword_618528);\n          }\n        }\n        if ( byte_618520 )\n        {\n          dword_618598 = 1;\n        }\n        else if ( (dword_618524 & 0x10) != 0 )\n        {\n          dword_618598 = 2;\n        }\n        else if ( byte_618530 )\n        {\n          dword_618598 = 3;\n        }\n        v15 = 0;\n        for ( i = (_QWORD *)qword_618538; ; i = (_QWORD *)i[1] )\n        {\n          if ( !i )\n          {\n            if ( v15 )\n              exit(1);\n            if ( optind < a1 )\n            {\n              v23 = sub_409723(a1 - optind, 144LL);\n              for ( j = optind; j < a1; ++j )\n              {\n                fd = open(a2[j], 256);\n                if ( (fd < 0 || (unsigned int)sub_413F50(fd, (struct stat *)(v23 + 144LL * (j - optind))))\n                  && (unsigned int)sub_413F40(a2[j], (struct stat *)(v23 + 144LL * (j - optind))) )\n                {\n                  v8 = (const char *)sub_407086(a2[j]);\n                  v9 = __errno_location();\n                  error(0, *v9, \"%s\", v8);\n                  ::status = 1;\n                  a2[j] = 0LL;\n                }\n                if ( fd >= 0 )\n                  close(fd);\n              }\n            }\n            v10 = qword_618538 || qword_618540 || byte_618550 || byte_618522;\n            qword_618548 = sub_40AE9A(v10);\n            if ( !qword_618548 )\n            {\n              status = optind >= a1;\n              if ( optind >= a1 )\n                v11 = (char *)locale;\n              else\n                v11 = gettext(\"Warning: \");\n              v26 = v11;\n              v12 = gettext(\"cannot read table of mounted file systems\");\n              v13 = __errno_location();\n              error(status, *v13, \"%s%s\", v26, v12);\n            }\n            if ( byte_618532 )\n              sync();\n            if ( optind >= a1 )\n            {\n              sub_403C0C();\n            }\n            else\n            {\n              byte_618523 = 1;\n              for ( k = optind; k < a1; ++k )\n              {\n                if ( a2[k] )\n                  sub_403BAF(a2[k], v23 + 144LL * (k - optind));\n              }\n            }\n            if ( byte_618551 )\n            {\n              if ( byte_618520 )\n                qword_618568 = 1LL;\n              sub_402BA3(\"total\", 0LL, 0LL, 0LL, 0, 0, &qword_618560);\n            }\n            sub_402432();\n            if ( byte_618531 != 1 )\n            {\n              v14 = gettext(\"no file systems processed\");\n              error(1, 0, v14);\n            }\n            exit(::status);\n          }\n          for ( l = qword_618540; ; l = *(_QWORD *)(l + 8) )\n          {\n            if ( !l )\n              goto LABEL_78;\n            if ( !strcmp((const char *)*i, *(const char **)l) )\n              break;\n          }\n          v6 = sub_407086(*i);\n          v7 = gettext(\"file system type %s both selected and excluded\");\n          error(0, 0, v7, v6);\n          v15 = 1;\nLABEL_78:\n          ;\n        }\n      }\n      if ( v19 != 104 )\n        break;\n      dword_618524 = 176;\n      qword_618528 = 1LL;\n    }\n    if ( v19 > 104 )\n    {\n      if ( v19 == 116 )\n        goto LABEL_53;\n      if ( v19 > 116 )\n      {\n        if ( v19 == 120 )\n        {\n          sub_403CD2(optarg);\n        }\n        else if ( v19 > 120 )\n        {\n          if ( v19 == 128 )\n          {\n            byte_618532 = 0;\n          }\n          else\n          {\n            if ( v19 != 129 )\n              goto LABEL_58;\n            byte_618532 = 1;\n          }\n        }\n        else if ( v19 != 118 )\n        {\n          goto LABEL_58;\n        }\n      }\n      else if ( v19 == 107 )\n      {\n        dword_618524 = 0;\n        qword_618528 = 1024LL;\n      }\n      else if ( v19 > 107 )\n      {\n        if ( v19 == 108 )\n        {\n          byte_618522 = 1;\n        }\n        else\n        {\n          if ( v19 != 109 )\n            goto LABEL_58;\n          dword_618524 = 0;\n          qword_618528 = 0x100000LL;\n        }\n      }\n      else\n      {\n        if ( v19 != 105 )\n          goto LABEL_58;\n        byte_618520 = 1;\n      }\n    }\n    else if ( v19 == 72 )\n    {\n      dword_618524 = 144;\n      qword_618528 = 1LL;\n    }\n    else if ( v19 > 72 )\n    {\n      if ( v19 == 84 )\n      {\n        byte_618550 = 1;\n      }\n      else if ( v19 > 84 )\n      {\n        if ( v19 == 97 )\n        {\n          byte_618521 = 1;\n        }\n        else\n        {\n          if ( v19 != 99 )\n            goto LABEL_58;\n          byte_618551 = 1;\n        }\n      }\n      else\n      {\n        if ( v19 != 80 )\n          goto LABEL_58;\n        byte_618530 = 1;\n      }\n    }\n    else\n    {\n      if ( v19 == -130 )\n        sub_403D13(0);\n      if ( v19 <= -130 )\n      {\n        if ( v19 == -131 )\n        {\n          v3 = sub_406D96(\"Torbjorn Granlund\", &unk_414BB6);\n          sub_409604(\n            (_DWORD)stdout,\n            (unsigned int)\"df\",\n            (unsigned int)\"GNU coreutils\",\n            (_DWORD)off_618478,\n            v3,\n            (unsigned int)\"David MacKenzie\",\n            \"Paul Eggert\",\n            0LL);\n          exit(0);\n        }\nLABEL_58:\n        sub_403D13(1);\n      }\n      if ( v19 == 66 )\n      {\n        v22 = sub_405C07(optarg, &dword_618524, &qword_618528);\n        if ( v22 )\n          sub_409C22(v22, (unsigned int)longind, (unsigned int)(char)v19, &longopts, optarg);\n      }\n      else\n      {\n        if ( v19 != 70 )\n          goto LABEL_58;\nLABEL_53:\n        sub_403C91(optarg);\n      }\n    }\n  }\n}\n"], [4212425, "sub_4046C9", "__int64 __fastcall sub_4046C9(char *a1, _DWORD *a2)\n{\n  char *v2; // rbx\n  int *v3; // rax\n  __int64 result; // rax\n  __int64 v5; // r12\n  char *v6; // rbx\n  int *v7; // rax\n  size_t v8; // rax\n  void *v9; // rsp\n  __int64 v10; // r12\n  char *v11; // rbx\n  int *v12; // rax\n  __int64 v13; // r12\n  char *v14; // rbx\n  int *v15; // rax\n  __int64 v16; // r12\n  char *v17; // rbx\n  int *v18; // rax\n  __int64 v19; // r12\n  char *v20; // rbx\n  int *v21; // rax\n  char *v22; // rbx\n  int *v23; // rax\n  char *path; // [rsp+8h] [rbp-188h] BYREF\n  int v25; // [rsp+1Ch] [rbp-174h]\n  __int64 v26; // [rsp+20h] [rbp-170h]\n  void *ptr; // [rsp+28h] [rbp-168h]\n  char *s; // [rsp+30h] [rbp-160h]\n  size_t n; // [rsp+38h] [rbp-158h]\n  void *dest; // [rsp+40h] [rbp-150h]\n  char *v31; // [rsp+48h] [rbp-148h]\n  char v32[16]; // [rsp+50h] [rbp-140h] BYREF\n  struct stat stat_buf; // [rsp+60h] [rbp-130h] BYREF\n  struct stat v34; // [rsp+F0h] [rbp-A0h] BYREF\n\n  path = a1;\n  v26 = 0LL;\n  if ( (unsigned int)sub_40881E(v32) )\n  {\n    v2 = gettext(\"cannot get current directory\");\n    v3 = __errno_location();\n    error(0, *v3, v2);\n    result = 0LL;\n  }\n  else if ( (a2[6] & 0xF000) == 0x4000 )\n  {\n    qmemcpy(&stat_buf, a2, sizeof(stat_buf));\n    if ( chdir(path) >= 0 )\n      goto LABEL_10;\n    v5 = sub_407086(path);\n    v6 = gettext(\"cannot change to directory %s\");\n    v7 = __errno_location();\n    error(0, *v7, v6, v5);\n    result = 0LL;\n  }\n  else\n  {\n    ptr = (void *)sub_404BAB(path);\n    s = (char *)ptr;\n    v8 = strlen((const char *)ptr);\n    n = v8 + 1;\n    v9 = alloca(16 * ((v8 + 31) / 0x10));\n    dest = (void *)(16 * (((unsigned __int64)&path + 7) >> 4));\n    v31 = (char *)memcpy(dest, ptr, v8 + 1);\n    free(ptr);\n    if ( chdir(v31) >= 0 )\n    {\n      if ( (int)sub_413F40(\".\", &stat_buf) >= 0 )\n      {\n        while ( 1 )\n        {\nLABEL_10:\n          if ( (int)sub_413F40(\"..\", &v34) < 0 )\n          {\n            v16 = sub_407086(\"..\");\n            v17 = gettext(\"cannot stat %s\");\n            v18 = __errno_location();\n            error(0, *v18, v17, v16);\n            goto LABEL_18;\n          }\n          if ( v34.st_dev != stat_buf.st_dev || v34.st_ino == stat_buf.st_ino )\n            break;\n          if ( chdir(\"..\") < 0 )\n          {\n            v19 = sub_407086(\"..\");\n            v20 = gettext(\"cannot change to directory %s\");\n            v21 = __errno_location();\n            error(0, *v21, v20, v19);\n            goto LABEL_18;\n          }\n          qmemcpy(&stat_buf, &v34, sizeof(stat_buf));\n        }\n        v26 = sub_409A23();\n      }\n      else\n      {\n        v13 = sub_407086(v31);\n        v14 = gettext(\"cannot stat current directory (now %s)\");\n        v15 = __errno_location();\n        error(0, *v15, v14, v13);\n      }\nLABEL_18:\n      v25 = *__errno_location();\n      if ( (unsigned int)sub_4088A5(v32) )\n      {\n        v22 = gettext(\"failed to return to initial working directory\");\n        v23 = __errno_location();\n        error(1, *v23, v22);\n      }\n      sub_4088DC(v32);\n      *__errno_location() = v25;\n      result = v26;\n    }\n    else\n    {\n      v10 = sub_407086(v31);\n      v11 = gettext(\"cannot change to directory %s\");\n      v12 = __errno_location();\n      error(0, *v12, v11, v10);\n      result = 0LL;\n    }\n  }\n  return result;\n}\n"], [4213398, "sub_404A96", "__int64 __fastcall sub_404A96(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_6185B0 = a1;\n  return result;\n}\n"], [4213419, "sub_404AAB", "__int64 __fastcall sub_404AAB(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_6185B8 = a1;\n  return result;\n}\n"], [4213440, "sub_404AC0", "__int64 sub_404AC0()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_40B734(stdout) && (byte_6185B8 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_6185B0 )\n    {\n      v0 = (const char *)sub_40869F(qword_6185B0);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(dword_618480);\n  }\n  result = sub_40B734(stderr);\n  if ( (_DWORD)result )\n    _exit(dword_618480);\n  return result;\n}\n"], [4213675, "sub_404BAB", "__int64 __fastcall sub_404BAB(__int64 a1, double a2)\n{\n  __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_404C62(a1);\n  if ( !v3 )\n    sub_4099EE(a2);\n  return v3;\n}\n"], [4213721, "sub_404BD9", "unsigned __int64 __fastcall sub_404BD9(_BYTE *a1)\n{\n  unsigned __int64 i; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = *a1 == 47;\n  for ( i = sub_404CF9(a1) - (_QWORD)a1; v3 < i && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4213858, "sub_404C62", "_BYTE *__fastcall sub_404C62(_BYTE *a1)\n{\n  unsigned __int64 n; // [rsp+20h] [rbp-10h]\n  _BYTE *dest; // [rsp+28h] [rbp-8h]\n\n  n = sub_404BD9(a1);\n  dest = malloc((n == 0) + n + 1);\n  if ( !dest )\n    return 0LL;\n  memcpy(dest, a1, n);\n  if ( !n )\n  {\n    n = 1LL;\n    *dest = 46;\n  }\n  dest[n] = 0;\n  return dest;\n}\n"], [4214009, "sub_404CF9", "_BYTE *__fastcall sub_404CF9(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4214114, "sub_404D62", "size_t __fastcall sub_404D62(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4214192, "sub_404DB0", "long double __fastcall sub_404DB0(int a1, long double a2)\n{\n  _BOOL4 v7; // eax\n  long double v9; // [rsp+0h] [rbp-30h]\n  unsigned __int64 v10; // [rsp+28h] [rbp-8h]\n\n  if ( a1 != 1 && a2 < 1.8446744073709551615e19 )\n  {\n    if ( a2 >= 9.223372036854775808e18 )\n      v10 = (__int64)(a2 - 9.223372036854775808e18) ^ 0x8000000000000000LL;\n    else\n      v10 = (__int64)a2;\n    v7 = !a1 && a2 != (long double)v10;\n    a2 = (long double)(v7 + v10);\n  }\n  *(_QWORD *)&v9 = *(_QWORD *)&a2;\n  DWORD2(v9) = DWORD2(a2);\n  return v9;\n}\n"], [4214439, "sub_404EA7", "char *__fastcall sub_404EA7(char *a1, size_t a2, unsigned __int8 *a3, const char *a4)\n{\n  char *i; // rbx\n  size_t v5; // rax\n  char *v6; // rbx\n  unsigned __int8 v10; // [rsp+27h] [rbp-69h]\n  size_t v11; // [rsp+28h] [rbp-68h]\n  size_t v12; // [rsp+30h] [rbp-60h]\n  size_t v13; // [rsp+38h] [rbp-58h]\n  char dest[56]; // [rsp+40h] [rbp-50h] BYREF\n  unsigned __int64 v15; // [rsp+78h] [rbp-18h]\n\n  v15 = __readfsqword(0x28u);\n  v11 = -1LL;\n  v13 = strlen(a4);\n  v12 = a2;\n  memcpy(dest, a1, a2);\n  for ( i = &a1[a2]; ; memcpy(i, a4, v13) )\n  {\n    v10 = *a3;\n    if ( *a3 )\n    {\n      if ( v10 > 0x7Eu )\n        v5 = v12;\n      else\n        v5 = v10;\n      v11 = v5;\n      ++a3;\n    }\n    if ( v12 < v11 )\n      v11 = v12;\n    v6 = &i[-v11];\n    v12 -= v11;\n    memcpy(v6, &dest[v12], v11);\n    if ( !v12 )\n      break;\n    i = &v6[-v13];\n  }\n  return v6;\n}\n"], [4214750, "sub_404FDE", "char *__fastcall sub_404FDE(unsigned __int64 a1, char *a2, __int16 a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  int v5; // eax\n  int v6; // eax\n  long double v7; // fst7\n  long double v8; // fst7\n  long double v9; // fst7\n  int v10; // eax\n  bool v11; // al\n  bool v12; // al\n  bool v13; // al\n  bool v14; // al\n  char *v15; // rax\n  char v16; // dl\n  char *v17; // rax\n  char *v18; // rax\n  long double v20; // [rsp+0h] [rbp-130h]\n  int v24; // [rsp+44h] [rbp-ECh]\n  int v25; // [rsp+48h] [rbp-E8h]\n  int v26; // [rsp+4Ch] [rbp-E4h]\n  int v27; // [rsp+50h] [rbp-E0h]\n  unsigned int v28; // [rsp+54h] [rbp-DCh]\n  unsigned int v29; // [rsp+5Ch] [rbp-D4h]\n  unsigned int v30; // [rsp+60h] [rbp-D0h]\n  unsigned __int64 v31; // [rsp+68h] [rbp-C8h]\n  char *dest; // [rsp+70h] [rbp-C0h]\n  char *desta; // [rsp+70h] [rbp-C0h]\n  char *v34; // [rsp+78h] [rbp-B8h]\n  char *v35; // [rsp+80h] [rbp-B0h]\n  char *src; // [rsp+88h] [rbp-A8h]\n  size_t v37; // [rsp+90h] [rbp-A0h]\n  const char *v38; // [rsp+98h] [rbp-98h]\n  unsigned __int64 n; // [rsp+A0h] [rbp-90h]\n  size_t v40; // [rsp+A8h] [rbp-88h]\n  unsigned __int64 i; // [rsp+B0h] [rbp-80h]\n  unsigned __int8 *v42; // [rsp+B8h] [rbp-78h]\n  struct lconv *v43; // [rsp+C0h] [rbp-70h]\n  size_t v44; // [rsp+C8h] [rbp-68h]\n  unsigned __int64 v45; // [rsp+E8h] [rbp-48h]\n  long double v46; // [rsp+F0h] [rbp-40h]\n  long double v47; // [rsp+110h] [rbp-20h]\n  long double v48; // [rsp+110h] [rbp-20h]\n\n  v27 = a3 & 3;\n  if ( (a3 & 0x20) != 0 )\n    v5 = 1024;\n  else\n    v5 = 1000;\n  v28 = v5;\n  v25 = -1;\n  src = \".\";\n  v37 = 1LL;\n  v38 = (const char *)&unk_414DAB;\n  v43 = localeconv();\n  v44 = strlen(v43->decimal_point);\n  if ( v44 && v44 <= 0x10 )\n  {\n    src = v43->decimal_point;\n    v37 = v44;\n  }\n  v42 = (unsigned __int8 *)v43->grouping;\n  if ( strlen(v43->thousands_sep) <= 0x10 )\n    v38 = v43->thousands_sep;\n  v34 = a2 + 648;\n  dest = a2 + 648;\n  if ( a5 > a4 )\n  {\n    if ( a4 && !(a5 % a4) )\n    {\n      v45 = 2 * (10 * (a1 % (a5 / a4)) % (a5 / a4));\n      v31 = a1 / (a5 / a4);\n      v24 = 10 * (a1 % (a5 / a4)) / (a5 / a4);\n      if ( v45 >= a5 / a4 )\n      {\n        if ( a5 / a4 >= v45 )\n          v6 = 2;\n        else\n          v6 = 3;\n      }\n      else\n      {\n        v6 = v45 != 0;\n      }\n      v26 = v6;\nLABEL_32:\n      if ( (a3 & 0x10) != 0 )\n      {\n        v25 = 0;\n        if ( v28 <= v31 )\n        {\n          do\n          {\n            v29 = 10 * (v31 % v28) + v24;\n            v30 = 2 * (v29 % v28) + (v26 >> 1);\n            v31 /= v28;\n            v24 = v29 / v28;\n            if ( v30 >= v28 )\n            {\n              if ( v26 + v30 <= v28 )\n                v10 = 2;\n              else\n                v10 = 3;\n            }\n            else\n            {\n              v10 = v26 + v30 != 0;\n            }\n            v26 = v10;\n            ++v25;\n          }\n          while ( v28 <= v31 && v25 < 8 );\n          if ( v31 <= 9 )\n          {\n            if ( v27 == 1 )\n            {\n              v11 = (int)(((v29 / v28) & 1) + v10) > 2;\n            }\n            else\n            {\n              v12 = !v27 && v10 > 0;\n              v11 = v12;\n            }\n            if ( v11 )\n            {\n              ++v24;\n              v26 = 0;\n              if ( v24 == 10 )\n              {\n                ++v31;\n                v24 = 0;\n              }\n            }\n            if ( v31 <= 9 && (v24 || (a3 & 8) == 0) )\n            {\n              a2[647] = v24 + 48;\n              dest = &a2[-v37 + 647];\n              memcpy(dest, src, v37);\n              v26 = 0;\n              v24 = 0;\n            }\n          }\n        }\n      }\n      if ( v27 == 1 )\n      {\n        v13 = ((v31 & 1) + v26 != 0) + v24 > 5;\n      }\n      else\n      {\n        v14 = !v27 && v24 + v26 > 0;\n        v13 = v14;\n      }\n      if ( v13 )\n      {\n        ++v31;\n        if ( (a3 & 0x10) != 0 && v28 == v31 && v25 < 8 )\n        {\n          ++v25;\n          if ( (a3 & 8) == 0 )\n          {\n            desta = dest - 1;\n            *desta = 48;\n            dest = &desta[-v37];\n            memcpy(dest, src, v37);\n          }\n          v31 = 1LL;\n        }\n      }\n      v35 = dest;\n      do\n      {\n        *--dest = v31 % 0xA + 48;\n        v31 /= 0xAuLL;\n      }\n      while ( v31 );\n      goto LABEL_72;\n    }\n  }\n  else if ( !(a4 % a5) )\n  {\n    v31 = a4 / a5 * a1;\n    if ( v31 / (a4 / a5) == a1 )\n    {\n      v24 = 0;\n      v26 = 0;\n      goto LABEL_32;\n    }\n  }\n  v47 = (long double)a1 * ((long double)a4 / (long double)a5);\n  if ( (a3 & 0x10) != 0 )\n  {\n    *(_QWORD *)&v46 = 0x8000000000000000LL;\n    DWORD2(v46) = 0x3FFF;\n    v25 = 0;\n    do\n    {\n      v46 = (long double)v28 * v46;\n      ++v25;\n    }\n    while ( v47 >= (long double)v28 * v46 && v25 < 8 );\n    v48 = v47 / v46;\n    *(_QWORD *)&v20 = *(_QWORD *)&v48;\n    DWORD2(v20) = DWORD2(v48);\n    v8 = sub_404DB0(v27, v20);\n    sprintf(a2, \"%.1Lf\", v8);\n    n = strlen(a2);\n    v40 = v37 + 1;\n    if ( ((a3 & 0x20) == 0) + v37 + 1 + 1 < n || (a3 & 8) != 0 && a2[n - 1] == 48 )\n    {\n      v9 = sub_404DB0(v27, v48 * 10.0);\n      sprintf(a2, \"%.0Lf\", v9 / 10.0);\n      n = strlen(a2);\n      v40 = 0LL;\n    }\n  }\n  else\n  {\n    *(_QWORD *)&v20 = *(_QWORD *)&v47;\n    DWORD2(v20) = DWORD2(v47);\n    v7 = sub_404DB0(v27, v20);\n    sprintf(a2, \"%.0Lf\", v7);\n    n = strlen(a2);\n    v40 = 0LL;\n  }\n  dest = &v34[-n];\n  memmove(&v34[-n], a2, n);\n  v35 = &v34[-v40];\nLABEL_72:\n  if ( (a3 & 4) != 0 )\n    dest = sub_404EA7(dest, v35 - dest, v42, v38);\n  if ( (a3 & 0x80) != 0 )\n  {\n    if ( v25 < 0 )\n    {\n      v25 = 0;\n      for ( i = 1LL; i < a5; i *= v28 )\n      {\n        if ( ++v25 == 8 )\n          break;\n      }\n    }\n    if ( v25 | a3 & 0x100 && (a3 & 0x40) != 0 )\n    {\n      v34 = a2 + 649;\n      a2[648] = 32;\n    }\n    if ( v25 )\n    {\n      v15 = v34++;\n      if ( (a3 & 0x20) == 0 && v25 == 1 )\n        v16 = 107;\n      else\n        v16 = byte_414DA0[v25];\n      *v15 = v16;\n    }\n    if ( (a3 & 0x100) != 0 )\n    {\n      if ( (a3 & 0x20) != 0 && v25 )\n      {\n        v17 = v34++;\n        *v17 = 105;\n      }\n      v18 = v34++;\n      *v18 = 66;\n    }\n  }\n  *v34 = 0;\n  return dest;\n}\n"], [4217468, "sub_405A7C", "__int64 sub_405A7C()\n{\n  __int64 result; // rax\n\n  if ( getenv(\"POSIXLY_CORRECT\") )\n    result = 512LL;\n  else\n    result = 1024LL;\n  return result;\n}\n"], [4217501, "sub_405A9D", "__int64 __fastcall sub_405A9D(char *a1, _QWORD *a2, int *a3)\n{\n  char *v5; // [rsp+18h] [rbp-28h]\n  int v6; // [rsp+2Ch] [rbp-14h]\n  int v7; // [rsp+30h] [rbp-10h]\n  unsigned int v8; // [rsp+34h] [rbp-Ch]\n  char *v9; // [rsp+38h] [rbp-8h] BYREF\n\n  v5 = a1;\n  v6 = 0;\n  if ( a1 || (v5 = getenv(\"BLOCK_SIZE\")) != 0LL || (v5 = getenv(\"BLOCKSIZE\")) != 0LL )\n  {\n    if ( *v5 == 39 )\n    {\n      v6 = 4;\n      ++v5;\n    }\n    v7 = sub_40B220(v5, off_414DD0, dword_414DE8, 4LL);\n    if ( v7 < 0 )\n    {\n      v8 = sub_409D08(v5, &v9, 0LL, a2, \"eEgGkKmMpPtTyYzZ0\");\n      if ( v8 )\n      {\n        *a3 = 0;\n        return v8;\n      }\n      while ( *v5 <= 47 || *v5 > 57 )\n      {\n        if ( v5 == v9 )\n        {\n          v6 |= 0x80u;\n          if ( *(v9 - 1) == 66 )\n            v6 |= 0x100u;\n          if ( *(v9 - 1) != 66 || *(v9 - 2) == 105 )\n            v6 |= 0x20u;\n          break;\n        }\n        ++v5;\n      }\n    }\n    else\n    {\n      v6 |= dword_414DE8[v7];\n      *a2 = 1LL;\n    }\n  }\n  else\n  {\n    *a2 = sub_405A7C();\n  }\n  *a3 = v6;\n  return 0LL;\n}\n"], [4217863, "sub_405C07", "__int64 __fastcall sub_405C07(char *a1, int *a2, _QWORD *a3)\n{\n  unsigned int v5; // [rsp+2Ch] [rbp-4h]\n\n  v5 = sub_405A9D(a1, a3, a2);\n  if ( !*a3 )\n  {\n    *a3 = sub_405A7C();\n    v5 = 4;\n  }\n  return v5;\n}\n"], [4217945, "sub_405C59", "__int64 __fastcall sub_405C59(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  do\n  {\n    *(_BYTE *)--v4 = a1 % 0xA + 48;\n    a1 /= 0xAuLL;\n  }\n  while ( a1 );\n  return v4;\n}\n"], [4218078, "sub_405CDE", "__int64 __fastcall sub_405CDE(wint_t *a1)\n{\n  unsigned __int8 v2; // [rsp+17h] [rbp-9h]\n\n  v2 = 0;\n  while ( *a1 )\n  {\n    if ( !iswprint(*a1) )\n    {\n      *a1 = 65533;\n      v2 = 1;\n    }\n    ++a1;\n  }\n  return v2;\n}\n"], [4218156, "sub_405D2C", "__int64 __fastcall sub_405D2C(wchar_t *a1, unsigned __int64 a2)\n{\n  int v4; // [rsp+14h] [rbp-Ch]\n  __int64 v5; // [rsp+18h] [rbp-8h]\n\n  v5 = 0LL;\n  while ( *a1 )\n  {\n    v4 = wcwidth(*a1);\n    if ( v4 == -1 )\n    {\n      *a1 = 65533;\n      v4 = 1;\n    }\n    if ( v4 + v5 > a2 )\n      break;\n    v5 += v4;\n    ++a1;\n  }\n  *a1 = 0;\n  return v5;\n}\n"], [4218289, "sub_405DB1", "_BYTE *__fastcall sub_405DB1(_BYTE *a1, unsigned __int64 a2, __int64 a3)\n{\n  _BYTE *v3; // rax\n  __int64 v4; // rax\n\n  while ( 1 )\n  {\n    v4 = a3--;\n    if ( !v4 || (unsigned __int64)a1 >= a2 )\n      break;\n    v3 = a1++;\n    *v3 = 32;\n  }\n  *a1 = 0;\n  return a1;\n}\n"], [4218362, "sub_405DFA", "__int64 __fastcall sub_405DFA(const char *a1, _BYTE *a2, __int64 a3, unsigned __int64 *a4, int a5, char a6)\n{\n  size_t v6; // rax\n  _BYTE *v7; // rax\n  size_t v8; // rax\n  void *dest; // [rsp+20h] [rbp-80h]\n  _BYTE *desta; // [rsp+20h] [rbp-80h]\n  char v16; // [rsp+36h] [rbp-6Ah]\n  char v17; // [rsp+37h] [rbp-69h]\n  __int64 v18; // [rsp+38h] [rbp-68h]\n  size_t size; // [rsp+40h] [rbp-60h]\n  char *v20; // [rsp+48h] [rbp-58h]\n  wchar_t *pwcs; // [rsp+50h] [rbp-50h]\n  void *src; // [rsp+58h] [rbp-48h]\n  unsigned __int64 v23; // [rsp+60h] [rbp-40h]\n  size_t v24; // [rsp+68h] [rbp-38h]\n  unsigned __int64 v25; // [rsp+70h] [rbp-30h]\n  __int64 v26; // [rsp+80h] [rbp-20h]\n  size_t n; // [rsp+88h] [rbp-18h]\n  size_t na; // [rsp+88h] [rbp-18h]\n  unsigned __int64 v29; // [rsp+90h] [rbp-10h]\n  size_t v30; // [rsp+98h] [rbp-8h]\n\n  v18 = -1LL;\n  v6 = strlen(a1);\n  size = v6 + 1;\n  v20 = 0LL;\n  pwcs = 0LL;\n  src = (void *)a1;\n  v23 = v6;\n  v24 = v6;\n  v25 = 0LL;\n  v16 = 0;\n  v17 = 0;\n  if ( __ctype_get_mb_cur_max() > 1 )\n  {\n    n = mbstowcs(0LL, a1, 0LL);\n    if ( n == -1LL )\n    {\n      if ( (a6 & 1) == 0 )\n        goto LABEL_32;\n      goto LABEL_19;\n    }\n    na = n + 1;\n    pwcs = (wchar_t *)malloc(4 * na);\n    if ( !pwcs )\n    {\n      if ( (a6 & 1) == 0 )\n        goto LABEL_32;\n      goto LABEL_19;\n    }\n    if ( mbstowcs(pwcs, a1, na) )\n    {\n      pwcs[na - 1] = 0;\n      v17 = 1;\n      v16 = sub_405CDE((wint_t *)pwcs);\n      v23 = wcswidth(pwcs, na);\n    }\n  }\n  if ( v17 && (v16 || *a4 < v23) )\n  {\n    if ( v16 )\n      size = wcstombs(0LL, pwcs, 0LL) + 1;\n    v20 = (char *)malloc(size);\n    if ( v20 )\n    {\n      src = v20;\n      v23 = sub_405D2C(pwcs, *a4);\n      v24 = wcstombs(v20, pwcs, size);\n    }\n    else if ( (a6 & 1) == 0 )\n    {\n      goto LABEL_32;\n    }\n  }\nLABEL_19:\n  if ( *a4 < v23 )\n  {\n    v23 = *a4;\n    v24 = *a4;\n  }\n  if ( *a4 > v23 )\n    v25 = *a4 - v23;\n  *a4 = v23;\n  v18 = v24 + v25;\n  if ( a3 )\n  {\n    v29 = (unsigned __int64)&a2[a3 - 1];\n    if ( a5 )\n    {\n      if ( a5 == 1 )\n      {\n        v26 = 0LL;\n        v7 = sub_405DB1(a2, v29, v25);\n      }\n      else\n      {\n        v26 = v25 >> 1;\n        v7 = sub_405DB1(a2, v29, (v25 >> 1) + (v25 & 1));\n      }\n    }\n    else\n    {\n      v26 = v25;\n      v7 = sub_405DB1(a2, v29, 0LL);\n    }\n    dest = v7;\n    v30 = v29 - (_QWORD)v7;\n    v8 = v24;\n    if ( v30 <= v24 )\n      v8 = v30;\n    desta = mempcpy(dest, src, v8);\n    sub_405DB1(desta, v29, v26);\n  }\nLABEL_32:\n  free(pwcs);\n  free(v20);\n  return v18;\n}\n"], [4219262, "sub_40617E", "void *__fastcall sub_40617E(const char *a1, unsigned __int64 *a2, int a3, char a4)\n{\n  unsigned __int64 size; // [rsp+28h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+30h] [rbp-20h]\n  void *ptr; // [rsp+38h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+40h] [rbp-10h]\n  _BYTE *v11; // [rsp+48h] [rbp-8h]\n\n  v10 = *a2;\n  size = *a2;\n  v8 = *a2;\n  ptr = 0LL;\n  while ( v8 >= size )\n  {\n    size = v8 + 1;\n    v11 = realloc(ptr, v8 + 1);\n    if ( !v11 )\n    {\n      free(ptr);\n      return 0LL;\n    }\n    ptr = v11;\n    *a2 = v10;\n    v8 = sub_405DFA(a1, v11, size, a2, a3, a4);\n    if ( v8 == -1LL )\n    {\n      free(v11);\n      return 0LL;\n    }\n  }\n  return ptr;\n}\n"], [4219500, "sub_40626C", "__int64 __fastcall sub_40626C(const char *a1, unsigned int a2)\n{\n  size_t v2; // rax\n\n  v2 = strlen(a1);\n  return sub_40629E(a1, v2, a2);\n}\n"], [4219550, "sub_40629E", "__int64 __fastcall sub_40629E(char *a1, __int64 a2, char a3)\n{\n  int v3; // eax\n  char *v5; // rax\n  unsigned __int8 v7; // [rsp+2Bh] [rbp-45h]\n  wchar_t pwc; // [rsp+2Ch] [rbp-44h] BYREF\n  unsigned int v9; // [rsp+30h] [rbp-40h]\n  int v10; // [rsp+34h] [rbp-3Ch]\n  char *v11; // [rsp+38h] [rbp-38h]\n  size_t v12; // [rsp+40h] [rbp-30h]\n  char *v13; // [rsp+48h] [rbp-28h]\n  mbstate_t s[4]; // [rsp+50h] [rbp-20h] BYREF\n\n  s[1] = (mbstate_t)__readfsqword(0x28u);\n  v11 = a1;\n  v13 = &a1[a2];\n  v9 = 0;\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    while ( 1 )\n    {\n      do\n      {\n        while ( 1 )\n        {\n          if ( v11 >= v13 )\n            return v9;\n          v5 = v11++;\n          v7 = *v5;\n          if ( ((*__ctype_b_loc())[v7] & 0x4000) == 0 )\n            break;\n          if ( v9 == 0x7FFFFFFF )\n            return 0x7FFFFFFFLL;\n          ++v9;\n        }\n        if ( (a3 & 2) != 0 )\n          return 0xFFFFFFFFLL;\n      }\n      while ( ((*__ctype_b_loc())[v7] & 2) != 0 );\n      if ( v9 == 0x7FFFFFFF )\n        return 0x7FFFFFFFLL;\n      ++v9;\n    }\n  }\n  while ( 1 )\n  {\nLABEL_31:\n    if ( v11 >= v13 )\n      return v9;\n    v3 = *v11;\n    if ( v3 > 63 )\n      break;\n    if ( v3 < 37 && (unsigned int)(v3 - 32) > 3 )\n      goto LABEL_11;\nLABEL_10:\n    ++v11;\n    ++v9;\n  }\n  if ( v3 >= 65 && (v3 <= 95 || (unsigned int)(v3 - 97) <= 0x1D) )\n    goto LABEL_10;\nLABEL_11:\n  memset(s, 0, 8uLL);\n  while ( 1 )\n  {\n    v12 = mbrtowc(&pwc, v11, v13 - v11, s);\n    if ( v12 == -1LL )\n    {\n      if ( (a3 & 1) == 0 )\n      {\n        ++v11;\n        ++v9;\n        goto LABEL_31;\n      }\n      return 0xFFFFFFFFLL;\n    }\n    if ( v12 == -2LL )\n      break;\n    if ( !v12 )\n      v12 = 1LL;\n    v10 = wcwidth(pwc);\n    if ( v10 < 0 )\n    {\n      if ( (a3 & 2) != 0 )\n        return 0xFFFFFFFFLL;\n      if ( !iswcntrl(pwc) )\n      {\n        if ( v9 == 0x7FFFFFFF )\n          return 0x7FFFFFFFLL;\n        ++v9;\n      }\n    }\n    else\n    {\n      if ( (int)(0x7FFFFFFF - v9) < v10 )\n        return 0x7FFFFFFFLL;\n      v9 += v10;\n    }\n    v11 += v12;\n    if ( mbsinit(s) )\n      goto LABEL_31;\n  }\n  if ( (a3 & 1) == 0 )\n  {\n    v11 = v13;\n    ++v9;\n    goto LABEL_31;\n  }\n  return 0xFFFFFFFFLL;\n}\n"], [4220202, "sub_40652A", "char *__fastcall sub_40652A(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_6185C0 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4220433, "sub_406611", "bool __fastcall sub_406611(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_415660[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4220487, "sub_406647", "__int64 __fastcall sub_406647(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  size_t v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_406611(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_408911(*(_QWORD *)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4220967, "sub_406827", "__int64 __fastcall sub_406827(_BYTE *a1, __int64 a2)\n{\n  size_t v7; // rax\n  unsigned __int8 v10; // [rsp+13h] [rbp-ADh]\n  char v11; // [rsp+14h] [rbp-ACh]\n  char v12; // [rsp+15h] [rbp-ABh]\n  char v13; // [rsp+16h] [rbp-AAh]\n  char v14; // [rsp+17h] [rbp-A9h]\n  char *s; // [rsp+18h] [rbp-A8h]\n  _BYTE *v16; // [rsp+20h] [rbp-A0h]\n  char v17[4]; // [rsp+30h] [rbp-90h] BYREF\n  int v18; // [rsp+34h] [rbp-8Ch] BYREF\n  char v19; // [rsp+3Ch] [rbp-84h]\n  unsigned __int64 v20; // [rsp+40h] [rbp-80h]\n  __int64 v21; // [rsp+48h] [rbp-78h]\n  __int64 v22; // [rsp+50h] [rbp-70h]\n  __int64 v23; // [rsp+58h] [rbp-68h]\n  __int64 v24; // [rsp+60h] [rbp-60h]\n  __int64 v25; // [rsp+68h] [rbp-58h]\n  unsigned __int64 v26; // [rsp+70h] [rbp-50h] BYREF\n  __int64 v27; // [rsp+78h] [rbp-48h]\n  wint_t wc[2]; // [rsp+80h] [rbp-40h]\n  __int64 v29; // [rsp+88h] [rbp-38h]\n  __int64 v30; // [rsp+90h] [rbp-30h]\n  __int64 v31; // [rsp+98h] [rbp-28h]\n  unsigned __int64 v32; // [rsp+B8h] [rbp-8h]\n\n  v32 = __readfsqword(0x28u);\n  s = (char *)sub_408B73(a2, 2LL);\n  v10 = 0;\n  while ( *a1 )\n  {\n    v16 = (_BYTE *)sub_40CACD(a1, s);\n    if ( !v16 )\n      break;\n    if ( __ctype_get_mb_cur_max() <= 1 )\n    {\n      v13 = 1;\n      if ( a1 < v16 && ((*__ctype_b_loc())[(unsigned __int8)*(v16 - 1)] & 8) != 0 )\n        v13 = 0;\n      v7 = strlen(s);\n      v14 = 1;\n      if ( v16[v7] && ((*__ctype_b_loc())[(unsigned __int8)v16[v7]] & 8) != 0 )\n        v14 = 0;\n      if ( v13 && v14 )\n      {\n        v10 = 1;\n        break;\n      }\n      if ( !*v16 )\n        break;\n      a1 = v16 + 1;\n    }\n    else\n    {\n      v20 = (unsigned __int64)a1;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      v11 = 1;\n      if ( v20 < (unsigned __int64)v16 )\n      {\n        do\n        {\n          sub_406647((__int64)v17);\n          if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n            abort();\n          v26 = v20;\n          v27 = v21;\n          *(_QWORD *)wc = v22;\n          v29 = v23;\n          v30 = v24;\n          v31 = v25;\n          v20 += v21;\n          v19 = 0;\n        }\n        while ( v20 < (unsigned __int64)v16 );\n        if ( LOBYTE(wc[0]) && iswalnum(wc[1]) )\n          v11 = 0;\n      }\n      v20 = (unsigned __int64)v16;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      *(_QWORD *)wc = s;\n      LOBYTE(v26) = 0;\n      memset((char *)&v26 + 4, 0, sizeof(unsigned __int64));\n      for ( BYTE4(v27) = 0; ; BYTE4(v27) = 0 )\n      {\n        sub_406647((__int64)&v26);\n        if ( (unsigned __int8)v30 == 1 && !HIDWORD(v30) )\n          break;\n        sub_406647((__int64)v17);\n        if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n          abort();\n        v20 += v21;\n        v19 = 0;\n        *(_QWORD *)wc += v29;\n      }\n      v12 = 1;\n      sub_406647((__int64)v17);\n      if ( (unsigned __int8)v22 != 1 || HIDWORD(v22) )\n      {\n        v26 = v20;\n        v27 = v21;\n        *(_QWORD *)wc = v22;\n        v29 = v23;\n        v30 = v24;\n        v31 = v25;\n        if ( (_BYTE)v22 )\n        {\n          if ( iswalnum(wc[1]) )\n            v12 = 0;\n        }\n      }\n      if ( v11 && v12 )\n      {\n        v10 = 1;\n        break;\n      }\n      v20 = (unsigned __int64)v16;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      sub_406647((__int64)v17);\n      if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n        break;\n      a1 = &v16[v21];\n    }\n  }\n  free(s);\n  return v10;\n}\n"], [4222197, "sub_406CF5", "const char *__fastcall sub_406CF5(const char *a1)\n{\n  size_t v2; // rbx\n  size_t v3; // rax\n  char *s; // [rsp+10h] [rbp-20h]\n  char *v5; // [rsp+18h] [rbp-18h]\n\n  s = gettext(a1);\n  if ( s == a1 )\n    return a1;\n  if ( (unsigned __int8)sub_406827(s, (__int64)a1) )\n    return s;\n  v2 = strlen(s);\n  v3 = strlen(a1);\n  v5 = (char *)sub_40986C(v2 + v3 + 4);\n  sprintf(v5, \"%s (%s)\", s, a1);\n  return v5;\n}\n"], [4222358, "sub_406D96", "char *__fastcall sub_406D96(const char *a1, __int64 a2)\n{\n  char *v2; // rax\n  char *result; // rax\n  size_t v4; // rbx\n  size_t v5; // rax\n  char *ptr; // [rsp+18h] [rbp-68h]\n  char *v7; // [rsp+20h] [rbp-60h]\n  __int64 v8; // [rsp+28h] [rbp-58h]\n  __int64 v9; // [rsp+30h] [rbp-50h]\n  char *s1; // [rsp+38h] [rbp-48h]\n  char *s; // [rsp+40h] [rbp-40h]\n  size_t n; // [rsp+48h] [rbp-38h]\n  char *dest; // [rsp+50h] [rbp-30h]\n  char *v14; // [rsp+58h] [rbp-28h]\n  char *v15; // [rsp+60h] [rbp-20h]\n  char *v16; // [rsp+68h] [rbp-18h]\n\n  s1 = gettext(a1);\n  s = (char *)sub_40BDB7();\n  ptr = 0LL;\n  v7 = 0LL;\n  v9 = 0LL;\n  if ( (unsigned int)sub_40B61C(s, \"UTF-8\") )\n  {\n    ptr = (char *)sub_409AFB(a2, \"UTF-8\", s);\n    v8 = (__int64)ptr;\n    n = strlen(s);\n    dest = (char *)sub_40986C(n + 11);\n    memcpy(dest, s, n);\n    memcpy(&dest[n], \"//TRANSLIT\", 0xBuLL);\n    v14 = (char *)sub_409AFB(a2, \"UTF-8\", dest);\n    free(dest);\n    if ( v14 )\n    {\n      if ( strchr(v14, 63) )\n      {\n        free(v14);\n      }\n      else\n      {\n        v7 = v14;\n        v9 = (__int64)v14;\n      }\n    }\n  }\n  else\n  {\n    v8 = a2;\n    v9 = a2;\n  }\n  if ( v8 )\n  {\n    v2 = (char *)v8;\n  }\n  else if ( v9 )\n  {\n    v2 = (char *)v9;\n  }\n  else\n  {\n    v2 = (char *)a1;\n  }\n  v15 = v2;\n  if ( !strcmp(s1, a1) )\n  {\n    if ( ptr && ptr != v15 )\n      free(ptr);\n    if ( v7 && v7 != v15 )\n      free(v7);\n    result = v15;\n  }\n  else if ( (unsigned __int8)sub_406827(s1, (__int64)a1)\n         || v8 && (unsigned __int8)sub_406827(s1, v8)\n         || v9 && (unsigned __int8)sub_406827(s1, v9) )\n  {\n    if ( ptr )\n      free(ptr);\n    if ( v7 )\n      free(v7);\n    result = s1;\n  }\n  else\n  {\n    v4 = strlen(s1);\n    v5 = strlen(v15);\n    v16 = (char *)sub_40986C(v4 + v5 + 4);\n    sprintf(v16, \"%s (%s)\", s1, v15);\n    if ( ptr )\n      free(ptr);\n    if ( v7 )\n      free(v7);\n    result = v16;\n  }\n  return result;\n}\n"], [4223074, "sub_407062", "__int64 __fastcall sub_407062(unsigned int a1, __int64 a2)\n{\n  return sub_408511(a1, 6LL, a2);\n}\n"], [4223110, "sub_407086", "__int64 __fastcall sub_407086(__int64 a1)\n{\n  return sub_407062(0, a1);\n}\n"], [4223141, "sub_4070A5", "__int64 __fastcall sub_4070A5(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_6185E0;\n  v4 = sub_409990(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4223214, "sub_4070EE", "__int64 __fastcall sub_4070EE(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_6185E0;\n  return *(unsigned int *)v1;\n}\n"], [4223244, "sub_40710C", "__int64 *__fastcall sub_40710C(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_6185E0;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4223280, "sub_407130", "__int64 __fastcall sub_407130(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_6185E0;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4223416, "sub_4071B8", "__int64 __fastcall sub_4071B8(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_6185E0;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4223467, "sub_4071EB", "__int64 *__fastcall sub_4071EB(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_6185E0;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4223557, "sub_407245", "_QWORD *__fastcall sub_407245(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4223677, "sub_4072BD", "char *__fastcall sub_4072BD(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'.\";\n  return v3;\n}\n"], [4223738, "sub_4072FA", "unsigned __int64 __fastcall sub_4072FA(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_4072BD((const char *)L\"`'.\", a5);\n        a9 = sub_4072BD((const char *)L\"'.\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'.\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'.\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_4072FA(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4226885, "sub_407F45", "unsigned __int64 __fastcall sub_407F45(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_6185E0;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_4072FA(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4227045, "sub_407FE5", "__int64 __fastcall sub_407FE5(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_408017(a1, a2, 0LL, a3);\n}\n"], [4227095, "sub_408017", "__int64 __fastcall sub_408017(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_6185E0;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_4072FA(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_409852(v10);\n  sub_4072FA(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4227395, "sub_408143", "void sub_408143()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_6184B0;\n  for ( i = 1; i < dword_618490; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_618620 )\n  {\n    free(ptr[1]);\n    qword_6184A0 = 256LL;\n    off_6184A8 = &unk_618620;\n  }\n  if ( ptr != (void **)&qword_6184A0 )\n  {\n    free(ptr);\n    off_6184B0 = (__int64)&qword_6184A0;\n  }\n  dword_618490 = 1;\n}\n"], [4227566, "sub_4081EE", "void *__fastcall sub_4081EE(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  _QWORD *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = (_QWORD *)off_6184B0;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_618490 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_6184B0 == (_QWORD)&qword_6184A0;\n    if ( (__int64 *)off_6184B0 == &qword_6184A0 )\n      v4 = 0LL;\n    else\n      v4 = off_6184B0;\n    v12 = (_QWORD *)sub_4098A1(v4, 16 * v14);\n    off_6184B0 = (__int64)v12;\n    if ( v9 )\n    {\n      v5 = off_6184A8;\n      *v12 = qword_6184A0;\n      v12[1] = v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_618490], 0, 16 * (v14 - (unsigned int)dword_618490));\n    dword_618490 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_4072FA((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_618620 )\n      free(ptr);\n    ptr = (void *)sub_409852(v16);\n    v12[2 * a1 + 1] = ptr;\n    sub_4072FA((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4228212, "sub_408474", "void *__fastcall sub_408474(int a1, __int64 a2)\n{\n  return sub_4081EE(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_6185E0);\n}\n"], [4228255, "sub_40849F", "void *__fastcall sub_40849F(int a1, __int64 a2, size_t a3)\n{\n  return sub_4081EE(a1, a2, a3, (__int64)&qword_6185E0);\n}\n"], [4228299, "sub_4084CB", "void *__fastcall sub_4084CB(__int64 a1)\n{\n  return sub_408474(0, a1);\n}\n"], [4228330, "sub_4084EA", "void *__fastcall sub_4084EA(__int64 a1, size_t a2)\n{\n  return sub_40849F(0, a1, a2);\n}\n"], [4228369, "sub_408511", "void *__fastcall sub_408511(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_407245(v5, a2);\n  return sub_4081EE(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4228434, "sub_408552", "void *__fastcall sub_408552(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_407245(v7, a2);\n  return sub_4081EE(a1, a3, a4, (__int64)v7);\n}\n"], [4228497, "sub_408591", "void *__fastcall sub_408591(int a1, __int64 a2)\n{\n  return sub_408511(0, a1, a2);\n}\n"], [4228533, "sub_4085B5", "void *__fastcall sub_4085B5(int a1, __int64 a2, size_t a3)\n{\n  return sub_408552(0, a1, a2, a3);\n}\n"], [4228577, "sub_4085E1", "void *__fastcall sub_4085E1(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_6185E0;\n  v4[1] = qword_6185E8;\n  v4[2] = qword_6185F0;\n  v4[3] = qword_6185F8;\n  v4[4] = qword_618600;\n  v4[5] = qword_618608;\n  v4[6] = qword_618610;\n  sub_407130(v4, a3, 1);\n  return sub_4081EE(0, a1, a2, (__int64)v4);\n}\n"], [4228725, "sub_408675", "void *__fastcall sub_408675(__int64 a1, unsigned __int8 a2)\n{\n  return sub_4085E1(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4228767, "sub_40869F", "void *__fastcall sub_40869F(__int64 a1)\n{\n  return sub_408675(a1, 0x3Au);\n}\n"], [4228798, "sub_4086BE", "void *__fastcall sub_4086BE(__int64 a1, size_t a2)\n{\n  return sub_4085E1(a1, a2, 0x3Au);\n}\n"], [4228840, "sub_4086E8", "__int64 __fastcall sub_4086E8(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_40871E(a1, a2, a3, a4, -1LL);\n}\n"], [4228894, "sub_40871E", "void *__fastcall sub_40871E(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_6185E0;\n  v8[1] = qword_6185E8;\n  v8[2] = qword_6185F0;\n  v8[3] = qword_6185F8;\n  v8[4] = qword_618600;\n  v8[5] = qword_618608;\n  v8[6] = qword_618610;\n  sub_4071EB(v8, a2, a3);\n  return sub_4081EE(a1, a4, a5, (__int64)v8);\n}\n"], [4229045, "sub_4087B5", "__int64 __fastcall sub_4087B5(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_4086E8(0, a1, a2, a3);\n}\n"], [4229092, "sub_4087E4", "void *__fastcall sub_4087E4(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_40871E(0, a1, a2, a3, a4);\n}\n"], [4229150, "sub_40881E", "__int64 __fastcall sub_40881E(unsigned int *a1, __int64 a2, int a3, int a4, int a5, int a6)\n{\n  __int64 result; // rax\n\n  *((_QWORD *)a1 + 1) = 0LL;\n  *a1 = sub_40B7BF(4280358, 0, a3, a4, a5, a6);\n  if ( (*a1 & 0x80000000) == 0 )\n  {\n    sub_40B693(*a1, 1LL);\n    result = 0LL;\n  }\n  else\n  {\n    *((_QWORD *)a1 + 1) = sub_40A6F7(0LL, 0LL);\n    if ( *((_QWORD *)a1 + 1) )\n      result = 0LL;\n    else\n      result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"], [4229285, "sub_4088A5", "int __fastcall sub_4088A5(__int64 a1)\n{\n  int result; // eax\n\n  if ( *(int *)a1 < 0 )\n    result = sub_40A330(*(_QWORD *)(a1 + 8));\n  else\n    result = fchdir(*(_DWORD *)a1);\n  return result;\n}\n"], [4229340, "sub_4088DC", "void __fastcall sub_4088DC(__int64 a1)\n{\n  if ( *(int *)a1 >= 0 )\n    close(*(_DWORD *)a1);\n  free(*(void **)(a1 + 8));\n}\n"], [4229393, "sub_408911", "__int64 __fastcall sub_408911(const void *a1, size_t a2)\n{\n  __int64 result; // rax\n  _BYTE *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = memchr(a1, 0, a2);\n  if ( v3 )\n    result = v3 - (_BYTE *)a1 + 1;\n  else\n    result = a2;\n  return result;\n}\n"], [4229467, "sub_40895B", "bool __fastcall sub_40895B(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_415660[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4229521, "sub_408991", "__int64 __fastcall sub_408991(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = *(unsigned __int8 *)(a1 + 20);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)(a1 + 8) )\n    {\n      if ( sub_40895B(**(_BYTE **)(a1 + 24)) )\n      {\n        *(_QWORD *)(a1 + 32) = 1LL;\n        *(_DWORD *)(a1 + 44) = **(char **)(a1 + 24);\n        *(_BYTE *)(a1 + 40) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 20) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 12)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbiter.h\", 0x86u, \"mbiter_multi_next\");\n      *(_BYTE *)(a1 + 8) = 1;\n    }\n    *(_QWORD *)(a1 + 32) = mbrtowc(\n                             (wchar_t *)(a1 + 44),\n                             *(const char **)(a1 + 24),\n                             *(_QWORD *)a1 - *(_QWORD *)(a1 + 24),\n                             (mbstate_t *)(a1 + 12));\n    if ( *(_QWORD *)(a1 + 32) == -1LL )\n    {\n      *(_QWORD *)(a1 + 32) = 1LL;\n      *(_BYTE *)(a1 + 40) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 32) == -2LL )\n    {\n      *(_QWORD *)(a1 + 32) = *(_QWORD *)a1 - *(_QWORD *)(a1 + 24);\n      *(_BYTE *)(a1 + 40) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 32) )\n      {\n        *(_QWORD *)(a1 + 32) = 1LL;\n        if ( **(_BYTE **)(a1 + 24) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbiter.h\", 0xA1u, \"mbiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 44) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbiter.h\", 0xA2u, \"mbiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 40) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 12)) )\n        *(_BYTE *)(a1 + 8) = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4230003, "sub_408B73", "char *__fastcall sub_408B73(const char *a1, int a2, double a3)\n{\n  size_t v3; // rax\n  size_t v4; // rax\n  int v6; // [rsp+14h] [rbp-7Ch]\n  char *v7; // [rsp+18h] [rbp-78h]\n  char *i; // [rsp+20h] [rbp-70h]\n  char *j; // [rsp+20h] [rbp-70h]\n  char *v10; // [rsp+28h] [rbp-68h]\n  unsigned __int64 v11; // [rsp+30h] [rbp-60h] BYREF\n  char v12; // [rsp+38h] [rbp-58h]\n  int v13; // [rsp+3Ch] [rbp-54h] BYREF\n  char k; // [rsp+44h] [rbp-4Ch]\n  char *v15; // [rsp+48h] [rbp-48h]\n  __int64 v16; // [rsp+50h] [rbp-40h]\n  char v17; // [rsp+58h] [rbp-38h]\n  wint_t wc; // [rsp+5Ch] [rbp-34h]\n  unsigned __int64 v19; // [rsp+78h] [rbp-18h]\n\n  v19 = __readfsqword(0x28u);\n  v10 = strdup(a1);\n  if ( !v10 )\n    sub_4099EE(a3);\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( a2 )\n    {\n      for ( i = v10; *i && ((*__ctype_b_loc())[(unsigned __int8)*i] & 0x2000) != 0; ++i )\n        ;\n      v4 = strlen(i);\n      memmove(v10, i, v4 + 1);\n    }\n    if ( a2 != 1 )\n    {\n      for ( j = &v10[strlen(v10) - 1]; j >= v10 && ((*__ctype_b_loc())[(unsigned __int8)*j] & 0x2000) != 0; --j )\n        *j = 0;\n    }\n  }\n  else\n  {\n    if ( a2 )\n    {\n      v15 = v10;\n      v11 = (unsigned __int64)&v10[strlen(v10)];\n      v12 = 0;\n      memset(&v13, 0, 8uLL);\n      for ( k = 0; (unsigned __int64)v15 < v11; k = 0 )\n      {\n        sub_408991((__int64)&v11);\n        if ( !v17 || !iswspace(wc) )\n          break;\n        v15 += v16;\n      }\n      v3 = strlen(v15);\n      memmove(v10, v15, v3 + 1);\n    }\n    if ( a2 != 1 )\n    {\n      v6 = 0;\n      v15 = v10;\n      v11 = (unsigned __int64)&v10[strlen(v10)];\n      v12 = 0;\n      memset(&v13, 0, 8uLL);\n      k = 0;\n      while ( (unsigned __int64)v15 < v11 )\n      {\n        sub_408991((__int64)&v11);\n        if ( v6 || !v17 || !iswspace(wc) )\n        {\n          if ( v6 || v17 == 1 && iswspace(wc) )\n          {\n            if ( v6 != 1 || v17 == 1 && iswspace(wc) )\n            {\n              if ( v6 == 1 && v17 && iswspace(wc) )\n              {\n                v6 = 2;\n                v7 = v15;\n              }\n              else if ( v6 != 2 || !v17 || !iswspace(wc) )\n              {\n                v6 = 1;\n              }\n            }\n          }\n          else\n          {\n            v6 = 1;\n          }\n        }\n        v15 += v16;\n        k = 0;\n      }\n      if ( v6 == 2 )\n        *v7 = 0;\n    }\n  }\n  return v10;\n}\n"], [4230866, "sub_408ED2", "int __fastcall sub_408ED2(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4232381, "sub_4094BD", "int __fastcall sub_4094BD(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_408ED2(a1, a2, a3, a4, a5, i);\n}\n"], [4232491, "sub_40952B", "int __fastcall sub_40952B(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_408ED2(a1, a2, a3, a4, v8, i);\n}\n"], [4232708, "sub_409604", "int sub_409604(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_40952B(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4232890, "sub_4096BA", "int sub_4096BA()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4232995, "sub_409723", "__int64 __fastcall sub_409723(unsigned __int64 a1, unsigned __int64 a2, double a3)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_4099EE(a3);\n  return sub_40986C(a2 * a1);\n}\n"], [4233057, "sub_409761", "__int64 __fastcall sub_409761(__int64 a1, unsigned __int64 a2, unsigned __int64 a3, double a4)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a3 < a2 )\n    sub_4099EE(a4);\n  return sub_4098A1(a1, a3 * a2);\n}\n"], [4233133, "sub_4097AD", "__int64 __fastcall sub_4097AD(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3, double a4)\n{\n  unsigned __int64 v5; // [rsp+28h] [rbp-8h]\n\n  v5 = *a2;\n  if ( a1 )\n  {\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v5 )\n      sub_4099EE(a4);\n    v5 += (v5 + 1) >> 1;\n  }\n  else if ( !v5 )\n  {\n    v5 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v5;\n  return sub_4098A1(a1, a3 * v5);\n}\n"], [4233298, "sub_409852", "__int64 __fastcall sub_409852(__int64 a1)\n{\n  return sub_40986C(a1);\n}\n"], [4233324, "sub_40986C", "void *__fastcall sub_40986C(size_t a1, double a2)\n{\n  void *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = malloc(a1);\n  if ( !v3 && a1 )\n    sub_4099EE(a2);\n  return v3;\n}\n"], [4233377, "sub_4098A1", "void *__fastcall sub_4098A1(void *a1, size_t a2, double a3)\n{\n  void *result; // rax\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_4099EE(a3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4233474, "sub_409902", "__int64 __fastcall sub_409902(__int64 a1, unsigned __int64 *a2, double a3)\n{\n  return sub_4097AD(a1, a2, 1uLL, a3);\n}\n"], [4233516, "sub_40992C", "void *__fastcall sub_40992C(size_t a1, double a2)\n{\n  void *v2; // rax\n\n  v2 = sub_40986C(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4233559, "sub_409957", "void *__fastcall sub_409957(size_t a1, size_t a2, double a3)\n{\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_4099EE(a3);\n  return v4;\n}\n"], [4233616, "sub_409990", "void *__fastcall sub_409990(const void *a1, size_t a2, double a3)\n{\n  void *v3; // rax\n\n  v3 = sub_40986C(a2, a3);\n  return memcpy(v3, a1, a2);\n}\n"], [4233665, "sub_4099C1", "void *__fastcall sub_4099C1(const char *a1, double a2)\n{\n  size_t v2; // rax\n\n  v2 = strlen(a1);\n  return sub_409990(a1, v2 + 1, a2);\n}\n"], [4233710, "sub_4099EE", "void __noreturn sub_4099EE()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(dword_618480, 0, \"%s\", v0);\n  abort();\n}\n"], [4233763, "sub_409A23", "__int64 sub_409A23()\n{\n  __int64 v1; // [rsp+8h] [rbp-8h]\n\n  v1 = sub_40A6F7(0LL, 0LL);\n  if ( !v1 && *__errno_location() == 12 )\n    sub_4099EE();\n  return v1;\n}\n"], [4233820, "sub_409A5C", "__int64 __fastcall sub_409A5C(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  int v6; // [rsp+3Ch] [rbp-4h]\n\n  v6 = sub_40D2AD(a1, a2, a3, a4, a5);\n  if ( v6 < 0 && *__errno_location() == 12 )\n    sub_4099EE();\n  return (unsigned int)v6;\n}\n"], [4233910, "sub_409AB6", "__int64 __fastcall sub_409AB6(__int64 a1, __int64 a2)\n{\n  __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_40D691(a1, a2);\n  if ( !v3 && *__errno_location() == 12 )\n    sub_4099EE();\n  return v3;\n}\n"], [4233979, "sub_409AFB", "__int64 __fastcall sub_409AFB(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  v4 = sub_40D9C6(a1, a2, a3);\n  if ( !v4 && *__errno_location() == 12 )\n    sub_4099EE();\n  return v4;\n}\n"], [4234056, "sub_409B48", "void __fastcall sub_409B48(unsigned int a1, int a2, char a3, __int64 a4, __int64 a5, int a6)\n{\n  char *v6; // rax\n  char v9[8]; // [rsp+20h] [rbp-20h] BYREF\n  const char *v10; // [rsp+28h] [rbp-18h]\n  char *msgid; // [rsp+30h] [rbp-10h]\n  char *v12; // [rsp+38h] [rbp-8h]\n\n  v10 = \"--\";\n  if ( a1 > 3 )\n  {\n    if ( a1 != 4 )\n      goto LABEL_6;\n    msgid = \"invalid %s%s argument `%s'\";\n  }\n  else if ( a1 >= 2 )\n  {\n    msgid = \"invalid suffix in %s%s argument `%s'\";\n  }\n  else\n  {\n    if ( a1 != 1 )\nLABEL_6:\n      abort();\n    msgid = \"%s%s argument `%s' too large\";\n  }\n  if ( a2 >= 0 )\n  {\n    v12 = *(char **)(32LL * a2 + a4);\n  }\n  else\n  {\n    v10 -= a2;\n    v9[0] = a3;\n    v9[1] = 0;\n    v12 = v9;\n  }\n  v6 = gettext(msgid);\n  error(a6, 0, v6, v10, v12, a5);\n}\n"], [4234274, "sub_409C22", "void __fastcall __noreturn sub_409C22(unsigned int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  sub_409B48(a1, a2, a3, a4, a5, dword_618480);\n  abort();\n}\n"], [4234344, "sub_409C68", "__int64 __fastcall sub_409C68(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4234439, "sub_409CC7", "__int64 __fastcall sub_409CC7(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_409C68(a1, a2) )\n    ;\n  return i;\n}\n"], [4234504, "sub_409D08", "__int64 __fastcall sub_409D08(const char *a1, char **a2, int a3, uintmax_t *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  uintmax_t v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoumax\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoumax(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_409CC7(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_409C68(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_409CC7(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_409C68(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_409CC7(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_409CC7(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_409C68(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_409CC7(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_409CC7(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_409CC7(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_409CC7(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4235636, "sub_40A174", "__int64 sub_40A174(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+18h] [rbp-C8h] BYREF\n\n  va_start(va, a2);\n  return (unsigned int)sub_40B196(a1, a2, va);\n}\n"], [4235816, "sub_40A228", "_DWORD *__fastcall sub_40A228(_DWORD *a1)\n{\n  _DWORD *result; // rax\n\n  result = a1;\n  *a1 = -100;\n  return result;\n}\n"], [4235836, "sub_40A23C", "int __fastcall sub_40A23C(int *a1)\n{\n  return fchdir(*a1);\n}\n"], [4235863, "sub_40A257", "__int64 __fastcall sub_40A257(int *a1)\n{\n  __int64 result; // rax\n\n  result = (unsigned int)*a1;\n  if ( (int)result >= 0 )\n  {\n    result = close(*a1) == 0;\n    if ( !(_BYTE)result )\n      __assert_fail(\"! close_fail\", \"../../src/lib/chdir-long.c\", 0x3Fu, \"cdb_free\");\n  }\n  return result;\n}\n"], [4235944, "sub_40A2A8", "__int64 __fastcall sub_40A2A8(int *a1, const char *a2)\n{\n  int v3; // [rsp+1Ch] [rbp-4h]\n\n  v3 = openat(*a1, a2, 67840);\n  if ( v3 < 0 )\n    return 0xFFFFFFFFLL;\n  sub_40A257(a1);\n  *a1 = v3;\n  return 0LL;\n}\n"], [4236034, "sub_40A302", "const char *__fastcall sub_40A302(const char *a1)\n{\n  return &a1[strspn(a1, \"/\")];\n}\n"], [4236080, "sub_40A330", "__int64 __fastcall sub_40A330(const char *a1)\n{\n  char *path; // [rsp+8h] [rbp-48h]\n  int v3; // [rsp+10h] [rbp-40h] BYREF\n  unsigned int v4; // [rsp+18h] [rbp-38h]\n  int v5; // [rsp+1Ch] [rbp-34h]\n  int v6; // [rsp+20h] [rbp-30h]\n  int v7; // [rsp+24h] [rbp-2Ch]\n  size_t v8; // [rsp+28h] [rbp-28h]\n  unsigned __int64 v9; // [rsp+30h] [rbp-20h]\n  size_t v10; // [rsp+38h] [rbp-18h]\n  char *v11; // [rsp+40h] [rbp-10h]\n  void *v12; // [rsp+48h] [rbp-8h]\n\n  path = (char *)a1;\n  v4 = chdir(a1);\n  if ( !v4 || *__errno_location() != 36 )\n    return v4;\n  v8 = strlen(a1);\n  v9 = (unsigned __int64)&a1[v8];\n  sub_40A228(&v3);\n  if ( !v8 )\n    __assert_fail(\"0 < len\", \"../../src/lib/chdir-long.c\", 0x7Du, \"chdir_long\");\n  if ( v8 <= 0xFFF )\n    __assert_fail(\"4096 <= len\", \"../../src/lib/chdir-long.c\", 0x7Eu, \"chdir_long\");\n  v10 = strspn(a1, \"/\");\n  if ( v10 == 2 )\n  {\n    v11 = (char *)memchr(a1 + 3, 47, v9 - (_QWORD)(a1 + 3));\n    if ( !v11 )\n    {\nLABEL_10:\n      *__errno_location() = 36;\n      return 0xFFFFFFFFLL;\n    }\n    *v11 = 0;\n    v5 = sub_40A2A8(&v3, a1);\n    *v11 = 47;\n    if ( v5 )\n      goto LABEL_31;\n    path = (char *)sub_40A302(v11 + 1);\n  }\n  else if ( v10 )\n  {\n    if ( (unsigned int)sub_40A2A8(&v3, \"/\") )\n      goto LABEL_31;\n    path = (char *)&a1[v10];\n  }\n  if ( *path == 47 )\n    __assert_fail(\"*dir != '/'\", \"../../src/lib/chdir-long.c\", 0xA1u, \"chdir_long\");\n  if ( (unsigned __int64)path > v9 )\n    __assert_fail(\"dir <= dir_end\", \"../../src/lib/chdir-long.c\", 0xA2u, \"chdir_long\");\n  while ( (__int64)(v9 - (_QWORD)path) > 4095 )\n  {\n    v12 = memrchr(path, 47, 0x1000uLL);\n    if ( !v12 )\n      goto LABEL_10;\n    *(_BYTE *)v12 = 0;\n    if ( (_BYTE *)v12 - path > 4095 )\n      __assert_fail(\"slash - dir < 4096\", \"../../src/lib/chdir-long.c\", 0xB2u, \"chdir_long\");\n    v6 = sub_40A2A8(&v3, path);\n    *(_BYTE *)v12 = 47;\n    if ( v6 )\n      goto LABEL_31;\n    path = (char *)sub_40A302((const char *)v12 + 1);\n  }\n  if ( ((unsigned __int64)path >= v9 || !(unsigned int)sub_40A2A8(&v3, path)) && !sub_40A23C(&v3) )\n  {\n    sub_40A257(&v3);\n    return 0LL;\n  }\nLABEL_31:\n  v7 = *__errno_location();\n  sub_40A257(&v3);\n  *__errno_location() = v7;\n  return 0xFFFFFFFFLL;\n}\n"], [4236837, "sub_40A625", "__int64 __fastcall sub_40A625(const char *a1, __int64 a2, __int64 a3)\n{\n  struct statfs v5; // [rsp+20h] [rbp-80h] BYREF\n\n  if ( statfs(a1, &v5) < 0 )\n    return 0xFFFFFFFFLL;\n  *(_QWORD *)a3 = v5.f_bsize;\n  *(_QWORD *)(a3 + 8) = v5.f_blocks;\n  *(_QWORD *)(a3 + 16) = v5.f_bfree;\n  *(_QWORD *)(a3 + 24) = v5.f_bavail | -(__int64)(v5.f_bavail & 0x8000000000000000LL);\n  *(_BYTE *)(a3 + 32) = (v5.f_bavail & 0x8000000000000000LL) != 0LL;\n  *(_QWORD *)(a3 + 40) = v5.f_files;\n  *(_QWORD *)(a3 + 48) = v5.f_ffree;\n  return 0LL;\n}\n"], [4237047, "sub_40A6F7", "char *__fastcall sub_40A6F7(char *a1, size_t a2)\n{\n  char *v3; // rbx\n  char v4; // al\n  size_t v5; // rax\n  char *v6; // rbx\n  char *buf; // [rsp+8h] [rbp-1148h]\n  char v8; // [rsp+14h] [rbp-113Ch]\n  char v9; // [rsp+15h] [rbp-113Bh]\n  bool v10; // [rsp+16h] [rbp-113Ah]\n  int fd; // [rsp+18h] [rbp-1138h]\n  int v12; // [rsp+24h] [rbp-112Ch]\n  DIR *dirp; // [rsp+28h] [rbp-1128h]\n  __dev_t v14; // [rsp+30h] [rbp-1120h]\n  __ino_t v15; // [rsp+38h] [rbp-1118h]\n  char *s; // [rsp+40h] [rbp-1110h]\n  const char *sa; // [rsp+40h] [rbp-1110h]\n  char *sb; // [rsp+40h] [rbp-1110h]\n  size_t v19; // [rsp+48h] [rbp-1108h]\n  struct dirent *v20; // [rsp+50h] [rbp-1100h]\n  __dev_t v21; // [rsp+58h] [rbp-10F8h]\n  __ino_t v22; // [rsp+60h] [rbp-10F0h]\n  __dev_t v23; // [rsp+70h] [rbp-10E0h]\n  __ino_t v24; // [rsp+78h] [rbp-10D8h]\n  size_t n; // [rsp+88h] [rbp-10C8h]\n  size_t v26; // [rsp+90h] [rbp-10C0h]\n  char *v27; // [rsp+98h] [rbp-10B8h]\n  struct stat stat_buf; // [rsp+A0h] [rbp-10B0h] BYREF\n  char v29[4104]; // [rsp+130h] [rbp-1020h] BYREF\n  unsigned __int64 v30; // [rsp+1138h] [rbp-18h]\n\n  buf = a1;\n  v30 = __readfsqword(0x28u);\n  fd = -100;\n  v8 = 0;\n  dirp = 0LL;\n  v19 = a2;\n  s = getcwd(a1, a2);\n  if ( s || a2 && *__errno_location() == 34 )\n    return s;\n  if ( *__errno_location() == 22 && !a1 && !a2 )\n  {\n    sa = getcwd(v29, 0x1000uLL);\n    if ( sa )\n      return strdup(sa);\n  }\n  if ( !a2 )\n  {\n    if ( a1 )\n    {\n      *__errno_location() = 22;\n      return 0LL;\n    }\n    v19 = 4096LL;\n  }\n  if ( a1 )\n  {\n    sb = a1;\n  }\n  else\n  {\n    sb = (char *)malloc(v19);\n    if ( !sb )\n      return 0LL;\n  }\n  v3 = &sb[v19 - 1];\n  *v3 = 0;\n  if ( (int)sub_413F60(\".\", &stat_buf) < 0 )\n    goto LABEL_75;\n  v14 = stat_buf.st_dev;\n  v15 = stat_buf.st_ino;\n  if ( (int)sub_413F60(\"/\", &stat_buf) < 0 )\n    goto LABEL_75;\n  v21 = stat_buf.st_dev;\n  v22 = stat_buf.st_ino;\n  while ( 2 )\n  {\n    if ( v14 != v21 || v15 != v22 )\n    {\n      v9 = 1;\n      fd = openat(fd, \"..\", 0);\n      if ( fd >= 0 )\n      {\n        v8 = 1;\n        if ( !(unsigned int)sub_413F50(fd, &stat_buf) )\n        {\n          if ( dirp && closedir(dirp) )\n          {\n            dirp = 0LL;\n          }\n          else\n          {\n            v23 = stat_buf.st_dev;\n            v24 = stat_buf.st_ino;\n            v10 = stat_buf.st_dev != v14;\n            dirp = fdopendir(fd);\n            if ( dirp )\n            {\n              v8 = 0;\n              while ( 1 )\n              {\n                *__errno_location() = 0;\n                v20 = readdir(dirp);\n                if ( !v20 && !*__errno_location() && v9 )\n                {\n                  v9 = 0;\n                  rewinddir(dirp);\n                  v20 = readdir(dirp);\n                }\n                if ( !v20 )\n                {\n                  if ( !*__errno_location() )\n                    *__errno_location() = 2;\n                  goto LABEL_75;\n                }\n                if ( v20->d_name[0] != 46 || v20->d_name[1] && (v20->d_name[1] != 46 || v20->d_name[2]) )\n                {\n                  if ( !v9 || (v20->d_ino != v15 && !v10 ? (v4 = 0) : (v4 = 1), (v4 & 1) != 0) )\n                  {\n                    if ( !(unsigned int)sub_413F70(fd, v20->d_name, &stat_buf, 256)\n                      && (stat_buf.st_mode & 0xF000) == 0x4000\n                      && stat_buf.st_dev == v14\n                      && stat_buf.st_ino == v15 )\n                    {\n                      break;\n                    }\n                  }\n                }\n              }\n              n = strlen(v20->d_name);\n              if ( v3 - sb > n )\n              {\nLABEL_61:\n                v6 = &v3[-n];\n                memcpy(v6, v20->d_name, n);\n                v3 = v6 - 1;\n                *v3 = 47;\n                v14 = v23;\n                v15 = v24;\n                continue;\n              }\n              if ( a2 )\n              {\n                *__errno_location() = 34;\n                goto LABEL_75;\n              }\n              v26 = v19;\n              v5 = n;\n              if ( v19 >= n )\n                v5 = v19;\n              v19 += v5;\n              if ( v19 >= v26 )\n              {\n                v27 = (char *)realloc(sb, v19);\n                if ( v27 )\n                {\n                  v3 = (char *)memcpy(&v27[v19 + v3 - sb - v26], &v27[v3 - sb], v26 - (v3 - sb));\n                  sb = v27;\n                  goto LABEL_61;\n                }\n              }\n              *__errno_location() = 12;\n            }\n          }\n        }\n      }\n      goto LABEL_75;\n    }\n    break;\n  }\n  if ( dirp && closedir(dirp) )\n  {\n    dirp = 0LL;\nLABEL_75:\n    v12 = *__errno_location();\n    if ( dirp )\n      closedir(dirp);\n    if ( v8 )\n      close(fd);\n    if ( !a1 )\n      free(sb);\n    *__errno_location() = v12;\n    return 0LL;\n  }\n  if ( &sb[v19 - 1] == v3 )\n    *--v3 = 47;\n  memmove(sb, v3, &sb[v19] - v3);\n  if ( !a2 )\n    buf = (char *)realloc(sb, &sb[v19] - v3);\n  if ( !buf )\n    buf = sb;\n  return buf;\n}\n"], [4238985, "sub_40AE89", "__int64 sub_40AE89()\n{\n  return -1LL;\n}\n"], [4239002, "sub_40AE9A", "void *__fastcall sub_40AE9A(double a1)\n{\n  void *result; // rax\n  void *v2; // rax\n  void *v3; // rax\n  void *v4; // rax\n  bool v5; // al\n  bool v6; // al\n  __int64 v7; // rax\n  int v8; // [rsp+1Ch] [rbp-34h]\n  void *ptr; // [rsp+20h] [rbp-30h] BYREF\n  void **v10; // [rsp+28h] [rbp-28h]\n  char *file; // [rsp+30h] [rbp-20h]\n  FILE *stream; // [rsp+38h] [rbp-18h]\n  struct mntent *v13; // [rsp+40h] [rbp-10h]\n  char *v14; // [rsp+48h] [rbp-8h]\n\n  v10 = &ptr;\n  file = \"/etc/mtab\";\n  stream = setmntent(\"/etc/mtab\", \"r\");\n  if ( !stream )\n    return 0LL;\n  while ( 1 )\n  {\n    v13 = getmntent(stream);\n    if ( !v13 )\n      break;\n    v14 = (char *)sub_40986C(0x30uLL, a1);\n    v2 = sub_4099C1(v13->mnt_fsname, a1);\n    *(_QWORD *)v14 = v2;\n    v3 = sub_4099C1(v13->mnt_dir, a1);\n    *((_QWORD *)v14 + 1) = v3;\n    v4 = sub_4099C1(v13->mnt_type, a1);\n    *((_QWORD *)v14 + 2) = v4;\n    v14[32] |= 4u;\n    v5 = !strcmp(*((const char **)v14 + 2), \"autofs\")\n      || !strcmp(*((const char **)v14 + 2), \"none\")\n      || !strcmp(*((const char **)v14 + 2), \"proc\")\n      || !strcmp(*((const char **)v14 + 2), \"subfs\")\n      || !strcmp(*((const char **)v14 + 2), \"kernfs\")\n      || !strcmp(*((const char **)v14 + 2), \"ignore\");\n    v14[32] = v5 | v14[32] & 0xFE;\n    v6 = strchr(*(const char **)v14, 58)\n      || **(_BYTE **)v14 == 47\n      && *(_BYTE *)(*(_QWORD *)v14 + 1LL) == 47\n      && (!strcmp(*((const char **)v14 + 2), \"smbfs\") || !strcmp(*((const char **)v14 + 2), \"cifs\"));\n    v14[32] = (2 * v6) | v14[32] & 0xFD;\n    v7 = sub_40AE89(v13->mnt_opts);\n    *((_QWORD *)v14 + 3) = v7;\n    *v10 = v14;\n    v10 = (void **)(v14 + 40);\n  }\n  if ( endmntent(stream) )\n  {\n    *v10 = 0LL;\n    result = ptr;\n  }\n  else\n  {\n    v8 = *__errno_location();\n    *v10 = 0LL;\n    while ( ptr )\n    {\n      v14 = (char *)*((_QWORD *)ptr + 5);\n      free(*(void **)ptr);\n      free(*((void **)ptr + 1));\n      if ( (*((_BYTE *)ptr + 32) & 4) != 0 )\n        free(*((void **)ptr + 2));\n      free(ptr);\n      ptr = v14;\n    }\n    *__errno_location() = v8;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4239766, "sub_40B196", "unsigned __int64 __fastcall sub_40B196(void **a1, __int64 a2, __int64 a3)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // [rsp+20h] [rbp-10h] BYREF\n  void *ptr; // [rsp+28h] [rbp-8h]\n\n  ptr = (void *)sub_40E0CB(0LL, &v4, a2, a3);\n  if ( !ptr )\n    return 0xFFFFFFFFLL;\n  if ( v4 <= 0x7FFFFFFF )\n  {\n    *a1 = ptr;\n    result = v4;\n  }\n  else\n  {\n    free(ptr);\n    *__errno_location() = 75;\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"], [4239888, "sub_40B210", "void __noreturn sub_40B210()\n{\n  sub_403D13(1);\n}\n"], [4239904, "sub_40B220", "__int64 __fastcall sub_40B220(const char *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 result; // rax\n  char v7; // [rsp+27h] [rbp-19h]\n  __int64 i; // [rsp+28h] [rbp-18h]\n  __int64 v9; // [rsp+30h] [rbp-10h]\n  size_t n; // [rsp+38h] [rbp-8h]\n\n  v9 = -1LL;\n  v7 = 0;\n  n = strlen(a1);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !strncmp(*(const char **)(8 * i + a2), a1, n) )\n    {\n      if ( strlen(*(const char **)(8 * i + a2)) == n )\n        return i;\n      if ( v9 == -1 )\n      {\n        v9 = i;\n      }\n      else if ( !a3 || memcmp((const void *)(a4 * v9 + a3), (const void *)(i * a4 + a3), a4) )\n      {\n        v7 = 1;\n      }\n    }\n  }\n  if ( v7 )\n    result = -2LL;\n  else\n    result = v9;\n  return result;\n}\n"], [4240207, "sub_40B34F", "void __fastcall sub_40B34F(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  __int64 v4; // rbx\n  void *v5; // rax\n  char *format; // [rsp+28h] [rbp-18h]\n\n  if ( a3 == -1 )\n    v3 = gettext(\"invalid argument %s for %s\");\n  else\n    v3 = gettext(\"ambiguous argument %s for %s\");\n  format = v3;\n  v4 = sub_407062(1u, a1);\n  v5 = sub_408511(0, 6, a2);\n  error(0, 0, format, v5, v4);\n}\n"], [4240346, "sub_40B3DA", "int __fastcall sub_40B3DA(__int64 a1, __int64 a2, size_t a3)\n{\n  char *v3; // rax\n  __int64 i; // [rsp+20h] [rbp-10h]\n  void *s1; // [rsp+28h] [rbp-8h]\n\n  s1 = 0LL;\n  v3 = gettext(\"Valid arguments are:\");\n  fprintf(stderr, v3);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a1); ++i )\n  {\n    if ( i && !memcmp(s1, (const void *)(i * a3 + a2), a3) )\n    {\n      fprintf(stderr, \", `%s'\", *(const char **)(8 * i + a1));\n    }\n    else\n    {\n      fprintf(stderr, \"\\n  - `%s'\", *(const char **)(8 * i + a1));\n      s1 = (void *)(i * a3 + a2);\n    }\n  }\n  return putc_unlocked(10, stderr);\n}\n"], [4240650, "sub_40B50A", "__int64 __fastcall sub_40B50A(__int64 a1, const char *a2, __int64 a3, __int64 a4, size_t a5, void (*a6)(void))\n{\n  __int64 v11; // [rsp+38h] [rbp-8h]\n\n  v11 = sub_40B220(a2, a3, a4, a5);\n  if ( v11 >= 0 )\n    return v11;\n  sub_40B34F(a1, (__int64)a2, v11);\n  sub_40B3DA(a3, a4, a5);\n  a6();\n  return -1LL;\n}\n"], [4240784, "sub_40B590", "__int64 __fastcall sub_40B590(const void *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 i; // [rsp+28h] [rbp-8h]\n\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !memcmp(a1, (const void *)(i * a4 + a3), a4) )\n      return *(_QWORD *)(8 * i + a2);\n  }\n  return 0LL;\n}\n"], [4240924, "sub_40B61C", "__int64 __fastcall sub_40B61C(unsigned __int8 *a1, unsigned __int8 *a2)\n{\n  unsigned __int8 *v2; // r12\n  unsigned __int8 *v3; // rbx\n  unsigned __int8 v5; // [rsp+1Eh] [rbp-12h]\n  unsigned __int8 v6; // [rsp+1Fh] [rbp-11h]\n\n  v2 = a1;\n  v3 = a2;\n  if ( a1 == a2 )\n    return 0LL;\n  do\n  {\n    v5 = sub_411ACE(*v2);\n    v6 = sub_411ACE(*v3);\n    if ( !v5 )\n      break;\n    ++v2;\n    ++v3;\n  }\n  while ( v5 == v6 );\n  return v5 - (unsigned int)v6;\n}\n"], [4241043, "sub_40B693", "__int64 __fastcall sub_40B693(int a1, char a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ecx\n  int v7; // er8\n  int v8; // er9\n  unsigned int v9; // eax\n  __int64 result; // rax\n  int v11; // [rsp+18h] [rbp-8h]\n\n  v11 = sub_40DBCB(a1, 1, 0, a4, a5, a6);\n  if ( v11 < 0\n    || (!a2 ? (v9 = v11 & 0xFFFFFFFE) : (v9 = v11 | 1),\n        v11 != v9 && (unsigned int)sub_40DBCB(a1, 2, v9, v6, v7, v8) == -1) )\n  {\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n"], [4241166, "sub_40B70E", "__int64 __fastcall sub_40B70E(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_40DBCB(a1, 1030, 0, a4, a5, a6);\n}\n"], [4241204, "sub_40B734", "__int64 __fastcall sub_40B734(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = (unsigned int)sub_40DB16(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4241343, "sub_40B7BF", "__int64 __fastcall sub_40B7BF(const char *a1, char a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  unsigned int v5; // [rsp+14h] [rbp-CCh]\n\n  v5 = 0;\n  if ( (a2 & 0x40) != 0 )\n    v5 = a3;\n  v3 = open(a1, a2, v5);\n  return sub_40DAC9(v3);\n}\n"], [4241617, "sub_40B8D1", "void *sub_40B8D1()\n{\n  _BOOL4 v0; // eax\n  size_t v1; // rax\n  _BOOL4 v3; // [rsp+4h] [rbp-FCh]\n  int fd; // [rsp+8h] [rbp-F8h]\n  int c; // [rsp+Ch] [rbp-F4h]\n  int ca; // [rsp+Ch] [rbp-F4h]\n  void *v7; // [rsp+10h] [rbp-F0h]\n  const char *s; // [rsp+18h] [rbp-E8h]\n  void *ptr; // [rsp+20h] [rbp-E0h]\n  __int64 v10; // [rsp+28h] [rbp-D8h]\n  size_t n; // [rsp+38h] [rbp-C8h]\n  size_t v12; // [rsp+40h] [rbp-C0h]\n  char *dest; // [rsp+48h] [rbp-B8h]\n  FILE *stream; // [rsp+50h] [rbp-B0h]\n  size_t v15; // [rsp+58h] [rbp-A8h]\n  size_t v16; // [rsp+60h] [rbp-A0h]\n  void *v17; // [rsp+68h] [rbp-98h]\n  char src[64]; // [rsp+70h] [rbp-90h] BYREF\n  char v19[56]; // [rsp+B0h] [rbp-50h] BYREF\n  unsigned __int64 v20; // [rsp+E8h] [rbp-18h]\n\n  v20 = __readfsqword(0x28u);\n  v7 = (void *)qword_618720;\n  if ( !qword_618720 )\n  {\n    s = getenv(\"CHARSETALIASDIR\");\n    if ( !s || !*s )\n      s = \"/root/Product/coreutils/exe/lib\";\n    n = strlen(s);\n    v12 = strlen(\"charset.alias\");\n    v0 = n && s[n - 1] != 47;\n    v3 = v0;\n    dest = (char *)malloc(n + v0 + v12 + 1);\n    if ( dest )\n    {\n      memcpy(dest, s, n);\n      if ( v3 )\n        dest[n] = 47;\n      memcpy(&dest[n + v3], \"charset.alias\", v12 + 1);\n    }\n    if ( dest )\n    {\n      fd = open(dest, 0x20000);\n      if ( fd >= 0 )\n      {\n        stream = fdopen(fd, \"r\");\n        if ( stream )\n        {\n          ptr = 0LL;\n          v10 = 0LL;\n          while ( 1 )\n          {\n            c = getc_unlocked(stream);\n            if ( c == -1 )\n              break;\n            if ( c != 10 && c != 32 && c != 9 )\n            {\n              if ( c == 35 )\n              {\n                do\n                  ca = getc_unlocked(stream);\n                while ( ca != -1 && ca != 10 );\n                if ( ca == -1 )\n                  break;\n              }\n              else\n              {\n                ungetc(c, stream);\n                if ( fscanf(stream, \"%50s %50s\", src, v19) <= 1 )\n                  break;\n                v15 = strlen(src);\n                v16 = strlen(v19);\n                v17 = ptr;\n                if ( v10 )\n                {\n                  v1 = v16 + v15 + v10;\n                  v10 = v1 + 2;\n                  ptr = realloc(ptr, v1 + 3);\n                }\n                else\n                {\n                  v10 = v15 + v16 + 2;\n                  ptr = malloc(v15 + v16 + 3);\n                }\n                if ( !ptr )\n                {\n                  v10 = 0LL;\n                  free(v17);\n                  break;\n                }\n                strcpy((char *)ptr + v10 - v16 - v15 - 2, src);\n                strcpy((char *)ptr + v10 - v16 - 1, v19);\n              }\n            }\n          }\n          sub_40DB16(stream);\n          if ( v10 )\n          {\n            *((_BYTE *)ptr + v10) = 0;\n            v7 = ptr;\n          }\n          else\n          {\n            v7 = &unk_415640;\n          }\n        }\n        else\n        {\n          close(fd);\n          v7 = &unk_415640;\n        }\n      }\n      else\n      {\n        v7 = &unk_415640;\n      }\n      free(dest);\n    }\n    else\n    {\n      v7 = &unk_415640;\n    }\n    qword_618720 = (__int64)v7;\n  }\n  return v7;\n}\n"], [4242871, "sub_40BDB7", "const char *sub_40BDB7()\n{\n  const char *s1; // [rsp+0h] [rbp-10h]\n  char *s2; // [rsp+8h] [rbp-8h]\n  char *s2a; // [rsp+8h] [rbp-8h]\n\n  s1 = nl_langinfo(14);\n  if ( !s1 )\n    s1 = (const char *)&unk_415640;\n  for ( s2 = (char *)sub_40B8D1(); *s2; s2 = &s2a[strlen(s2a) + 1] )\n  {\n    if ( !strcmp(s1, s2) || *s2 == 42 && !s2[1] )\n    {\n      s1 = &s2[strlen(s2) + 1];\n      break;\n    }\n    s2a = &s2[strlen(s2) + 1];\n  }\n  if ( !*s1 )\n    s1 = \"ASCII\";\n  return s1;\n}\n"], [4243077, "sub_40BE85", "__int64 __fastcall sub_40BE85(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( *(_QWORD *)a2 == a2 + 24 )\n  {\n    memcpy((void *)(a1 + 24), (const void *)(a2 + 24), *(_QWORD *)(a2 + 8));\n    *(_QWORD *)a1 = a1 + 24;\n  }\n  else\n  {\n    *(_QWORD *)a1 = *(_QWORD *)a2;\n  }\n  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);\n  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);\n  result = *(unsigned __int8 *)(a1 + 16);\n  if ( (_BYTE)result )\n  {\n    result = a1;\n    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);\n  }\n  return result;\n}\n"], [4243238, "sub_40BF26", "bool __fastcall sub_40BF26(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_415660[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4243292, "sub_40BF5C", "__int64 __fastcall sub_40BF5C(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_40BF26(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_408911(*(const void **)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4243772, "sub_40C13C", "__int64 __fastcall sub_40C13C(_BYTE *a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)\n{\n  void *v4; // rsp\n  unsigned __int64 v5; // rax\n  __int64 v8; // [rsp+8h] [rbp-68h] BYREF\n  __int64 v9; // [rsp+10h] [rbp-60h]\n  _BYTE *v10; // [rsp+18h] [rbp-58h]\n  char v11; // [rsp+27h] [rbp-49h]\n  unsigned __int64 i; // [rsp+28h] [rbp-48h]\n  __int64 v13; // [rsp+30h] [rbp-40h]\n  __int64 v14; // [rsp+38h] [rbp-38h]\n  _BYTE *v15; // [rsp+40h] [rbp-30h]\n  _BYTE *v16; // [rsp+48h] [rbp-28h]\n  unsigned __int64 v17; // [rsp+50h] [rbp-20h]\n  unsigned __int64 v18; // [rsp+58h] [rbp-18h]\n\n  v10 = a1;\n  v9 = a2;\n  HIBYTE(v8) = HIBYTE(a3);\n  v17 = a3;\n  if ( a3 > 0x1FFFFFFFFFFFFFFFLL )\n  {\n    v5 = 0LL;\n  }\n  else if ( 8 * v17 > 0xFAF )\n  {\n    v5 = sub_411B0E(8 * v17);\n  }\n  else\n  {\n    v4 = alloca(16 * ((8 * (v17 + 2) + 30) / 0x10));\n    v5 = 16 * (((unsigned __int64)&v8 + 7) >> 4) + 16;\n  }\n  v18 = v5;\n  if ( !v5 )\n    return 0LL;\n  *(_QWORD *)(v18 + 8) = 1LL;\n  v13 = 0LL;\n  for ( i = 2LL; i < v17; ++i )\n  {\n    v11 = *(_BYTE *)(i - 1 + v9);\n    while ( 1 )\n    {\n      if ( *(_BYTE *)(v9 + v13) == v11 )\n      {\n        ++v13;\n        *(_QWORD *)(8 * i + v18) = i - v13;\n        goto LABEL_15;\n      }\n      if ( !v13 )\n        break;\n      v13 -= *(_QWORD *)(8 * v13 + v18);\n    }\n    *(_QWORD *)(v18 + 8 * i) = i;\nLABEL_15:\n    ;\n  }\n  *a4 = 0LL;\n  v14 = 0LL;\n  v15 = v10;\n  v16 = v10;\n  while ( *v16 )\n  {\n    if ( *(_BYTE *)(v9 + v14) == *v16 )\n    {\n      ++v14;\n      ++v16;\n      if ( v14 == v17 )\n      {\n        *a4 = v15;\n        break;\n      }\n    }\n    else if ( v14 )\n    {\n      v15 += *(_QWORD *)(8 * v14 + v18);\n      v14 -= *(_QWORD *)(8 * v14 + v18);\n    }\n    else\n    {\n      ++v15;\n      ++v16;\n    }\n  }\n  sub_411BC9(v18);\n  return 1LL;\n}\n"], [4244358, "sub_40C386", "__int64 __fastcall sub_40C386(char *a1, void *a2, _QWORD *a3)\n{\n  void *v3; // rsp\n  unsigned __int64 v4; // rax\n  bool v7; // al\n  bool v8; // al\n  bool v9; // al\n  bool v10; // al\n  _QWORD *v14; // [rsp+8h] [rbp-108h] BYREF\n  void *v15; // [rsp+10h] [rbp-100h]\n  char *v16; // [rsp+18h] [rbp-F8h]\n  __int64 v17; // [rsp+20h] [rbp-F0h]\n  unsigned __int64 i; // [rsp+28h] [rbp-E8h]\n  __int64 v19; // [rsp+30h] [rbp-E0h]\n  __int64 v20; // [rsp+38h] [rbp-D8h]\n  __int64 v21; // [rsp+40h] [rbp-D0h]\n  unsigned __int64 v22; // [rsp+48h] [rbp-C8h]\n  unsigned __int64 v23; // [rsp+50h] [rbp-C0h]\n  unsigned __int64 v24; // [rsp+58h] [rbp-B8h]\n  unsigned __int64 v25; // [rsp+60h] [rbp-B0h]\n  unsigned __int64 v26; // [rsp+68h] [rbp-A8h]\n  char v27[4]; // [rsp+70h] [rbp-A0h] BYREF\n  int v28; // [rsp+74h] [rbp-9Ch] BYREF\n  char v29; // [rsp+7Ch] [rbp-94h]\n  char *v30; // [rsp+80h] [rbp-90h]\n  __int64 v31; // [rsp+88h] [rbp-88h]\n  char v32; // [rsp+90h] [rbp-80h]\n  int v33; // [rsp+94h] [rbp-7Ch]\n  char v34[4]; // [rsp+B0h] [rbp-60h] BYREF\n  int v35; // [rsp+B4h] [rbp-5Ch] BYREF\n  char v36; // [rsp+BCh] [rbp-54h]\n  void *s2; // [rsp+C0h] [rbp-50h] BYREF\n  __int64 v38; // [rsp+C8h] [rbp-48h]\n  char v39; // [rsp+D0h] [rbp-40h]\n  int v40; // [rsp+D4h] [rbp-3Ch]\n  unsigned __int64 v41; // [rsp+F8h] [rbp-18h]\n\n  v16 = a1;\n  v15 = a2;\n  v14 = a3;\n  v41 = __readfsqword(0x28u);\n  v22 = sub_411EA8(a2);\n  if ( v22 > 0x492492492492492LL )\n  {\n    v4 = 0LL;\n  }\n  else if ( 56 * v22 > 0xFAF )\n  {\n    v4 = sub_411B0E(56 * v22);\n  }\n  else\n  {\n    v3 = alloca(16 * ((56 * v22 + 46) / 0x10));\n    v4 = 16 * (((unsigned __int64)&v14 + 7) >> 4) + 16;\n  }\n  v23 = v4;\n  if ( !v4 )\n    return 0LL;\n  v24 = v23;\n  v25 = 48 * v22 + v23;\n  v17 = 0LL;\n  s2 = v15;\n  v34[0] = 0;\n  memset(&v35, 0, 8uLL);\n  v36 = 0;\n  while ( 1 )\n  {\n    sub_40BF5C((__int64)v34);\n    if ( v39 == 1 && !v40 )\n      break;\n    sub_40BE85(48 * v17 + v24, (__int64)&s2);\n    s2 = (char *)s2 + v38;\n    v36 = 0;\n    ++v17;\n  }\n  *(_QWORD *)(v25 + 8) = 1LL;\n  v19 = 0LL;\n  for ( i = 2LL; i < v22; ++i )\n  {\n    v26 = 48 * i - 48 + v24;\n    while ( 1 )\n    {\n      if ( *(_BYTE *)(v26 + 16) && *(_BYTE *)(48 * v19 + v24 + 16) )\n      {\n        v7 = *(_DWORD *)(v26 + 20) == *(_DWORD *)(48 * v19 + v24 + 20);\n      }\n      else\n      {\n        v8 = *(_QWORD *)(v26 + 8) == *(_QWORD *)(48 * v19 + v24 + 8)\n          && !memcmp(*(const void **)v26, *(const void **)(48 * v19 + v24), *(_QWORD *)(v26 + 8));\n        v7 = v8;\n      }\n      if ( v7 )\n      {\n        ++v19;\n        *(_QWORD *)(8 * i + v25) = i - v19;\n        goto LABEL_30;\n      }\n      if ( !v19 )\n        break;\n      v19 -= *(_QWORD *)(8 * v19 + v25);\n    }\n    *(_QWORD *)(v25 + 8 * i) = i;\nLABEL_30:\n    ;\n  }\n  *v14 = 0LL;\n  v20 = 0LL;\n  v30 = v16;\n  v27[0] = 0;\n  memset(&v28, 0, 8uLL);\n  v29 = 0;\n  s2 = v16;\n  v34[0] = 0;\n  memset(&v35, 0, 8uLL);\n  v36 = 0;\n  while ( 1 )\n  {\n    sub_40BF5C((__int64)v34);\n    if ( v39 == 1 && !v40 )\n      break;\n    if ( *(_BYTE *)(48 * v20 + v24 + 16) && v39 )\n    {\n      v9 = *(_DWORD *)(48 * v20 + v24 + 20) == v40;\n    }\n    else\n    {\n      v10 = *(_QWORD *)(48 * v20 + v24 + 8) == v38\n         && !memcmp(*(const void **)(48 * v20 + v24), s2, *(_QWORD *)(48 * v20 + v24 + 8));\n      v9 = v10;\n    }\n    if ( v9 )\n    {\n      ++v20;\n      s2 = (char *)s2 + v38;\n      v36 = 0;\n      if ( v20 == v22 )\n      {\n        *v14 = v30;\n        break;\n      }\n    }\n    else if ( v20 )\n    {\n      v21 = *(_QWORD *)(8 * v20 + v25);\n      v20 -= v21;\n      while ( v21 )\n      {\n        sub_40BF5C((__int64)v27);\n        if ( v32 == 1 && !v33 )\n          abort();\n        v30 += v31;\n        v29 = 0;\n        --v21;\n      }\n    }\n    else\n    {\n      sub_40BF5C((__int64)v27);\n      if ( v32 == 1 && !v33 )\n        abort();\n      v30 += v31;\n      v29 = 0;\n      s2 = (char *)s2 + v38;\n      v36 = 0;\n    }\n  }\n  sub_411BC9(v23);\n  return 1LL;\n}\n"], [4246221, "sub_40CACD", "_BYTE *__fastcall sub_40CACD(_BYTE *a1, char *a2)\n{\n  _BYTE *result; // rax\n  bool v7; // al\n  bool v8; // al\n  bool v12; // al\n  bool v13; // al\n  size_t v14; // rax\n  unsigned __int64 v15; // rax\n  _BYTE *v16; // [rsp+8h] [rbp-1C8h]\n  char v17; // [rsp+13h] [rbp-1BDh]\n  char v18; // [rsp+14h] [rbp-1BCh]\n  char v19; // [rsp+16h] [rbp-1BAh]\n  __int64 v20; // [rsp+18h] [rbp-1B8h] BYREF\n  unsigned __int64 v21; // [rsp+20h] [rbp-1B0h]\n  unsigned __int64 v22; // [rsp+28h] [rbp-1A8h]\n  unsigned __int64 v23; // [rsp+30h] [rbp-1A0h]\n  unsigned __int64 j; // [rsp+38h] [rbp-198h]\n  unsigned __int64 v25; // [rsp+40h] [rbp-190h]\n  unsigned __int64 v26; // [rsp+48h] [rbp-188h]\n  unsigned __int64 v27; // [rsp+50h] [rbp-180h]\n  char *string; // [rsp+58h] [rbp-178h]\n  _BYTE *v29; // [rsp+60h] [rbp-170h]\n  _BYTE *i; // [rsp+68h] [rbp-168h]\n  char v31[4]; // [rsp+70h] [rbp-160h] BYREF\n  _BYTE v32[12]; // [rsp+74h] [rbp-15Ch] BYREF\n  void *s2; // [rsp+80h] [rbp-150h]\n  __int64 v34; // [rsp+88h] [rbp-148h]\n  char v35; // [rsp+90h] [rbp-140h]\n  int v36; // [rsp+94h] [rbp-13Ch]\n  char v37[4]; // [rsp+B0h] [rbp-120h] BYREF\n  int v38; // [rsp+B4h] [rbp-11Ch] BYREF\n  char v39; // [rsp+BCh] [rbp-114h]\n  char *v40; // [rsp+C0h] [rbp-110h]\n  __int64 v41; // [rsp+C8h] [rbp-108h]\n  char v42; // [rsp+D0h] [rbp-100h]\n  int v43; // [rsp+D4h] [rbp-FCh]\n  __int64 v44; // [rsp+F0h] [rbp-E0h] BYREF\n  __int64 v45; // [rsp+F8h] [rbp-D8h]\n  void *s1; // [rsp+100h] [rbp-D0h]\n  size_t n; // [rsp+108h] [rbp-C8h]\n  __int64 v48; // [rsp+110h] [rbp-C0h]\n  __int64 v49; // [rsp+118h] [rbp-B8h]\n  __int64 v50; // [rsp+120h] [rbp-B0h]\n  __int64 v51; // [rsp+128h] [rbp-A8h]\n  __int64 v52; // [rsp+130h] [rbp-A0h] BYREF\n  __int64 v53; // [rsp+138h] [rbp-98h]\n  void *v54; // [rsp+140h] [rbp-90h]\n  size_t v55; // [rsp+148h] [rbp-88h]\n  __int64 v56; // [rsp+150h] [rbp-80h]\n  __int64 v57; // [rsp+158h] [rbp-78h]\n  __int64 v58; // [rsp+160h] [rbp-70h]\n  __int64 v59; // [rsp+168h] [rbp-68h]\n  char v60[4]; // [rsp+170h] [rbp-60h] BYREF\n  int v61; // [rsp+174h] [rbp-5Ch] BYREF\n  char k; // [rsp+17Ch] [rbp-54h]\n  void *v63; // [rsp+180h] [rbp-50h]\n  __int64 v64; // [rsp+188h] [rbp-48h]\n  char v65; // [rsp+190h] [rbp-40h]\n  int v66; // [rsp+194h] [rbp-3Ch]\n  unsigned __int64 v67; // [rsp+1B8h] [rbp-18h]\n\n  v16 = a1;\n  v67 = __readfsqword(0x28u);\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( *a2 )\n    {\n      v18 = 1;\n      v25 = 0LL;\n      v26 = 0LL;\n      v27 = 0LL;\n      string = a2;\n      v19 = *a2;\n      while ( 1 )\n      {\n        if ( !*v16 )\n          return 0LL;\n        if ( v18 && v25 > 9 && 5 * v25 <= v26 )\n        {\n          if ( string )\n          {\n            v14 = strnlen(string, v26 - v27);\n            string += v14;\n            if ( !*string )\n              string = 0LL;\n            v27 = v26;\n          }\n          if ( !string )\n          {\n            v15 = strlen(a2);\n            if ( (unsigned __int8)sub_40C13C(v16, (__int64)a2, v15, &v20) )\n              return (_BYTE *)v20;\n            v18 = 0;\n          }\n        }\n        ++v25;\n        ++v26;\n        if ( *v16 == v19 )\n          break;\nLABEL_96:\n        ++v16;\n      }\n      v29 = v16 + 1;\n      for ( i = a2 + 1; ; ++i )\n      {\n        if ( !*i )\n          return v16;\n        if ( !*v29 )\n          break;\n        ++v26;\n        if ( *v29 != *i )\n          goto LABEL_96;\n        ++v29;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      result = a1;\n    }\n  }\n  else\n  {\n    s2 = a2;\n    v31[0] = 0;\n    memset(v32, 0, 8uLL);\n    v32[8] = 0;\n    sub_40BF5C((__int64)v31);\n    if ( v35 != 1 || v36 )\n    {\n      v17 = 1;\n      v21 = 0LL;\n      v22 = 0LL;\n      v23 = 0LL;\n      v40 = a2;\n      v37[0] = 0;\n      memset(&v38, 0, 8uLL);\n      v39 = 0;\n      s1 = a1;\n      LOBYTE(v44) = 0;\n      memset((char *)&v44 + 4, 0, sizeof(__int64));\n      for ( BYTE4(v45) = 0; ; BYTE4(v45) = 0 )\n      {\n        sub_40BF5C((__int64)&v44);\n        if ( (unsigned __int8)v48 == 1 && !HIDWORD(v48) )\n          return 0LL;\n        if ( v17 && v21 > 9 && 5 * v21 <= v22 )\n        {\n          for ( j = v22 - v23; j; --j )\n          {\n            sub_40BF5C((__int64)v37);\n            if ( v42 == 1 && !v43 )\n              break;\n            v40 += v41;\n            v39 = 0;\n          }\n          v23 = v22;\n          sub_40BF5C((__int64)v37);\n          if ( v42 == 1 && !v43 )\n          {\n            if ( (unsigned __int8)sub_40C386(a1, a2, &v20) )\n              return (_BYTE *)v20;\n            v17 = 0;\n          }\n        }\n        ++v21;\n        ++v22;\n        if ( (_BYTE)v48 && v35 )\n        {\n          v7 = HIDWORD(v48) == v36;\n        }\n        else\n        {\n          v8 = n == v34 && !memcmp(s1, s2, n);\n          v7 = v8;\n        }\n        if ( v7 )\n          break;\nLABEL_71:\n        s1 = (char *)s1 + n;\n      }\n      v52 = v44;\n      v53 = v45;\n      v55 = n;\n      v56 = v48;\n      v57 = v49;\n      v58 = v50;\n      v59 = v51;\n      v54 = (char *)s1 + n;\n      BYTE4(v53) = 0;\n      v63 = a2;\n      v60[0] = 0;\n      memset(&v61, 0, 8uLL);\n      k = 0;\n      sub_40BF5C((__int64)v60);\n      if ( v65 == 1 && !v66 )\n        abort();\n      v63 = (char *)v63 + v64;\n      for ( k = 0; ; k = 0 )\n      {\n        sub_40BF5C((__int64)v60);\n        if ( v65 == 1 && !v66 )\n          return s1;\n        sub_40BF5C((__int64)&v52);\n        if ( (unsigned __int8)v56 == 1 && !HIDWORD(v56) )\n          break;\n        ++v22;\n        if ( (_BYTE)v56 && v65 )\n        {\n          v12 = HIDWORD(v56) != v66;\n        }\n        else\n        {\n          v13 = v55 != v64 || memcmp(v54, v63, v55);\n          v12 = v13;\n        }\n        if ( v12 )\n          goto LABEL_71;\n        v54 = (char *)v54 + v55;\n        BYTE4(v53) = 0;\n        v63 = (char *)v63 + v64;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      result = a1;\n    }\n  }\n  return result;\n}\n"], [4248237, "sub_40D2AD", "__int64 __fastcall sub_40D2AD(char *a1, size_t a2, void *a3, void **a4, size_t *a5)\n{\n  int v9; // [rsp+34h] [rbp-107Ch]\n  char *inbuf; // [rsp+38h] [rbp-1078h] BYREF\n  size_t inbytesleft; // [rsp+40h] [rbp-1070h] BYREF\n  char *outbuf; // [rsp+48h] [rbp-1068h] BYREF\n  size_t outbytesleft; // [rsp+50h] [rbp-1060h] BYREF\n  void *ptr; // [rsp+58h] [rbp-1058h]\n  size_t v15; // [rsp+60h] [rbp-1050h]\n  size_t v16; // [rsp+68h] [rbp-1048h]\n  size_t v17; // [rsp+70h] [rbp-1040h]\n  size_t size; // [rsp+78h] [rbp-1038h]\n  size_t v19; // [rsp+80h] [rbp-1030h]\n  size_t v20; // [rsp+88h] [rbp-1028h]\n  char v21[4104]; // [rsp+90h] [rbp-1020h] BYREF\n  unsigned __int64 v22; // [rsp+1098h] [rbp-18h]\n\n  v22 = __readfsqword(0x28u);\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  v15 = 0LL;\n  inbuf = a1;\n  inbytesleft = a2;\n  while ( inbytesleft )\n  {\n    outbuf = v21;\n    outbytesleft = 4096LL;\n    v16 = iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n    if ( v16 == -1LL && *__errno_location() != 7 )\n    {\n      if ( *__errno_location() != 22 )\n        return 0xFFFFFFFFLL;\n      break;\n    }\n    v15 += outbuf - v21;\n  }\n  outbuf = v21;\n  outbytesleft = 4096LL;\n  v17 = iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft);\n  if ( v17 == -1LL )\n    return 0xFFFFFFFFLL;\n  v15 += outbuf - v21;\n  size = v15;\n  if ( !v15 )\n  {\n    *a5 = 0LL;\n    return 0LL;\n  }\n  if ( *a4 && *a5 >= size )\n  {\n    ptr = *a4;\n  }\n  else\n  {\n    ptr = malloc(size);\n    if ( !ptr )\n    {\n      *__errno_location() = 12;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  inbytesleft = a2;\n  outbuf = (char *)ptr;\n  outbytesleft = size;\n  while ( inbytesleft )\n  {\n    v19 = iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n    if ( v19 == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_26;\n      break;\n    }\n  }\n  v20 = iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft);\n  if ( v20 != -1LL )\n  {\n    if ( outbytesleft )\n      abort();\n    *a4 = ptr;\n    *a5 = size;\n    return 0LL;\n  }\nLABEL_26:\n  if ( *a4 != ptr )\n  {\n    v9 = *__errno_location();\n    free(ptr);\n    *__errno_location() = v9;\n  }\n  return 0xFFFFFFFFLL;\n}\n"], [4249233, "sub_40D691", "void *__fastcall sub_40D691(char *a1, void *a2)\n{\n  void *result; // rax\n  char *v3; // rax\n  int v4; // [rsp+14h] [rbp-8Ch]\n  char *inbuf; // [rsp+18h] [rbp-88h] BYREF\n  size_t inbytesleft; // [rsp+20h] [rbp-80h] BYREF\n  char *outbuf; // [rsp+28h] [rbp-78h] BYREF\n  size_t outbytesleft; // [rsp+30h] [rbp-70h] BYREF\n  void *ptr; // [rsp+38h] [rbp-68h]\n  size_t size; // [rsp+40h] [rbp-60h]\n  __int64 v11; // [rsp+48h] [rbp-58h]\n  size_t v12; // [rsp+50h] [rbp-50h]\n  __int64 v13; // [rsp+58h] [rbp-48h]\n  size_t v14; // [rsp+60h] [rbp-40h]\n  char *v15; // [rsp+68h] [rbp-38h]\n  size_t v16; // [rsp+70h] [rbp-30h]\n  __int64 v17; // [rsp+78h] [rbp-28h]\n  size_t v18; // [rsp+80h] [rbp-20h]\n  char *v19; // [rsp+88h] [rbp-18h]\n  size_t v20; // [rsp+90h] [rbp-10h]\n  void *v21; // [rsp+98h] [rbp-8h]\n\n  inbuf = a1;\n  inbytesleft = strlen(a1);\n  size = inbytesleft;\n  v11 = 0xFFFFFFFFLL;\n  if ( inbytesleft <= 0xFFFFFFF )\n    size *= 16LL;\n  ptr = malloc(++size);\n  if ( ptr )\n  {\n    iconv(a2, 0LL, 0LL, 0LL, 0LL);\n    outbuf = (char *)ptr;\n    for ( outbytesleft = size - 1; ; outbytesleft = v14 - v13 - 1 )\n    {\n      v12 = iconv(a2, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n      if ( v12 != -1LL || *__errno_location() == 22 )\n        break;\n      if ( *__errno_location() != 7 )\n        goto LABEL_23;\n      v13 = outbuf - (_BYTE *)ptr;\n      v14 = 2 * size;\n      if ( 2 * size <= size || (v15 = (char *)realloc(ptr, v14)) == 0LL )\n      {\nLABEL_18:\n        *__errno_location() = 12;\nLABEL_23:\n        v4 = *__errno_location();\n        free(ptr);\n        *__errno_location() = v4;\n        return 0LL;\n      }\n      ptr = v15;\n      size = v14;\n      outbuf = &v15[v13];\n    }\n    while ( 1 )\n    {\n      v16 = iconv(a2, 0LL, 0LL, &outbuf, &outbytesleft);\n      if ( v16 != -1LL )\n        break;\n      if ( *__errno_location() != 7 )\n        goto LABEL_23;\n      v17 = outbuf - (_BYTE *)ptr;\n      v18 = 2 * size;\n      if ( 2 * size <= size )\n        goto LABEL_18;\n      v19 = (char *)realloc(ptr, v18);\n      if ( !v19 )\n        goto LABEL_18;\n      ptr = v19;\n      size = v18;\n      outbuf = &v19[v17];\n      outbytesleft = v18 - v17 - 1;\n    }\n    v3 = outbuf++;\n    *v3 = 0;\n    v20 = outbuf - (_BYTE *)ptr;\n    if ( outbuf - (_BYTE *)ptr < size )\n    {\n      v21 = realloc(ptr, v20);\n      if ( v21 )\n        ptr = v21;\n    }\n    result = ptr;\n  }\n  else\n  {\n    *__errno_location() = 12;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4250054, "sub_40D9C6", "char *__fastcall sub_40D9C6(char *a1, char *a2, char *a3)\n{\n  char *result; // rax\n  int v5; // [rsp+20h] [rbp-20h]\n  int v6; // [rsp+24h] [rbp-1Ch]\n  iconv_t cd; // [rsp+28h] [rbp-18h]\n  void *ptr; // [rsp+30h] [rbp-10h]\n  char *v9; // [rsp+38h] [rbp-8h]\n\n  if ( *a1 && (unsigned int)sub_40B61C((unsigned __int8 *)a2, (unsigned __int8 *)a3) )\n  {\n    cd = iconv_open(a3, a2);\n    if ( cd == (iconv_t)-1LL )\n      return 0LL;\n    ptr = sub_40D691(a1, cd);\n    if ( ptr )\n    {\n      if ( iconv_close(cd) < 0 )\n      {\n        v6 = *__errno_location();\n        free(ptr);\n        *__errno_location() = v6;\n        return 0LL;\n      }\n    }\n    else\n    {\n      v5 = *__errno_location();\n      iconv_close(cd);\n      *__errno_location() = v5;\n    }\n    result = (char *)ptr;\n  }\n  else\n  {\n    v9 = strdup(a1);\n    if ( !v9 )\n      *__errno_location() = 12;\n    result = v9;\n  }\n  return result;\n}\n"], [4250313, "sub_40DAC9", "__int64 __fastcall sub_40DAC9(int a1)\n{\n  unsigned int fd; // [rsp+Ch] [rbp-14h]\n  unsigned int v3; // [rsp+18h] [rbp-8h]\n  int v4; // [rsp+1Ch] [rbp-4h]\n\n  fd = a1;\n  if ( a1 >= 0 && a1 <= 2 )\n  {\n    v3 = sub_411F74((unsigned int)a1);\n    v4 = *__errno_location();\n    close(a1);\n    *__errno_location() = v4;\n    fd = v3;\n  }\n  return fd;\n}\n"], [4250390, "sub_40DB16", "int __fastcall sub_40DB16(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_40DEB8(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4250571, "sub_40DBCB", "__int64 __fastcall sub_40DBCB(int a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128 a7, __m128 a8, __m128 a9, __m128 a10, __m128 a11, __m128 a12, __m128 a13, __m128 a14)\n{\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  int v18; // [rsp+10h] [rbp-E0h]\n  int v19; // [rsp+14h] [rbp-DCh]\n  int v20; // [rsp+18h] [rbp-D8h]\n  int v21; // [rsp+1Ch] [rbp-D4h]\n  __int64 v22; // [rsp+50h] [rbp-A0h]\n  __int64 v23; // [rsp+58h] [rbp-98h]\n  __int64 v24; // [rsp+60h] [rbp-90h]\n  __int64 v25; // [rsp+68h] [rbp-88h]\n  __m128 v26; // [rsp+70h] [rbp-80h]\n  __m128 v27; // [rsp+80h] [rbp-70h]\n  __m128 v28; // [rsp+90h] [rbp-60h]\n  __m128 v29; // [rsp+A0h] [rbp-50h]\n  __m128 v30; // [rsp+B0h] [rbp-40h]\n  __m128 v31; // [rsp+C0h] [rbp-30h]\n  __m128 v32; // [rsp+D0h] [rbp-20h]\n  __m128 v33; // [rsp+E0h] [rbp-10h]\n\n  v22 = a3;\n  v23 = a4;\n  v24 = a5;\n  v25 = a6;\n  v26 = a7;\n  v27 = a8;\n  v28 = a9;\n  v29 = a10;\n  v30 = a11;\n  v31 = a12;\n  v32 = a13;\n  v33 = a14;\n  if ( a2 != 1030 )\n    return (unsigned int)fcntl(a1, a2, v22);\n  v19 = v22;\n  if ( dword_618728 < 0 )\n  {\n    v18 = sub_40DBCB(a1, 0, v22, a4, a5, a6);\n  }\n  else\n  {\n    v18 = fcntl(a1, 1030, (unsigned int)v22);\n    if ( v18 < 0 && *__errno_location() == 22 )\n    {\n      v18 = sub_40DBCB(a1, 0, v19, v14, v15, v16);\n      if ( v18 < 0 )\n        return (unsigned int)v18;\n      dword_618728 = -1;\n    }\n    else\n    {\n      dword_618728 = 1;\n    }\n  }\n  if ( v18 >= 0 && dword_618728 == -1 )\n  {\n    v20 = fcntl(v18, 1);\n    if ( v20 < 0 || fcntl(v18, 2, v20 | 1u) == -1 )\n    {\n      v21 = *__errno_location();\n      close(v18);\n      *__errno_location() = v21;\n      v18 = -1;\n    }\n  }\n  return (unsigned int)v18;\n}\n"], [4251269, "sub_40DE85", "__int64 __fastcall sub_40DE85(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_40DF03(a1, 0LL, 1LL);\n  return result;\n}\n"], [4251320, "sub_40DEB8", "int __fastcall sub_40DEB8(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_40DE85(a1);\n  return fflush(a1);\n}\n"], [4251395, "sub_40DF03", "int __fastcall sub_40DF03(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4251579, "sub_40DFBB", "__int64 __fastcall sub_40DFBB(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4251631, "sub_40DFEF", "__int64 __fastcall sub_40DFEF(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  __int64 v5; // rax\n\n  v4 = sub_40DFBB(a1, a2);\n  v5 = sub_40DFBB(v4, a3);\n  return sub_40DFBB(v5, a4);\n}\n"], [4251706, "sub_40E03A", "unsigned __int64 __fastcall sub_40E03A(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = a2;\n  if ( a1 >= a2 )\n    result = a1;\n  return result;\n}\n"], [4251733, "sub_40E055", "__int64 sub_40E055()\n{\n  __int64 result; // rax\n  char *v1; // [rsp+8h] [rbp-8h]\n\n  v1 = nl_langinfo(0x10000);\n  if ( *v1 )\n    result = (unsigned __int8)*v1;\n  else\n    result = 46LL;\n  return result;\n}\n"], [4251782, "sub_40E086", "_BOOL8 __fastcall sub_40E086(int a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, __int64 a11, int a12, int a13, int a14, long double a15)\n{\n  return (unsigned int)sub_411F9A(a1, a2, DWORD2(a15), a12, a13, a14, *(__int64 *)&a15, DWORD2(a15)) || a15 == a15 + a15;\n}\n"], [4251851, "sub_40E0CB", "void *__fastcall sub_40E0CB(void *a1, unsigned __int64 *a2, void *a3, __int64 a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)\n{\n  int v13; // esi\n  int v14; // edi\n  int v15; // ecx\n  int v16; // er8\n  int v17; // er9\n  double v18; // xmm4_8\n  double v19; // xmm5_8\n  void *v20; // rsp\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  unsigned __int64 v23; // rax\n  unsigned int v24; // eax\n  char *v25; // rax\n  char *v26; // rax\n  __int64 v27; // rcx\n  unsigned __int64 v28; // rax\n  char *v29; // rax\n  __int64 v30; // rcx\n  unsigned __int64 v31; // rax\n  int v32; // edi\n  int v33; // ecx\n  int v34; // er8\n  int v35; // er9\n  char *v36; // rax\n  int v37; // edx\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  char *v41; // rax\n  char *v42; // rax\n  char *v43; // rax\n  __int16 v44; // ax\n  __int16 v45; // fps\n  char *v47; // rax\n  char *v48; // rax\n  char *v49; // rax\n  char *v50; // rax\n  char *v51; // rax\n  char *v52; // rax\n  char *v53; // rax\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rbx\n  char *v58; // rax\n  char *v59; // rax\n  char *v60; // rbx\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rax\n  char *v64; // rax\n  char *v65; // rax\n  char *v66; // rax\n  __int64 v67; // rax\n  char *v68; // rbx\n  char *v69; // rax\n  char *v70; // rax\n  char *v71; // rax\n  char *v72; // rax\n  char *v73; // rbx\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  unsigned __int64 v81; // rax\n  _BYTE *v82; // rax\n  _BYTE *v83; // rax\n  _BYTE *v84; // rax\n  _BYTE *v85; // rax\n  _BYTE *v86; // rax\n  _BYTE *v87; // rax\n  _BYTE *v88; // rax\n  _BYTE *v89; // rax\n  _BYTE *v90; // rax\n  _BYTE *v91; // rax\n  unsigned int v92; // eax\n  unsigned int v93; // eax\n  unsigned __int64 v94; // rax\n  __int64 v95; // rax\n  unsigned __int64 v96; // rax\n  char *v97; // rax\n  int v98; // edx\n  int *v99; // rdx\n  int v100; // eax\n  unsigned __int64 v101; // rbx\n  __int64 v102; // rax\n  unsigned __int64 v103; // rax\n  __int64 v104; // rax\n  unsigned __int64 v105; // rax\n  long double v106; // [rsp+0h] [rbp-8E0h]\n  __int64 v107; // [rsp+18h] [rbp-8C8h] BYREF\n  __int64 v108; // [rsp+20h] [rbp-8C0h]\n  void *v109; // [rsp+28h] [rbp-8B8h]\n  unsigned __int64 *v110; // [rsp+30h] [rbp-8B0h]\n  void *v111; // [rsp+38h] [rbp-8A8h]\n  __int16 v112; // [rsp+4Ah] [rbp-896h]\n  int v113; // [rsp+4Ch] [rbp-894h] BYREF\n  int v114; // [rsp+50h] [rbp-890h]\n  int v115; // [rsp+54h] [rbp-88Ch]\n  int v116; // [rsp+58h] [rbp-888h]\n  int v117; // [rsp+5Ch] [rbp-884h]\n  unsigned int v118; // [rsp+60h] [rbp-880h]\n  int v119; // [rsp+64h] [rbp-87Ch]\n  int v120; // [rsp+68h] [rbp-878h]\n  int v121; // [rsp+6Ch] [rbp-874h]\n  unsigned int v122; // [rsp+70h] [rbp-870h]\n  int v123; // [rsp+74h] [rbp-86Ch]\n  int v124; // [rsp+78h] [rbp-868h]\n  unsigned int v125; // [rsp+7Ch] [rbp-864h]\n  unsigned int v126; // [rsp+80h] [rbp-860h]\n  unsigned int v127; // [rsp+84h] [rbp-85Ch]\n  unsigned int v128; // [rsp+88h] [rbp-858h]\n  unsigned int v129; // [rsp+8Ch] [rbp-854h]\n  unsigned int v130; // [rsp+90h] [rbp-850h]\n  unsigned int v131; // [rsp+94h] [rbp-84Ch]\n  unsigned int v132; // [rsp+98h] [rbp-848h]\n  int v133; // [rsp+9Ch] [rbp-844h]\n  unsigned int v134; // [rsp+A0h] [rbp-840h]\n  unsigned int v135; // [rsp+A4h] [rbp-83Ch]\n  char *format; // [rsp+A8h] [rbp-838h]\n  void *v137; // [rsp+B0h] [rbp-830h]\n  void *v138; // [rsp+B8h] [rbp-828h]\n  __int64 v139; // [rsp+C0h] [rbp-820h]\n  char *i; // [rsp+C8h] [rbp-818h]\n  void *src; // [rsp+D0h] [rbp-810h]\n  unsigned __int64 v142; // [rsp+D8h] [rbp-808h]\n  size_t n; // [rsp+E0h] [rbp-800h]\n  void *dest; // [rsp+E8h] [rbp-7F8h]\n  void *v145; // [rsp+F0h] [rbp-7F0h]\n  unsigned __int64 v146; // [rsp+F8h] [rbp-7E8h]\n  unsigned __int64 v147; // [rsp+100h] [rbp-7E0h]\n  unsigned __int64 v148; // [rsp+108h] [rbp-7D8h]\n  void *v149; // [rsp+110h] [rbp-7D0h]\n  unsigned __int64 v150; // [rsp+118h] [rbp-7C8h]\n  char *v151; // [rsp+120h] [rbp-7C0h]\n  char *v152; // [rsp+128h] [rbp-7B8h]\n  char *v153; // [rsp+130h] [rbp-7B0h]\n  __int64 v154; // [rsp+138h] [rbp-7A8h]\n  unsigned __int64 v155; // [rsp+140h] [rbp-7A0h]\n  _BYTE *v156; // [rsp+148h] [rbp-798h]\n  _BYTE *v157; // [rsp+150h] [rbp-790h]\n  void *v158; // [rsp+158h] [rbp-788h]\n  void *v159; // [rsp+160h] [rbp-780h]\n  void *v160; // [rsp+168h] [rbp-778h]\n  size_t maxlen; // [rsp+170h] [rbp-770h]\n  void *v162; // [rsp+178h] [rbp-768h]\n  void *v163; // [rsp+180h] [rbp-760h]\n  unsigned __int64 v164; // [rsp+188h] [rbp-758h]\n  size_t size; // [rsp+190h] [rbp-750h]\n  size_t v166; // [rsp+198h] [rbp-748h]\n  unsigned __int64 v167; // [rsp+1A0h] [rbp-740h]\n  size_t v168; // [rsp+1A8h] [rbp-738h]\n  size_t v169; // [rsp+1B0h] [rbp-730h]\n  void *v170; // [rsp+1B8h] [rbp-728h]\n  unsigned __int64 v171; // [rsp+1C0h] [rbp-720h]\n  size_t v172; // [rsp+1C8h] [rbp-718h]\n  size_t v173; // [rsp+1D0h] [rbp-710h]\n  _BYTE *v174; // [rsp+1D8h] [rbp-708h]\n  size_t v175; // [rsp+1E0h] [rbp-700h]\n  unsigned __int64 v176; // [rsp+1E8h] [rbp-6F8h]\n  size_t v177; // [rsp+1F0h] [rbp-6F0h]\n  size_t v178; // [rsp+1F8h] [rbp-6E8h]\n  size_t v179; // [rsp+200h] [rbp-6E0h]\n  size_t v180; // [rsp+208h] [rbp-6D8h]\n  __int64 v181; // [rsp+210h] [rbp-6D0h]\n  __int64 v182; // [rsp+218h] [rbp-6C8h]\n  __int64 v183; // [rsp+220h] [rbp-6C0h]\n  __int64 v184; // [rsp+228h] [rbp-6B8h]\n  double v185; // [rsp+230h] [rbp-6B0h]\n  __int64 v186; // [rsp+238h] [rbp-6A8h]\n  __int64 v187; // [rsp+240h] [rbp-6A0h]\n  __int64 v188; // [rsp+248h] [rbp-698h]\n  unsigned __int64 v189; // [rsp+250h] [rbp-690h]\n  size_t v190; // [rsp+258h] [rbp-688h]\n  long double v191; // [rsp+260h] [rbp-680h]\n  __int64 v192; // [rsp+270h] [rbp-670h]\n  int v193; // [rsp+278h] [rbp-668h]\n  char v194[8]; // [rsp+280h] [rbp-660h] BYREF\n  void *v195; // [rsp+288h] [rbp-658h]\n  _BYTE v196[224]; // [rsp+290h] [rbp-650h] BYREF\n  __int64 v197; // [rsp+370h] [rbp-570h] BYREF\n  void *ptr; // [rsp+378h] [rbp-568h]\n  __int64 v199; // [rsp+380h] [rbp-560h]\n  __int64 v200; // [rsp+388h] [rbp-558h]\n  _BYTE v201[624]; // [rsp+390h] [rbp-550h] BYREF\n  char v202[712]; // [rsp+600h] [rbp-2E0h] BYREF\n  unsigned __int64 v203; // [rsp+8C8h] [rbp-18h]\n\n  v111 = a1;\n  v110 = a2;\n  v109 = a3;\n  v108 = a4;\n  v203 = __readfsqword(0x28u);\n  if ( (int)sub_412904(a3, &v197, v194) < 0 )\n    return 0LL;\n  if ( (int)sub_411FF2(v108, v194) < 0 )\n  {\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 22;\n    return 0LL;\n  }\n  v13 = v199;\n  v14 = 7;\n  v164 = sub_40DFEF(7uLL, v199, v200, 6LL);\n  if ( v164 > 0xF9F )\n  {\n    size = v164;\n    if ( v164 == -1LL )\n      goto LABEL_530;\n    v14 = size;\n    format = (char *)malloc(size);\n    if ( !format )\n      goto LABEL_530;\n    v137 = format;\n  }\n  else\n  {\n    v20 = alloca(16 * ((v164 + 30) / 0x10));\n    format = (char *)(16 * (((unsigned __int64)&v107 + 7) >> 4));\n    v137 = 0LL;\n  }\n  if ( v111 )\n  {\n    src = v111;\n    v142 = *v110;\n  }\n  else\n  {\n    src = 0LL;\n    v142 = 0LL;\n  }\n  n = 0LL;\n  v138 = v109;\n  v139 = 0LL;\n  for ( i = (char *)ptr; ; i += 88 )\n  {\n    if ( *(void **)i != v138 )\n    {\n      v166 = *(_QWORD *)i - (_QWORD)v138;\n      v167 = sub_40DFBB(n, v166);\n      if ( v167 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v21 = -1LL;\n          else\n            v21 = 2 * v142;\n        }\n        else\n        {\n          v21 = 12LL;\n        }\n        v142 = v21;\n        if ( v167 > v21 )\n          v142 = v167;\n        v168 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        dest = src != v111 && src ? realloc(src, v168) : malloc(v168);\n        if ( !dest )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(dest, src, n);\n        src = dest;\n      }\n      v13 = (int)v138;\n      v14 = (_DWORD)src + n;\n      memcpy((char *)src + n, v138, v166);\n      n = v167;\n    }\n    if ( v197 == v139 )\n    {\n      v22 = sub_40DFBB(n, 1LL);\n      if ( v22 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v104 = -1LL;\n          else\n            v104 = 2 * v142;\n        }\n        else\n        {\n          v104 = 12LL;\n        }\n        v142 = v104;\n        v105 = sub_40DFBB(n, 1LL);\n        if ( v105 > v142 )\n          v142 = sub_40DFBB(n, 1LL);\n        v169 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v163 = src != v111 && src ? realloc(src, v169) : malloc(v169);\n        if ( !v163 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v163, src, n);\n        src = v163;\n      }\n      *((_BYTE *)src + n) = 0;\n      if ( src != v111 && n + 1 < v142 )\n      {\n        v170 = realloc(src, n + 1);\n        if ( v170 )\n          src = v170;\n      }\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      *v110 = n;\n      return src;\n    }\n    if ( i[72] == 37 )\n    {\n      if ( *((_QWORD *)i + 10) != -1LL )\n        abort();\n      v13 = 1;\n      v14 = n;\n      v171 = sub_40DFBB(n, 1LL);\n      if ( v171 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v23 = -1LL;\n          else\n            v23 = 2 * v142;\n        }\n        else\n        {\n          v23 = 12LL;\n        }\n        v142 = v23;\n        if ( v171 > v23 )\n          v142 = v171;\n        v172 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        if ( src != v111 && src )\n        {\n          v13 = v172;\n          v14 = (int)src;\n          v145 = realloc(src, v172);\n        }\n        else\n        {\n          v14 = v172;\n          v145 = malloc(v172);\n        }\n        if ( !v145 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n        {\n          v13 = (int)src;\n          v14 = (int)v145;\n          memcpy(v145, src, n);\n        }\n        src = v145;\n      }\n      *((_BYTE *)src + n) = 37;\n      n = v171;\n      goto LABEL_487;\n    }\n    if ( *((_QWORD *)i + 10) == -1LL )\n      abort();\n    if ( i[72] == 110 )\n    {\n      v24 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n      if ( v24 == 20 )\n      {\n        **((_DWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n        goto LABEL_487;\n      }\n      if ( v24 > 0x14 )\n      {\n        if ( v24 == 21 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 22 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      else\n      {\n        if ( v24 == 18 )\n        {\n          **((_BYTE **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 19 )\n        {\n          **((_WORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      abort();\n    }\n    if ( i[72] != 102\n      && i[72] != 70\n      && i[72] != 101\n      && i[72] != 69\n      && i[72] != 103\n      && i[72] != 71\n      && i[72] != 97\n      && i[72] != 65 )\n    {\n      break;\n    }\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10)) != 12 )\n      break;\n    v25 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    *(_QWORD *)&v106 = *((_QWORD *)v25 + 2);\n    DWORD2(v106) = *((_DWORD *)v25 + 6);\n    if ( !sub_40E086(v14, v13, a5, a6, a7, a8, v18, v19, a11, a12, DWORD2(v106), v15, v16, v17, v106) )\n      break;\n    v114 = *((_DWORD *)i + 4);\n    v115 = 0;\n    v146 = 0LL;\n    if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n    {\n      if ( *((_QWORD *)i + 5) == -1LL )\n      {\n        v152 = (char *)*((_QWORD *)i + 3);\n        do\n        {\n          v26 = v152++;\n          v27 = *v26 - 48;\n          if ( v146 > 0x1999999999999999LL )\n            v28 = -1LL;\n          else\n            v28 = 10 * v146;\n          v146 = sub_40DFBB(v28, v27);\n        }\n        while ( *((char **)i + 4) != v152 );\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n          abort();\n        v120 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n        if ( v120 >= 0 )\n        {\n          v146 = v120;\n        }\n        else\n        {\n          v114 |= 2u;\n          v146 = (unsigned int)-v120;\n        }\n      }\n      v115 = 1;\n    }\n    v116 = 0;\n    v147 = 0LL;\n    if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n    {\n      if ( *((_QWORD *)i + 8) == -1LL )\n      {\n        v153 = (char *)(*((_QWORD *)i + 6) + 1LL);\n        v147 = 0LL;\n        while ( *((char **)i + 7) != v153 )\n        {\n          v29 = v153++;\n          v30 = *v29 - 48;\n          if ( v147 > 0x1999999999999999LL )\n            v31 = -1LL;\n          else\n            v31 = 10 * v147;\n          v147 = sub_40DFBB(v31, v30);\n        }\n        v116 = 1;\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n          abort();\n        v121 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n        if ( v121 >= 0 )\n        {\n          v147 = v121;\n          v116 = 1;\n        }\n      }\n    }\n    if ( !v116 && i[72] != 97 && i[72] != 65 )\n      v147 = 6LL;\n    v148 = 0LL;\n    if ( v147 )\n      v148 = v147;\n    v148 = sub_40DFBB(v148, 12LL);\n    if ( v148 < v146 )\n      v148 = v146;\n    v32 = v148;\n    v148 = sub_40DFBB(v148, 1LL);\n    if ( v148 > 0x2BC )\n    {\n      v173 = v148;\n      if ( v148 == -1LL )\n        goto LABEL_525;\n      v32 = v173;\n      v149 = malloc(v173);\n      if ( !v149 )\n        goto LABEL_525;\n    }\n    else\n    {\n      v149 = v202;\n    }\n    v150 = 0LL;\n    v151 = (char *)v149;\n    v36 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    v37 = *((_DWORD *)v36 + 6);\n    *(_QWORD *)&v191 = *((_QWORD *)v36 + 2);\n    DWORD2(v191) = v37;\n    if ( (unsigned int)sub_411F9A(v32, 1, v37, v33, v34, v35, *(__int64 *)&v191, v37) )\n    {\n      if ( i[72] <= 64 || i[72] > 90 )\n      {\n        v41 = v151++;\n        *v41 = 110;\n        v42 = v151++;\n        *v42 = 97;\n        v43 = v151++;\n        *v43 = 110;\n      }\n      else\n      {\n        v38 = v151++;\n        *v38 = 78;\n        v39 = v151++;\n        *v39 = 65;\n        v40 = v151++;\n        *v40 = 78;\n      }\n    }\n    else\n    {\n      v117 = 0;\n      v112 = v134;\n      LOBYTE(v44) = v134;\n      HIBYTE(v44) = BYTE1(v134) | 3;\n      LOWORD(v134) = v44;\n      _FST7 = v191;\n      __asm { fxam }\n      if ( (v45 & 0x200) != 0 )\n      {\n        v117 = -1;\n        v191 = -v191;\n      }\n      if ( v117 >= 0 )\n      {\n        if ( (v114 & 4) != 0 )\n        {\n          v48 = v151++;\n          *v48 = 43;\n        }\n        else if ( (v114 & 8) != 0 )\n        {\n          v49 = v151++;\n          *v49 = 32;\n        }\n      }\n      else\n      {\n        v47 = v151++;\n        *v47 = 45;\n      }\n      if ( v191 > 0.0 && v191 == v191 + v191 )\n      {\n        if ( i[72] <= 64 || i[72] > 90 )\n        {\n          v53 = v151++;\n          *v53 = 105;\n          v54 = v151++;\n          *v54 = 110;\n          v55 = v151++;\n          *v55 = 102;\n        }\n        else\n        {\n          v50 = v151++;\n          *v50 = 73;\n          v51 = v151++;\n          *v51 = 78;\n          v52 = v151++;\n          *v52 = 70;\n        }\n      }\n      else\n      {\n        if ( 0.0 != v191 )\n          abort();\n        v150 = (unsigned __int64)v151;\n        switch ( i[72] )\n        {\n          case 'f':\n          case 'F':\n            v56 = v151++;\n            *v56 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v57 = v151++;\n              *v57 = sub_40E055();\n              while ( v147 )\n              {\n                v58 = v151++;\n                *v58 = 48;\n                --v147;\n              }\n            }\n            break;\n          case 'e':\n          case 'E':\n            v59 = v151++;\n            *v59 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v60 = v151++;\n              *v60 = sub_40E055();\n              while ( v147 )\n              {\n                v61 = v151++;\n                *v61 = 48;\n                --v147;\n              }\n            }\n            v62 = v151++;\n            *v62 = i[72];\n            v63 = v151++;\n            *v63 = 43;\n            v64 = v151++;\n            *v64 = 48;\n            v65 = v151++;\n            *v65 = 48;\n            break;\n          case 'g':\n          case 'G':\n            v66 = v151++;\n            *v66 = 48;\n            if ( (v114 & 0x10) != 0 )\n            {\n              if ( v147 )\n                v67 = v147 - 1;\n              else\n                v67 = 0LL;\n              v154 = v67;\n              v68 = v151++;\n              *v68 = sub_40E055();\n              while ( v154 )\n              {\n                v69 = v151++;\n                *v69 = 48;\n                --v154;\n              }\n            }\n            break;\n          case 'a':\n          case 'A':\n            v70 = v151++;\n            *v70 = 48;\n            v71 = v151++;\n            *v71 = i[72] + 23;\n            v150 = (unsigned __int64)v151;\n            v72 = v151++;\n            *v72 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v73 = v151++;\n              *v73 = sub_40E055();\n              while ( v147 )\n              {\n                v74 = v151++;\n                *v74 = 48;\n                --v147;\n              }\n            }\n            v75 = v151++;\n            *v75 = i[72] + 15;\n            v76 = v151++;\n            *v76 = 43;\n            v77 = v151++;\n            *v77 = 48;\n            break;\n          default:\n            abort();\n        }\n      }\n      LOWORD(v134) = v112;\n    }\n    if ( v115 && v151 - (_BYTE *)v149 < v146 )\n    {\n      v155 = (_BYTE *)v149 - v151 + v146;\n      v174 = (char *)v149 + v146;\n      if ( (v114 & 2) != 0 )\n      {\n        while ( v155 )\n        {\n          v78 = v151++;\n          *v78 = 32;\n          --v155;\n        }\n      }\n      else if ( (v114 & 0x20) != 0 && v150 )\n      {\n        v156 = v174;\n        while ( (unsigned __int64)v151 > v150 )\n          *--v156 = *--v151;\n        while ( v155 )\n        {\n          v79 = v151++;\n          *v79 = 48;\n          --v155;\n        }\n      }\n      else\n      {\n        v157 = v174;\n        while ( v151 > v149 )\n          *--v157 = *--v151;\n        while ( v155 )\n        {\n          v80 = v151++;\n          *v80 = 32;\n          --v155;\n        }\n      }\n      v151 = v174;\n    }\n    v175 = v151 - (_BYTE *)v149;\n    if ( v151 - (_BYTE *)v149 >= v148 )\n      abort();\n    if ( v142 - n <= v175 )\n    {\n      v176 = sub_40DFBB(n, v175);\n      if ( v176 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v81 = -1LL;\n          else\n            v81 = 2 * v142;\n        }\n        else\n        {\n          v81 = 12LL;\n        }\n        v142 = v81;\n        if ( v176 > v81 )\n          v142 = v176;\n        v177 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v158 = src != v111 && src ? realloc(src, v177) : malloc(v177);\n        if ( !v158 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v158, src, n);\n        src = v158;\n      }\n    }\n    v13 = (int)v149;\n    v14 = (_DWORD)src + n;\n    memcpy((char *)src + n, v149, v175);\n    if ( v149 != v202 )\n    {\n      v14 = (int)v149;\n      free(v149);\n    }\n    n += v175;\nLABEL_487:\n    v138 = (void *)*((_QWORD *)i + 1);\n    ++v139;\n  }\n  v122 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n  v123 = *((_DWORD *)i + 4);\n  v159 = format + 1;\n  *format = 37;\n  if ( (v123 & 1) != 0 )\n  {\n    v82 = v159;\n    v159 = (char *)v159 + 1;\n    *v82 = 39;\n  }\n  if ( (v123 & 2) != 0 )\n  {\n    v83 = v159;\n    v159 = (char *)v159 + 1;\n    *v83 = 45;\n  }\n  if ( (v123 & 4) != 0 )\n  {\n    v84 = v159;\n    v159 = (char *)v159 + 1;\n    *v84 = 43;\n  }\n  if ( (v123 & 8) != 0 )\n  {\n    v85 = v159;\n    v159 = (char *)v159 + 1;\n    *v85 = 32;\n  }\n  if ( (v123 & 0x10) != 0 )\n  {\n    v86 = v159;\n    v159 = (char *)v159 + 1;\n    *v86 = 35;\n  }\n  if ( (v123 & 0x40) != 0 )\n  {\n    v87 = v159;\n    v159 = (char *)v159 + 1;\n    *v87 = 73;\n  }\n  if ( (v123 & 0x20) != 0 )\n  {\n    v88 = v159;\n    v159 = (char *)v159 + 1;\n    *v88 = 48;\n  }\n  if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n  {\n    v178 = *((_QWORD *)i + 4) - *((_QWORD *)i + 3);\n    memcpy(v159, *((const void **)i + 3), v178);\n    v159 = (char *)v159 + v178;\n  }\n  if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n  {\n    v179 = *((_QWORD *)i + 7) - *((_QWORD *)i + 6);\n    memcpy(v159, *((const void **)i + 6), v179);\n    v159 = (char *)v159 + v179;\n  }\n  if ( v122 > 0xA )\n  {\n    if ( v122 == 14 || v122 == 16 )\n      goto LABEL_260;\n    if ( v122 == 12 )\n    {\n      v91 = v159;\n      v159 = (char *)v159 + 1;\n      *v91 = 76;\n    }\n  }\n  else\n  {\n    if ( v122 >= 9 )\n    {\n      v89 = v159;\n      v159 = (char *)v159 + 1;\n      *v89 = 108;\n      goto LABEL_260;\n    }\n    if ( v122 >= 7 )\n    {\nLABEL_260:\n      v90 = v159;\n      v159 = (char *)v159 + 1;\n      *v90 = 108;\n    }\n  }\n  *(_WORD *)v159 = (unsigned __int8)i[72];\n  v118 = 0;\n  if ( *((_QWORD *)i + 5) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n      abort();\n    v92 = v118++;\n    *(&v134 + v92) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n  }\n  if ( *((_QWORD *)i + 8) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n      abort();\n    v93 = v118++;\n    *(&v134 + v93) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n  }\n  v94 = sub_40DFBB(n, 2LL);\n  if ( v94 > v142 )\n  {\n    if ( v142 )\n    {\n      if ( (v142 & 0x8000000000000000LL) != 0LL )\n        v95 = -1LL;\n      else\n        v95 = 2 * v142;\n    }\n    else\n    {\n      v95 = 12LL;\n    }\n    v142 = v95;\n    v96 = sub_40DFBB(n, 2LL);\n    if ( v96 > v142 )\n      v142 = sub_40DFBB(n, 2LL);\n    v180 = v142;\n    if ( v142 != -1LL )\n    {\n      v160 = src != v111 && src ? realloc(src, v180) : malloc(v180);\n      if ( v160 )\n      {\n        if ( src == v111 && n )\n          memcpy(v160, src, n);\n        src = v160;\n        goto LABEL_288;\n      }\n    }\nLABEL_525:\n    if ( src != v111 && src )\n      free(src);\n    if ( v137 )\n      free(v137);\nLABEL_530:\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 12;\n    return 0LL;\n  }\nLABEL_288:\n  *((_BYTE *)src + n) = 0;\n  v124 = *__errno_location();\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v113 = -1;\n      v119 = 0;\n      maxlen = v142 - n;\n      if ( v142 - n > 0x7FFFFFFF )\n        maxlen = 0x7FFFFFFFLL;\n      *__errno_location() = 0;\n      if ( v122 == 9 )\n      {\n        v183 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v183, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v183, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v183, &v113);\n        }\n      }\n      else if ( v122 > 9 )\n      {\n        if ( v122 == 13 )\n        {\n          v131 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v131, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v131, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v131, &v113);\n          }\n        }\n        else if ( v122 > 0xD )\n        {\n          if ( v122 == 15 )\n          {\n            v186 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v186, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v186, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v186, &v113);\n            }\n          }\n          else if ( v122 < 0xF )\n          {\n            v132 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v132, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v132, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v132, &v113);\n            }\n          }\n          else if ( v122 == 16 )\n          {\n            v187 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v187, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v187, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v187, &v113);\n            }\n          }\n          else\n          {\n            if ( v122 != 17 )\nLABEL_432:\n              abort();\n            v188 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v188, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v188, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v188, &v113);\n            }\n          }\n        }\n        else if ( v122 == 11 )\n        {\n          v185 = *((double *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113, v185);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v185);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113, v185);\n          }\n        }\n        else if ( v122 > 0xB )\n        {\n          v97 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n          v98 = *((_DWORD *)v97 + 6);\n          v192 = *((_QWORD *)v97 + 2);\n          v193 = v98;\n          if ( v118 == 1 )\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v13 = maxlen;\n            DWORD2(v106) = v193;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v192, *((_QWORD *)&v106 + 1));\n          }\n          else\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113);\n          }\n        }\n        else\n        {\n          v184 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v184, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v184, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v184, &v113);\n          }\n        }\n      }\n      else if ( v122 == 4 )\n      {\n        v128 = *((unsigned __int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v128, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v128, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v128, &v113);\n        }\n      }\n      else if ( v122 > 4 )\n      {\n        if ( v122 == 6 )\n        {\n          v130 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v130, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v130, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v130, &v113);\n          }\n        }\n        else if ( v122 < 6 )\n        {\n          v129 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v129, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v129, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v129, &v113);\n          }\n        }\n        else if ( v122 == 7 )\n        {\n          v181 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v181, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v181, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v181, &v113);\n          }\n        }\n        else\n        {\n          v182 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v182, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v182, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v182, &v113);\n          }\n        }\n      }\n      else if ( v122 == 2 )\n      {\n        v126 = *((unsigned __int8 *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v126, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v126, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v126, &v113);\n        }\n      }\n      else if ( v122 > 2 )\n      {\n        v127 = *((__int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v127, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v127, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v127, &v113);\n        }\n      }\n      else\n      {\n        if ( v122 != 1 )\n          goto LABEL_432;\n        v125 = *((char *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v125, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v125, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v125, &v113);\n        }\n      }\n      if ( v113 >= 0 )\n      {\n        if ( v113 < maxlen && *((_BYTE *)src + n + v113) )\n          abort();\n        if ( v119 > v113 )\n          v113 = v119;\n        goto LABEL_443;\n      }\n      if ( !*((_BYTE *)v159 + 1) )\n        break;\n      *((_BYTE *)v159 + 1) = 0;\n    }\n    if ( v119 >= 0 )\n      v113 = v119;\nLABEL_443:\n    if ( v113 < 0 )\n    {\n      v133 = *__errno_location();\n      if ( src != v111 && src )\n        free(src);\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      v99 = __errno_location();\n      if ( v133 )\n      {\n        v100 = v133;\n      }\n      else if ( i[72] == 99 || i[72] == 115 )\n      {\n        v100 = 84;\n      }\n      else\n      {\n        v100 = 22;\n      }\n      *v99 = v100;\n      return 0LL;\n    }\n    if ( (unsigned int)(v113 + 1) < maxlen )\n    {\n      n += v113;\n      *__errno_location() = v124;\n      goto LABEL_487;\n    }\n    if ( maxlen == 0x7FFFFFFF )\n      break;\n    if ( (v142 & 0x8000000000000000LL) != 0LL )\n      v101 = -1LL;\n    else\n      v101 = 2 * v142;\n    v102 = sub_40DFBB(n, (unsigned int)(v113 + 2));\n    v189 = sub_40E03A(v102, v101);\n    if ( v189 > v142 )\n    {\n      if ( v142 )\n      {\n        if ( (v142 & 0x8000000000000000LL) != 0LL )\n          v103 = -1LL;\n        else\n          v103 = 2 * v142;\n      }\n      else\n      {\n        v103 = 12LL;\n      }\n      v142 = v103;\n      if ( v189 > v103 )\n        v142 = v189;\n      v190 = v142;\n      if ( v142 == -1LL )\n        goto LABEL_525;\n      v162 = src != v111 && src ? realloc(src, v190) : malloc(v190);\n      if ( !v162 )\n        goto LABEL_525;\n      if ( src == v111 && n )\n        memcpy(v162, src, n);\n      src = v162;\n    }\n  }\n  if ( src != v111 && src )\n    free(src);\n  if ( v137 )\n    free(v137);\n  if ( ptr != v201 )\n    free(ptr);\n  if ( v195 != v196 )\n    free(v195);\n  *__errno_location() = 75;\n  return 0LL;\n}\n"], [4266118, "sub_411886", "_BOOL8 __fastcall sub_411886(int a1)\n{\n  return a1 >= 0 && a1 <= 127;\n}\n"], [4266154, "sub_4118AA", "_BOOL8 __fastcall sub_4118AA(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4266212, "sub_4118E4", "_BOOL8 __fastcall sub_4118E4(int a1)\n{\n  return (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4266258, "sub_411912", "_BOOL8 __fastcall sub_411912(int a1)\n{\n  return a1 == 32 || a1 == 9;\n}\n"], [4266294, "sub_411936", "_BOOL8 __fastcall sub_411936(int a1)\n{\n  return (a1 & 0xFFFFFFE0) == 0 || a1 == 127;\n}\n"], [4266334, "sub_41195E", "_BOOL8 __fastcall sub_41195E(int a1)\n{\n  return a1 > 47 && a1 <= 57;\n}\n"], [4266370, "sub_411982", "_BOOL8 __fastcall sub_411982(int a1)\n{\n  return a1 > 96 && a1 <= 122;\n}\n"], [4266406, "sub_4119A6", "_BOOL8 __fastcall sub_4119A6(int a1)\n{\n  return a1 > 32 && a1 <= 126;\n}\n"], [4266442, "sub_4119CA", "_BOOL8 __fastcall sub_4119CA(int a1)\n{\n  return a1 > 31 && a1 <= 126;\n}\n"], [4266478, "sub_4119EE", "_BOOL8 __fastcall sub_4119EE(int a1)\n{\n  return a1 > 32 && a1 <= 126 && (a1 <= 47 || a1 > 57) && ((int)(a1 & 0xFFFFFFDF) <= 64 || (int)(a1 & 0xFFFFFFDF) > 90);\n}\n"], [4266548, "sub_411A34", "_BOOL8 __fastcall sub_411A34(int a1)\n{\n  return a1 == 32 || a1 == 9 || a1 == 10 || a1 == 11 || a1 == 12 || a1 == 13;\n}\n"], [4266608, "sub_411A70", "_BOOL8 __fastcall sub_411A70(int a1)\n{\n  return a1 > 64 && a1 <= 90;\n}\n"], [4266644, "sub_411A94", "_BOOL8 __fastcall sub_411A94(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 70;\n}\n"], [4266702, "sub_411ACE", "__int64 __fastcall sub_411ACE(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 64 || a1 > 90 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 + 32);\n  return result;\n}\n"], [4266734, "sub_411AEE", "__int64 __fastcall sub_411AEE(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 96 || a1 > 122 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 - 32);\n  return result;\n}\n"], [4266766, "sub_411B0E", "unsigned __int64 __fastcall sub_411B0E(unsigned __int64 a1)\n{\n  void *v2; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+20h] [rbp-10h]\n\n  if ( a1 + 16 < a1 )\n    return 0LL;\n  v2 = malloc(a1 + 16);\n  if ( !v2 )\n    return 0LL;\n  v3 = (unsigned __int64)v2 + 16;\n  *(_DWORD *)(v3 - 4) = 336984906;\n  *(_QWORD *)(v3 - 16) = qword_618740[v3 % 0x101];\n  qword_618740[v3 % 0x101] = v3;\n  return v3;\n}\n"], [4266953, "sub_411BC9", "void __fastcall sub_411BC9(unsigned __int64 a1)\n{\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n\n  if ( a1 && *(_DWORD *)(a1 - 4) == 336984906 )\n  {\n    for ( i = (_QWORD *)(8 * (a1 % 0x101) + 6391616); *i; i = (_QWORD *)(*i - 16LL) )\n    {\n      if ( *i == a1 )\n      {\n        *i = *(_QWORD *)(a1 - 16);\n        free((void *)(a1 - 16));\n        return;\n      }\n    }\n  }\n}\n"], [4267154, "sub_411C92", "bool __fastcall sub_411C92(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_415660[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4267208, "sub_411CC8", "__int64 __fastcall sub_411CC8(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_411C92(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_408911(*(const void **)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4267688, "sub_411EA8", "size_t __fastcall sub_411EA8(const char *a1)\n{\n  __int64 v3; // [rsp+18h] [rbp-58h]\n  char v4[4]; // [rsp+20h] [rbp-50h] BYREF\n  int v5; // [rsp+24h] [rbp-4Ch] BYREF\n  char i; // [rsp+2Ch] [rbp-44h]\n  const char *v7; // [rsp+30h] [rbp-40h]\n  __int64 v8; // [rsp+38h] [rbp-38h]\n  char v9; // [rsp+40h] [rbp-30h]\n  int v10; // [rsp+44h] [rbp-2Ch]\n  unsigned __int64 v11; // [rsp+68h] [rbp-8h]\n\n  v11 = __readfsqword(0x28u);\n  if ( __ctype_get_mb_cur_max() <= 1 )\n    return strlen(a1);\n  v3 = 0LL;\n  v7 = a1;\n  v4[0] = 0;\n  memset(&v5, 0, 8uLL);\n  for ( i = 0; ; i = 0 )\n  {\n    sub_411CC8((__int64)v4);\n    if ( v9 == 1 && !v10 )\n      break;\n    ++v3;\n    v7 += v8;\n  }\n  return v3;\n}\n"], [4267892, "sub_411F74", "__int64 __fastcall sub_411F74(int a1, __m128 a2, __m128 a3, __m128 a4, __m128 a5, __m128 a6, __m128 a7, __m128 a8, __m128 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14)\n{\n  return sub_40DBCB(a1, 0, 3LL, a12, a13, a14, a2, a3, a4, a5, a6, a7, a8, a9);\n}\n"], [4267930, "sub_411F9A", "_BOOL8 __fastcall sub_411F9A(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int16 a8)\n{\n  if ( (a8 & 0x7FFF) == 0 )\n    return HIDWORD(a7) >> 31;\n  if ( (a8 & 0x7FFF) == 0x7FFF )\n    return (HIDWORD(a7) ^ 0x80000000 | (unsigned int)a7) != 0;\n  return a7 >= 0;\n}\n"], [4268018, "sub_411FF2", "__int64 __fastcall sub_411FF2(unsigned int *a1, unsigned __int64 *a2)\n{\n  unsigned int v2; // eax\n  _DWORD *v3; // rax\n  _DWORD *v4; // rax\n  _DWORD *v5; // rax\n  _DWORD *v6; // rax\n  _DWORD *v7; // rax\n  _DWORD *v8; // rax\n  _QWORD *v9; // rax\n  _QWORD *v10; // rax\n  _QWORD *v11; // rax\n  _QWORD *v12; // rax\n  _QWORD *v13; // rax\n  unsigned __int64 v14; // rdx\n  __int64 v15; // rax\n  _DWORD *v16; // rax\n  _DWORD *v17; // rax\n  _QWORD *v18; // rax\n  _QWORD *v19; // rax\n  _QWORD *v20; // rax\n  _QWORD *v21; // rax\n  _QWORD *v22; // rax\n  _QWORD *v23; // rax\n  _QWORD *v24; // rax\n  _QWORD *v25; // rax\n  unsigned __int64 v27; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v28; // [rsp+18h] [rbp-8h]\n\n  v27 = 0LL;\n  v28 = a2[1];\n  while ( *a2 > v27 )\n  {\n    v2 = *(_DWORD *)v28;\n    if ( *(_DWORD *)v28 == 11 )\n    {\n      if ( a1[1] >= 0xB0 )\n      {\n        v13 = (_QWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v13 + 1;\n      }\n      else\n      {\n        v13 = (_QWORD *)(*((_QWORD *)a1 + 2) + a1[1]);\n        a1[1] += 16;\n      }\n      *(_QWORD *)(v28 + 16) = *v13;\n    }\n    else if ( v2 > 0xB )\n    {\n      if ( v2 == 17 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v20 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v20 + 1;\n        }\n        else\n        {\n          v20 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v20;\n      }\n      else if ( v2 > 0x11 )\n      {\n        if ( v2 == 20 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v23 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v23 + 1;\n          }\n          else\n          {\n            v23 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v23;\n        }\n        else if ( v2 > 0x14 )\n        {\n          if ( v2 == 21 )\n          {\n            if ( *a1 >= 0x30 )\n            {\n              v24 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v24 + 1;\n            }\n            else\n            {\n              v24 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v24;\n          }\n          else\n          {\n            if ( v2 != 22 )\n              return 0xFFFFFFFFLL;\n            if ( *a1 >= 0x30 )\n            {\n              v25 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v25 + 1;\n            }\n            else\n            {\n              v25 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v25;\n          }\n        }\n        else if ( v2 == 18 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v21 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v21 + 1;\n          }\n          else\n          {\n            v21 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v21;\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v22 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v22 + 1;\n          }\n          else\n          {\n            v22 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v22;\n        }\n      }\n      else if ( v2 == 14 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v17 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v17 + 2;\n        }\n        else\n        {\n          v17 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v17;\n      }\n      else if ( v2 > 0xE )\n      {\n        if ( v2 == 15 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v18 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v18 + 1;\n          }\n          else\n          {\n            v18 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v18;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(NULL)\";\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v19 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v19 + 1;\n          }\n          else\n          {\n            v19 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v19;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(\";\n        }\n      }\n      else if ( v2 == 12 )\n      {\n        v14 = (*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;\n        *((_QWORD *)a1 + 1) = v14 + 16;\n        v15 = *(_QWORD *)v14;\n        LODWORD(v14) = *(_DWORD *)(v14 + 8);\n        *(_QWORD *)(v28 + 16) = v15;\n        *(_DWORD *)(v28 + 24) = v14;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v16 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v16 + 2;\n        }\n        else\n        {\n          v16 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v16;\n      }\n    }\n    else if ( v2 == 5 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v7 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v7 + 2;\n      }\n      else\n      {\n        v7 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_DWORD *)(v28 + 16) = *v7;\n    }\n    else if ( v2 > 5 )\n    {\n      if ( v2 == 8 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v10 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v10 + 1;\n        }\n        else\n        {\n          v10 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v10;\n      }\n      else if ( v2 > 8 )\n      {\n        if ( v2 == 9 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v11 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v11 + 1;\n          }\n          else\n          {\n            v11 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v11;\n        }\n        else\n        {\n          if ( v2 != 10 )\n            return 0xFFFFFFFFLL;\n          if ( *a1 >= 0x30 )\n          {\n            v12 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 1;\n          }\n          else\n          {\n            v12 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v12;\n        }\n      }\n      else if ( v2 == 6 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v8 + 2;\n        }\n        else\n        {\n          v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v8;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v9 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v9 + 1;\n        }\n        else\n        {\n          v9 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v9;\n      }\n    }\n    else if ( v2 == 2 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v4 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v4 + 2;\n      }\n      else\n      {\n        v4 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v4;\n    }\n    else if ( v2 > 2 )\n    {\n      if ( v2 == 3 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v5 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v5 + 2;\n        }\n        else\n        {\n          v5 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v5;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v6 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v6 + 2;\n        }\n        else\n        {\n          v6 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v6;\n      }\n    }\n    else\n    {\n      if ( v2 != 1 )\n        return 0xFFFFFFFFLL;\n      if ( *a1 >= 0x30 )\n      {\n        v3 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v3 + 2;\n      }\n      else\n      {\n        v3 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v3;\n    }\n    ++v27;\n    v28 += 32LL;\n  }\n  return 0LL;\n}\n"], [4270288, "sub_4128D0", "__int64 __fastcall sub_4128D0(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4270340, "sub_412904", "__int64 __fastcall sub_412904(char *a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rax\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rax\n  void *v9; // rax\n  __int64 v10; // rsi\n  __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned __int64 v14; // rax\n  size_t v15; // rax\n  void *v16; // rax\n  __int64 v17; // rsi\n  __int64 v18; // rax\n  char *v19; // rax\n  int v20; // eax\n  __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  size_t v23; // rax\n  void *v24; // rax\n  __int64 v25; // rsi\n  __int64 v26; // rax\n  unsigned __int64 v27; // rax\n  size_t v28; // rax\n  void *v29; // rax\n  char v33; // [rsp+2Fh] [rbp-E1h]\n  int v34; // [rsp+30h] [rbp-E0h]\n  int ii; // [rsp+34h] [rbp-DCh]\n  __int64 v37; // [rsp+40h] [rbp-D0h]\n  __int64 v38; // [rsp+48h] [rbp-C8h]\n  __int64 v39; // [rsp+50h] [rbp-C0h]\n  unsigned __int64 v40; // [rsp+58h] [rbp-B8h]\n  unsigned __int64 v41; // [rsp+60h] [rbp-B0h]\n  __int64 v42; // [rsp+68h] [rbp-A8h]\n  char *i; // [rsp+70h] [rbp-A0h]\n  char *j; // [rsp+70h] [rbp-A0h]\n  unsigned __int64 v45; // [rsp+78h] [rbp-98h]\n  char *k; // [rsp+80h] [rbp-90h]\n  char *l; // [rsp+80h] [rbp-90h]\n  unsigned __int64 v48; // [rsp+88h] [rbp-88h]\n  char *m; // [rsp+90h] [rbp-80h]\n  char *n; // [rsp+90h] [rbp-80h]\n  unsigned __int64 v51; // [rsp+98h] [rbp-78h]\n  __int64 v52; // [rsp+A0h] [rbp-70h]\n  unsigned __int64 v53; // [rsp+A8h] [rbp-68h]\n  void *dest; // [rsp+B8h] [rbp-58h]\n  unsigned __int64 v55; // [rsp+C8h] [rbp-48h]\n  void *v56; // [rsp+D8h] [rbp-38h]\n  unsigned __int64 v57; // [rsp+E8h] [rbp-28h]\n  void *v58; // [rsp+F8h] [rbp-18h]\n  void *v59; // [rsp+108h] [rbp-8h]\n\n  v37 = 0LL;\n  v40 = 0LL;\n  v41 = 0LL;\n  *(_QWORD *)a2 = 0LL;\n  v38 = 7LL;\n  *(_QWORD *)(a2 + 8) = a2 + 32;\n  *(_QWORD *)a3 = 0LL;\n  v39 = 7LL;\n  *(_QWORD *)(a3 + 8) = a3 + 16;\n  while ( 1 )\n  {\n    do\n    {\n      if ( !*a1 )\n      {\n        *(_QWORD *)(*(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2) = a1;\n        *(_QWORD *)(a2 + 16) = v40;\n        *(_QWORD *)(a2 + 24) = v41;\n        return 0LL;\n      }\n      v3 = a1++;\n    }\n    while ( *v3 != 37 );\n    v42 = -1LL;\n    v52 = *(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2;\n    *(_QWORD *)v52 = a1 - 1;\n    *(_DWORD *)(v52 + 16) = 0;\n    *(_QWORD *)(v52 + 24) = 0LL;\n    *(_QWORD *)(v52 + 32) = 0LL;\n    *(_QWORD *)(v52 + 40) = -1LL;\n    *(_QWORD *)(v52 + 48) = 0LL;\n    *(_QWORD *)(v52 + 56) = 0LL;\n    *(_QWORD *)(v52 + 64) = -1LL;\n    *(_QWORD *)(v52 + 80) = -1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( i = a1; *i > 47 && *i <= 57; ++i )\n        ;\n      if ( *i == 36 )\n      {\n        v45 = 0LL;\n        for ( j = a1; *j > 47 && *j <= 57; ++j )\n        {\n          if ( v45 > 0x1999999999999999LL )\n            v4 = -1LL;\n          else\n            v4 = 10 * v45;\n          v45 = sub_4128D0(v4, *j - 48);\n        }\n        if ( !v45 || v45 == -1LL )\n        {\nLABEL_272:\n          if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n            free(*(void **)(a3 + 8));\n          if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n            free(*(void **)(a2 + 8));\n          *__errno_location() = 22;\n          return 0xFFFFFFFFLL;\n        }\n        v42 = v45 - 1;\n        a1 = j + 1;\n      }\n    }\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( 1 )\n              {\n                while ( *a1 == 39 )\n                {\n                  *(_DWORD *)(v52 + 16) |= 1u;\n                  ++a1;\n                }\n                if ( *a1 != 45 )\n                  break;\n                *(_DWORD *)(v52 + 16) |= 2u;\n                ++a1;\n              }\n              if ( *a1 != 43 )\n                break;\n              *(_DWORD *)(v52 + 16) |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 32 )\n              break;\n            *(_DWORD *)(v52 + 16) |= 8u;\n            ++a1;\n          }\n          if ( *a1 != 35 )\n            break;\n          *(_DWORD *)(v52 + 16) |= 0x10u;\n          ++a1;\n        }\n        if ( *a1 != 48 )\n          break;\n        *(_DWORD *)(v52 + 16) |= 0x20u;\n        ++a1;\n      }\n      if ( *a1 != 73 )\n        break;\n      *(_DWORD *)(v52 + 16) |= 0x40u;\n      ++a1;\n    }\n    if ( *a1 != 42 )\n    {\n      if ( *a1 > 47 && *a1 <= 57 )\n      {\n        *(_QWORD *)(v52 + 24) = a1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 32) = a1;\n        if ( v40 < *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24) )\n          v40 = *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24);\n      }\n      goto LABEL_88;\n    }\n    *(_QWORD *)(v52 + 24) = a1++;\n    *(_QWORD *)(v52 + 32) = a1;\n    if ( !v40 )\n      v40 = 1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( k = a1; *k > 47 && *k <= 57; ++k )\n        ;\n      if ( *k == 36 )\n      {\n        v48 = 0LL;\n        for ( l = a1; *l > 47 && *l <= 57; ++l )\n        {\n          if ( v48 > 0x1999999999999999LL )\n            v5 = -1LL;\n          else\n            v5 = 10 * v48;\n          v48 = sub_4128D0(v5, *l - 48);\n        }\n        if ( !v48 || v48 == -1LL )\n          goto LABEL_272;\n        *(_QWORD *)(v52 + 40) = v48 - 1;\n        a1 = l + 1;\n      }\n    }\n    if ( *(_QWORD *)(v52 + 40) == -1LL )\n    {\n      v6 = v37++;\n      *(_QWORD *)(v52 + 40) = v6;\n      if ( *(_QWORD *)(v52 + 40) == -1LL )\n        goto LABEL_272;\n    }\n    v53 = *(_QWORD *)(v52 + 40);\n    if ( v53 >= v39 )\n      break;\nLABEL_75:\n    while ( *(_QWORD *)a3 <= v53 )\n    {\n      v10 = *(_QWORD *)(a3 + 8);\n      v11 = (*(_QWORD *)a3)++;\n      *(_DWORD *)(v10 + 32 * v11) = 0;\n    }\n    if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) )\n    {\n      if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) != 5 )\n        goto LABEL_272;\n    }\n    else\n    {\n      *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) = 5;\n    }\nLABEL_88:\n    if ( *a1 == 46 )\n    {\n      if ( *++a1 == 42 )\n      {\n        *(_QWORD *)(v52 + 48) = a1++ - 1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 <= 1 )\n          v41 = 2LL;\n        if ( *a1 > 47 && *a1 <= 57 )\n        {\n          for ( m = a1; *m > 47 && *m <= 57; ++m )\n            ;\n          if ( *m == 36 )\n          {\n            v51 = 0LL;\n            for ( n = a1; *n > 47 && *n <= 57; ++n )\n            {\n              if ( v51 > 0x1999999999999999LL )\n                v12 = -1LL;\n              else\n                v12 = 10 * v51;\n              v51 = sub_4128D0(v12, *n - 48);\n            }\n            if ( !v51 || v51 == -1LL )\n              goto LABEL_272;\n            *(_QWORD *)(v52 + 64) = v51 - 1;\n            a1 = n + 1;\n          }\n        }\n        if ( *(_QWORD *)(v52 + 64) == -1LL )\n        {\n          v13 = v37++;\n          *(_QWORD *)(v52 + 64) = v13;\n          if ( *(_QWORD *)(v52 + 64) == -1LL )\n            goto LABEL_272;\n        }\n        v55 = *(_QWORD *)(v52 + 64);\n        if ( v55 >= v39 )\n        {\n          if ( v39 < 0 )\n            v14 = -1LL;\n          else\n            v14 = 2 * v39;\n          v39 = v14;\n          if ( v14 <= v55 )\n            v39 = sub_4128D0(v55, 1LL);\n          if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n            v15 = -1LL;\n          else\n            v15 = 32 * v39;\n          if ( v15 == -1LL )\n            goto LABEL_277;\n          v16 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v15) : realloc(*(void **)(a3 + 8), v15);\n          v56 = v16;\n          if ( !v16 )\n            goto LABEL_277;\n          if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n            memcpy(v16, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n          *(_QWORD *)(a3 + 8) = v56;\n        }\n        while ( *(_QWORD *)a3 <= v55 )\n        {\n          v17 = *(_QWORD *)(a3 + 8);\n          v18 = (*(_QWORD *)a3)++;\n          *(_DWORD *)(v17 + 32 * v18) = 0;\n        }\n        if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) )\n        {\n          if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) != 5 )\n            goto LABEL_272;\n        }\n        else\n        {\n          *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) = 5;\n        }\n      }\n      else\n      {\n        *(_QWORD *)(v52 + 48) = a1 - 1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 < *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48) )\n          v41 = *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48);\n      }\n    }\n    for ( ii = 0; ; ii += 8 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( *a1 == 104 )\n              {\n                ii |= 1 << (ii & 1);\n                ++a1;\n              }\n              if ( *a1 != 76 )\n                break;\n              ii |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 108 )\n              break;\n            ii += 8;\n            ++a1;\n          }\n          if ( *a1 != 106 )\n            break;\n          ii += 8;\n          ++a1;\n        }\n        if ( *a1 != 122 && *a1 != 90 )\n          break;\n        ii += 8;\n        ++a1;\n      }\n      if ( *a1 != 116 )\n        break;\n      ++a1;\n    }\n    v19 = a1++;\n    v33 = *v19;\n    v20 = *v19;\n    if ( v20 == 100 )\n    {\nLABEL_185:\n      if ( ii > 15 || (ii & 4) != 0 )\n      {\n        v34 = 9;\n      }\n      else if ( ii <= 7 )\n      {\n        if ( (ii & 2) != 0 )\n        {\n          v34 = 1;\n        }\n        else if ( (ii & 1) != 0 )\n        {\n          v34 = 3;\n        }\n        else\n        {\n          v34 = 5;\n        }\n      }\n      else\n      {\n        v34 = 7;\n      }\n      goto LABEL_229;\n    }\n    if ( v20 > 100 )\n    {\n      if ( v20 == 111 )\n        goto LABEL_195;\n      if ( v20 > 111 )\n      {\n        if ( v20 == 115 )\n        {\n          if ( ii <= 7 )\n            v34 = 15;\n          else\n            v34 = 16;\n          goto LABEL_229;\n        }\n        if ( v20 > 115 )\n        {\n          if ( v20 != 117 && v20 != 120 )\n            goto LABEL_272;\nLABEL_195:\n          if ( ii > 15 || (ii & 4) != 0 )\n          {\n            v34 = 10;\n          }\n          else if ( ii <= 7 )\n          {\n            if ( (ii & 2) != 0 )\n            {\n              v34 = 2;\n            }\n            else if ( (ii & 1) != 0 )\n            {\n              v34 = 4;\n            }\n            else\n            {\n              v34 = 6;\n            }\n          }\n          else\n          {\n            v34 = 8;\n          }\n          goto LABEL_229;\n        }\n        if ( v20 != 112 )\n          goto LABEL_272;\n        v34 = 17;\n      }\n      else\n      {\n        if ( v20 == 105 )\n          goto LABEL_185;\n        if ( v20 <= 105 )\n        {\n          if ( v20 > 103 )\n            goto LABEL_272;\nLABEL_205:\n          if ( ii > 15 || (ii & 4) != 0 )\n            v34 = 12;\n          else\n            v34 = 11;\n          goto LABEL_229;\n        }\n        if ( v20 != 110 )\n          goto LABEL_272;\n        if ( ii > 15 || (ii & 4) != 0 )\n        {\n          v34 = 22;\n        }\n        else if ( ii <= 7 )\n        {\n          if ( (ii & 2) != 0 )\n          {\n            v34 = 18;\n          }\n          else if ( (ii & 1) != 0 )\n          {\n            v34 = 19;\n          }\n          else\n          {\n            v34 = 20;\n          }\n        }\n        else\n        {\n          v34 = 21;\n        }\n      }\n    }\n    else if ( v20 > 71 )\n    {\n      if ( v20 == 88 )\n        goto LABEL_195;\n      if ( v20 > 88 )\n      {\n        if ( v20 == 97 )\n          goto LABEL_205;\n        if ( v20 != 99 )\n          goto LABEL_272;\n        if ( ii <= 7 )\n          v34 = 13;\n        else\n          v34 = 14;\n      }\n      else\n      {\n        if ( v20 != 83 )\n          goto LABEL_272;\n        v34 = 16;\n        v33 = 115;\n      }\n    }\n    else\n    {\n      if ( v20 >= 69 || v20 == 65 )\n        goto LABEL_205;\n      if ( v20 == 67 )\n      {\n        v34 = 14;\n        v33 = 99;\n      }\n      else\n      {\n        if ( v20 != 37 )\n          goto LABEL_272;\n        v34 = 0;\n      }\n    }\nLABEL_229:\n    if ( v34 )\n    {\n      *(_QWORD *)(v52 + 80) = v42;\n      if ( *(_QWORD *)(v52 + 80) == -1LL )\n      {\n        v21 = v37++;\n        *(_QWORD *)(v52 + 80) = v21;\n        if ( *(_QWORD *)(v52 + 80) == -1LL )\n          goto LABEL_272;\n      }\n      v57 = *(_QWORD *)(v52 + 80);\n      if ( v57 >= v39 )\n      {\n        if ( v39 < 0 )\n          v22 = -1LL;\n        else\n          v22 = 2 * v39;\n        v39 = v22;\n        if ( v22 <= v57 )\n          v39 = sub_4128D0(v57, 1LL);\n        if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n          v23 = -1LL;\n        else\n          v23 = 32 * v39;\n        if ( v23 == -1LL )\n          goto LABEL_277;\n        v24 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v23) : realloc(*(void **)(a3 + 8), v23);\n        v58 = v24;\n        if ( !v24 )\n          goto LABEL_277;\n        if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n          memcpy(v24, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n        *(_QWORD *)(a3 + 8) = v58;\n      }\n      while ( *(_QWORD *)a3 <= v57 )\n      {\n        v25 = *(_QWORD *)(a3 + 8);\n        v26 = (*(_QWORD *)a3)++;\n        *(_DWORD *)(v25 + 32 * v26) = 0;\n      }\n      if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) )\n      {\n        if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) != v34 )\n          goto LABEL_272;\n      }\n      else\n      {\n        *(_DWORD *)(*(_QWORD *)(a3 + 8) + 32 * v57) = v34;\n      }\n    }\n    *(_BYTE *)(v52 + 72) = v33;\n    *(_QWORD *)(v52 + 8) = a1;\n    if ( ++*(_QWORD *)a2 >= (unsigned __int64)v38 )\n    {\n      if ( v38 < 0 )\n        v27 = -1LL;\n      else\n        v27 = 2 * v38;\n      v38 = v27;\n      if ( v27 > 0x2E8BA2E8BA2E8BALL )\n        v28 = -1LL;\n      else\n        v28 = 88 * v27;\n      if ( v28 == -1LL )\n        goto LABEL_277;\n      v29 = *(_QWORD *)(a2 + 8) == a2 + 32 ? malloc(v28) : realloc(*(void **)(a2 + 8), v28);\n      v59 = v29;\n      if ( !v29 )\n        goto LABEL_277;\n      if ( *(_QWORD *)(a2 + 8) == a2 + 32 )\n        memcpy(v29, *(const void **)(a2 + 8), 88LL * *(_QWORD *)a2);\n      *(_QWORD *)(a2 + 8) = v59;\n    }\n  }\n  if ( v39 < 0 )\n    v7 = -1LL;\n  else\n    v7 = 2 * v39;\n  v39 = v7;\n  if ( v7 <= v53 )\n    v39 = sub_4128D0(v53, 1LL);\n  if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n    v8 = -1LL;\n  else\n    v8 = 32 * v39;\n  if ( v8 != -1LL )\n  {\n    v9 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v8) : realloc(*(void **)(a3 + 8), v8);\n    dest = v9;\n    if ( v9 )\n    {\n      if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n        memcpy(v9, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n      *(_QWORD *)(a3 + 8) = dest;\n      goto LABEL_75;\n    }\n  }\nLABEL_277:\n  if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n    free(*(void **)(a3 + 8));\n  if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n    free(*(void **)(a2 + 8));\n  *__errno_location() = 12;\n  return 0xFFFFFFFFLL;\n}\n"], [4275872, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_617E18 - off_617E10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_617E10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4275984, "fini", "void fini(void)\n{\n  ;\n}\n"], [4276000, "sub_413F20", "int __fastcall sub_413F20(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( qword_618328 )\n    v1 = (void *)qword_618328[0];\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4276032, "sub_413F40", "int __fastcall sub_413F40(char *filename, struct stat *stat_buf)\n{\n  return __xstat(1, filename, stat_buf);\n}\n"], [4276048, "sub_413F50", "int __fastcall sub_413F50(int fildes, struct stat *stat_buf)\n{\n  return __fxstat(1, fildes, stat_buf);\n}\n"], [4276064, "sub_413F60", "int __fastcall sub_413F60(char *filename, struct stat *stat_buf)\n{\n  return __lxstat(1, filename, stat_buf);\n}\n"], [4276080, "sub_413F70", "int __fastcall sub_413F70(int fildes, char *filename, struct stat *stat_buf, int flag)\n{\n  return __fxstatat(1, fildes, filename, stat_buf, flag);\n}\n"], [4276104, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]