[[4199000, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4199040, "sub_401280", "__int64 sub_401280()\n{\n  return qword_610010();\n}\n"], [4199056, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4199072, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4199088, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4199104, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4199120, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4199136, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4199152, ".fcntl", "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\n  return fcntl(fd, cmd);\n}\n"], [4199168, ".fread_unlocked", "// attributes: thunk\nsize_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)\n{\n  return fread_unlocked(ptr, size, n, stream);\n}\n"], [4199184, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4199200, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4199216, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4199232, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4199248, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4199264, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4199280, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4199296, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4199312, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4199328, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4199344, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4199360, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4199376, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4199392, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4199408, ".close", "// attributes: thunk\nint close(int fd)\n{\n  return close(fd);\n}\n"], [4199424, ".posix_fadvise", "// attributes: thunk\nint posix_fadvise(int fd, off_t offset, off_t len, int advise)\n{\n  return posix_fadvise(fd, offset, len, advise);\n}\n"], [4199440, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4199456, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4199472, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4199488, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4199504, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4199520, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4199536, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4199552, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4199568, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4199584, ".putchar_unlocked", "// attributes: thunk\nint putchar_unlocked(int c)\n{\n  return putchar_unlocked(c);\n}\n"], [4199600, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4199616, ".tolower", "// attributes: thunk\nint tolower(int c)\n{\n  return tolower(c);\n}\n"], [4199632, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4199648, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4199664, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4199680, ".fwrite_unlocked", "// attributes: thunk\nsize_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)\n{\n  return fwrite_unlocked(ptr, size, n, stream);\n}\n"], [4199696, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4199712, ".fdopen", "// attributes: thunk\nFILE *fdopen(int fd, const char *modes)\n{\n  return fdopen(fd, modes);\n}\n"], [4199728, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4199744, ".setvbuf", "// attributes: thunk\nint setvbuf(FILE *stream, char *buf, int modes, size_t n)\n{\n  return setvbuf(stream, buf, modes, n);\n}\n"], [4199760, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4199776, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4199792, ".fopen", "// attributes: thunk\nFILE *fopen(const char *filename, const char *modes)\n{\n  return fopen(filename, modes);\n}\n"], [4199808, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4199824, ".getline", "// attributes: thunk\n__ssize_t getline(char **lineptr, size_t *n, FILE *stream)\n{\n  return getline(lineptr, n, stream);\n}\n"], [4199840, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4199856, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4199872, ".ngettext", "// attributes: thunk\nchar *ngettext(const char *msgid1, const char *msgid2, unsigned __int64 n)\n{\n  return ngettext(msgid1, msgid2, n);\n}\n"], [4199888, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4199904, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4199920, ".feof_unlocked", "// attributes: thunk\nint feof_unlocked(FILE *stream)\n{\n  return feof_unlocked(stream);\n}\n"], [4199936, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4199952, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4200000, "sub_401640", "signed __int64 sub_401640()\n{\n  signed __int64 result; // rax\n\n  result = &unk_61022F - &unk_610228;\n  if ( (unsigned __int64)(&unk_61022F - &unk_610228) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4200048, "sub_401670", "__int64 sub_401670()\n{\n  return 0LL;\n}\n"], [4200112, "sub_4016B0", "signed __int64 sub_4016B0()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_610278 )\n  {\n    result = sub_401640();\n    byte_610278 = 1;\n  }\n  return result;\n}\n"], [4200144, "sub_4016D0", "__int64 sub_4016D0()\n{\n  return sub_401670();\n}\n"], [4200189, "sub_4016FD", "__int64 __fastcall sub_4016FD(__int64 a1)\n{\n  return a1;\n}\n"], [4200203, "sub_40170B", "unsigned __int64 __fastcall sub_40170B(__int64 a1, unsigned __int64 a2)\n{\n  return a2 - 1 + a1 - (a2 - 1 + a1) % a2;\n}\n"], [4200273, "sub_401751", "int sub_401751()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_40A8B3(qword_6102B0);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_40A8B3(qword_6102B0);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_40A8B3(qword_6102B0);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4200539, "sub_40185B", "__int64 __fastcall sub_40185B(__int64 a1)\n{\n  return a1;\n}\n"], [4200553, "sub_401869", "void __fastcall __noreturn sub_401869(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbx\n  char *v5; // rax\n  char *v6; // rax\n  FILE *v7; // rbx\n  char *v8; // rax\n  FILE *v9; // rbx\n  char *v10; // rax\n  FILE *v11; // rbx\n  char *v12; // rax\n  FILE *v13; // rbx\n  char *v14; // rax\n  FILE *v15; // rbx\n  char *v16; // rax\n  char *v17; // rax\n\n  v1 = qword_6102B0;\n  if ( a1 )\n  {\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = gettext(\n           \"Usage: %s [OPTION]... [FILE]...\\n\"\n           \"Print or check %s (%d-bit) checksums.\\n\"\n           \"With no FILE, or when FILE is -, read standard input.\\n\"\n           \"\\n\");\n    printf(v3, v1, \"SHA384\", 384LL);\n    v4 = stdout;\n    v5 = gettext(\"  -b, --binary         read in binary mode\\n\");\n    fputs_unlocked(v5, v4);\n    v6 = gettext(\"  -c, --check          read %s sums from the FILEs and check them\\n\");\n    printf(v6, \"SHA384\");\n    v7 = stdout;\n    v8 = gettext(\"  -t, --text           read in text mode (default)\\n\");\n    fputs_unlocked(v8, v7);\n    v9 = stdout;\n    v10 = gettext(\n            \"\\n\"\n            \"The following three options are useful only when verifying checksums:\\n\"\n            \"      --quiet          don't print OK for each successfully verified file\\n\"\n            \"      --status         don't output anything, status code shows success\\n\"\n            \"  -w, --warn           warn about improperly formatted checksum lines\\n\"\n            \"\\n\");\n    fputs_unlocked(v10, v9);\n    v11 = stdout;\n    v12 = gettext(\"      --strict         with --check, exit non-zero for any invalid input\\n\");\n    fputs_unlocked(v12, v11);\n    v13 = stdout;\n    v14 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v14, v13);\n    v15 = stdout;\n    v16 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v16, v15);\n    v17 = gettext(\n            \"\\n\"\n            \"The sums are computed as described in %s.  When checking, the input\\n\"\n            \"should be a former output of this program.  The default mode is to print\\n\"\n            \"a line with checksum, a character indicating type (`*' for binary, ` ' for\\n\"\n            \"text), and name for each FILE.\\n\");\n    printf(v17, \"FIPS-180-2\");\n    sub_401751();\n  }\n  exit(a1);\n}\n"], [4200904, "sub_4019C8", "__int64 __fastcall sub_4019C8(__int64 a1, __int64 a2, _QWORD *a3, _QWORD *a4)\n{\n  __int64 v5; // rax\n  __int64 i; // [rsp+28h] [rbp-8h]\n  __int64 v7; // [rsp+28h] [rbp-8h]\n  __int64 j; // [rsp+28h] [rbp-8h]\n\n  if ( !a2 )\n    return 0LL;\n  *a4 = a1;\n  for ( i = a2 - 1; i && *(_BYTE *)(a1 + i) != 41; --i )\n    ;\n  if ( *(_BYTE *)(a1 + i) != 41 )\n    return 0LL;\n  v5 = i;\n  v7 = i + 1;\n  *(_BYTE *)(a1 + v5) = 0;\n  while ( *(_BYTE *)(a1 + v7) == 32 || *(_BYTE *)(a1 + v7) == 9 )\n    ++v7;\n  if ( *(_BYTE *)(a1 + v7) != 61 )\n    return 0LL;\n  for ( j = v7 + 1; *(_BYTE *)(a1 + j) == 32 || *(_BYTE *)(a1 + j) == 9; ++j )\n    ;\n  *a3 = j + a1;\n  return 1LL;\n}\n"], [4201187, "sub_401AE3", "__int64 __fastcall sub_401AE3(__int64 a1, unsigned __int64 a2, _QWORD *a3, _DWORD *a4, _QWORD *a5)\n{\n  __int64 result; // rax\n  __int64 v6; // rax\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  int v9; // eax\n  _BYTE *v10; // rax\n  _BYTE *v11; // rax\n  _BYTE *v12; // rax\n  __int64 v13; // rdx\n  char v17; // [rsp+37h] [rbp-19h]\n  __int64 i; // [rsp+38h] [rbp-18h]\n  __int64 v19; // [rsp+38h] [rbp-18h]\n  __int64 v20; // [rsp+38h] [rbp-18h]\n  unsigned __int64 v21; // [rsp+38h] [rbp-18h]\n  _BYTE *v22; // [rsp+40h] [rbp-10h]\n\n  v17 = 0;\n  for ( i = 0LL; *(_BYTE *)(a1 + i) == 32 || *(_BYTE *)(a1 + i) == 9; ++i )\n    ;\n  if ( strncmp((const char *)(a1 + i), \"SHA384\", 6uLL) )\n    goto LABEL_10;\n  if ( *(_BYTE *)(i + 6 + a1) == 32 )\n    ++i;\n  if ( *(_BYTE *)(i + 6 + a1) == 40 )\n  {\n    *a4 = 0;\n    result = sub_4019C8(i + 7 + a1, a2 - (i + 6) - 1, a3, a5);\n  }\n  else\n  {\nLABEL_10:\n    if ( a2 - i >= (unsigned __int64)(*(_BYTE *)(a1 + i) == 92) + qword_610288 )\n    {\n      if ( *(_BYTE *)(a1 + i) == 92 )\n      {\n        ++i;\n        v17 = 1;\n      }\n      *a3 = i + a1;\n      v19 = qword_610290 + i;\n      if ( *(_BYTE *)(a1 + v19) == 32 || *(_BYTE *)(a1 + v19) == 9 )\n      {\n        v6 = v19;\n        v20 = v19 + 1;\n        *(_BYTE *)(a1 + v6) = 0;\n        if ( *(_BYTE *)(a1 + v20) == 32 || *(_BYTE *)(a1 + v20) == 42 )\n        {\n          v7 = v20;\n          v21 = v20 + 1;\n          *a4 = *(_BYTE *)(a1 + v7) == 42;\n          *a5 = v21 + a1;\n          if ( v17 )\n          {\n            v22 = (_BYTE *)(a1 + v21);\n            while ( v21 < a2 )\n            {\n              if ( !*(_BYTE *)(a1 + v21) )\n                return 0LL;\n              if ( *(_BYTE *)(a1 + v21) == 92 )\n              {\n                if ( a2 - 1 == v21 )\n                  return 0LL;\n                v8 = v21 + 1;\n                v21 += 2LL;\n                v9 = *(char *)(a1 + v8);\n                if ( v9 == 92 )\n                {\n                  v11 = v22++;\n                  *v11 = 92;\n                }\n                else\n                {\n                  if ( v9 != 110 )\n                    return 0LL;\n                  v10 = v22++;\n                  *v10 = 10;\n                }\n              }\n              else\n              {\n                v12 = v22++;\n                v13 = v21++;\n                *v12 = *(_BYTE *)(a1 + v13);\n              }\n            }\n            *v22 = 0;\n          }\n          result = 1LL;\n        }\n        else\n        {\n          result = 0LL;\n        }\n      }\n      else\n      {\n        result = 0LL;\n      }\n    }\n    else\n    {\n      result = 0LL;\n    }\n  }\n  return result;\n}\n"], [4201972, "sub_401DF4", "bool __fastcall sub_401DF4(_BYTE *a1)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; i < (unsigned __int64)qword_610290; ++i )\n  {\n    if ( ((*__ctype_b_loc())[(unsigned __int8)*a1] & 0x1000) == 0 )\n      return 0;\n    ++a1;\n  }\n  return *a1 == 0;\n}\n"], [4202077, "sub_401E5D", "__int64 __fastcall sub_401E5D(const char *a1, __int64 a2, __int64 a3)\n{\n  int v3; // eax\n  int *v4; // rax\n  int *v6; // rax\n  bool v8; // [rsp+23h] [rbp-Dh]\n  __int64 v9; // [rsp+28h] [rbp-8h]\n\n  v3 = strcmp(a1, \"-\");\n  v8 = v3 == 0;\n  if ( v3 )\n  {\n    v9 = sub_40A9D4(a1, \"r\");\n    if ( !v9 )\n      goto LABEL_4;\n    sub_40A99A(v9, 2LL);\n  }\n  else\n  {\n    byte_610280 = 1;\n    v9 = stdin;\n    sub_40A99A(stdin, 2LL);\n  }\n  if ( !(unsigned int)sub_403675(v9, a3) )\n  {\n    if ( v8 || !(unsigned int)sub_40CE91(v9) )\n      return 1LL;\nLABEL_4:\n    v4 = __errno_location();\n    error(0, *v4, \"%s\", a1);\n    return 0LL;\n  }\n  v6 = __errno_location();\n  error(0, *v6, \"%s\", a1);\n  if ( v9 != stdin )\n    sub_40CE91(v9);\n  return 0LL;\n}\n"], [4202412, "sub_401FAC", "_BOOL8 __fastcall sub_401FAC(const char *a1)\n{\n  int v1; // eax\n  int *v2; // rax\n  _BOOL8 result; // rax\n  char *v4; // rax\n  char *v5; // rax\n  char *v6; // rbx\n  char *v7; // rax\n  char *v8; // rax\n  char *v9; // rax\n  char *v10; // rax\n  int *v11; // rax\n  char *v12; // rax\n  __int64 v13; // rax\n  char *v14; // rax\n  __int64 v15; // rax\n  char *v16; // rax\n  __int64 v17; // rax\n  char *v18; // rax\n  bool v19; // al\n  const char *s1; // [rsp+8h] [rbp-D8h]\n  bool v21; // [rsp+12h] [rbp-CEh]\n  int v22; // [rsp+14h] [rbp-CCh] BYREF\n  char *lineptr; // [rsp+18h] [rbp-C8h] BYREF\n  size_t n; // [rsp+20h] [rbp-C0h] BYREF\n  char *v25; // [rsp+28h] [rbp-B8h] BYREF\n  _BYTE *v26; // [rsp+30h] [rbp-B0h] BYREF\n  FILE *stream; // [rsp+38h] [rbp-A8h]\n  __int64 v28; // [rsp+40h] [rbp-A0h]\n  __int64 v29; // [rsp+48h] [rbp-98h]\n  __int64 v30; // [rsp+50h] [rbp-90h]\n  __int64 v31; // [rsp+58h] [rbp-88h]\n  __int64 v32; // [rsp+60h] [rbp-80h]\n  __int64 v33; // [rsp+68h] [rbp-78h]\n  signed __int64 v34; // [rsp+70h] [rbp-70h]\n  unsigned __int64 i; // [rsp+78h] [rbp-68h]\n  __int64 v36; // [rsp+80h] [rbp-60h]\n  unsigned __int64 v37; // [rsp+88h] [rbp-58h]\n  char v38[56]; // [rsp+90h] [rbp-50h] BYREF\n  unsigned __int64 v39; // [rsp+C8h] [rbp-18h]\n\n  s1 = a1;\n  v39 = __readfsqword(0x28u);\n  v28 = 0LL;\n  v29 = 0LL;\n  v30 = 0LL;\n  v31 = 0LL;\n  v32 = 0LL;\n  v36 = sub_40170B((__int64)v38, 8uLL);\n  v1 = strcmp(a1, \"-\");\n  v21 = v1 == 0;\n  if ( v1 )\n  {\n    stream = (FILE *)sub_40A9D4(a1, \"r\");\n    if ( !stream )\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", a1);\n      return 0LL;\n    }\n  }\n  else\n  {\n    byte_610280 = 1;\n    s1 = gettext(\"standard input\");\n    stream = (FILE *)stdin;\n  }\n  v33 = 0LL;\n  lineptr = 0LL;\n  n = 0LL;\n  do\n  {\n    if ( !++v33 )\n    {\n      v4 = gettext(\"%s: too many checksum lines\");\n      error(1, 0, v4, s1);\n    }\n    v34 = getline(&lineptr, &n, stream);\n    if ( v34 <= 0 )\n      break;\n    if ( *lineptr != 35 )\n    {\n      if ( lineptr[v34 - 1] == 10 )\n        lineptr[--v34] = 0;\n      if ( (unsigned __int8)sub_401AE3((__int64)lineptr, v34, &v26, &v22, &v25) != 1\n        || v21 && !strcmp(v25, \"-\")\n        || !sub_401DF4(v26) )\n      {\n        ++v28;\n        if ( byte_610299 )\n        {\n          v5 = gettext(\"%s: %lu: improperly formatted %s checksum line\");\n          error(0, 0, v5, s1, v33, \"SHA384\");\n        }\n        ++v30;\n      }\n      else\n      {\n        ++v29;\n        if ( (unsigned __int8)sub_401E5D(v25, (__int64)&v22, v36) != 1 )\n        {\n          ++v32;\n          if ( byte_610298 != 1 )\n          {\n            v6 = v25;\n            v7 = gettext(\"%s: FAILED open or read\\n\");\n            printf(v7, v6);\n          }\n        }\n        else\n        {\n          v37 = (unsigned __int64)qword_610290 >> 1;\n          for ( i = 0LL;\n                i < v37\n             && tolower((unsigned __int8)v26[2 * i]) == byte_40DF90[*(_BYTE *)(v36 + i) >> 4]\n             && tolower((unsigned __int8)v26[2 * i + 1]) == byte_40DF90[*(_BYTE *)(v36 + i) & 0xF];\n                ++i )\n          {\n            ;\n          }\n          if ( i != v37 )\n            ++v31;\n          if ( byte_610298 != 1 )\n          {\n            if ( i == v37 )\n            {\n              if ( byte_61029A != 1 )\n              {\n                v9 = gettext(\"OK\");\n                printf(\"%s: %s\\n\", v25, v9);\n              }\n            }\n            else\n            {\n              v8 = gettext(\"FAILED\");\n              printf(\"%s: %s\\n\", v25, v8);\n            }\n          }\n        }\n      }\n    }\n  }\n  while ( !feof_unlocked(stream) && !ferror_unlocked(stream) );\n  free(lineptr);\n  if ( ferror_unlocked(stream) )\n  {\n    v10 = gettext(\"%s: read error\");\n    error(0, 0, v10, s1);\n    result = 0LL;\n  }\n  else if ( !v21 && (unsigned int)sub_40CE91(stream) )\n  {\n    v11 = __errno_location();\n    error(0, *v11, \"%s\", s1);\n    result = 0LL;\n  }\n  else\n  {\n    if ( v29 )\n    {\n      if ( byte_610298 != 1 )\n      {\n        if ( v28 )\n        {\n          v13 = sub_4016FD(v28);\n          v14 = ngettext(\n                  \"WARNING: %lu line is improperly formatted\",\n                  \"WARNING: %lu lines are improperly formatted\",\n                  v13);\n          error(0, 0, v14, v28);\n        }\n        if ( v32 )\n        {\n          v15 = sub_4016FD(v32);\n          v16 = ngettext(\n                  \"WARNING: %lu listed file could not be read\",\n                  \"WARNING: %lu listed files could not be read\",\n                  v15);\n          error(0, 0, v16, v32);\n        }\n        if ( v31 )\n        {\n          v17 = sub_4016FD(v31);\n          v18 = ngettext(\n                  \"WARNING: %lu computed checksum did NOT match\",\n                  \"WARNING: %lu computed checksums did NOT match\",\n                  v17);\n          error(0, 0, v18, v31);\n        }\n      }\n    }\n    else\n    {\n      v12 = gettext(\"%s: no properly formatted %s checksum lines found\");\n      error(0, 0, v12, s1, \"SHA384\");\n    }\n    v19 = v29 && !v31 && !v32 && (byte_61029B != 1 || !v30);\n    result = v19;\n  }\n  return result;\n}\n"], [4204121, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  char *v3; // rax\n  char *v4; // rax\n  char *v5; // rax\n  char *v6; // rax\n  char *v7; // rax\n  int v8; // eax\n  size_t v9; // rax\n  char *v10; // rbx\n  int *v11; // rax\n  int argc; // [rsp+1Ch] [rbp-84h]\n  char v13; // [rsp+2Ah] [rbp-76h]\n  char v14; // [rsp+2Bh] [rbp-75h]\n  int v15; // [rsp+2Ch] [rbp-74h] BYREF\n  int v16; // [rsp+30h] [rbp-70h]\n  int v17; // [rsp+34h] [rbp-6Ch]\n  unsigned __int64 i; // [rsp+38h] [rbp-68h]\n  __int64 v19; // [rsp+40h] [rbp-60h]\n  char *s; // [rsp+48h] [rbp-58h]\n  char v21[56]; // [rsp+50h] [rbp-50h] BYREF\n  unsigned __int64 v22; // [rsp+88h] [rbp-18h]\n\n  argc = a1;\n  v22 = __readfsqword(0x28u);\n  v19 = sub_40170B((__int64)v21, 8uLL);\n  v13 = 0;\n  v14 = 1;\n  v16 = -1;\n  sub_40AABA(*a2);\n  setlocale(6, locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40D450(sub_402C91);\n  setvbuf(stdout, 0LL, 1, 0LL);\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v17 = getopt_long(a1, a2, \"bctw\", &longopts, 0LL);\n        if ( v17 == -1 )\n        {\n          qword_610288 = 99LL;\n          qword_610290 = 96LL;\n          if ( v16 >= 0 && v13 )\n          {\n            v3 = gettext(\"the --binary and --text options are meaningless when verifying checksums\");\n            error(0, 0, v3);\n            sub_401869(1);\n          }\n          if ( byte_610298 && v13 != 1 )\n          {\n            v4 = gettext(\"the --status option is meaningful only when verifying checksums\");\n            error(0, 0, v4);\n            sub_401869(1);\n          }\n          if ( byte_610299 && v13 != 1 )\n          {\n            v5 = gettext(\"the --warn option is meaningful only when verifying checksums\");\n            error(0, 0, v5);\n            sub_401869(1);\n          }\n          if ( byte_61029A && v13 != 1 )\n          {\n            v6 = gettext(\"the --quiet option is meaningful only when verifying checksums\");\n            error(0, 0, v6);\n            sub_401869(1);\n          }\n          if ( ((unsigned __int8)byte_61029B & ((unsigned __int8)v13 ^ 1)) != 0 )\n          {\n            v7 = gettext(\"the --strict option is meaningful only when verifying checksums\");\n            error(0, 0, v7);\n            sub_401869(1);\n          }\n          if ( v16 < 0 )\n            v16 = 0;\n          if ( optind == a1 )\n          {\n            argc = a1 + 1;\n            a2[a1] = (char *)sub_40185B((__int64)\"-\");\n          }\n          while ( optind < argc )\n          {\n            s = a2[optind];\n            if ( v13 )\n            {\n              v14 &= sub_401FAC(s);\n            }\n            else\n            {\n              v15 = v16;\n              if ( (unsigned __int8)sub_401E5D(s, (__int64)&v15, v19) != 1 )\n              {\n                v14 = 0;\n              }\n              else\n              {\n                if ( strchr(s, 10) || strchr(s, 92) )\n                  putchar_unlocked(92);\n                for ( i = 0LL; (unsigned __int64)qword_610290 >> 1 > i; ++i )\n                  printf(\"%02x\", *(unsigned __int8 *)(v19 + i));\n                putchar_unlocked(32);\n                if ( v15 )\n                  putchar_unlocked(42);\n                else\n                  putchar_unlocked(32);\n                for ( i = 0LL; ; ++i )\n                {\n                  v9 = strlen(s);\n                  if ( v9 <= i )\n                    break;\n                  v8 = s[i];\n                  if ( v8 == 10 )\n                  {\n                    fwrite_unlocked(\"\\\\n\", 1uLL, 2uLL, stdout);\n                  }\n                  else if ( v8 == 92 )\n                  {\n                    fwrite_unlocked(\"\\\\\\\\\", 1uLL, 2uLL, stdout);\n                  }\n                  else\n                  {\n                    putchar_unlocked(s[i]);\n                  }\n                }\n                putchar_unlocked(10);\n              }\n            }\n            ++optind;\n          }\n          if ( byte_610280 )\n          {\n            if ( (unsigned int)sub_40CE91(stdin) == -1 )\n            {\n              v10 = gettext(\"standard input\");\n              v11 = __errno_location();\n              error(1, *v11, v10);\n            }\n          }\n          exit(v14 == 0);\n        }\n        if ( v17 != 116 )\n          break;\n        v16 = 0;\n      }\n      if ( v17 <= 116 )\n        break;\n      if ( v17 == 128 )\n      {\n        byte_610298 = 1;\n        byte_610299 = 0;\n        byte_61029A = 0;\n      }\n      else if ( v17 > 128 )\n      {\n        if ( v17 == 129 )\n        {\n          byte_610298 = 0;\n          byte_610299 = 0;\n          byte_61029A = 1;\n        }\n        else\n        {\n          if ( v17 != 130 )\n            goto LABEL_27;\n          byte_61029B = 1;\n        }\n      }\n      else\n      {\n        if ( v17 != 119 )\n          goto LABEL_27;\n        byte_610298 = 0;\n        byte_610299 = 1;\n        byte_61029A = 0;\n      }\n    }\n    if ( v17 == -130 )\n      sub_401869(0);\n    if ( v17 <= -130 )\n    {\n      if ( v17 == -131 )\n      {\n        sub_40CA72(\n          (_DWORD)stdout,\n          (unsigned int)\"sha384sum\",\n          (unsigned int)\"GNU coreutils\",\n          (_DWORD)off_6101F0,\n          (unsigned int)\"Ulrich Drepper\",\n          (unsigned int)\"Scott Miller\",\n          \"David Madore\",\n          0LL);\n        exit(0);\n      }\nLABEL_27:\n      sub_401869(1);\n    }\n    if ( v17 == 98 )\n    {\n      v16 = 1;\n    }\n    else\n    {\n      if ( v17 != 99 )\n        goto LABEL_27;\n      v13 = 1;\n    }\n  }\n}\n"], [4205692, "sub_402C7C", "__int64 __fastcall sub_402C7C(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_6102A8 = a1;\n  return result;\n}\n"], [4205713, "sub_402C91", "__int64 sub_402C91()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_40D336(stdout) && (byte_6102A8 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_6102A0 )\n    {\n      v0 = (const char *)sub_40C19B(qword_6102A0);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_40D336(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4205948, "sub_402D7C", "_QWORD *__fastcall sub_402D7C(_QWORD *a1)\n{\n  _QWORD *result; // rax\n\n  *a1 = 0x6A09E667F3BCC908LL;\n  a1[1] = 0xBB67AE8584CAA73BLL;\n  a1[2] = 0x3C6EF372FE94F82BLL;\n  a1[3] = 0xA54FF53A5F1D36F1LL;\n  a1[4] = 0x510E527FADE682D1LL;\n  a1[5] = 0x9B05688C2B3E6C1FLL;\n  a1[6] = 0x1F83D9ABFB41BD6BLL;\n  a1[7] = 0x5BE0CD19137E2179LL;\n  a1[9] = 0LL;\n  a1[8] = a1[9];\n  result = a1;\n  a1[10] = 0LL;\n  return result;\n}\n"], [4206143, "sub_402E3F", "_QWORD *__fastcall sub_402E3F(_QWORD *a1)\n{\n  _QWORD *result; // rax\n\n  *a1 = 0xCBBB9D5DC1059ED8LL;\n  a1[1] = 0x629A292A367CD507LL;\n  a1[2] = 0x9159015A3070DD17LL;\n  a1[3] = 0x152FECD8F70E5939LL;\n  a1[4] = 0x67332667FFC00B31LL;\n  a1[5] = 0x8EB44A8768581511LL;\n  a1[6] = 0xDB0C2E0D64F98FA7LL;\n  a1[7] = 0x47B5481DBEFA4FA4LL;\n  a1[9] = 0LL;\n  a1[8] = a1[9];\n  result = a1;\n  a1[10] = 0LL;\n  return result;\n}\n"], [4206338, "sub_402F02", "_QWORD *__fastcall sub_402F02(_QWORD *a1, __int64 a2)\n{\n  _QWORD *result; // rax\n\n  result = a1;\n  *a1 = a2;\n  return result;\n}\n"], [4206363, "sub_402F1B", "__int64 __fastcall sub_402F1B(__int64 a1, __int64 a2)\n{\n  int i; // [rsp+14h] [rbp-Ch]\n\n  for ( i = 0; i <= 7; ++i )\n    sub_402F02(\n      (_QWORD *)(8LL * i + a2),\n      (*(_QWORD *)(a1 + 8LL * i) >> 24) & 0xFF0000LL | (*(_QWORD *)(a1 + 8LL * i) >> 8) & 0xFF000000LL | (*(_QWORD *)(a1 + 8LL * i) >> 40) & 0xFF00LL | HIBYTE(*(_QWORD *)(a1 + 8LL * i)) | ((*(_QWORD *)(a1 + 8LL * i) & 0xFF0000LL) << 24) | ((*(_QWORD *)(a1 + 8LL * i) & 0xFF000000LL) << 8) | ((*(_QWORD *)(a1 + 8LL * i) & 0xFF00LL) << 40) | (*(_QWORD *)(a1 + 8LL * i) << 56));\n  return a2;\n}\n"], [4206663, "sub_403047", "__int64 __fastcall sub_403047(__int64 a1, __int64 a2)\n{\n  int i; // [rsp+14h] [rbp-Ch]\n\n  for ( i = 0; i <= 5; ++i )\n    sub_402F02(\n      (_QWORD *)(8LL * i + a2),\n      (*(_QWORD *)(a1 + 8LL * i) >> 24) & 0xFF0000LL | (*(_QWORD *)(a1 + 8LL * i) >> 8) & 0xFF000000LL | (*(_QWORD *)(a1 + 8LL * i) >> 40) & 0xFF00LL | HIBYTE(*(_QWORD *)(a1 + 8LL * i)) | ((*(_QWORD *)(a1 + 8LL * i) & 0xFF0000LL) << 24) | ((*(_QWORD *)(a1 + 8LL * i) & 0xFF000000LL) << 8) | ((*(_QWORD *)(a1 + 8LL * i) & 0xFF00LL) << 40) | (*(_QWORD *)(a1 + 8LL * i) << 56));\n  return a2;\n}\n"], [4206963, "sub_403173", "__int64 __fastcall sub_403173(__int128 *a1)\n{\n  __int64 v1; // rax\n  unsigned __int64 v3; // [rsp+10h] [rbp-10h]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *((_QWORD *)a1 + 10);\n  if ( v3 > 0x6F )\n    v1 = 16LL;\n  else\n    v1 = 8LL;\n  v4 = v1 * 2;\n  *((_QWORD *)a1 + 8) += v3;\n  if ( *((_QWORD *)a1 + 8) < v3 )\n    ++*((_QWORD *)a1 + 9);\n  sub_402F02(\n    (_QWORD *)&a1[v1 + 4] + 1,\n    ((unsigned __int64)(a1[4] >> 61) >> 24) & 0xFF0000 | ((unsigned __int64)(a1[4] >> 61) >> 8) & 0xFF000000 | ((unsigned __int64)(a1[4] >> 61) >> 40) & 0xFF00 | ((unsigned __int64)(a1[4] >> 61) >> 56) | ((((8 * (unsigned int)*((_QWORD *)a1 + 9)) | (*((_QWORD *)a1 + 8) >> 61)) & 0xFF0000) << 24) | ((((8 * (unsigned int)*((_QWORD *)a1 + 9)) | (*((_QWORD *)a1 + 8) >> 61)) & 0xFF000000) << 8) | ((unsigned __int64)((unsigned __int16)((8 * *((_QWORD *)a1 + 9)) | (*((_QWORD *)a1 + 8) >> 61)) & 0xFF00) << 40) | ((unsigned __int64)(a1[4] >> 61) << 56));\n  sub_402F02(\n    (_QWORD *)a1 + v4 + 10,\n    ((unsigned __int64)(8LL * *((_QWORD *)a1 + 8)) >> 24) & 0xFF0000 | ((unsigned __int64)(8LL * *((_QWORD *)a1 + 8)) >> 8) & 0xFF000000 | ((unsigned int)(*((_QWORD *)a1 + 8) >> 29) >> 8) & 0xFF00 | ((unsigned __int64)(8LL * *((_QWORD *)a1 + 8)) >> 56) | ((unsigned __int64)((8 * (unsigned int)*((_QWORD *)a1 + 8)) & 0xFF0000) << 24) | ((unsigned __int64)((8 * (unsigned int)*((_QWORD *)a1 + 8)) & 0xFF000000) << 8) | ((unsigned __int64)((unsigned __int16)(8 * *((_QWORD *)a1 + 8)) & 0xFF00) << 40) | (*((_QWORD *)a1 + 8) << 59));\n  memcpy((char *)a1 + v3 + 88, &unk_40DFC0, 8 * v4 - v3 - 16);\n  return sub_403AFA((char *)a1 + 88, 8 * v4, a1);\n}\n"], [4207774, "sub_40349E", "__int64 __fastcall sub_40349E(__int128 *a1, __int64 a2)\n{\n  sub_403173(a1);\n  return sub_402F1B((__int64)a1, a2);\n}\n"], [4207823, "sub_4034CF", "__int64 __fastcall sub_4034CF(__int128 *a1, __int64 a2)\n{\n  sub_403173(a1);\n  return sub_403047((__int64)a1, a2);\n}\n"], [4207872, "sub_403500", "__int64 __fastcall sub_403500(FILE *a1, __int64 a2)\n{\n  __int64 v3; // [rsp+18h] [rbp-178h]\n  char *ptr; // [rsp+20h] [rbp-170h]\n  size_t v5; // [rsp+28h] [rbp-168h]\n  __int128 v6[22]; // [rsp+30h] [rbp-160h] BYREF\n\n  ptr = (char *)malloc(0x8048uLL);\n  if ( !ptr )\n    return 1LL;\n  sub_402D7C(v6);\nLABEL_4:\n  v3 = 0LL;\n  while ( 1 )\n  {\n    v5 = fread_unlocked(&ptr[v3], 1uLL, 0x8000 - v3, a1);\n    v3 += v5;\n    if ( v3 == 0x8000 )\n    {\n      sub_403AFA(ptr, 0x8000LL, v6);\n      goto LABEL_4;\n    }\n    if ( !v5 )\n      break;\n    if ( feof_unlocked(a1) )\n      goto LABEL_12;\n  }\n  if ( ferror_unlocked(a1) )\n  {\n    free(ptr);\n    return 1LL;\n  }\nLABEL_12:\n  if ( v3 )\n    sub_4038BE(ptr, v3, v6);\n  sub_40349E(v6, a2);\n  free(ptr);\n  return 0LL;\n}\n"], [4208245, "sub_403675", "__int64 __fastcall sub_403675(FILE *a1, __int64 a2)\n{\n  __int64 v3; // [rsp+18h] [rbp-178h]\n  char *ptr; // [rsp+20h] [rbp-170h]\n  size_t v5; // [rsp+28h] [rbp-168h]\n  __int128 v6[22]; // [rsp+30h] [rbp-160h] BYREF\n\n  ptr = (char *)malloc(0x8048uLL);\n  if ( !ptr )\n    return 1LL;\n  sub_402E3F(v6);\nLABEL_4:\n  v3 = 0LL;\n  while ( 1 )\n  {\n    v5 = fread_unlocked(&ptr[v3], 1uLL, 0x8000 - v3, a1);\n    v3 += v5;\n    if ( v3 == 0x8000 )\n    {\n      sub_403AFA(ptr, 0x8000LL, v6);\n      goto LABEL_4;\n    }\n    if ( !v5 )\n      break;\n    if ( feof_unlocked(a1) )\n      goto LABEL_12;\n  }\n  if ( ferror_unlocked(a1) )\n  {\n    free(ptr);\n    return 1LL;\n  }\nLABEL_12:\n  if ( v3 )\n    sub_4038BE(ptr, v3, v6);\n  sub_4034CF(v6, a2);\n  free(ptr);\n  return 0LL;\n}\n"], [4208618, "sub_4037EA", "__int64 __fastcall sub_4037EA(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int128 v5[22]; // [rsp+20h] [rbp-160h] BYREF\n\n  sub_402D7C(v5);\n  sub_4038BE(a1, a2, v5);\n  return sub_40349E(v5, a3);\n}\n"], [4208724, "sub_403854", "__int64 __fastcall sub_403854(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int128 v5[22]; // [rsp+20h] [rbp-160h] BYREF\n\n  sub_402E3F(v5);\n  sub_4038BE(a1, a2, v5);\n  return sub_4034CF(v5, a3);\n}\n"], [4208830, "sub_4038BE", "unsigned __int64 __fastcall sub_4038BE(char *a1, unsigned __int64 a2, size_t *a3)\n{\n  unsigned __int64 result; // rax\n  size_t v4; // rax\n  void *v5; // rax\n  size_t v7; // [rsp+10h] [rbp-30h]\n  char *src; // [rsp+18h] [rbp-28h]\n  size_t v9; // [rsp+28h] [rbp-18h]\n  size_t v10; // [rsp+28h] [rbp-18h]\n  size_t v11; // [rsp+30h] [rbp-10h]\n  size_t n; // [rsp+38h] [rbp-8h]\n\n  src = a1;\n  v7 = a2;\n  result = a3[10];\n  if ( result )\n  {\n    v11 = a3[10];\n    v4 = a2;\n    if ( 256 - v11 <= a2 )\n      v4 = 256 - v11;\n    n = v4;\n    memcpy((char *)a3 + v11 + 88, a1, v4);\n    a3[10] += n;\n    if ( a3[10] > 0x80 )\n    {\n      sub_403AFA(a3 + 11, a3[10] & 0xFFFFFFFFFFFFFF80LL, a3);\n      a3[10] &= 0x7FuLL;\n      memcpy(a3 + 11, (char *)a3 + ((v11 + n) & 0xFFFFFFFFFFFFFF80LL) + 88, a3[10]);\n    }\n    src = &a1[n];\n    result = n;\n    v7 = a2 - n;\n  }\n  if ( v7 > 0x7F )\n  {\n    result = (unsigned __int8)src & 7;\n    if ( ((unsigned __int8)src & 7) != 0 )\n    {\n      while ( v7 > 0x80 )\n      {\n        v5 = memcpy(a3 + 11, src, 0x80uLL);\n        result = sub_403AFA(v5, 128LL, a3);\n        src += 128;\n        v7 -= 128LL;\n      }\n    }\n    else\n    {\n      sub_403AFA(src, v7 & 0xFFFFFFFFFFFFFF80LL, a3);\n      result = v7 & 0xFFFFFFFFFFFFFF80LL;\n      src += v7 & 0xFFFFFFFFFFFFFF80LL;\n      v7 &= 0x7Fu;\n    }\n  }\n  if ( v7 )\n  {\n    v9 = a3[10];\n    memcpy((char *)a3 + v9 + 88, src, v7);\n    v10 = v7 + v9;\n    if ( v10 > 0x7F )\n    {\n      sub_403AFA(a3 + 11, 128LL, a3);\n      v10 -= 128LL;\n      memcpy(a3 + 11, a3 + 27, v10);\n    }\n    result = (unsigned __int64)a3;\n    a3[10] = v10;\n  }\n  return result;\n}\n"], [4209402, "sub_403AFA", "_QWORD *__fastcall sub_403AFA(_QWORD *a1, unsigned __int64 a2, __int64 *a3)\n{\n  _QWORD *result; // rax\n  int i; // [rsp+24h] [rbp-5D4h]\n  _QWORD *v5; // [rsp+28h] [rbp-5D0h]\n  __int64 v6; // [rsp+30h] [rbp-5C8h]\n  __int64 v7; // [rsp+30h] [rbp-5C8h]\n  __int64 v8; // [rsp+30h] [rbp-5C8h]\n  __int64 v9; // [rsp+30h] [rbp-5C8h]\n  __int64 v10; // [rsp+30h] [rbp-5C8h]\n  __int64 v11; // [rsp+30h] [rbp-5C8h]\n  __int64 v12; // [rsp+30h] [rbp-5C8h]\n  __int64 v13; // [rsp+30h] [rbp-5C8h]\n  __int64 v14; // [rsp+30h] [rbp-5C8h]\n  __int64 v15; // [rsp+30h] [rbp-5C8h]\n  __int64 v16; // [rsp+30h] [rbp-5C8h]\n  __int64 v17; // [rsp+30h] [rbp-5C8h]\n  __int64 v18; // [rsp+30h] [rbp-5C8h]\n  __int64 v19; // [rsp+30h] [rbp-5C8h]\n  __int64 v20; // [rsp+30h] [rbp-5C8h]\n  __int64 v21; // [rsp+30h] [rbp-5C8h]\n  __int64 v22; // [rsp+30h] [rbp-5C8h]\n  __int64 v23; // [rsp+30h] [rbp-5C8h]\n  __int64 v24; // [rsp+30h] [rbp-5C8h]\n  __int64 v25; // [rsp+30h] [rbp-5C8h]\n  __int64 v26; // [rsp+38h] [rbp-5C0h]\n  __int64 v27; // [rsp+38h] [rbp-5C0h]\n  __int64 v28; // [rsp+38h] [rbp-5C0h]\n  __int64 v29; // [rsp+38h] [rbp-5C0h]\n  __int64 v30; // [rsp+38h] [rbp-5C0h]\n  __int64 v31; // [rsp+38h] [rbp-5C0h]\n  __int64 v32; // [rsp+38h] [rbp-5C0h]\n  __int64 v33; // [rsp+38h] [rbp-5C0h]\n  __int64 v34; // [rsp+38h] [rbp-5C0h]\n  __int64 v35; // [rsp+38h] [rbp-5C0h]\n  __int64 v36; // [rsp+38h] [rbp-5C0h]\n  __int64 v37; // [rsp+38h] [rbp-5C0h]\n  __int64 v38; // [rsp+38h] [rbp-5C0h]\n  __int64 v39; // [rsp+38h] [rbp-5C0h]\n  __int64 v40; // [rsp+38h] [rbp-5C0h]\n  __int64 v41; // [rsp+38h] [rbp-5C0h]\n  __int64 v42; // [rsp+38h] [rbp-5C0h]\n  __int64 v43; // [rsp+38h] [rbp-5C0h]\n  __int64 v44; // [rsp+38h] [rbp-5C0h]\n  __int64 v45; // [rsp+38h] [rbp-5C0h]\n  __int64 v46; // [rsp+38h] [rbp-5C0h]\n  __int64 v47; // [rsp+40h] [rbp-5B8h]\n  __int64 v48; // [rsp+40h] [rbp-5B8h]\n  __int64 v49; // [rsp+40h] [rbp-5B8h]\n  __int64 v50; // [rsp+40h] [rbp-5B8h]\n  __int64 v51; // [rsp+40h] [rbp-5B8h]\n  __int64 v52; // [rsp+40h] [rbp-5B8h]\n  __int64 v53; // [rsp+40h] [rbp-5B8h]\n  __int64 v54; // [rsp+40h] [rbp-5B8h]\n  __int64 v55; // [rsp+40h] [rbp-5B8h]\n  __int64 v56; // [rsp+40h] [rbp-5B8h]\n  __int64 v57; // [rsp+40h] [rbp-5B8h]\n  __int64 v58; // [rsp+40h] [rbp-5B8h]\n  __int64 v59; // [rsp+40h] [rbp-5B8h]\n  __int64 v60; // [rsp+40h] [rbp-5B8h]\n  __int64 v61; // [rsp+40h] [rbp-5B8h]\n  __int64 v62; // [rsp+40h] [rbp-5B8h]\n  __int64 v63; // [rsp+40h] [rbp-5B8h]\n  __int64 v64; // [rsp+40h] [rbp-5B8h]\n  __int64 v65; // [rsp+40h] [rbp-5B8h]\n  __int64 v66; // [rsp+40h] [rbp-5B8h]\n  __int64 v67; // [rsp+40h] [rbp-5B8h]\n  __int64 v68; // [rsp+48h] [rbp-5B0h]\n  __int64 v69; // [rsp+48h] [rbp-5B0h]\n  __int64 v70; // [rsp+48h] [rbp-5B0h]\n  __int64 v71; // [rsp+48h] [rbp-5B0h]\n  __int64 v72; // [rsp+48h] [rbp-5B0h]\n  __int64 v73; // [rsp+48h] [rbp-5B0h]\n  __int64 v74; // [rsp+48h] [rbp-5B0h]\n  __int64 v75; // [rsp+48h] [rbp-5B0h]\n  __int64 v76; // [rsp+48h] [rbp-5B0h]\n  __int64 v77; // [rsp+48h] [rbp-5B0h]\n  __int64 v78; // [rsp+48h] [rbp-5B0h]\n  __int64 v79; // [rsp+48h] [rbp-5B0h]\n  __int64 v80; // [rsp+48h] [rbp-5B0h]\n  __int64 v81; // [rsp+48h] [rbp-5B0h]\n  __int64 v82; // [rsp+48h] [rbp-5B0h]\n  __int64 v83; // [rsp+48h] [rbp-5B0h]\n  __int64 v84; // [rsp+48h] [rbp-5B0h]\n  __int64 v85; // [rsp+48h] [rbp-5B0h]\n  __int64 v86; // [rsp+48h] [rbp-5B0h]\n  __int64 v87; // [rsp+48h] [rbp-5B0h]\n  __int64 v88; // [rsp+48h] [rbp-5B0h]\n  __int64 v89; // [rsp+50h] [rbp-5A8h]\n  __int64 v90; // [rsp+50h] [rbp-5A8h]\n  __int64 v91; // [rsp+50h] [rbp-5A8h]\n  __int64 v92; // [rsp+50h] [rbp-5A8h]\n  __int64 v93; // [rsp+50h] [rbp-5A8h]\n  __int64 v94; // [rsp+50h] [rbp-5A8h]\n  __int64 v95; // [rsp+50h] [rbp-5A8h]\n  __int64 v96; // [rsp+50h] [rbp-5A8h]\n  __int64 v97; // [rsp+50h] [rbp-5A8h]\n  __int64 v98; // [rsp+50h] [rbp-5A8h]\n  __int64 v99; // [rsp+50h] [rbp-5A8h]\n  __int64 v100; // [rsp+50h] [rbp-5A8h]\n  __int64 v101; // [rsp+50h] [rbp-5A8h]\n  __int64 v102; // [rsp+50h] [rbp-5A8h]\n  __int64 v103; // [rsp+50h] [rbp-5A8h]\n  __int64 v104; // [rsp+50h] [rbp-5A8h]\n  __int64 v105; // [rsp+50h] [rbp-5A8h]\n  __int64 v106; // [rsp+50h] [rbp-5A8h]\n  __int64 v107; // [rsp+50h] [rbp-5A8h]\n  __int64 v108; // [rsp+50h] [rbp-5A8h]\n  __int64 v109; // [rsp+58h] [rbp-5A0h]\n  __int64 v110; // [rsp+58h] [rbp-5A0h]\n  __int64 v111; // [rsp+58h] [rbp-5A0h]\n  __int64 v112; // [rsp+58h] [rbp-5A0h]\n  __int64 v113; // [rsp+58h] [rbp-5A0h]\n  __int64 v114; // [rsp+58h] [rbp-5A0h]\n  __int64 v115; // [rsp+58h] [rbp-5A0h]\n  __int64 v116; // [rsp+58h] [rbp-5A0h]\n  __int64 v117; // [rsp+58h] [rbp-5A0h]\n  __int64 v118; // [rsp+58h] [rbp-5A0h]\n  __int64 v119; // [rsp+58h] [rbp-5A0h]\n  __int64 v120; // [rsp+58h] [rbp-5A0h]\n  __int64 v121; // [rsp+58h] [rbp-5A0h]\n  __int64 v122; // [rsp+58h] [rbp-5A0h]\n  __int64 v123; // [rsp+58h] [rbp-5A0h]\n  __int64 v124; // [rsp+58h] [rbp-5A0h]\n  __int64 v125; // [rsp+58h] [rbp-5A0h]\n  __int64 v126; // [rsp+58h] [rbp-5A0h]\n  __int64 v127; // [rsp+58h] [rbp-5A0h]\n  __int64 v128; // [rsp+58h] [rbp-5A0h]\n  __int64 v129; // [rsp+58h] [rbp-5A0h]\n  __int64 v130; // [rsp+60h] [rbp-598h]\n  __int64 v131; // [rsp+60h] [rbp-598h]\n  __int64 v132; // [rsp+60h] [rbp-598h]\n  __int64 v133; // [rsp+60h] [rbp-598h]\n  __int64 v134; // [rsp+60h] [rbp-598h]\n  __int64 v135; // [rsp+60h] [rbp-598h]\n  __int64 v136; // [rsp+60h] [rbp-598h]\n  __int64 v137; // [rsp+60h] [rbp-598h]\n  __int64 v138; // [rsp+60h] [rbp-598h]\n  __int64 v139; // [rsp+60h] [rbp-598h]\n  __int64 v140; // [rsp+60h] [rbp-598h]\n  __int64 v141; // [rsp+60h] [rbp-598h]\n  __int64 v142; // [rsp+60h] [rbp-598h]\n  __int64 v143; // [rsp+60h] [rbp-598h]\n  __int64 v144; // [rsp+60h] [rbp-598h]\n  __int64 v145; // [rsp+60h] [rbp-598h]\n  __int64 v146; // [rsp+60h] [rbp-598h]\n  __int64 v147; // [rsp+60h] [rbp-598h]\n  __int64 v148; // [rsp+60h] [rbp-598h]\n  __int64 v149; // [rsp+60h] [rbp-598h]\n  __int64 v150; // [rsp+60h] [rbp-598h]\n  __int64 v151; // [rsp+68h] [rbp-590h]\n  __int64 v152; // [rsp+68h] [rbp-590h]\n  __int64 v153; // [rsp+68h] [rbp-590h]\n  __int64 v154; // [rsp+68h] [rbp-590h]\n  __int64 v155; // [rsp+68h] [rbp-590h]\n  __int64 v156; // [rsp+68h] [rbp-590h]\n  __int64 v157; // [rsp+68h] [rbp-590h]\n  __int64 v158; // [rsp+68h] [rbp-590h]\n  __int64 v159; // [rsp+68h] [rbp-590h]\n  __int64 v160; // [rsp+68h] [rbp-590h]\n  __int64 v161; // [rsp+68h] [rbp-590h]\n  __int64 v162; // [rsp+68h] [rbp-590h]\n  __int64 v163; // [rsp+68h] [rbp-590h]\n  __int64 v164; // [rsp+68h] [rbp-590h]\n  __int64 v165; // [rsp+68h] [rbp-590h]\n  __int64 v166; // [rsp+68h] [rbp-590h]\n  __int64 v167; // [rsp+68h] [rbp-590h]\n  __int64 v168; // [rsp+68h] [rbp-590h]\n  __int64 v169; // [rsp+68h] [rbp-590h]\n  __int64 v170; // [rsp+68h] [rbp-590h]\n  __int64 v171; // [rsp+68h] [rbp-590h]\n  __int64 v172; // [rsp+80h] [rbp-578h]\n  __int64 v173; // [rsp+90h] [rbp-568h]\n  __int64 v174; // [rsp+A0h] [rbp-558h]\n  __int64 v175; // [rsp+B0h] [rbp-548h]\n  __int64 v176; // [rsp+C0h] [rbp-538h]\n  __int64 v177; // [rsp+D0h] [rbp-528h]\n  __int64 v178; // [rsp+E0h] [rbp-518h]\n  __int64 v179; // [rsp+F0h] [rbp-508h]\n  __int64 v180; // [rsp+100h] [rbp-4F8h]\n  __int64 v181; // [rsp+110h] [rbp-4E8h]\n  __int64 v182; // [rsp+120h] [rbp-4D8h]\n  __int64 v183; // [rsp+130h] [rbp-4C8h]\n  __int64 v184; // [rsp+140h] [rbp-4B8h]\n  __int64 v185; // [rsp+150h] [rbp-4A8h]\n  __int64 v186; // [rsp+160h] [rbp-498h]\n  __int64 v187; // [rsp+170h] [rbp-488h]\n  __int64 v188; // [rsp+180h] [rbp-478h]\n  __int64 v189; // [rsp+190h] [rbp-468h]\n  __int64 v190; // [rsp+1A0h] [rbp-458h]\n  __int64 v191; // [rsp+1B0h] [rbp-448h]\n  __int64 v192; // [rsp+1C0h] [rbp-438h]\n  __int64 v193; // [rsp+1D0h] [rbp-428h]\n  __int64 v194; // [rsp+1E0h] [rbp-418h]\n  __int64 v195; // [rsp+1F0h] [rbp-408h]\n  __int64 v196; // [rsp+200h] [rbp-3F8h]\n  __int64 v197; // [rsp+210h] [rbp-3E8h]\n  __int64 v198; // [rsp+220h] [rbp-3D8h]\n  __int64 v199; // [rsp+230h] [rbp-3C8h]\n  __int64 v200; // [rsp+240h] [rbp-3B8h]\n  __int64 v201; // [rsp+250h] [rbp-3A8h]\n  __int64 v202; // [rsp+260h] [rbp-398h]\n  __int64 v203; // [rsp+270h] [rbp-388h]\n  __int64 v204; // [rsp+280h] [rbp-378h]\n  __int64 v205; // [rsp+290h] [rbp-368h]\n  __int64 v206; // [rsp+2A0h] [rbp-358h]\n  __int64 v207; // [rsp+2B0h] [rbp-348h]\n  __int64 v208; // [rsp+2C0h] [rbp-338h]\n  __int64 v209; // [rsp+2D0h] [rbp-328h]\n  __int64 v210; // [rsp+2E0h] [rbp-318h]\n  __int64 v211; // [rsp+2F0h] [rbp-308h]\n  __int64 v212; // [rsp+300h] [rbp-2F8h]\n  __int64 v213; // [rsp+310h] [rbp-2E8h]\n  __int64 v214; // [rsp+320h] [rbp-2D8h]\n  __int64 v215; // [rsp+330h] [rbp-2C8h]\n  __int64 v216; // [rsp+340h] [rbp-2B8h]\n  __int64 v217; // [rsp+350h] [rbp-2A8h]\n  __int64 v218; // [rsp+360h] [rbp-298h]\n  __int64 v219; // [rsp+370h] [rbp-288h]\n  __int64 v220; // [rsp+380h] [rbp-278h]\n  __int64 v221; // [rsp+390h] [rbp-268h]\n  __int64 v222; // [rsp+3A0h] [rbp-258h]\n  __int64 v223; // [rsp+3B0h] [rbp-248h]\n  __int64 v224; // [rsp+3C0h] [rbp-238h]\n  __int64 v225; // [rsp+3D0h] [rbp-228h]\n  __int64 v226; // [rsp+3E0h] [rbp-218h]\n  __int64 v227; // [rsp+3F0h] [rbp-208h]\n  __int64 v228; // [rsp+400h] [rbp-1F8h]\n  __int64 v229; // [rsp+410h] [rbp-1E8h]\n  __int64 v230; // [rsp+420h] [rbp-1D8h]\n  __int64 v231; // [rsp+430h] [rbp-1C8h]\n  __int64 v232; // [rsp+440h] [rbp-1B8h]\n  __int64 v233; // [rsp+450h] [rbp-1A8h]\n  __int64 v234; // [rsp+460h] [rbp-198h]\n  __int64 v235; // [rsp+470h] [rbp-188h]\n  __int64 v236; // [rsp+480h] [rbp-178h]\n  __int64 v237; // [rsp+490h] [rbp-168h]\n  __int64 v238; // [rsp+4A0h] [rbp-158h]\n  __int64 v239; // [rsp+4B0h] [rbp-148h]\n  __int64 v240; // [rsp+4C0h] [rbp-138h]\n  __int64 v241; // [rsp+4D0h] [rbp-128h]\n  __int64 v242; // [rsp+4E0h] [rbp-118h]\n  __int64 v243; // [rsp+4F0h] [rbp-108h]\n  __int64 v244; // [rsp+500h] [rbp-F8h]\n  __int64 v245; // [rsp+510h] [rbp-E8h]\n  __int64 v246; // [rsp+520h] [rbp-D8h]\n  __int64 v247; // [rsp+530h] [rbp-C8h]\n  __int64 v248; // [rsp+540h] [rbp-B8h]\n  __int64 v249; // [rsp+550h] [rbp-A8h]\n  __int64 v250; // [rsp+560h] [rbp-98h]\n  __int64 v251; // [rsp+570h] [rbp-88h]\n  unsigned __int64 v252; // [rsp+578h] [rbp-80h]\n  unsigned __int64 v253; // [rsp+580h] [rbp-78h]\n  unsigned __int64 v254; // [rsp+588h] [rbp-70h]\n  unsigned __int64 v255; // [rsp+590h] [rbp-68h]\n  unsigned __int64 v256; // [rsp+598h] [rbp-60h]\n  unsigned __int64 v257; // [rsp+5A0h] [rbp-58h]\n  unsigned __int64 v258; // [rsp+5A8h] [rbp-50h]\n  unsigned __int64 v259; // [rsp+5B0h] [rbp-48h]\n  unsigned __int64 v260; // [rsp+5B8h] [rbp-40h]\n  unsigned __int64 v261; // [rsp+5C0h] [rbp-38h]\n  unsigned __int64 v262; // [rsp+5C8h] [rbp-30h]\n  unsigned __int64 v263; // [rsp+5D0h] [rbp-28h]\n  unsigned __int64 v264; // [rsp+5D8h] [rbp-20h]\n  unsigned __int64 v265; // [rsp+5E0h] [rbp-18h]\n  unsigned __int64 v266; // [rsp+5E8h] [rbp-10h]\n  unsigned __int64 v267; // [rsp+5F0h] [rbp-8h]\n\n  v5 = a1;\n  v6 = *a3;\n  v26 = a3[1];\n  v47 = a3[2];\n  v68 = a3[3];\n  v89 = a3[4];\n  v109 = a3[5];\n  v130 = a3[6];\n  v151 = a3[7];\n  a3[8] += a2;\n  if ( a3[8] < a2 )\n    ++a3[9];\n  while ( 1 )\n  {\n    result = v5;\n    if ( v5 >= &a1[a2 >> 3] )\n      break;\n    for ( i = 0; i <= 15; ++i )\n    {\n      *(&v252 + i) = (*v5 >> 24) & 0xFF0000LL | (*v5 >> 8) & 0xFF000000LL | (*v5 >> 40) & 0xFF00LL | HIBYTE(*v5) | ((*v5 & 0xFF0000LL) << 24) | ((*v5 & 0xFF000000LL) << 8) | ((*v5 & 0xFF00LL) << 40) | (*v5 << 56);\n      ++v5;\n    }\n    v172 = (__ROR8__(v89, 18) ^ __ROR8__(v89, 41) ^ __ROR8__(v89, 14))\n         + v252\n         + 0x428A2F98D728AE22LL\n         + (v130 ^ v89 & (v109 ^ v130))\n         + v151;\n    v69 = v172 + v68;\n    v152 = (__ROR8__(v6, 34) ^ __ROR8__(v6, 39) ^ __ROR8__(v6, 28)) + (v26 & v6 | v47 & (v6 | v26)) + v172;\n    v173 = (__ROR8__(v69, 18) ^ __ROR8__(v69, 41) ^ __ROR8__(v69, 14))\n         + v253\n         + 0x7137449123EF65CDLL\n         + (v109 ^ v69 & (v89 ^ v109))\n         + v130;\n    v48 = v173 + v47;\n    v131 = (__ROR8__(v152, 34) ^ __ROR8__(v152, 39) ^ __ROR8__(v152, 28)) + (v6 & v152 | v26 & (v152 | v6)) + v173;\n    v174 = (__ROR8__(v48, 18) ^ __ROR8__(v48, 41) ^ __ROR8__(v48, 14))\n         + v254\n         - 0x4A3F043013B2C4D1LL\n         + (v89 ^ v48 & (v69 ^ v89))\n         + v109;\n    v27 = v174 + v26;\n    v110 = (__ROR8__(v131, 34) ^ __ROR8__(v131, 39) ^ __ROR8__(v131, 28)) + (v152 & v131 | v6 & (v131 | v152)) + v174;\n    v175 = (__ROR8__(v27, 18) ^ __ROR8__(v27, 41) ^ __ROR8__(v27, 14))\n         + v255\n         - 0x164A245A7E762444LL\n         + (v69 ^ v27 & (v48 ^ v69))\n         + v89;\n    v7 = v175 + v6;\n    v90 = (__ROR8__(v110, 34) ^ __ROR8__(v110, 39) ^ __ROR8__(v110, 28)) + (v131 & v110 | v152 & (v110 | v131)) + v175;\n    v176 = (__ROR8__(v7, 18) ^ __ROR8__(v7, 41) ^ __ROR8__(v7, 14))\n         + v256\n         + 0x3956C25BF348B538LL\n         + (v48 ^ v7 & (v27 ^ v48))\n         + v69;\n    v153 = v176 + v152;\n    v70 = (__ROR8__(v90, 34) ^ __ROR8__(v90, 39) ^ __ROR8__(v90, 28)) + (v110 & v90 | v131 & (v90 | v110)) + v176;\n    v177 = (__ROR8__(v153, 18) ^ __ROR8__(v153, 41) ^ __ROR8__(v153, 14))\n         + v257\n         + 0x59F111F1B605D019LL\n         + (v27 ^ v153 & (v7 ^ v27))\n         + v48;\n    v132 = v177 + v131;\n    v49 = (__ROR8__(v70, 34) ^ __ROR8__(v70, 39) ^ __ROR8__(v70, 28)) + (v90 & v70 | v110 & (v70 | v90)) + v177;\n    v178 = (__ROR8__(v132, 18) ^ __ROR8__(v132, 41) ^ __ROR8__(v132, 14))\n         + v258\n         - 0x6DC07D5B50E6B065LL\n         + (v7 ^ v132 & (v153 ^ v7))\n         + v27;\n    v111 = v178 + v110;\n    v28 = (__ROR8__(v49, 34) ^ __ROR8__(v49, 39) ^ __ROR8__(v49, 28)) + (v70 & v49 | v90 & (v49 | v70)) + v178;\n    v179 = (__ROR8__(v111, 18) ^ __ROR8__(v111, 41) ^ __ROR8__(v111, 14))\n         + v259\n         - 0x54E3A12A25927EE8LL\n         + (v153 ^ v111 & (v132 ^ v153))\n         + v7;\n    v91 = v179 + v90;\n    v8 = (__ROR8__(v28, 34) ^ __ROR8__(v28, 39) ^ __ROR8__(v28, 28)) + (v49 & v28 | v70 & (v28 | v49)) + v179;\n    v180 = (__ROR8__(v91, 18) ^ __ROR8__(v91, 41) ^ __ROR8__(v91, 14))\n         + v260\n         - 0x27F855675CFCFDBELL\n         + (v132 ^ v91 & (v111 ^ v132))\n         + v153;\n    v71 = v180 + v70;\n    v154 = (__ROR8__(v8, 34) ^ __ROR8__(v8, 39) ^ __ROR8__(v8, 28)) + (v28 & v8 | v49 & (v8 | v28)) + v180;\n    v181 = (__ROR8__(v71, 18) ^ __ROR8__(v71, 41) ^ __ROR8__(v71, 14))\n         + v261\n         + 0x12835B0145706FBELL\n         + (v111 ^ v71 & (v91 ^ v111))\n         + v132;\n    v50 = v181 + v49;\n    v133 = (__ROR8__(v154, 34) ^ __ROR8__(v154, 39) ^ __ROR8__(v154, 28)) + (v8 & v154 | v28 & (v154 | v8)) + v181;\n    v182 = (__ROR8__(v50, 18) ^ __ROR8__(v50, 41) ^ __ROR8__(v50, 14))\n         + v262\n         + 0x243185BE4EE4B28CLL\n         + (v91 ^ v50 & (v71 ^ v91))\n         + v111;\n    v29 = v182 + v28;\n    v112 = (__ROR8__(v133, 34) ^ __ROR8__(v133, 39) ^ __ROR8__(v133, 28)) + (v154 & v133 | v8 & (v133 | v154)) + v182;\n    v183 = (__ROR8__(v29, 18) ^ __ROR8__(v29, 41) ^ __ROR8__(v29, 14))\n         + v263\n         + 0x550C7DC3D5FFB4E2LL\n         + (v71 ^ v29 & (v50 ^ v71))\n         + v91;\n    v9 = v183 + v8;\n    v92 = (__ROR8__(v112, 34) ^ __ROR8__(v112, 39) ^ __ROR8__(v112, 28)) + (v133 & v112 | v154 & (v112 | v133)) + v183;\n    v184 = (__ROR8__(v9, 18) ^ __ROR8__(v9, 41) ^ __ROR8__(v9, 14))\n         + v264\n         + 0x72BE5D74F27B896FLL\n         + (v50 ^ v9 & (v29 ^ v50))\n         + v71;\n    v155 = v184 + v154;\n    v72 = (__ROR8__(v92, 34) ^ __ROR8__(v92, 39) ^ __ROR8__(v92, 28)) + (v112 & v92 | v133 & (v92 | v112)) + v184;\n    v185 = (__ROR8__(v155, 18) ^ __ROR8__(v155, 41) ^ __ROR8__(v155, 14))\n         + v265\n         - 0x7F214E01C4E9694FLL\n         + (v29 ^ v155 & (v9 ^ v29))\n         + v50;\n    v134 = v185 + v133;\n    v51 = (__ROR8__(v72, 34) ^ __ROR8__(v72, 39) ^ __ROR8__(v72, 28)) + (v92 & v72 | v112 & (v72 | v92)) + v185;\n    v186 = (__ROR8__(v134, 18) ^ __ROR8__(v134, 41) ^ __ROR8__(v134, 14))\n         + v266\n         - 0x6423F958DA38EDCBLL\n         + (v9 ^ v134 & (v155 ^ v9))\n         + v29;\n    v113 = v186 + v112;\n    v30 = (__ROR8__(v51, 34) ^ __ROR8__(v51, 39) ^ __ROR8__(v51, 28)) + (v72 & v51 | v92 & (v51 | v72)) + v186;\n    v187 = (__ROR8__(v113, 18) ^ __ROR8__(v113, 41) ^ __ROR8__(v113, 14))\n         + v267\n         - 0x3E640E8B3096D96CLL\n         + (v155 ^ v113 & (v134 ^ v155))\n         + v9;\n    v93 = v187 + v92;\n    v10 = (__ROR8__(v30, 34) ^ __ROR8__(v30, 39) ^ __ROR8__(v30, 28)) + (v51 & v30 | v72 & (v30 | v51)) + v187;\n    v252 += (__ROR8__(v266, 61) ^ (v266 >> 6) ^ __ROR8__(v266, 19))\n          + (__ROR8__(v253, 1) ^ __ROR8__(v253, 8) ^ (v253 >> 7))\n          + v261;\n    v188 = (__ROR8__(v93, 18) ^ __ROR8__(v93, 41) ^ __ROR8__(v93, 14))\n         + v252\n         - 0x1B64963E610EB52ELL\n         + (v134 ^ v93 & (v113 ^ v134))\n         + v155;\n    v73 = v188 + v72;\n    v156 = (__ROR8__(v10, 34) ^ __ROR8__(v10, 39) ^ __ROR8__(v10, 28)) + (v30 & v10 | v51 & (v10 | v30)) + v188;\n    v253 += (__ROR8__(v267, 61) ^ (v267 >> 6) ^ __ROR8__(v267, 19))\n          + (__ROR8__(v254, 1) ^ __ROR8__(v254, 8) ^ (v254 >> 7))\n          + v262;\n    v189 = (__ROR8__(v73, 18) ^ __ROR8__(v73, 41) ^ __ROR8__(v73, 14))\n         + v253\n         - 0x1041B879C7B0DA1DLL\n         + (v113 ^ v73 & (v93 ^ v113))\n         + v134;\n    v52 = v189 + v51;\n    v135 = (__ROR8__(v156, 34) ^ __ROR8__(v156, 39) ^ __ROR8__(v156, 28)) + (v10 & v156 | v30 & (v156 | v10)) + v189;\n    v254 += (__ROR8__(v252, 61) ^ (v252 >> 6) ^ __ROR8__(v252, 19))\n          + (__ROR8__(v255, 1) ^ __ROR8__(v255, 8) ^ (v255 >> 7))\n          + v263;\n    v190 = (__ROR8__(v52, 18) ^ __ROR8__(v52, 41) ^ __ROR8__(v52, 14))\n         + v254\n         + 0xFC19DC68B8CD5B5LL\n         + (v93 ^ v52 & (v73 ^ v93))\n         + v113;\n    v31 = v190 + v30;\n    v114 = (__ROR8__(v135, 34) ^ __ROR8__(v135, 39) ^ __ROR8__(v135, 28)) + (v156 & v135 | v10 & (v135 | v156)) + v190;\n    v255 += (__ROR8__(v253, 61) ^ (v253 >> 6) ^ __ROR8__(v253, 19))\n          + (__ROR8__(v256, 1) ^ __ROR8__(v256, 8) ^ (v256 >> 7))\n          + v264;\n    v191 = (__ROR8__(v31, 18) ^ __ROR8__(v31, 41) ^ __ROR8__(v31, 14))\n         + v255\n         + 0x240CA1CC77AC9C65LL\n         + (v73 ^ v31 & (v52 ^ v73))\n         + v93;\n    v11 = v191 + v10;\n    v94 = (__ROR8__(v114, 34) ^ __ROR8__(v114, 39) ^ __ROR8__(v114, 28)) + (v135 & v114 | v156 & (v114 | v135)) + v191;\n    v256 += (__ROR8__(v254, 61) ^ (v254 >> 6) ^ __ROR8__(v254, 19))\n          + (__ROR8__(v257, 1) ^ __ROR8__(v257, 8) ^ (v257 >> 7))\n          + v265;\n    v192 = (__ROR8__(v11, 18) ^ __ROR8__(v11, 41) ^ __ROR8__(v11, 14))\n         + v256\n         + 0x2DE92C6F592B0275LL\n         + (v52 ^ v11 & (v31 ^ v52))\n         + v73;\n    v157 = v192 + v156;\n    v74 = (__ROR8__(v94, 34) ^ __ROR8__(v94, 39) ^ __ROR8__(v94, 28)) + (v114 & v94 | v135 & (v94 | v114)) + v192;\n    v257 += (__ROR8__(v255, 61) ^ (v255 >> 6) ^ __ROR8__(v255, 19))\n          + (__ROR8__(v258, 1) ^ __ROR8__(v258, 8) ^ (v258 >> 7))\n          + v266;\n    v193 = (__ROR8__(v157, 18) ^ __ROR8__(v157, 41) ^ __ROR8__(v157, 14))\n         + v257\n         + 0x4A7484AA6EA6E483LL\n         + (v31 ^ v157 & (v11 ^ v31))\n         + v52;\n    v136 = v193 + v135;\n    v53 = (__ROR8__(v74, 34) ^ __ROR8__(v74, 39) ^ __ROR8__(v74, 28)) + (v94 & v74 | v114 & (v74 | v94)) + v193;\n    v258 += (__ROR8__(v256, 61) ^ (v256 >> 6) ^ __ROR8__(v256, 19))\n          + (__ROR8__(v259, 1) ^ __ROR8__(v259, 8) ^ (v259 >> 7))\n          + v267;\n    v194 = (__ROR8__(v136, 18) ^ __ROR8__(v136, 41) ^ __ROR8__(v136, 14))\n         + v258\n         + 0x5CB0A9DCBD41FBD4LL\n         + (v11 ^ v136 & (v157 ^ v11))\n         + v31;\n    v115 = v194 + v114;\n    v32 = (__ROR8__(v53, 34) ^ __ROR8__(v53, 39) ^ __ROR8__(v53, 28)) + (v74 & v53 | v94 & (v53 | v74)) + v194;\n    v259 += (__ROR8__(v257, 61) ^ (v257 >> 6) ^ __ROR8__(v257, 19))\n          + (__ROR8__(v260, 1) ^ __ROR8__(v260, 8) ^ (v260 >> 7))\n          + v252;\n    v195 = (__ROR8__(v115, 18) ^ __ROR8__(v115, 41) ^ __ROR8__(v115, 14))\n         + v259\n         + 0x76F988DA831153B5LL\n         + (v157 ^ v115 & (v136 ^ v157))\n         + v11;\n    v95 = v195 + v94;\n    v12 = (__ROR8__(v32, 34) ^ __ROR8__(v32, 39) ^ __ROR8__(v32, 28)) + (v53 & v32 | v74 & (v32 | v53)) + v195;\n    v260 += (__ROR8__(v258, 61) ^ (v258 >> 6) ^ __ROR8__(v258, 19))\n          + (__ROR8__(v261, 1) ^ __ROR8__(v261, 8) ^ (v261 >> 7))\n          + v253;\n    v196 = (__ROR8__(v95, 18) ^ __ROR8__(v95, 41) ^ __ROR8__(v95, 14))\n         + v260\n         - 0x67C1AEAD11992055LL\n         + (v136 ^ v95 & (v115 ^ v136))\n         + v157;\n    v75 = v196 + v74;\n    v158 = (__ROR8__(v12, 34) ^ __ROR8__(v12, 39) ^ __ROR8__(v12, 28)) + (v32 & v12 | v53 & (v12 | v32)) + v196;\n    v261 += (__ROR8__(v259, 61) ^ (v259 >> 6) ^ __ROR8__(v259, 19))\n          + (__ROR8__(v262, 1) ^ __ROR8__(v262, 8) ^ (v262 >> 7))\n          + v254;\n    v197 = (__ROR8__(v75, 18) ^ __ROR8__(v75, 41) ^ __ROR8__(v75, 14))\n         + v261\n         - 0x57CE3992D24BCDF0LL\n         + (v115 ^ v75 & (v95 ^ v115))\n         + v136;\n    v54 = v197 + v53;\n    v137 = (__ROR8__(v158, 34) ^ __ROR8__(v158, 39) ^ __ROR8__(v158, 28)) + (v12 & v158 | v32 & (v158 | v12)) + v197;\n    v262 += (__ROR8__(v260, 61) ^ (v260 >> 6) ^ __ROR8__(v260, 19))\n          + (__ROR8__(v263, 1) ^ __ROR8__(v263, 8) ^ (v263 >> 7))\n          + v255;\n    v198 = (__ROR8__(v54, 18) ^ __ROR8__(v54, 41) ^ __ROR8__(v54, 14))\n         + v262\n         - 0x4FFCD8376704DEC1LL\n         + (v95 ^ v54 & (v75 ^ v95))\n         + v115;\n    v33 = v198 + v32;\n    v116 = (__ROR8__(v137, 34) ^ __ROR8__(v137, 39) ^ __ROR8__(v137, 28)) + (v158 & v137 | v12 & (v137 | v158)) + v198;\n    v263 += (__ROR8__(v261, 61) ^ (v261 >> 6) ^ __ROR8__(v261, 19))\n          + (__ROR8__(v264, 1) ^ __ROR8__(v264, 8) ^ (v264 >> 7))\n          + v256;\n    v199 = (__ROR8__(v33, 18) ^ __ROR8__(v33, 41) ^ __ROR8__(v33, 14))\n         + v263\n         - 0x40A680384110F11CLL\n         + (v75 ^ v33 & (v54 ^ v75))\n         + v95;\n    v13 = v199 + v12;\n    v96 = (__ROR8__(v116, 34) ^ __ROR8__(v116, 39) ^ __ROR8__(v116, 28)) + (v137 & v116 | v158 & (v116 | v137)) + v199;\n    v264 += (__ROR8__(v262, 61) ^ (v262 >> 6) ^ __ROR8__(v262, 19))\n          + (__ROR8__(v265, 1) ^ __ROR8__(v265, 8) ^ (v265 >> 7))\n          + v257;\n    v200 = (__ROR8__(v13, 18) ^ __ROR8__(v13, 41) ^ __ROR8__(v13, 14))\n         + v264\n         - 0x391FF40CC257703ELL\n         + (v54 ^ v13 & (v33 ^ v54))\n         + v75;\n    v159 = v200 + v158;\n    v76 = (__ROR8__(v96, 34) ^ __ROR8__(v96, 39) ^ __ROR8__(v96, 28)) + (v116 & v96 | v137 & (v96 | v116)) + v200;\n    v265 += (__ROR8__(v263, 61) ^ (v263 >> 6) ^ __ROR8__(v263, 19))\n          + (__ROR8__(v266, 1) ^ __ROR8__(v266, 8) ^ (v266 >> 7))\n          + v258;\n    v201 = (__ROR8__(v159, 18) ^ __ROR8__(v159, 41) ^ __ROR8__(v159, 14))\n         + v265\n         - 0x2A586EB86CF558DBLL\n         + (v33 ^ v159 & (v13 ^ v33))\n         + v54;\n    v138 = v201 + v137;\n    v55 = (__ROR8__(v76, 34) ^ __ROR8__(v76, 39) ^ __ROR8__(v76, 28)) + (v96 & v76 | v116 & (v76 | v96)) + v201;\n    v266 += (__ROR8__(v264, 61) ^ (v264 >> 6) ^ __ROR8__(v264, 19))\n          + (__ROR8__(v267, 1) ^ __ROR8__(v267, 8) ^ (v267 >> 7))\n          + v259;\n    v202 = (__ROR8__(v138, 18) ^ __ROR8__(v138, 41) ^ __ROR8__(v138, 14))\n         + v266\n         + 0x6CA6351E003826FLL\n         + (v13 ^ v138 & (v159 ^ v13))\n         + v33;\n    v117 = v202 + v116;\n    v34 = (__ROR8__(v55, 34) ^ __ROR8__(v55, 39) ^ __ROR8__(v55, 28)) + (v76 & v55 | v96 & (v55 | v76)) + v202;\n    v267 += (__ROR8__(v265, 61) ^ (v265 >> 6) ^ __ROR8__(v265, 19))\n          + (__ROR8__(v252, 1) ^ __ROR8__(v252, 8) ^ (v252 >> 7))\n          + v260;\n    v203 = (__ROR8__(v117, 18) ^ __ROR8__(v117, 41) ^ __ROR8__(v117, 14))\n         + v267\n         + 0x142929670A0E6E70LL\n         + (v159 ^ v117 & (v138 ^ v159))\n         + v13;\n    v97 = v203 + v96;\n    v14 = (__ROR8__(v34, 34) ^ __ROR8__(v34, 39) ^ __ROR8__(v34, 28)) + (v55 & v34 | v76 & (v34 | v55)) + v203;\n    v252 += (__ROR8__(v266, 61) ^ (v266 >> 6) ^ __ROR8__(v266, 19))\n          + (__ROR8__(v253, 1) ^ __ROR8__(v253, 8) ^ (v253 >> 7))\n          + v261;\n    v204 = (__ROR8__(v97, 18) ^ __ROR8__(v97, 41) ^ __ROR8__(v97, 14))\n         + v252\n         + 0x27B70A8546D22FFCLL\n         + (v138 ^ v97 & (v117 ^ v138))\n         + v159;\n    v77 = v204 + v76;\n    v160 = (__ROR8__(v14, 34) ^ __ROR8__(v14, 39) ^ __ROR8__(v14, 28)) + (v34 & v14 | v55 & (v14 | v34)) + v204;\n    v253 += (__ROR8__(v267, 61) ^ (v267 >> 6) ^ __ROR8__(v267, 19))\n          + (__ROR8__(v254, 1) ^ __ROR8__(v254, 8) ^ (v254 >> 7))\n          + v262;\n    v205 = (__ROR8__(v77, 18) ^ __ROR8__(v77, 41) ^ __ROR8__(v77, 14))\n         + v253\n         + 0x2E1B21385C26C926LL\n         + (v117 ^ v77 & (v97 ^ v117))\n         + v138;\n    v56 = v205 + v55;\n    v139 = (__ROR8__(v160, 34) ^ __ROR8__(v160, 39) ^ __ROR8__(v160, 28)) + (v14 & v160 | v34 & (v160 | v14)) + v205;\n    v254 += (__ROR8__(v252, 61) ^ (v252 >> 6) ^ __ROR8__(v252, 19))\n          + (__ROR8__(v255, 1) ^ __ROR8__(v255, 8) ^ (v255 >> 7))\n          + v263;\n    v206 = (__ROR8__(v56, 18) ^ __ROR8__(v56, 41) ^ __ROR8__(v56, 14))\n         + v254\n         + 0x4D2C6DFC5AC42AEDLL\n         + (v97 ^ v56 & (v77 ^ v97))\n         + v117;\n    v35 = v206 + v34;\n    v118 = (__ROR8__(v139, 34) ^ __ROR8__(v139, 39) ^ __ROR8__(v139, 28)) + (v160 & v139 | v14 & (v139 | v160)) + v206;\n    v255 += (__ROR8__(v253, 61) ^ (v253 >> 6) ^ __ROR8__(v253, 19))\n          + (__ROR8__(v256, 1) ^ __ROR8__(v256, 8) ^ (v256 >> 7))\n          + v264;\n    v207 = (__ROR8__(v35, 18) ^ __ROR8__(v35, 41) ^ __ROR8__(v35, 14))\n         + v255\n         + 0x53380D139D95B3DFLL\n         + (v77 ^ v35 & (v56 ^ v77))\n         + v97;\n    v15 = v207 + v14;\n    v98 = (__ROR8__(v118, 34) ^ __ROR8__(v118, 39) ^ __ROR8__(v118, 28)) + (v139 & v118 | v160 & (v118 | v139)) + v207;\n    v256 += (__ROR8__(v254, 61) ^ (v254 >> 6) ^ __ROR8__(v254, 19))\n          + (__ROR8__(v257, 1) ^ __ROR8__(v257, 8) ^ (v257 >> 7))\n          + v265;\n    v208 = (__ROR8__(v15, 18) ^ __ROR8__(v15, 41) ^ __ROR8__(v15, 14))\n         + v256\n         + 0x650A73548BAF63DELL\n         + (v56 ^ v15 & (v35 ^ v56))\n         + v77;\n    v161 = v208 + v160;\n    v78 = (__ROR8__(v98, 34) ^ __ROR8__(v98, 39) ^ __ROR8__(v98, 28)) + (v118 & v98 | v139 & (v98 | v118)) + v208;\n    v257 += (__ROR8__(v255, 61) ^ (v255 >> 6) ^ __ROR8__(v255, 19))\n          + (__ROR8__(v258, 1) ^ __ROR8__(v258, 8) ^ (v258 >> 7))\n          + v266;\n    v209 = (__ROR8__(v161, 18) ^ __ROR8__(v161, 41) ^ __ROR8__(v161, 14))\n         + v257\n         + 0x766A0ABB3C77B2A8LL\n         + (v35 ^ v161 & (v15 ^ v35))\n         + v56;\n    v140 = v209 + v139;\n    v57 = (__ROR8__(v78, 34) ^ __ROR8__(v78, 39) ^ __ROR8__(v78, 28)) + (v98 & v78 | v118 & (v78 | v98)) + v209;\n    v258 += (__ROR8__(v256, 61) ^ (v256 >> 6) ^ __ROR8__(v256, 19))\n          + (__ROR8__(v259, 1) ^ __ROR8__(v259, 8) ^ (v259 >> 7))\n          + v267;\n    v210 = (__ROR8__(v140, 18) ^ __ROR8__(v140, 41) ^ __ROR8__(v140, 14))\n         + v258\n         - 0x7E3D36D1B812511ALL\n         + (v15 ^ v140 & (v161 ^ v15))\n         + v35;\n    v119 = v210 + v118;\n    v36 = (__ROR8__(v57, 34) ^ __ROR8__(v57, 39) ^ __ROR8__(v57, 28)) + (v78 & v57 | v98 & (v57 | v78)) + v210;\n    v259 += (__ROR8__(v257, 61) ^ (v257 >> 6) ^ __ROR8__(v257, 19))\n          + (__ROR8__(v260, 1) ^ __ROR8__(v260, 8) ^ (v260 >> 7))\n          + v252;\n    v211 = (__ROR8__(v119, 18) ^ __ROR8__(v119, 41) ^ __ROR8__(v119, 14))\n         + v259\n         - 0x6D8DD37AEB7DCAC5LL\n         + (v161 ^ v119 & (v140 ^ v161))\n         + v15;\n    v99 = v211 + v98;\n    v16 = (__ROR8__(v36, 34) ^ __ROR8__(v36, 39) ^ __ROR8__(v36, 28)) + (v57 & v36 | v78 & (v36 | v57)) + v211;\n    v260 += (__ROR8__(v258, 61) ^ (v258 >> 6) ^ __ROR8__(v258, 19))\n          + (__ROR8__(v261, 1) ^ __ROR8__(v261, 8) ^ (v261 >> 7))\n          + v253;\n    v212 = (__ROR8__(v99, 18) ^ __ROR8__(v99, 41) ^ __ROR8__(v99, 14))\n         + v260\n         - 0x5D40175EB30EFC9CLL\n         + (v140 ^ v99 & (v119 ^ v140))\n         + v161;\n    v79 = v212 + v78;\n    v162 = (__ROR8__(v16, 34) ^ __ROR8__(v16, 39) ^ __ROR8__(v16, 28)) + (v36 & v16 | v57 & (v16 | v36)) + v212;\n    v261 += (__ROR8__(v259, 61) ^ (v259 >> 6) ^ __ROR8__(v259, 19))\n          + (__ROR8__(v262, 1) ^ __ROR8__(v262, 8) ^ (v262 >> 7))\n          + v254;\n    v213 = (__ROR8__(v79, 18) ^ __ROR8__(v79, 41) ^ __ROR8__(v79, 14))\n         + v261\n         - 0x57E599B443BDCFFFLL\n         + (v119 ^ v79 & (v99 ^ v119))\n         + v140;\n    v58 = v213 + v57;\n    v141 = (__ROR8__(v162, 34) ^ __ROR8__(v162, 39) ^ __ROR8__(v162, 28)) + (v16 & v162 | v36 & (v162 | v16)) + v213;\n    v262 += (__ROR8__(v260, 61) ^ (v260 >> 6) ^ __ROR8__(v260, 19))\n          + (__ROR8__(v263, 1) ^ __ROR8__(v263, 8) ^ (v263 >> 7))\n          + v255;\n    v214 = (__ROR8__(v58, 18) ^ __ROR8__(v58, 41) ^ __ROR8__(v58, 14))\n         + v262\n         - 0x3DB4748F2F07686FLL\n         + (v99 ^ v58 & (v79 ^ v99))\n         + v119;\n    v37 = v214 + v36;\n    v120 = (__ROR8__(v141, 34) ^ __ROR8__(v141, 39) ^ __ROR8__(v141, 28)) + (v162 & v141 | v16 & (v141 | v162)) + v214;\n    v263 += (__ROR8__(v261, 61) ^ (v261 >> 6) ^ __ROR8__(v261, 19))\n          + (__ROR8__(v264, 1) ^ __ROR8__(v264, 8) ^ (v264 >> 7))\n          + v256;\n    v215 = (__ROR8__(v37, 18) ^ __ROR8__(v37, 41) ^ __ROR8__(v37, 14))\n         + v263\n         - 0x3893AE5CF9AB41D0LL\n         + (v79 ^ v37 & (v58 ^ v79))\n         + v99;\n    v17 = v215 + v16;\n    v100 = (__ROR8__(v120, 34) ^ __ROR8__(v120, 39) ^ __ROR8__(v120, 28)) + (v141 & v120 | v162 & (v120 | v141)) + v215;\n    v264 += (__ROR8__(v262, 61) ^ (v262 >> 6) ^ __ROR8__(v262, 19))\n          + (__ROR8__(v265, 1) ^ __ROR8__(v265, 8) ^ (v265 >> 7))\n          + v257;\n    v216 = (__ROR8__(v17, 18) ^ __ROR8__(v17, 41) ^ __ROR8__(v17, 14))\n         + v264\n         - 0x2E6D17E62910ADE8LL\n         + (v58 ^ v17 & (v37 ^ v58))\n         + v79;\n    v163 = v216 + v162;\n    v80 = (__ROR8__(v100, 34) ^ __ROR8__(v100, 39) ^ __ROR8__(v100, 28)) + (v120 & v100 | v141 & (v100 | v120)) + v216;\n    v265 += (__ROR8__(v263, 61) ^ (v263 >> 6) ^ __ROR8__(v263, 19))\n          + (__ROR8__(v266, 1) ^ __ROR8__(v266, 8) ^ (v266 >> 7))\n          + v258;\n    v217 = (__ROR8__(v163, 18) ^ __ROR8__(v163, 41) ^ __ROR8__(v163, 14))\n         + v265\n         - 0x2966F9DBAA9A56F0LL\n         + (v37 ^ v163 & (v17 ^ v37))\n         + v58;\n    v142 = v217 + v141;\n    v59 = (__ROR8__(v80, 34) ^ __ROR8__(v80, 39) ^ __ROR8__(v80, 28)) + (v100 & v80 | v120 & (v80 | v100)) + v217;\n    v266 += (__ROR8__(v264, 61) ^ (v264 >> 6) ^ __ROR8__(v264, 19))\n          + (__ROR8__(v267, 1) ^ __ROR8__(v267, 8) ^ (v267 >> 7))\n          + v259;\n    v218 = (__ROR8__(v142, 18) ^ __ROR8__(v142, 41) ^ __ROR8__(v142, 14))\n         + v266\n         - 0xBF1CA7AA88EDFD6LL\n         + (v17 ^ v142 & (v163 ^ v17))\n         + v37;\n    v121 = v218 + v120;\n    v38 = (__ROR8__(v59, 34) ^ __ROR8__(v59, 39) ^ __ROR8__(v59, 28)) + (v80 & v59 | v100 & (v59 | v80)) + v218;\n    v267 += (__ROR8__(v265, 61) ^ (v265 >> 6) ^ __ROR8__(v265, 19))\n          + (__ROR8__(v252, 1) ^ __ROR8__(v252, 8) ^ (v252 >> 7))\n          + v260;\n    v219 = (__ROR8__(v121, 18) ^ __ROR8__(v121, 41) ^ __ROR8__(v121, 14))\n         + v267\n         + 0x106AA07032BBD1B8LL\n         + (v163 ^ v121 & (v142 ^ v163))\n         + v17;\n    v101 = v219 + v100;\n    v18 = (__ROR8__(v38, 34) ^ __ROR8__(v38, 39) ^ __ROR8__(v38, 28)) + (v59 & v38 | v80 & (v38 | v59)) + v219;\n    v252 += (__ROR8__(v266, 61) ^ (v266 >> 6) ^ __ROR8__(v266, 19))\n          + (__ROR8__(v253, 1) ^ __ROR8__(v253, 8) ^ (v253 >> 7))\n          + v261;\n    v220 = (__ROR8__(v101, 18) ^ __ROR8__(v101, 41) ^ __ROR8__(v101, 14))\n         + v252\n         + 0x19A4C116B8D2D0C8LL\n         + (v142 ^ v101 & (v121 ^ v142))\n         + v163;\n    v81 = v220 + v80;\n    v164 = (__ROR8__(v18, 34) ^ __ROR8__(v18, 39) ^ __ROR8__(v18, 28)) + (v38 & v18 | v59 & (v18 | v38)) + v220;\n    v253 += (__ROR8__(v267, 61) ^ (v267 >> 6) ^ __ROR8__(v267, 19))\n          + (__ROR8__(v254, 1) ^ __ROR8__(v254, 8) ^ (v254 >> 7))\n          + v262;\n    v221 = (__ROR8__(v81, 18) ^ __ROR8__(v81, 41) ^ __ROR8__(v81, 14))\n         + v253\n         + 0x1E376C085141AB53LL\n         + (v121 ^ v81 & (v101 ^ v121))\n         + v142;\n    v60 = v221 + v59;\n    v143 = (__ROR8__(v164, 34) ^ __ROR8__(v164, 39) ^ __ROR8__(v164, 28)) + (v18 & v164 | v38 & (v164 | v18)) + v221;\n    v254 += (__ROR8__(v252, 61) ^ (v252 >> 6) ^ __ROR8__(v252, 19))\n          + (__ROR8__(v255, 1) ^ __ROR8__(v255, 8) ^ (v255 >> 7))\n          + v263;\n    v222 = (__ROR8__(v60, 18) ^ __ROR8__(v60, 41) ^ __ROR8__(v60, 14))\n         + v254\n         + 0x2748774CDF8EEB99LL\n         + (v101 ^ v60 & (v81 ^ v101))\n         + v121;\n    v39 = v222 + v38;\n    v122 = (__ROR8__(v143, 34) ^ __ROR8__(v143, 39) ^ __ROR8__(v143, 28)) + (v164 & v143 | v18 & (v143 | v164)) + v222;\n    v255 += (__ROR8__(v253, 61) ^ (v253 >> 6) ^ __ROR8__(v253, 19))\n          + (__ROR8__(v256, 1) ^ __ROR8__(v256, 8) ^ (v256 >> 7))\n          + v264;\n    v223 = (__ROR8__(v39, 18) ^ __ROR8__(v39, 41) ^ __ROR8__(v39, 14))\n         + v255\n         + 0x34B0BCB5E19B48A8LL\n         + (v81 ^ v39 & (v60 ^ v81))\n         + v101;\n    v19 = v223 + v18;\n    v102 = (__ROR8__(v122, 34) ^ __ROR8__(v122, 39) ^ __ROR8__(v122, 28)) + (v143 & v122 | v164 & (v122 | v143)) + v223;\n    v256 += (__ROR8__(v254, 61) ^ (v254 >> 6) ^ __ROR8__(v254, 19))\n          + (__ROR8__(v257, 1) ^ __ROR8__(v257, 8) ^ (v257 >> 7))\n          + v265;\n    v224 = (__ROR8__(v19, 18) ^ __ROR8__(v19, 41) ^ __ROR8__(v19, 14))\n         + v256\n         + 0x391C0CB3C5C95A63LL\n         + (v60 ^ v19 & (v39 ^ v60))\n         + v81;\n    v165 = v224 + v164;\n    v82 = (__ROR8__(v102, 34) ^ __ROR8__(v102, 39) ^ __ROR8__(v102, 28)) + (v122 & v102 | v143 & (v102 | v122)) + v224;\n    v257 += (__ROR8__(v255, 61) ^ (v255 >> 6) ^ __ROR8__(v255, 19))\n          + (__ROR8__(v258, 1) ^ __ROR8__(v258, 8) ^ (v258 >> 7))\n          + v266;\n    v225 = (__ROR8__(v165, 18) ^ __ROR8__(v165, 41) ^ __ROR8__(v165, 14))\n         + v257\n         + 0x4ED8AA4AE3418ACBLL\n         + (v39 ^ v165 & (v19 ^ v39))\n         + v60;\n    v144 = v225 + v143;\n    v61 = (__ROR8__(v82, 34) ^ __ROR8__(v82, 39) ^ __ROR8__(v82, 28)) + (v102 & v82 | v122 & (v82 | v102)) + v225;\n    v258 += (__ROR8__(v256, 61) ^ (v256 >> 6) ^ __ROR8__(v256, 19))\n          + (__ROR8__(v259, 1) ^ __ROR8__(v259, 8) ^ (v259 >> 7))\n          + v267;\n    v226 = (__ROR8__(v144, 18) ^ __ROR8__(v144, 41) ^ __ROR8__(v144, 14))\n         + v258\n         + 0x5B9CCA4F7763E373LL\n         + (v19 ^ v144 & (v165 ^ v19))\n         + v39;\n    v123 = v226 + v122;\n    v40 = (__ROR8__(v61, 34) ^ __ROR8__(v61, 39) ^ __ROR8__(v61, 28)) + (v82 & v61 | v102 & (v61 | v82)) + v226;\n    v259 += (__ROR8__(v257, 61) ^ (v257 >> 6) ^ __ROR8__(v257, 19))\n          + (__ROR8__(v260, 1) ^ __ROR8__(v260, 8) ^ (v260 >> 7))\n          + v252;\n    v227 = (__ROR8__(v123, 18) ^ __ROR8__(v123, 41) ^ __ROR8__(v123, 14))\n         + v259\n         + 0x682E6FF3D6B2B8A3LL\n         + (v165 ^ v123 & (v144 ^ v165))\n         + v19;\n    v103 = v227 + v102;\n    v20 = (__ROR8__(v40, 34) ^ __ROR8__(v40, 39) ^ __ROR8__(v40, 28)) + (v61 & v40 | v82 & (v40 | v61)) + v227;\n    v260 += (__ROR8__(v258, 61) ^ (v258 >> 6) ^ __ROR8__(v258, 19))\n          + (__ROR8__(v261, 1) ^ __ROR8__(v261, 8) ^ (v261 >> 7))\n          + v253;\n    v228 = (__ROR8__(v103, 18) ^ __ROR8__(v103, 41) ^ __ROR8__(v103, 14))\n         + v260\n         + 0x748F82EE5DEFB2FCLL\n         + (v144 ^ v103 & (v123 ^ v144))\n         + v165;\n    v83 = v228 + v82;\n    v166 = (__ROR8__(v20, 34) ^ __ROR8__(v20, 39) ^ __ROR8__(v20, 28)) + (v40 & v20 | v61 & (v20 | v40)) + v228;\n    v261 += (__ROR8__(v259, 61) ^ (v259 >> 6) ^ __ROR8__(v259, 19))\n          + (__ROR8__(v262, 1) ^ __ROR8__(v262, 8) ^ (v262 >> 7))\n          + v254;\n    v229 = (__ROR8__(v83, 18) ^ __ROR8__(v83, 41) ^ __ROR8__(v83, 14))\n         + v261\n         + 0x78A5636F43172F60LL\n         + (v123 ^ v83 & (v103 ^ v123))\n         + v144;\n    v62 = v229 + v61;\n    v145 = (__ROR8__(v166, 34) ^ __ROR8__(v166, 39) ^ __ROR8__(v166, 28)) + (v20 & v166 | v40 & (v166 | v20)) + v229;\n    v262 += (__ROR8__(v260, 61) ^ (v260 >> 6) ^ __ROR8__(v260, 19))\n          + (__ROR8__(v263, 1) ^ __ROR8__(v263, 8) ^ (v263 >> 7))\n          + v255;\n    v230 = (__ROR8__(v62, 18) ^ __ROR8__(v62, 41) ^ __ROR8__(v62, 14))\n         + v262\n         - 0x7B3787EB5E0F548ELL\n         + (v103 ^ v62 & (v83 ^ v103))\n         + v123;\n    v41 = v230 + v40;\n    v124 = (__ROR8__(v145, 34) ^ __ROR8__(v145, 39) ^ __ROR8__(v145, 28)) + (v166 & v145 | v20 & (v145 | v166)) + v230;\n    v263 += (__ROR8__(v261, 61) ^ (v261 >> 6) ^ __ROR8__(v261, 19))\n          + (__ROR8__(v264, 1) ^ __ROR8__(v264, 8) ^ (v264 >> 7))\n          + v256;\n    v231 = (__ROR8__(v41, 18) ^ __ROR8__(v41, 41) ^ __ROR8__(v41, 14))\n         + v263\n         - 0x7338FDF7E59BC614LL\n         + (v83 ^ v41 & (v62 ^ v83))\n         + v103;\n    v21 = v231 + v20;\n    v104 = (__ROR8__(v124, 34) ^ __ROR8__(v124, 39) ^ __ROR8__(v124, 28)) + (v145 & v124 | v166 & (v124 | v145)) + v231;\n    v264 += (__ROR8__(v262, 61) ^ (v262 >> 6) ^ __ROR8__(v262, 19))\n          + (__ROR8__(v265, 1) ^ __ROR8__(v265, 8) ^ (v265 >> 7))\n          + v257;\n    v232 = (__ROR8__(v21, 18) ^ __ROR8__(v21, 41) ^ __ROR8__(v21, 14))\n         + v264\n         - 0x6F410005DC9CE1D8LL\n         + (v62 ^ v21 & (v41 ^ v62))\n         + v83;\n    v167 = v232 + v166;\n    v84 = (__ROR8__(v104, 34) ^ __ROR8__(v104, 39) ^ __ROR8__(v104, 28)) + (v124 & v104 | v145 & (v104 | v124)) + v232;\n    v265 += (__ROR8__(v263, 61) ^ (v263 >> 6) ^ __ROR8__(v263, 19))\n          + (__ROR8__(v266, 1) ^ __ROR8__(v266, 8) ^ (v266 >> 7))\n          + v258;\n    v233 = (__ROR8__(v167, 18) ^ __ROR8__(v167, 41) ^ __ROR8__(v167, 14))\n         + v265\n         - 0x5BAF9314217D4217LL\n         + (v41 ^ v167 & (v21 ^ v41))\n         + v62;\n    v146 = v233 + v145;\n    v63 = (__ROR8__(v84, 34) ^ __ROR8__(v84, 39) ^ __ROR8__(v84, 28)) + (v104 & v84 | v124 & (v84 | v104)) + v233;\n    v266 += (__ROR8__(v264, 61) ^ (v264 >> 6) ^ __ROR8__(v264, 19))\n          + (__ROR8__(v267, 1) ^ __ROR8__(v267, 8) ^ (v267 >> 7))\n          + v259;\n    v234 = (__ROR8__(v146, 18) ^ __ROR8__(v146, 41) ^ __ROR8__(v146, 14))\n         + v266\n         - 0x41065C084D3986EBLL\n         + (v21 ^ v146 & (v167 ^ v21))\n         + v41;\n    v125 = v234 + v124;\n    v42 = (__ROR8__(v63, 34) ^ __ROR8__(v63, 39) ^ __ROR8__(v63, 28)) + (v84 & v63 | v104 & (v63 | v84)) + v234;\n    v267 += (__ROR8__(v265, 61) ^ (v265 >> 6) ^ __ROR8__(v265, 19))\n          + (__ROR8__(v252, 1) ^ __ROR8__(v252, 8) ^ (v252 >> 7))\n          + v260;\n    v235 = (__ROR8__(v125, 18) ^ __ROR8__(v125, 41) ^ __ROR8__(v125, 14))\n         + v267\n         - 0x398E870D1C8DACD5LL\n         + (v167 ^ v125 & (v146 ^ v167))\n         + v21;\n    v105 = v235 + v104;\n    v22 = (__ROR8__(v42, 34) ^ __ROR8__(v42, 39) ^ __ROR8__(v42, 28)) + (v63 & v42 | v84 & (v42 | v63)) + v235;\n    v252 += (__ROR8__(v266, 61) ^ (v266 >> 6) ^ __ROR8__(v266, 19))\n          + (__ROR8__(v253, 1) ^ __ROR8__(v253, 8) ^ (v253 >> 7))\n          + v261;\n    v236 = (__ROR8__(v105, 18) ^ __ROR8__(v105, 41) ^ __ROR8__(v105, 14))\n         + v252\n         - 0x35D8C13115D99E64LL\n         + (v146 ^ v105 & (v125 ^ v146))\n         + v167;\n    v85 = v236 + v84;\n    v168 = (__ROR8__(v22, 34) ^ __ROR8__(v22, 39) ^ __ROR8__(v22, 28)) + (v42 & v22 | v63 & (v22 | v42)) + v236;\n    v253 += (__ROR8__(v267, 61) ^ (v267 >> 6) ^ __ROR8__(v267, 19))\n          + (__ROR8__(v254, 1) ^ __ROR8__(v254, 8) ^ (v254 >> 7))\n          + v262;\n    v237 = (__ROR8__(v85, 18) ^ __ROR8__(v85, 41) ^ __ROR8__(v85, 14))\n         + v253\n         - 0x2E794738DE3F3DF9LL\n         + (v125 ^ v85 & (v105 ^ v125))\n         + v146;\n    v64 = v237 + v63;\n    v147 = (__ROR8__(v168, 34) ^ __ROR8__(v168, 39) ^ __ROR8__(v168, 28)) + (v22 & v168 | v42 & (v168 | v22)) + v237;\n    v254 += (__ROR8__(v252, 61) ^ (v252 >> 6) ^ __ROR8__(v252, 19))\n          + (__ROR8__(v255, 1) ^ __ROR8__(v255, 8) ^ (v255 >> 7))\n          + v263;\n    v238 = (__ROR8__(v64, 18) ^ __ROR8__(v64, 41) ^ __ROR8__(v64, 14))\n         + v254\n         - 0x15258229321F14E2LL\n         + (v105 ^ v64 & (v85 ^ v105))\n         + v125;\n    v43 = v238 + v42;\n    v126 = (__ROR8__(v147, 34) ^ __ROR8__(v147, 39) ^ __ROR8__(v147, 28)) + (v168 & v147 | v22 & (v147 | v168)) + v238;\n    v255 += (__ROR8__(v253, 61) ^ (v253 >> 6) ^ __ROR8__(v253, 19))\n          + (__ROR8__(v256, 1) ^ __ROR8__(v256, 8) ^ (v256 >> 7))\n          + v264;\n    v239 = (__ROR8__(v43, 18) ^ __ROR8__(v43, 41) ^ __ROR8__(v43, 14))\n         + v255\n         - 0xA82B08011912E88LL\n         + (v85 ^ v43 & (v64 ^ v85))\n         + v105;\n    v23 = v239 + v22;\n    v106 = (__ROR8__(v126, 34) ^ __ROR8__(v126, 39) ^ __ROR8__(v126, 28)) + (v147 & v126 | v168 & (v126 | v147)) + v239;\n    v256 += (__ROR8__(v254, 61) ^ (v254 >> 6) ^ __ROR8__(v254, 19))\n          + (__ROR8__(v257, 1) ^ __ROR8__(v257, 8) ^ (v257 >> 7))\n          + v265;\n    v240 = (__ROR8__(v23, 18) ^ __ROR8__(v23, 41) ^ __ROR8__(v23, 14))\n         + v256\n         + 0x6F067AA72176FBALL\n         + (v64 ^ v23 & (v43 ^ v64))\n         + v85;\n    v169 = v240 + v168;\n    v86 = (__ROR8__(v106, 34) ^ __ROR8__(v106, 39) ^ __ROR8__(v106, 28)) + (v126 & v106 | v147 & (v106 | v126)) + v240;\n    v257 += (__ROR8__(v255, 61) ^ (v255 >> 6) ^ __ROR8__(v255, 19))\n          + (__ROR8__(v258, 1) ^ __ROR8__(v258, 8) ^ (v258 >> 7))\n          + v266;\n    v241 = (__ROR8__(v169, 18) ^ __ROR8__(v169, 41) ^ __ROR8__(v169, 14))\n         + v257\n         + 0xA637DC5A2C898A6LL\n         + (v43 ^ v169 & (v23 ^ v43))\n         + v64;\n    v148 = v241 + v147;\n    v65 = (__ROR8__(v86, 34) ^ __ROR8__(v86, 39) ^ __ROR8__(v86, 28)) + (v106 & v86 | v126 & (v86 | v106)) + v241;\n    v258 += (__ROR8__(v256, 61) ^ (v256 >> 6) ^ __ROR8__(v256, 19))\n          + (__ROR8__(v259, 1) ^ __ROR8__(v259, 8) ^ (v259 >> 7))\n          + v267;\n    v242 = (__ROR8__(v148, 18) ^ __ROR8__(v148, 41) ^ __ROR8__(v148, 14))\n         + v258\n         + 0x113F9804BEF90DAELL\n         + (v23 ^ v148 & (v169 ^ v23))\n         + v43;\n    v127 = v242 + v126;\n    v44 = (__ROR8__(v65, 34) ^ __ROR8__(v65, 39) ^ __ROR8__(v65, 28)) + (v86 & v65 | v106 & (v65 | v86)) + v242;\n    v259 += (__ROR8__(v257, 61) ^ (v257 >> 6) ^ __ROR8__(v257, 19))\n          + (__ROR8__(v260, 1) ^ __ROR8__(v260, 8) ^ (v260 >> 7))\n          + v252;\n    v243 = (__ROR8__(v127, 18) ^ __ROR8__(v127, 41) ^ __ROR8__(v127, 14))\n         + v259\n         + 0x1B710B35131C471BLL\n         + (v169 ^ v127 & (v148 ^ v169))\n         + v23;\n    v107 = v243 + v106;\n    v24 = (__ROR8__(v44, 34) ^ __ROR8__(v44, 39) ^ __ROR8__(v44, 28)) + (v65 & v44 | v86 & (v44 | v65)) + v243;\n    v260 += (__ROR8__(v258, 61) ^ (v258 >> 6) ^ __ROR8__(v258, 19))\n          + (__ROR8__(v261, 1) ^ __ROR8__(v261, 8) ^ (v261 >> 7))\n          + v253;\n    v244 = (__ROR8__(v107, 18) ^ __ROR8__(v107, 41) ^ __ROR8__(v107, 14))\n         + v260\n         + 0x28DB77F523047D84LL\n         + (v148 ^ v107 & (v127 ^ v148))\n         + v169;\n    v87 = v244 + v86;\n    v170 = (__ROR8__(v24, 34) ^ __ROR8__(v24, 39) ^ __ROR8__(v24, 28)) + (v44 & v24 | v65 & (v24 | v44)) + v244;\n    v261 += (__ROR8__(v259, 61) ^ (v259 >> 6) ^ __ROR8__(v259, 19))\n          + (__ROR8__(v262, 1) ^ __ROR8__(v262, 8) ^ (v262 >> 7))\n          + v254;\n    v245 = (__ROR8__(v87, 18) ^ __ROR8__(v87, 41) ^ __ROR8__(v87, 14))\n         + v261\n         + 0x32CAAB7B40C72493LL\n         + (v127 ^ v87 & (v107 ^ v127))\n         + v148;\n    v66 = v245 + v65;\n    v149 = (__ROR8__(v170, 34) ^ __ROR8__(v170, 39) ^ __ROR8__(v170, 28)) + (v24 & v170 | v44 & (v170 | v24)) + v245;\n    v262 += (__ROR8__(v260, 61) ^ (v260 >> 6) ^ __ROR8__(v260, 19))\n          + (__ROR8__(v263, 1) ^ __ROR8__(v263, 8) ^ (v263 >> 7))\n          + v255;\n    v246 = (__ROR8__(v66, 18) ^ __ROR8__(v66, 41) ^ __ROR8__(v66, 14))\n         + v262\n         + 0x3C9EBE0A15C9BEBCLL\n         + (v107 ^ v66 & (v87 ^ v107))\n         + v127;\n    v45 = v246 + v44;\n    v128 = (__ROR8__(v149, 34) ^ __ROR8__(v149, 39) ^ __ROR8__(v149, 28)) + (v170 & v149 | v24 & (v149 | v170)) + v246;\n    v263 += (__ROR8__(v261, 61) ^ (v261 >> 6) ^ __ROR8__(v261, 19))\n          + (__ROR8__(v264, 1) ^ __ROR8__(v264, 8) ^ (v264 >> 7))\n          + v256;\n    v247 = (__ROR8__(v45, 18) ^ __ROR8__(v45, 41) ^ __ROR8__(v45, 14))\n         + v263\n         + 0x431D67C49C100D4CLL\n         + (v87 ^ v45 & (v66 ^ v87))\n         + v107;\n    v25 = v247 + v24;\n    v108 = (__ROR8__(v128, 34) ^ __ROR8__(v128, 39) ^ __ROR8__(v128, 28)) + (v149 & v128 | v170 & (v128 | v149)) + v247;\n    v264 += (__ROR8__(v262, 61) ^ (v262 >> 6) ^ __ROR8__(v262, 19))\n          + (__ROR8__(v265, 1) ^ __ROR8__(v265, 8) ^ (v265 >> 7))\n          + v257;\n    v248 = (__ROR8__(v25, 18) ^ __ROR8__(v25, 41) ^ __ROR8__(v25, 14))\n         + v264\n         + 0x4CC5D4BECB3E42B6LL\n         + (v66 ^ v25 & (v45 ^ v66))\n         + v87;\n    v171 = v248 + v170;\n    v88 = (__ROR8__(v108, 34) ^ __ROR8__(v108, 39) ^ __ROR8__(v108, 28)) + (v128 & v108 | v149 & (v108 | v128)) + v248;\n    v265 += (__ROR8__(v263, 61) ^ (v263 >> 6) ^ __ROR8__(v263, 19))\n          + (__ROR8__(v266, 1) ^ __ROR8__(v266, 8) ^ (v266 >> 7))\n          + v258;\n    v249 = (__ROR8__(v171, 18) ^ __ROR8__(v171, 41) ^ __ROR8__(v171, 14))\n         + v265\n         + 0x597F299CFC657E2ALL\n         + (v45 ^ v171 & (v25 ^ v45))\n         + v66;\n    v150 = v249 + v149;\n    v67 = (__ROR8__(v88, 34) ^ __ROR8__(v88, 39) ^ __ROR8__(v88, 28)) + (v108 & v88 | v128 & (v88 | v108)) + v249;\n    v266 += (__ROR8__(v264, 61) ^ (v264 >> 6) ^ __ROR8__(v264, 19))\n          + (__ROR8__(v267, 1) ^ __ROR8__(v267, 8) ^ (v267 >> 7))\n          + v259;\n    v250 = (__ROR8__(v150, 18) ^ __ROR8__(v150, 41) ^ __ROR8__(v150, 14))\n         + v266\n         + 0x5FCB6FAB3AD6FAECLL\n         + (v25 ^ v150 & (v171 ^ v25))\n         + v45;\n    v129 = v250 + v128;\n    v46 = (__ROR8__(v67, 34) ^ __ROR8__(v67, 39) ^ __ROR8__(v67, 28)) + (v88 & v67 | v108 & (v67 | v88)) + v250;\n    v267 += (__ROR8__(v265, 61) ^ (v265 >> 6) ^ __ROR8__(v265, 19))\n          + (__ROR8__(v252, 1) ^ __ROR8__(v252, 8) ^ (v252 >> 7))\n          + v260;\n    v251 = (__ROR8__(v129, 18) ^ __ROR8__(v129, 41) ^ __ROR8__(v129, 14))\n         + v267\n         + 0x6C44198C4A475817LL\n         + (v171 ^ v129 & (v150 ^ v171))\n         + v25;\n    *a3 += (__ROR8__(v46, 34) ^ __ROR8__(v46, 39) ^ __ROR8__(v46, 28)) + (v67 & v46 | v88 & (v46 | v67)) + v251;\n    v6 = *a3;\n    a3[1] += v46;\n    v26 = a3[1];\n    a3[2] += v67;\n    v47 = a3[2];\n    a3[3] += v88;\n    v68 = a3[3];\n    a3[4] += v251 + v108;\n    v89 = a3[4];\n    a3[5] += v129;\n    v109 = a3[5];\n    a3[6] += v150;\n    v130 = a3[6];\n    a3[7] += v171;\n    v151 = a3[7];\n  }\n  return result;\n}\n"], [4237491, "sub_40A8B3", "_BYTE *__fastcall sub_40A8B3(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4237596, "sub_40A91C", "size_t __fastcall sub_40A91C(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4237674, "sub_40A96A", "int __fastcall sub_40A96A(int a1, off_t a2, off_t a3, int a4)\n{\n  return posix_fadvise(a1, a2, a3, a4);\n}\n"], [4237722, "sub_40A99A", "void __fastcall sub_40A99A(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    sub_40A96A(v2, 0LL, 0LL, a2);\n  }\n}\n"], [4237780, "sub_40A9D4", "FILE *__fastcall sub_40A9D4(const char *a1, const char *a2)\n{\n  int v3; // [rsp+18h] [rbp-18h]\n  int fd; // [rsp+1Ch] [rbp-14h]\n  int v5; // [rsp+20h] [rbp-10h]\n  int v6; // [rsp+24h] [rbp-Ch]\n  FILE *stream; // [rsp+28h] [rbp-8h]\n\n  stream = fopen(a1, a2);\n  if ( !stream )\n    return stream;\n  v3 = fileno(stream);\n  if ( v3 < 0 || v3 > 2 )\n    return stream;\n  fd = sub_40C31A((unsigned int)v3);\n  if ( fd < 0 )\n  {\n    v5 = *__errno_location();\n    sub_40CE91(stream);\n    *__errno_location() = v5;\n    return 0LL;\n  }\n  if ( !(unsigned int)sub_40CE91(stream) )\n  {\n    stream = fdopen(fd, a2);\n    if ( stream )\n      return stream;\n  }\n  v6 = *__errno_location();\n  close(fd);\n  *__errno_location() = v6;\n  return 0LL;\n}\n"], [4238010, "sub_40AABA", "char *__fastcall sub_40AABA(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_6102B0 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4238241, "sub_40ABA1", "__int64 __fastcall sub_40ABA1(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_6102C0;\n  v4 = sub_40CDFE(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4238314, "sub_40ABEA", "__int64 __fastcall sub_40ABEA(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_6102C0;\n  return *(unsigned int *)v1;\n}\n"], [4238344, "sub_40AC08", "__int64 *__fastcall sub_40AC08(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_6102C0;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4238380, "sub_40AC2C", "__int64 __fastcall sub_40AC2C(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_6102C0;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4238516, "sub_40ACB4", "__int64 __fastcall sub_40ACB4(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_6102C0;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4238567, "sub_40ACE7", "__int64 *__fastcall sub_40ACE7(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_6102C0;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4238657, "sub_40AD41", "_QWORD *__fastcall sub_40AD41(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4238777, "sub_40ADB9", "char *__fastcall sub_40ADB9(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'\";\n  return v3;\n}\n"], [4238838, "sub_40ADF6", "unsigned __int64 __fastcall sub_40ADF6(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_40ADB9((const char *)L\"`'\", a5);\n        a9 = sub_40ADB9((const char *)L\"'\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_40ADF6(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4241985, "sub_40BA41", "unsigned __int64 __fastcall sub_40BA41(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_6102C0;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_40ADF6(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4242145, "sub_40BAE1", "__int64 __fastcall sub_40BAE1(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_40BB13(a1, a2, 0LL, a3);\n}\n"], [4242195, "sub_40BB13", "__int64 __fastcall sub_40BB13(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_6102C0;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_40ADF6(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_40CCC0(v10);\n  sub_40ADF6(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4242495, "sub_40BC3F", "void sub_40BC3F()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_610220;\n  for ( i = 1; i < dword_610200; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_610300 )\n  {\n    free(ptr[1]);\n    qword_610210 = 256LL;\n    off_610218 = &unk_610300;\n  }\n  if ( ptr != (void **)&qword_610210 )\n  {\n    free(ptr);\n    off_610220 = &qword_610210;\n  }\n  dword_610200 = 1;\n}\n"], [4242666, "sub_40BCEA", "void *__fastcall sub_40BCEA(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_610220;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_610200 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_610220 == &qword_610210;\n    if ( off_610220 == &qword_610210 )\n      v4 = 0LL;\n    else\n      v4 = off_610220;\n    v12 = (__int64 *)sub_40CD0F(v4, 16 * v14);\n    off_610220 = v12;\n    if ( v9 )\n    {\n      v5 = off_610218;\n      *v12 = qword_610210;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_610200], 0, 16 * (v14 - (unsigned int)dword_610200));\n    dword_610200 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_40ADF6((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_610300 )\n      free(ptr);\n    ptr = (void *)sub_40CCC0(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_40ADF6((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4243312, "sub_40BF70", "void *__fastcall sub_40BF70(int a1, __int64 a2)\n{\n  return sub_40BCEA(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_6102C0);\n}\n"], [4243355, "sub_40BF9B", "void *__fastcall sub_40BF9B(int a1, __int64 a2, size_t a3)\n{\n  return sub_40BCEA(a1, a2, a3, (__int64)&qword_6102C0);\n}\n"], [4243399, "sub_40BFC7", "void *__fastcall sub_40BFC7(__int64 a1)\n{\n  return sub_40BF70(0, a1);\n}\n"], [4243430, "sub_40BFE6", "void *__fastcall sub_40BFE6(__int64 a1, size_t a2)\n{\n  return sub_40BF9B(0, a1, a2);\n}\n"], [4243469, "sub_40C00D", "void *__fastcall sub_40C00D(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_40AD41(v5, a2);\n  return sub_40BCEA(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4243534, "sub_40C04E", "void *__fastcall sub_40C04E(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_40AD41(v7, a2);\n  return sub_40BCEA(a1, a3, a4, (__int64)v7);\n}\n"], [4243597, "sub_40C08D", "void *__fastcall sub_40C08D(int a1, __int64 a2)\n{\n  return sub_40C00D(0, a1, a2);\n}\n"], [4243633, "sub_40C0B1", "void *__fastcall sub_40C0B1(int a1, __int64 a2, size_t a3)\n{\n  return sub_40C04E(0, a1, a2, a3);\n}\n"], [4243677, "sub_40C0DD", "void *__fastcall sub_40C0DD(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_6102C0;\n  v4[1] = qword_6102C8;\n  v4[2] = qword_6102D0;\n  v4[3] = qword_6102D8;\n  v4[4] = qword_6102E0;\n  v4[5] = qword_6102E8;\n  v4[6] = qword_6102F0;\n  sub_40AC2C(v4, a3, 1);\n  return sub_40BCEA(0, a1, a2, (__int64)v4);\n}\n"], [4243825, "sub_40C171", "void *__fastcall sub_40C171(__int64 a1, unsigned __int8 a2)\n{\n  return sub_40C0DD(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4243867, "sub_40C19B", "void *__fastcall sub_40C19B(__int64 a1)\n{\n  return sub_40C171(a1, 0x3Au);\n}\n"], [4243898, "sub_40C1BA", "void *__fastcall sub_40C1BA(__int64 a1, size_t a2)\n{\n  return sub_40C0DD(a1, a2, 0x3Au);\n}\n"], [4243940, "sub_40C1E4", "__int64 __fastcall sub_40C1E4(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_40C21A(a1, a2, a3, a4, -1LL);\n}\n"], [4243994, "sub_40C21A", "void *__fastcall sub_40C21A(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_6102C0;\n  v8[1] = qword_6102C8;\n  v8[2] = qword_6102D0;\n  v8[3] = qword_6102D8;\n  v8[4] = qword_6102E0;\n  v8[5] = qword_6102E8;\n  v8[6] = qword_6102F0;\n  sub_40ACE7(v8, a2, a3);\n  return sub_40BCEA(a1, a4, a5, (__int64)v8);\n}\n"], [4244145, "sub_40C2B1", "__int64 __fastcall sub_40C2B1(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_40C1E4(0, a1, a2, a3);\n}\n"], [4244192, "sub_40C2E0", "void *__fastcall sub_40C2E0(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_40C21A(0, a1, a2, a3, a4);\n}\n"], [4244250, "sub_40C31A", "__int64 __fastcall sub_40C31A(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_40CF46(a1, 0, 3, a4, a5, a6);\n}\n"], [4244288, "sub_40C340", "int __fastcall sub_40C340(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4245803, "sub_40C92B", "int __fastcall sub_40C92B(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_40C340(a1, a2, a3, a4, a5, i);\n}\n"], [4245913, "sub_40C999", "int __fastcall sub_40C999(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_40C340(a1, a2, a3, a4, v8, i);\n}\n"], [4246130, "sub_40CA72", "int sub_40CA72(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_40C999(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4246312, "sub_40CB28", "int sub_40CB28()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4246417, "sub_40CB91", "__int64 __fastcall sub_40CB91(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // rdx\n\n  v2 = 0xFFFFFFFFFFFFFFFFLL % a2;\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_40CE5C(a1, a2, v2);\n  return sub_40CCDA(a2 * a1, a2, v2);\n}\n"], [4246479, "sub_40CBCF", "__int64 __fastcall sub_40CBCF(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_40CE5C(a1, a2, v4);\n  return sub_40CD0F(a1, a3 * a2);\n}\n"], [4246555, "sub_40CC1B", "__int64 __fastcall sub_40CC1B(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_40CE5C(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_40CD0F(a1, a3 * v6);\n}\n"], [4246720, "sub_40CCC0", "__int64 __fastcall sub_40CCC0(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_40CCDA(a1, a2, a3);\n}\n"], [4246746, "sub_40CCDA", "void *__fastcall sub_40CCDA(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_40CE5C(a1, a2, v2);\n  return v4;\n}\n"], [4246799, "sub_40CD0F", "void *__fastcall sub_40CD0F(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_40CE5C(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4246896, "sub_40CD70", "__int64 __fastcall sub_40CD70(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_40CC1B(a1, a2, 1uLL);\n}\n"], [4246938, "sub_40CD9A", "void *__fastcall sub_40CD9A(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_40CCDA(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4246981, "sub_40CDC5", "void *__fastcall sub_40CDC5(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_40CE5C(a1, a2, v2);\n  return v4;\n}\n"], [4247038, "sub_40CDFE", "void *__fastcall sub_40CDFE(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_40CCDA(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4247087, "sub_40CE2F", "void *__fastcall sub_40CE2F(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_40CDFE(a1, v1 + 1);\n}\n"], [4247132, "sub_40CE5C", "void __noreturn sub_40CE5C()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4247185, "sub_40CE91", "int __fastcall sub_40CE91(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_40D233(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4247366, "sub_40CF46", "__int64 __fastcall sub_40CF46(int a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128 a7, __m128 a8, __m128 a9, __m128 a10, __m128 a11, __m128 a12, __m128 a13, __m128 a14)\n{\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  int v18; // [rsp+10h] [rbp-E0h]\n  int v19; // [rsp+14h] [rbp-DCh]\n  int v20; // [rsp+18h] [rbp-D8h]\n  int v21; // [rsp+1Ch] [rbp-D4h]\n  __int64 v22; // [rsp+50h] [rbp-A0h]\n  __int64 v23; // [rsp+58h] [rbp-98h]\n  __int64 v24; // [rsp+60h] [rbp-90h]\n  __int64 v25; // [rsp+68h] [rbp-88h]\n  __m128 v26; // [rsp+70h] [rbp-80h]\n  __m128 v27; // [rsp+80h] [rbp-70h]\n  __m128 v28; // [rsp+90h] [rbp-60h]\n  __m128 v29; // [rsp+A0h] [rbp-50h]\n  __m128 v30; // [rsp+B0h] [rbp-40h]\n  __m128 v31; // [rsp+C0h] [rbp-30h]\n  __m128 v32; // [rsp+D0h] [rbp-20h]\n  __m128 v33; // [rsp+E0h] [rbp-10h]\n\n  v22 = a3;\n  v23 = a4;\n  v24 = a5;\n  v25 = a6;\n  v26 = a7;\n  v27 = a8;\n  v28 = a9;\n  v29 = a10;\n  v30 = a11;\n  v31 = a12;\n  v32 = a13;\n  v33 = a14;\n  if ( a2 != 1030 )\n    return (unsigned int)fcntl(a1, a2, v22);\n  v19 = v22;\n  if ( dword_610400 < 0 )\n  {\n    v18 = sub_40CF46(a1, 0, v22, a4, a5, a6);\n  }\n  else\n  {\n    v18 = fcntl(a1, 1030, (unsigned int)v22);\n    if ( v18 < 0 && *__errno_location() == 22 )\n    {\n      v18 = sub_40CF46(a1, 0, v19, v14, v15, v16);\n      if ( v18 < 0 )\n        return (unsigned int)v18;\n      dword_610400 = -1;\n    }\n    else\n    {\n      dword_610400 = 1;\n    }\n  }\n  if ( v18 >= 0 && dword_610400 == -1 )\n  {\n    v20 = fcntl(v18, 1);\n    if ( v20 < 0 || fcntl(v18, 2, v20 | 1u) == -1 )\n    {\n      v21 = *__errno_location();\n      close(v18);\n      *__errno_location() = v21;\n      v18 = -1;\n    }\n  }\n  return (unsigned int)v18;\n}\n"], [4248064, "sub_40D200", "__int64 __fastcall sub_40D200(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_40D27E(a1, 0LL, 1LL);\n  return result;\n}\n"], [4248115, "sub_40D233", "int __fastcall sub_40D233(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_40D200(a1);\n  return fflush(a1);\n}\n"], [4248190, "sub_40D27E", "int __fastcall sub_40D27E(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4248374, "sub_40D336", "__int64 __fastcall sub_40D336(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = sub_40CE91(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4248528, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_60FE18 - off_60FE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_60FE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4248640, "fini", "void fini(void)\n{\n  ;\n}\n"], [4248656, "sub_40D450", "int __fastcall sub_40D450(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_6101E8 )\n    v1 = (void *)qword_6101E8;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4248684, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]