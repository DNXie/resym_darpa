[[4201600, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4201632, "sub_401CA0", "__int64 sub_401CA0()\n{\n  return qword_61B010();\n}\n"], [4201648, ".getenv", "// attributes: thunk\nchar *getenv(const char *name)\n{\n  return getenv(name);\n}\n"], [4201664, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4201680, ".localtime", "// attributes: thunk\nstruct tm *localtime(const time_t *timer)\n{\n  return localtime(timer);\n}\n"], [4201696, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4201712, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4201728, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4201744, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4201760, ".strcpy", "// attributes: thunk\nchar *strcpy(char *dest, const char *src)\n{\n  return strcpy(dest, src);\n}\n"], [4201776, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4201792, ".toupper", "// attributes: thunk\nint toupper(int c)\n{\n  return toupper(c);\n}\n"], [4201808, ".iconv", "// attributes: thunk\nsize_t iconv(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)\n{\n  return iconv(cd, inbuf, inbytesleft, outbuf, outbytesleft);\n}\n"], [4201824, ".getc_unlocked", "// attributes: thunk\nint getc_unlocked(FILE *stream)\n{\n  return getc_unlocked(stream);\n}\n"], [4201840, ".qsort", "// attributes: thunk\nvoid qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)\n{\n  qsort(base, nmemb, size, compar);\n}\n"], [4201856, ".localeconv", "// attributes: thunk\nstruct lconv *localeconv(void)\n{\n  return localeconv();\n}\n"], [4201872, ".fcntl", "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\n  return fcntl(fd, cmd);\n}\n"], [4201888, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4201904, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4201920, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4201936, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4201952, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4201968, ".__lxstat", "// attributes: thunk\nint __lxstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _lxstat(ver, filename, stat_buf);\n}\n"], [4201984, ".openat", "// attributes: thunk\nint openat(int fd, const char *file, int oflag, ...)\n{\n  return openat(fd, file, oflag);\n}\n"], [4202000, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4202016, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4202032, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4202048, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4202064, ".dup2", "// attributes: thunk\nint dup2(int fd, int fd2)\n{\n  return dup2(fd, fd2);\n}\n"], [4202080, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4202096, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4202112, ".__fxstatat", "// attributes: thunk\nint __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)\n{\n  return _fxstatat(ver, fildes, filename, stat_buf, flag);\n}\n"], [4202128, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4202144, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4202160, ".__assert_fail", "// attributes: thunk\nvoid __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\n{\n  _assert_fail(assertion, file, line, function);\n}\n"], [4202176, ".fnmatch", "// attributes: thunk\nint fnmatch(const char *pattern, const char *name, int flags)\n{\n  return fnmatch(pattern, name, flags);\n}\n"], [4202192, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4202208, ".freopen", "// attributes: thunk\nFILE *freopen(const char *filename, const char *modes, FILE *stream)\n{\n  return freopen(filename, modes, stream);\n}\n"], [4202224, ".fscanf", "// attributes: thunk\nint fscanf(FILE *stream, const char *format, ...)\n{\n  return fscanf(stream, format);\n}\n"], [4202240, ".strnlen", "// attributes: thunk\nsize_t strnlen(const char *string, size_t maxlen)\n{\n  return strnlen(string, maxlen);\n}\n"], [4202256, ".close", "// attributes: thunk\nint close(int fd)\n{\n  return close(fd);\n}\n"], [4202272, ".closedir", "// attributes: thunk\nint closedir(DIR *dirp)\n{\n  return closedir(dirp);\n}\n"], [4202288, ".fputc", "// attributes: thunk\nint fputc(int c, FILE *stream)\n{\n  return fputc(c, stream);\n}\n"], [4202304, ".strcspn", "// attributes: thunk\nsize_t strcspn(const char *s, const char *reject)\n{\n  return strcspn(s, reject);\n}\n"], [4202320, ".memchr", "// attributes: thunk\nvoid *memchr(const void *s, int c, size_t n)\n{\n  return memchr(s, c, n);\n}\n"], [4202336, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4202352, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4202368, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4202384, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4202400, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4202416, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4202432, ".dirfd", "// attributes: thunk\nint dirfd(DIR *dirp)\n{\n  return dirfd(dirp);\n}\n"], [4202448, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4202464, ".feof", "// attributes: thunk\nint feof(FILE *stream)\n{\n  return feof(stream);\n}\n"], [4202480, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4202496, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4202512, ".putchar_unlocked", "// attributes: thunk\nint putchar_unlocked(int c)\n{\n  return putchar_unlocked(c);\n}\n"], [4202528, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4202544, ".__xstat", "// attributes: thunk\nint __xstat(int ver, const char *filename, struct stat *stat_buf)\n{\n  return _xstat(ver, filename, stat_buf);\n}\n"], [4202560, ".readdir", "// attributes: thunk\nstruct dirent *readdir(DIR *dirp)\n{\n  return readdir(dirp);\n}\n"], [4202576, ".tolower", "// attributes: thunk\nint tolower(int c)\n{\n  return tolower(c);\n}\n"], [4202592, ".putc_unlocked", "// attributes: thunk\nint putc_unlocked(int c, FILE *stream)\n{\n  return putc_unlocked(c, stream);\n}\n"], [4202608, ".iswalnum", "// attributes: thunk\nint iswalnum(wint_t wc)\n{\n  return iswalnum(wc);\n}\n"], [4202624, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4202640, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4202656, ".nl_langinfo", "// attributes: thunk\nchar *nl_langinfo(nl_item item)\n{\n  return nl_langinfo(item);\n}\n"], [4202672, ".ungetc", "// attributes: thunk\nint ungetc(int c, FILE *stream)\n{\n  return ungetc(c, stream);\n}\n"], [4202688, ".__fxstat", "// attributes: thunk\nint __fxstat(int ver, int fildes, struct stat *stat_buf)\n{\n  return _fxstat(ver, fildes, stat_buf);\n}\n"], [4202704, ".mktime", "// attributes: thunk\ntime_t mktime(struct tm *tp)\n{\n  return mktime(tp);\n}\n"], [4202720, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4202736, ".fchdir", "// attributes: thunk\nint fchdir(int fd)\n{\n  return fchdir(fd);\n}\n"], [4202752, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4202768, ".fdopen", "// attributes: thunk\nFILE *fdopen(int fd, const char *modes)\n{\n  return fdopen(fd, modes);\n}\n"], [4202784, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4202800, ".iconv_close", "// attributes: thunk\nint iconv_close(iconv_t cd)\n{\n  return iconv_close(cd);\n}\n"], [4202816, ".iswspace", "// attributes: thunk\nint iswspace(wint_t wc)\n{\n  return iswspace(wc);\n}\n"], [4202832, ".strftime", "// attributes: thunk\nsize_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)\n{\n  return strftime(s, maxsize, format, tp);\n}\n"], [4202848, ".memmove", "// attributes: thunk\nvoid *memmove(void *dest, const void *src, size_t n)\n{\n  return memmove(dest, src, n);\n}\n"], [4202864, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4202880, ".open", "// attributes: thunk\nint open(const char *file, int oflag, ...)\n{\n  return open(file, oflag);\n}\n"], [4202896, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4202912, ".fopen", "// attributes: thunk\nFILE *fopen(const char *filename, const char *modes)\n{\n  return fopen(filename, modes);\n}\n"], [4202928, ".towlower", "// attributes: thunk\nwint_t towlower(wint_t wc)\n{\n  return towlower(wc);\n}\n"], [4202944, ".strtoumax", "// attributes: thunk\nuintmax_t strtoumax(const char *nptr, char **endptr, int base)\n{\n  return strtoumax(nptr, endptr, base);\n}\n"], [4202960, ".fdopendir", "// attributes: thunk\nDIR *fdopendir(int fd)\n{\n  return fdopendir(fd);\n}\n"], [4202976, ".strtoul", "// attributes: thunk\nunsigned __int64 strtoul(const char *nptr, char **endptr, int base)\n{\n  return strtoul(nptr, endptr, base);\n}\n"], [4202992, ".fstatfs", "// attributes: thunk\nint fstatfs(int fildes, struct statfs *buf)\n{\n  return fstatfs(fildes, buf);\n}\n"], [4203008, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4203024, ".sprintf", "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\n  return sprintf(s, format);\n}\n"], [4203040, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4203056, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4203072, ".fflush_unlocked", "// attributes: thunk\nint fflush_unlocked(FILE *stream)\n{\n  return fflush_unlocked(stream);\n}\n"], [4203088, ".strdup", "// attributes: thunk\nchar *strdup(const char *s)\n{\n  return strdup(s);\n}\n"], [4203104, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4203120, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4203136, ".getdelim", "// attributes: thunk\n__ssize_t getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)\n{\n  return getdelim(lineptr, n, delimiter, stream);\n}\n"], [4203152, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4203168, ".iconv_open", "// attributes: thunk\niconv_t iconv_open(const char *tocode, const char *fromcode)\n{\n  return iconv_open(tocode, fromcode);\n}\n"], [4203184, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4203232, "sub_4022E0", "signed __int64 sub_4022E0()\n{\n  signed __int64 result; // rax\n\n  result = &unk_61B37F - &unk_61B378;\n  if ( (unsigned __int64)(&unk_61B37F - &unk_61B378) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4203280, "sub_402310", "__int64 sub_402310()\n{\n  return 0LL;\n}\n"], [4203344, "sub_402350", "signed __int64 sub_402350()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_61B3D8 )\n  {\n    result = sub_4022E0();\n    byte_61B3D8 = 1;\n  }\n  return result;\n}\n"], [4203376, "sub_402370", "__int64 sub_402370()\n{\n  return sub_402310();\n}\n"], [4203421, "sub_40239D", "__int64 __fastcall sub_40239D(__int64 a1, int a2, __int64 a3, int a4)\n{\n  if ( a1 < a3 )\n    return 0xFFFFFFFFLL;\n  if ( a1 > a3 )\n    return 1LL;\n  return (unsigned int)(a2 - a4);\n}\n"], [4203512, "sub_4023F8", "int sub_4023F8()\n{\n  FILE *v0; // rbx\n  char *v1; // rax\n\n  v0 = stdout;\n  v1 = gettext(\n         \"\\n\"\n         \"SIZE may be (or may be an integer optionally followed by) one of following:\\n\"\n         \"KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.\\n\");\n  return fputs_unlocked(v1, v0);\n}\n"], [4203556, "sub_402424", "int __fastcall sub_402424(__int64 a1)\n{\n  char *v1; // rax\n\n  v1 = gettext(\n         \"\\n\"\n         \"Display values are in units of the first available SIZE from --block-size,\\n\"\n         \"and the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.\\n\"\n         \"Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).\\n\");\n  return printf(v1, a1);\n}\n"], [4203600, "sub_402450", "int sub_402450()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_404A2A(qword_61B480);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_404A2A(qword_61B480);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_404A2A(qword_61B480);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4203866, "sub_40255A", "__int64 __fastcall sub_40255A(__int64 a1, __int64 a2)\n{\n  return sub_40B1CF(a1, a2);\n}\n"], [4203903, "sub_40257F", "__int64 __fastcall sub_40257F(__int64 a1)\n{\n  return a1;\n}\n"], [4203917, "sub_40258D", "__int64 __fastcall sub_40258D(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 72);\n}\n"], [4203939, "sub_4025A3", "__int64 __fastcall sub_4025A3(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 104);\n}\n"], [4203961, "sub_4025B9", "__int64 __fastcall sub_4025B9(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 88);\n}\n"], [4203983, "sub_4025CF", "_QWORD *__fastcall sub_4025CF(_QWORD *a1)\n{\n  _QWORD *result; // rax\n\n  *a1 = 0LL;\n  a1[1] = 0x8000000000000000LL;\n  result = a1;\n  a1[2] = -1LL;\n  return result;\n}\n"], [4204034, "sub_402602", "__int64 __fastcall sub_402602(_QWORD *a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 result; // rax\n\n  *a1 = a2;\n  result = a3;\n  a1[1] = a3;\n  a1[2] = a4;\n  return result;\n}\n"], [4204087, "sub_402637", "__int64 __fastcall sub_402637(_QWORD *a1, _QWORD *a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  *a1 += *a2;\n  result = sub_40239D(a1[1], a1[2], a2[1], a2[2]);\n  if ( (int)result < 0 )\n  {\n    v3 = a2[2];\n    result = a2[1];\n    a1[1] = result;\n    a1[2] = v3;\n  }\n  return result;\n}\n"], [4204192, "sub_4026A0", "void __fastcall __noreturn sub_4026A0(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  __int64 v3; // r12\n  __int64 v4; // rbx\n  char *v5; // rax\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rbx\n  char *v9; // rax\n  FILE *v10; // rbx\n  char *v11; // rax\n  FILE *v12; // rbx\n  char *v13; // rax\n  FILE *v14; // rbx\n  char *v15; // rax\n  FILE *v16; // rbx\n  char *v17; // rax\n  FILE *v18; // rbx\n  char *v19; // rax\n  FILE *v20; // rbx\n  char *v21; // rax\n  FILE *v22; // rbx\n  char *v23; // rax\n  FILE *v24; // rbx\n  char *v25; // rax\n  FILE *v26; // rbx\n  char *v27; // rax\n\n  if ( a1 )\n  {\n    v1 = qword_61B480;\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = qword_61B480;\n    v4 = qword_61B480;\n    v5 = gettext(\"Usage: %s [OPTION]... [FILE]...\\n  or:  %s [OPTION]... --files0-from=F\\n\");\n    printf(v5, v4, v3);\n    v6 = stdout;\n    v7 = gettext(\"Summarize disk usage of each FILE, recursively for directories.\\n\\n\");\n    fputs_unlocked(v7, v6);\n    v8 = stdout;\n    v9 = gettext(\"Mandatory arguments to long options are mandatory for short options too.\\n\");\n    fputs_unlocked(v9, v8);\n    v10 = stdout;\n    v11 = gettext(\n            \"  -a, --all             write counts for all files, not just directories\\n\"\n            \"      --apparent-size   print apparent sizes, rather than disk usage; although\\n\"\n            \"                          the apparent size is usually smaller, it may be\\n\"\n            \"                          larger due to holes in (`sparse') files, internal\\n\"\n            \"                          fragmentation, indirect blocks, and the like\\n\");\n    fputs_unlocked(v11, v10);\n    v12 = stdout;\n    v13 = gettext(\n            \"  -B, --block-size=SIZE  scale sizes by SIZE before printing them.  E.g.,\\n\"\n            \"                           `-BM' prints sizes in units of 1,048,576 bytes.\\n\"\n            \"                           See SIZE format below.\\n\"\n            \"  -b, --bytes           equivalent to `--apparent-size --block-size=1'\\n\"\n            \"  -c, --total           produce a grand total\\n\"\n            \"  -D, --dereference-args  dereference only symlinks that are listed on the\\n\"\n            \"                          command line\\n\");\n    fputs_unlocked(v13, v12);\n    v14 = stdout;\n    v15 = gettext(\n            \"      --files0-from=F   summarize disk usage of the NUL-terminated file\\n\"\n            \"                          names specified in file F;\\n\"\n            \"                          If F is - then read names from standard input\\n\"\n            \"  -H                    equivalent to --dereference-args (-D)\\n\"\n            \"  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G)\\n\"\n            \"      --si              like -h, but use powers of 1000 not 1024\\n\");\n    fputs_unlocked(v15, v14);\n    v16 = stdout;\n    v17 = gettext(\n            \"  -k                    like --block-size=1K\\n\"\n            \"  -l, --count-links     count sizes many times if hard linked\\n\"\n            \"  -m                    like --block-size=1M\\n\");\n    fputs_unlocked(v17, v16);\n    v18 = stdout;\n    v19 = gettext(\n            \"  -L, --dereference     dereference all symbolic links\\n\"\n            \"  -P, --no-dereference  don't follow any symbolic links (this is the default)\\n\"\n            \"  -0, --null            end each output line with 0 byte rather than newline\\n\"\n            \"  -S, --separate-dirs   do not include size of subdirectories\\n\"\n            \"  -s, --summarize       display only a total for each argument\\n\");\n    fputs_unlocked(v19, v18);\n    v20 = stdout;\n    v21 = gettext(\n            \"  -x, --one-file-system    skip directories on different file systems\\n\"\n            \"  -X, --exclude-from=FILE  exclude files that match any pattern in FILE\\n\"\n            \"      --exclude=PATTERN    exclude files that match PATTERN\\n\"\n            \"  -d, --max-depth=N     print the total for a directory (or file, with --all)\\n\"\n            \"                          only if it is N or fewer levels below the command\\n\"\n            \"                          line argument;  --max-depth=0 is the same as\\n\"\n            \"                          --summarize\\n\");\n    fputs_unlocked(v21, v20);\n    v22 = stdout;\n    v23 = gettext(\n            \"      --time            show time of the last modification of any file in the\\n\"\n            \"                          directory, or any of its subdirectories\\n\"\n            \"      --time=WORD       show time as WORD instead of modification time:\\n\"\n            \"                          atime, access, use, ctime or status\\n\"\n            \"      --time-style=STYLE  show times using style STYLE:\\n\"\n            \"                          full-iso, long-iso, iso, +FORMAT\\n\"\n            \"                          FORMAT is interpreted like `date'\\n\");\n    fputs_unlocked(v23, v22);\n    v24 = stdout;\n    v25 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v25, v24);\n    v26 = stdout;\n    v27 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v27, v26);\n    sub_402424((__int64)\"DU\");\n    sub_4023F8();\n    sub_402450();\n  }\n  exit(a1);\n}\n"], [4204644, "sub_402864", "bool __fastcall sub_402864(__int64 a1, __int64 a2)\n{\n  int v3; // [rsp+1Ch] [rbp-4h]\n\n  v3 = sub_404936(qword_61B3E0, a2, a1);\n  if ( v3 < 0 )\n    sub_40ECCE();\n  return v3 != 0;\n}\n"], [4204709, "sub_4028A5", "unsigned __int64 __fastcall sub_4028A5(__int64 a1, time_t a2, __int64 a3)\n{\n  char *v3; // rax\n  time_t timer; // [rsp+0h] [rbp-50h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-48h]\n  __int64 v7; // [rsp+18h] [rbp-38h]\n  struct tm *v8; // [rsp+20h] [rbp-30h]\n  char *s; // [rsp+28h] [rbp-28h]\n  char v10[24]; // [rsp+30h] [rbp-20h] BYREF\n  unsigned __int64 v11; // [rsp+48h] [rbp-8h]\n\n  v7 = a1;\n  timer = a2;\n  v6 = a3;\n  v11 = __readfsqword(0x28u);\n  v8 = localtime(&timer);\n  if ( v8 )\n  {\n    sub_408657(stdout, v7, v8, 0LL, (unsigned int)v6);\n  }\n  else\n  {\n    s = (char *)sub_40255A(timer, (__int64)v10);\n    v3 = gettext(\"time %s is out of range\");\n    error(0, 0, v3, s);\n    fputs_unlocked(s, stdout);\n  }\n  return __readfsqword(0x28u) ^ v11;\n}\n"], [4204923, "sub_40297B", "unsigned __int64 __fastcall sub_40297B(__int64 a1)\n{\n  FILE *v1; // rbx\n  const char *v2; // rax\n  char v4[664]; // [rsp+10h] [rbp-2B0h] BYREF\n  unsigned __int64 v5; // [rsp+2A8h] [rbp-18h]\n\n  v5 = __readfsqword(0x28u);\n  v1 = stdout;\n  v2 = (const char *)sub_40A30D(a1, v4, (unsigned int)dword_61B3F8, 1LL, qword_61B418);\n  fputs_unlocked(v2, v1);\n  return __readfsqword(0x28u) ^ v5;\n}\n"], [4205048, "sub_4029F8", "int __fastcall sub_4029F8(__int64 *a1, const char *a2)\n{\n  unsigned int v2; // eax\n\n  sub_40297B(*a1);\n  if ( byte_61B3FC )\n  {\n    putchar_unlocked(9);\n    sub_4028A5(qword_61B410, a1[1], a1[2]);\n  }\n  if ( byte_61B3F4 )\n    v2 = 0;\n  else\n    v2 = 10;\n  printf(\"\\t%s%c\", a2, v2);\n  return fflush_unlocked(stdout);\n}\n"], [4205197, "sub_402A8D", "__int64 __fastcall sub_402A8D(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  char *v3; // rax\n  __int64 v4; // rbx\n  char *v5; // rax\n  const char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rdx\n  __int64 v12; // rsi\n  unsigned __int8 v14; // [rsp+1Ah] [rbp-86h]\n  char v15; // [rsp+1Bh] [rbp-85h]\n  int v16; // [rsp+1Ch] [rbp-84h]\n  unsigned __int64 i; // [rsp+20h] [rbp-80h]\n  const char *v18; // [rsp+28h] [rbp-78h]\n  __int64 v19; // [rsp+30h] [rbp-70h]\n  unsigned __int64 v20; // [rsp+48h] [rbp-58h]\n  __int64 v21[4]; // [rsp+50h] [rbp-50h] BYREF\n  __int64 v22[6]; // [rsp+70h] [rbp-30h] BYREF\n\n  v14 = 1;\n  v18 = *(const char **)(a2 + 56);\n  v19 = a2 + 120;\n  v16 = *(unsigned __int16 *)(a2 + 112);\n  if ( v16 == 4 )\n  {\n    v2 = sub_40C459(v18);\n    v3 = gettext(\"cannot read directory %s\");\n    error(0, *(_DWORD *)(a2 + 64), v3, v2);\n    v14 = 0;\nLABEL_30:\n    if ( dword_61B400 )\n    {\n      if ( dword_61B400 == 2 )\n        v10 = sub_40258D(v19);\n      else\n        v10 = sub_4025A3(v19);\n    }\n    else\n    {\n      v10 = sub_4025B9(v19);\n    }\n    if ( byte_61B3F1 )\n      v12 = *(_QWORD *)(a2 + 168);\n    else\n      v12 = *(_QWORD *)(a2 + 184) << 9;\n    sub_402602(v21, v12, v10, v11);\n    v20 = *(_QWORD *)(a2 + 88);\n    v22[0] = v21[0];\n    v22[1] = v21[1];\n    v22[2] = v21[2];\n    if ( qword_61B448 )\n    {\n      if ( v20 != qword_61B3E8 )\n      {\n        if ( v20 <= qword_61B3E8 )\n        {\n          if ( qword_61B3E8 - 1 != v20 )\n            __assert_fail(\"level == prev_level - 1\", \"../../src/src/du.c\", 0x219u, \"process_file\");\n          sub_402637(v22, (_QWORD *)(qword_61B450 + 48 * qword_61B3E8));\n          if ( byte_61B3F6 != 1 )\n            sub_402637(v22, (_QWORD *)(qword_61B450 + 48 * qword_61B3E8 + 24));\n          sub_402637((_QWORD *)(qword_61B450 + 48 * v20 + 24), (_QWORD *)(qword_61B450 + 48 * qword_61B3E8));\n          sub_402637((_QWORD *)(qword_61B450 + 48 * v20 + 24), (_QWORD *)(qword_61B450 + 48 * qword_61B3E8 + 24));\n        }\n        else\n        {\n          if ( qword_61B448 <= v20 )\n          {\n            qword_61B450 = sub_40EA41(qword_61B450, v20, 96LL);\n            qword_61B448 = 2 * v20;\n          }\n          for ( i = qword_61B3E8 + 1; i <= v20; ++i )\n          {\n            sub_4025CF((_QWORD *)(qword_61B450 + 48 * i));\n            sub_4025CF((_QWORD *)(qword_61B450 + 48 * i + 24));\n          }\n        }\n      }\n    }\n    else\n    {\n      qword_61B448 = v20 + 10;\n      qword_61B450 = sub_40EC37(v20 + 10, 48LL);\n    }\n    qword_61B3E8 = v20;\n    if ( byte_61B3F6 != 1 || v16 != 6 && v16 != 4 )\n      sub_402637((_QWORD *)(qword_61B450 + 48 * v20), v21);\n    sub_402637(qword_61B430, v21);\n    if ( (v16 == 6 || v16 == 4) && v20 <= qword_61B330 || byte_61B3F0 && v20 <= qword_61B330 || !v20 )\n      sub_4029F8(v22, v18);\n    return v14;\n  }\n  if ( v16 == 6 )\n    goto LABEL_30;\n  v15 = sub_405536(qword_61B420, v18);\n  if ( v15 != 1 )\n  {\n    if ( v16 == 11 )\n    {\n      fts_set(a1, a2, 1LL);\n      if ( fts_read(a1) != a2 )\n        __assert_fail(\"e == ent\", \"../../src/src/du.c\", 0x1B5u, \"process_file\");\n      v16 = *(unsigned __int16 *)(a2 + 112);\n    }\n    if ( v16 == 10 || v16 == 13 )\n    {\n      v4 = sub_40C459(v18);\n      v5 = gettext(\"cannot access %s\");\n      error(0, *(_DWORD *)(a2 + 64), v5, v4);\n      return 0LL;\n    }\n  }\n  if ( !v15\n    && (byte_61B3F2 == 1\n     || !byte_61B3F3 && ((*(_DWORD *)(a2 + 144) & 0xF000) == 0x4000 || *(_QWORD *)(a2 + 136) <= 1uLL)\n     || sub_402864(*(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 120))) )\n  {\n    switch ( v16 )\n    {\n      case 2:\n        if ( !(unsigned __int8)sub_41274F(a1, a2) )\n          return 1LL;\n        v8 = sub_40C459(v18);\n        v9 = gettext(\n               \"WARNING: Circular directory structure.\\n\"\n               \"This almost certainly means that you have a corrupted file system.\\n\"\n               \"NOTIFY YOUR SYSTEM MANAGER.\\n\"\n               \"The following directory is part of the cycle:\\n\"\n               \"  %s\\n\");\n        error(0, 0, v9, v8);\n        return 0LL;\n      case 7:\n        v7 = (const char *)sub_40C459(v18);\n        error(0, *(_DWORD *)(a2 + 64), \"%s\", v7);\n        v14 = 0;\n        break;\n      case 1:\n        return 1LL;\n    }\n    goto LABEL_30;\n  }\n  if ( v16 == 1 )\n  {\n    fts_set(a1, a2, 4LL);\n    if ( fts_read(a1) != a2 )\n      __assert_fail(\"e == ent\", \"../../src/src/du.c\", 0x1CCu, \"process_file\");\n  }\n  return 1LL;\n}\n"], [4206955, "sub_40316B", "_BOOL8 __fastcall sub_40316B(_QWORD *a1, unsigned int a2)\n{\n  __int64 v2; // r12\n  char *v3; // rbx\n  int *v4; // rax\n  char *v5; // rbx\n  int *v6; // rax\n  bool v8; // [rsp+1Fh] [rbp-21h]\n  __int64 i; // [rsp+20h] [rbp-20h]\n  __int64 v10; // [rsp+28h] [rbp-18h]\n\n  v8 = 1;\n  if ( *a1 )\n  {\n    for ( i = sub_4126E7(a1, a2, 0LL); ; v8 = (v8 & (unsigned __int8)sub_402A8D(i, v10)) != 0 )\n    {\n      v10 = fts_read(i);\n      if ( !v10 )\n        break;\n    }\n    if ( *__errno_location() )\n    {\n      v2 = sub_40DA72(*(_QWORD *)(i + 32));\n      v3 = gettext(\"fts_read failed: %s\");\n      v4 = __errno_location();\n      error(0, *v4, v3, v2);\n      v8 = 0;\n    }\n    qword_61B3E8 = 0LL;\n    if ( (unsigned int)fts_close(i) )\n    {\n      v5 = gettext(\"fts_close failed\");\n      v6 = __errno_location();\n      error(0, *v6, v5);\n      v8 = 0;\n    }\n  }\n  return v8;\n}\n"], [4207247, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  char *v3; // rax\n  __int64 v4; // rbx\n  char *v5; // rax\n  const char *v6; // rbx\n  int *v7; // rax\n  int v8; // eax\n  int v9; // eax\n  char *v10; // rax\n  char *v11; // rax\n  char *v12; // rax\n  int v13; // eax\n  __int64 v14; // rbx\n  char *v15; // rax\n  char *v16; // rax\n  __int64 v17; // r12\n  char *v18; // rbx\n  int *v19; // rax\n  __int64 *v20; // rax\n  bool v21; // al\n  __int64 v22; // r12\n  char *v23; // rbx\n  int *v24; // rax\n  __int64 v25; // rbx\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rbx\n  const char *v29; // rax\n  __int64 v30; // rbx\n  char *v31; // rax\n  char *v32; // rax\n  char v33; // [rsp+38h] [rbp-78h]\n  char v34; // [rsp+39h] [rbp-77h]\n  char v35; // [rsp+3Ah] [rbp-76h]\n  char v36; // [rsp+3Bh] [rbp-75h]\n  int longind; // [rsp+3Ch] [rbp-74h] BYREF\n  __int64 v38; // [rsp+40h] [rbp-70h]\n  int v39; // [rsp+48h] [rbp-68h]\n  unsigned int v40; // [rsp+4Ch] [rbp-64h]\n  __int64 v41; // [rsp+50h] [rbp-60h] BYREF\n  char *s1; // [rsp+58h] [rbp-58h]\n  __int64 v43; // [rsp+60h] [rbp-50h]\n  __int64 v44; // [rsp+68h] [rbp-48h]\n  char *v45; // [rsp+70h] [rbp-40h]\n  __int64 *v46; // [rsp+78h] [rbp-38h]\n  char *v47; // [rsp+80h] [rbp-30h]\n  __int64 v48; // [rsp+88h] [rbp-28h]\n  __int64 v49[4]; // [rsp+90h] [rbp-20h] BYREF\n\n  v33 = 0;\n  v34 = 1;\n  s1 = 0LL;\n  v38 = 0x1000000008LL;\n  v35 = 0;\n  v49[0] = sub_40257F((__int64)\".\");\n  v49[1] = 0LL;\n  sub_40B8FD(*a2);\n  setlocale(6, locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_415AA0(sub_404521);\n  qword_61B420 = sub_404E10();\n  v3 = getenv(\"DU_BLOCK_SIZE\");\n  sub_40AF36(v3, &dword_61B3F8, &qword_61B418);\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          longind = -1;\n          v39 = getopt_long(a1, a2, \"0abd:chHklmsxB:DLPSX:\", &longopts, &longind);\n          if ( v39 == -1 )\n          {\n            if ( v34 == 1 )\n            {\n              if ( byte_61B3F0 && v35 )\n              {\n                v10 = gettext(\"cannot both summarize and show all entries\");\n                error(0, 0, v10);\n                sub_4026A0(1);\n              }\n              if ( v35 && v33 && !qword_61B330 )\n              {\n                v11 = gettext(\"warning: summarizing is the same as using --max-depth=0\");\n                error(0, 0, v11);\n              }\n              if ( v35 && v33 && qword_61B330 )\n              {\n                v44 = qword_61B330;\n                v12 = gettext(\"warning: summarizing conflicts with --max-depth=%lu\");\n                error(0, 0, v12, v44);\n                sub_4026A0(1);\n              }\n              if ( v35 )\n                qword_61B330 = 0LL;\n              if ( byte_61B3FC )\n              {\n                if ( !::s1 )\n                {\n                  ::s1 = getenv(\"TIME_STYLE\");\n                  if ( ::s1 && strcmp(::s1, \"locale\") )\n                  {\n                    if ( *::s1 == 43 )\n                    {\n                      v45 = strchr(::s1, 10);\n                      if ( v45 )\n                        *v45 = 0;\n                    }\n                    else\n                    {\n                      while ( !strncmp(::s1, \"posix-\", 6uLL) )\n                        ::s1 += 6;\n                    }\n                  }\n                  else\n                  {\n                    ::s1 = \"long-iso\";\n                  }\n                }\n                if ( *::s1 == 43 )\n                {\n                  qword_61B410 = (__int64)(::s1 + 1);\n                }\n                else\n                {\n                  v13 = dword_4162A0[sub_4041D1(\"time style\", ::s1, off_416280, dword_4162A0, 4LL, off_61B340)];\n                  if ( v13 == 1 )\n                  {\n                    qword_61B410 = (__int64)\"%Y-%m-%d %H:%M\";\n                  }\n                  else if ( v13 )\n                  {\n                    if ( v13 == 2 )\n                      qword_61B410 = (__int64)\"%Y-%m-%d\";\n                  }\n                  else\n                  {\n                    qword_61B410 = (__int64)\"%Y-%m-%d %H:%M:%S.%N %z\";\n                  }\n                }\n              }\n              if ( s1 )\n              {\n                if ( optind < a1 )\n                {\n                  v14 = sub_40C459(a2[optind]);\n                  v15 = gettext(\"extra operand %s\");\n                  error(0, 0, v15, v14);\n                  v16 = gettext(\"file operands cannot be combined with --files0-from\");\n                  fprintf(stderr, \"%s\\n\", v16);\n                  sub_4026A0(1);\n                }\n                if ( strcmp(s1, \"-\") && !sub_4086EC(s1, \"r\", stdin) )\n                {\n                  v17 = sub_40C459(s1);\n                  v18 = gettext(\"cannot open %s for reading\");\n                  v19 = __errno_location();\n                  error(1, *v19, v18, v17);\n                }\n                v43 = sub_404334(stdin);\n                byte_61B3F3 = 1;\n              }\n              else\n              {\n                if ( optind >= a1 )\n                  v20 = v49;\n                else\n                  v20 = (__int64 *)&a2[optind];\n                v46 = v20;\n                v43 = sub_4042E3(v20);\n                v21 = optind + 1 < a1 || HIDWORD(v38) == 2;\n                byte_61B3F3 = v21;\n              }\n              if ( !v43 )\n                sub_40ECCE();\n              qword_61B3E0 = sub_4046DB();\n              if ( !qword_61B3E0 )\n                sub_40ECCE();\n              if ( byte_61B3F2 || byte_61B3F3 != 1 )\n                LODWORD(v38) = v38 | 0x100;\n              LODWORD(v38) = HIDWORD(v38) | v38;\n              while ( 1 )\n              {\n                v36 = 0;\n                v47 = (char *)sub_40439D(v43, &v41);\n                if ( !v47 )\n                  break;\n                if ( s1 && !strcmp(s1, \"-\") && !strcmp(v47, \"-\") )\n                {\n                  v25 = sub_40C459(v47);\n                  v26 = gettext(\"when reading file names from stdin, no file name of %s allowed\");\n                  error(0, 0, v26, v25);\n                  v36 = 1;\n                }\n                if ( !*v47 )\n                {\n                  if ( s1 )\n                  {\n                    v48 = sub_404484(v43);\n                    v28 = gettext(\"invalid zero-length file name\");\n                    v29 = (const char *)sub_40DA72(s1);\n                    error(0, 0, \"%s:%lu: %s\", v29, v48, v28);\n                  }\n                  else\n                  {\n                    v27 = gettext(\"invalid zero-length file name\");\n                    error(0, 0, \"%s\", v27);\n                  }\n                  v36 = 1;\n                }\n                if ( v36 )\n                {\n                  v34 = 0;\n                }\n                else\n                {\n                  qword_61B460 = (__int64)v47;\n                  v34 &= sub_40316B(&qword_61B460, v38);\n                }\n              }\n              if ( (_DWORD)v41 != 3 )\n              {\n                if ( (_DWORD)v41 == 4 )\n                {\n                  v22 = sub_40DA72(s1);\n                  v23 = gettext(\"%s: read error\");\n                  v24 = __errno_location();\n                  error(0, *v24, v23, v22);\n                  v34 = 0;\n                }\n                else if ( (_DWORD)v41 != 2 )\n                {\n                  __assert_fail(\"!\\\"unexpected error code from argv_iter\\\"\", \"../../src/src/du.c\", 0x3AFu, \"main\");\n                }\n                sub_4044C1(v43);\n                sub_40475B(qword_61B3E0);\n                if ( s1 && (ferror_unlocked(stdin) || (unsigned int)sub_40F927(stdin)) && v34 )\n                {\n                  v30 = sub_40C459(s1);\n                  v31 = gettext(\"error reading %s\");\n                  error(1, 0, v31, v30);\n                }\n                if ( byte_61B3F5 )\n                {\n                  v32 = gettext(\"total\");\n                  sub_4029F8(qword_61B430, v32);\n                }\n                exit(v34 == 0);\n              }\n              sub_40ECCE();\n            }\n            sub_4026A0(1);\n          }\n          if ( v39 != 99 )\n            break;\n          byte_61B3F5 = 1;\n        }\n        if ( v39 <= 99 )\n          break;\n        if ( v39 == 120 )\n        {\n          LODWORD(v38) = v38 | 0x40;\n        }\n        else if ( v39 > 120 )\n        {\n          if ( v39 == 130 )\n          {\n            s1 = (char *)optarg;\n          }\n          else if ( v39 > 130 )\n          {\n            switch ( v39 )\n            {\n              case 133:\n                byte_61B3FC = 1;\n                if ( optarg )\n                  v8 = dword_416250[sub_4041D1(\"--time\", optarg, off_416220, dword_416250, 4LL, off_61B340)];\n                else\n                  v8 = 0;\n                dword_61B400 = v8;\n                break;\n              case 134:\n                ::s1 = (char *)optarg;\n                break;\n              case 131:\n                dword_61B3F8 = 144;\n                qword_61B418 = 1LL;\n                break;\n              default:\n                goto LABEL_80;\n            }\n          }\n          else if ( v39 == 128 )\n          {\n            byte_61B3F1 = 1;\n          }\n          else\n          {\n            if ( v39 != 129 )\n              goto LABEL_80;\n            sub_405631(qword_61B420, optarg, 0x10000000LL);\n          }\n        }\n        else if ( v39 == 107 )\n        {\n          dword_61B3F8 = 0;\n          qword_61B418 = 1024LL;\n        }\n        else if ( v39 > 107 )\n        {\n          if ( v39 == 109 )\n          {\n            dword_61B3F8 = 0;\n            qword_61B418 = 0x100000LL;\n          }\n          else if ( v39 < 109 )\n          {\n            byte_61B3F2 = 1;\n          }\n          else\n          {\n            if ( v39 != 115 )\n              goto LABEL_80;\n            v35 = 1;\n          }\n        }\n        else if ( v39 == 100 )\n        {\n          if ( (unsigned int)sub_40EE8F(optarg, 0LL, 0LL, &v41, 0LL) )\n          {\n            v4 = sub_40C459(optarg);\n            v5 = gettext(\"invalid maximum depth %s\");\n            error(0, 0, v5, v4);\n            v34 = 0;\n          }\n          else\n          {\n            v33 = 1;\n            qword_61B330 = v41;\n          }\n        }\n        else\n        {\n          if ( v39 != 104 )\n            goto LABEL_80;\n          dword_61B3F8 = 176;\n          qword_61B418 = 1LL;\n        }\n      }\n      if ( v39 != 72 )\n        break;\nLABEL_64:\n      HIDWORD(v38) = 17;\n    }\n    if ( v39 > 72 )\n    {\n      if ( v39 == 83 )\n      {\n        byte_61B3F6 = 1;\n      }\n      else if ( v39 > 83 )\n      {\n        if ( v39 == 97 )\n        {\n          byte_61B3F0 = 1;\n        }\n        else if ( v39 > 97 )\n        {\n          byte_61B3F1 = 1;\n          dword_61B3F8 = 0;\n          qword_61B418 = 1LL;\n        }\n        else\n        {\n          if ( v39 != 88 )\n            goto LABEL_80;\n          if ( (unsigned int)sub_405802(sub_405631, qword_61B420, optarg, 0x10000000LL, 10LL) )\n          {\n            v6 = (const char *)sub_40DA72(optarg);\n            v7 = __errno_location();\n            error(0, *v7, \"%s\", v6);\n            v34 = 0;\n          }\n        }\n      }\n      else if ( v39 == 76 )\n      {\n        HIDWORD(v38) = 2;\n      }\n      else\n      {\n        if ( v39 != 80 )\n          goto LABEL_80;\n        HIDWORD(v38) = 16;\n      }\n    }\n    else if ( v39 == 48 )\n    {\n      byte_61B3F4 = 1;\n    }\n    else if ( v39 > 48 )\n    {\n      if ( v39 != 66 )\n      {\n        if ( v39 != 68 )\n          goto LABEL_80;\n        goto LABEL_64;\n      }\n      v40 = sub_40AF36(optarg, &dword_61B3F8, &qword_61B418);\n      if ( v40 )\n        sub_40F3D5(v40, (unsigned int)longind, (unsigned int)(char)v39, &longopts, optarg);\n    }\n    else\n    {\n      if ( v39 == -131 )\n      {\n        v9 = sub_40C169(\"Torbjorn Granlund\", &unk_41704F);\n        sub_40E8E4(\n          (_DWORD)stdout,\n          (unsigned int)\"du\",\n          (unsigned int)\"GNU coreutils\",\n          (_DWORD)off_61B338,\n          v9,\n          (unsigned int)\"David MacKenzie\",\n          \"Paul Eggert\",\n          \"Jim Meyering\",\n          0LL);\n        exit(0);\n      }\n      if ( v39 == -130 )\n        sub_4026A0(0);\nLABEL_80:\n      v34 = 0;\n    }\n  }\n}\n"], [4210391, "sub_403ED7", "void __noreturn sub_403ED7()\n{\n  sub_4026A0(1);\n}\n"], [4210407, "sub_403EE7", "__int64 __fastcall sub_403EE7(const char *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 result; // rax\n  char v7; // [rsp+27h] [rbp-19h]\n  __int64 i; // [rsp+28h] [rbp-18h]\n  __int64 v9; // [rsp+30h] [rbp-10h]\n  size_t n; // [rsp+38h] [rbp-8h]\n\n  v9 = -1LL;\n  v7 = 0;\n  n = strlen(a1);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !strncmp(*(const char **)(8 * i + a2), a1, n) )\n    {\n      if ( strlen(*(const char **)(8 * i + a2)) == n )\n        return i;\n      if ( v9 == -1 )\n      {\n        v9 = i;\n      }\n      else if ( !a3 || memcmp((const void *)(a4 * v9 + a3), (const void *)(i * a4 + a3), a4) )\n      {\n        v7 = 1;\n      }\n    }\n  }\n  if ( v7 )\n    result = -2LL;\n  else\n    result = v9;\n  return result;\n}\n"], [4210710, "sub_404016", "void __fastcall sub_404016(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  __int64 v4; // rbx\n  __int64 v5; // rax\n  char *format; // [rsp+28h] [rbp-18h]\n\n  if ( a3 == -1 )\n    v3 = gettext(\"invalid argument %s for %s\");\n  else\n    v3 = gettext(\"ambiguous argument %s for %s\");\n  format = v3;\n  v4 = sub_40C435(1LL, a1);\n  v5 = sub_40D8E4(0LL, 6LL, a2);\n  error(0, 0, format, v5, v4);\n}\n"], [4210849, "sub_4040A1", "int __fastcall sub_4040A1(__int64 a1, __int64 a2, size_t a3)\n{\n  char *v3; // rax\n  __int64 i; // [rsp+20h] [rbp-10h]\n  void *s1; // [rsp+28h] [rbp-8h]\n\n  s1 = 0LL;\n  v3 = gettext(\"Valid arguments are:\");\n  fprintf(stderr, v3);\n  for ( i = 0LL; *(_QWORD *)(8 * i + a1); ++i )\n  {\n    if ( i && !memcmp(s1, (const void *)(i * a3 + a2), a3) )\n    {\n      fprintf(stderr, \", `%s'\", *(const char **)(8 * i + a1));\n    }\n    else\n    {\n      fprintf(stderr, \"\\n  - `%s'\", *(const char **)(8 * i + a1));\n      s1 = (void *)(i * a3 + a2);\n    }\n  }\n  return putc_unlocked(10, stderr);\n}\n"], [4211153, "sub_4041D1", "__int64 __fastcall sub_4041D1(__int64 a1, const char *a2, __int64 a3, __int64 a4, size_t a5, void (*a6)(void))\n{\n  __int64 v11; // [rsp+38h] [rbp-8h]\n\n  v11 = sub_403EE7(a2, a3, a4, a5);\n  if ( v11 >= 0 )\n    return v11;\n  sub_404016(a1, (__int64)a2, v11);\n  sub_4040A1(a3, a4, a5);\n  a6();\n  return -1LL;\n}\n"], [4211287, "sub_404257", "__int64 __fastcall sub_404257(const void *a1, __int64 a2, __int64 a3, size_t a4)\n{\n  __int64 i; // [rsp+28h] [rbp-8h]\n\n  for ( i = 0LL; *(_QWORD *)(8 * i + a2); ++i )\n  {\n    if ( !memcmp(a1, (const void *)(i * a4 + a3), a4) )\n      return *(_QWORD *)(8 * i + a2);\n  }\n  return 0LL;\n}\n"], [4211427, "sub_4042E3", "_QWORD *__fastcall sub_4042E3(__int64 a1)\n{\n  _QWORD *v2; // [rsp+18h] [rbp-8h]\n\n  v2 = malloc(0x30uLL);\n  if ( !v2 )\n    return 0LL;\n  *v2 = 0LL;\n  v2[4] = a1;\n  v2[5] = a1;\n  return v2;\n}\n"], [4211508, "sub_404334", "_QWORD *__fastcall sub_404334(__int64 a1)\n{\n  _QWORD *v2; // [rsp+18h] [rbp-8h]\n\n  v2 = malloc(0x30uLL);\n  if ( !v2 )\n    return 0LL;\n  *v2 = a1;\n  v2[2] = 0LL;\n  v2[3] = 0LL;\n  v2[1] = 0LL;\n  v2[4] = 0LL;\n  return v2;\n}\n"], [4211613, "sub_40439D", "__int64 __fastcall sub_40439D(__int64 a1, int *a2)\n{\n  int v2; // eax\n  __int64 result; // rax\n  __int64 *v4; // rax\n\n  if ( *(_QWORD *)a1 )\n  {\n    if ( getdelim((char **)(a1 + 16), (size_t *)(a1 + 24), 0, *(FILE **)a1) >= 0 )\n    {\n      *a2 = 1;\n      ++*(_QWORD *)(a1 + 8);\n      result = *(_QWORD *)(a1 + 16);\n    }\n    else\n    {\n      if ( feof(*(FILE **)a1) )\n        v2 = 2;\n      else\n        v2 = 4;\n      *a2 = v2;\n      result = 0LL;\n    }\n  }\n  else if ( **(_QWORD **)(a1 + 40) )\n  {\n    *a2 = 1;\n    v4 = *(__int64 **)(a1 + 40);\n    *(_QWORD *)(a1 + 40) = v4 + 1;\n    result = *v4;\n  }\n  else\n  {\n    *a2 = 2;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4211844, "sub_404484", "__int64 __fastcall sub_404484(_QWORD *a1)\n{\n  __int64 result; // rax\n\n  if ( *a1 )\n    result = a1[1];\n  else\n    result = (__int64)(a1[5] - a1[4]) >> 3;\n  return result;\n}\n"], [4211905, "sub_4044C1", "void __fastcall sub_4044C1(void **a1)\n{\n  if ( *a1 )\n    free(a1[2]);\n  free(a1);\n}\n"], [4211959, "sub_4044F7", "__int64 __fastcall sub_4044F7(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_61B470 = a1;\n  return result;\n}\n"], [4211980, "sub_40450C", "__int64 __fastcall sub_40450C(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_61B478 = a1;\n  return result;\n}\n"], [4212001, "sub_404521", "__int64 sub_404521()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_4128C9(stdout) && (byte_61B478 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_61B470 )\n    {\n      v0 = (const char *)sub_40DA72(qword_61B470);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_4128C9(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4212236, "sub_40460C", "unsigned __int64 __fastcall sub_40460C(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"], [4212343, "sub_404677", "bool __fastcall sub_404677(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n"], [4212393, "sub_4046A9", "void __fastcall sub_4046A9(_QWORD *a1)\n{\n  sub_4093BC(a1[1]);\n  free(a1);\n}\n"], [4212443, "sub_4046DB", "_QWORD *sub_4046DB()\n{\n  _QWORD *ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = malloc(0x18uLL);\n  if ( ptr )\n  {\n    *ptr = sub_409151(11LL, 0LL, sub_40460C, sub_404677, sub_4046A9);\n    if ( !*ptr )\n    {\n      free(ptr);\n      return 0LL;\n    }\n    ptr[1] = 0LL;\n    ptr[2] = 0LL;\n  }\n  return ptr;\n}\n"], [4212571, "sub_40475B", "void __fastcall sub_40475B(void **a1)\n{\n  sub_4093BC(*a1);\n  free(a1[1]);\n  free(a1[2]);\n  free(a1);\n}\n"], [4212644, "sub_4047A4", "unsigned __int64 __fastcall sub_4047A4(unsigned __int64 a1, unsigned __int64 a2)\n{\n  return a1 % a2;\n}\n"], [4212674, "sub_4047C2", "__int64 __fastcall sub_4047C2(_QWORD *a1, __int64 a2)\n{\n  _QWORD *v3; // [rsp+10h] [rbp-10h]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = (_QWORD *)a1[2];\n  if ( v3 )\n  {\n    if ( *v3 == a2 )\n      return v3[1];\n  }\n  else\n  {\n    v3 = malloc(0x10uLL);\n    a1[2] = v3;\n    if ( !v3 )\n      return 0LL;\n  }\n  *v3 = a2;\n  v4 = sub_409DE7(*a1, v3);\n  if ( !v4 )\n    return 0LL;\n  if ( (_QWORD *)v4 == v3 )\n  {\n    a1[2] = 0LL;\n    v3[1] = sub_409151(1021LL, 0LL, sub_4047A4, 0LL, 0LL);\n  }\n  else\n  {\n    v3[1] = *(_QWORD *)(v4 + 8);\n  }\n  return v3[1];\n}\n"], [4212918, "sub_4048B6", "__int64 __fastcall sub_4048B6(__int64 a1, unsigned __int64 a2)\n{\n  if ( a2 && a2 <= 0x7FFFFFFFFFFFFFFELL )\n    return a2;\n  if ( *(_QWORD *)(a1 + 8) )\n    return sub_40B0E2(*(_QWORD *)(a1 + 8), a2);\n  *(_QWORD *)(a1 + 8) = sub_40B025(0x7FFFFFFFFFFFFFFFLL);\n  if ( *(_QWORD *)(a1 + 8) )\n    return sub_40B0E2(*(_QWORD *)(a1 + 8), a2);\n  return -1LL;\n}\n"], [4213046, "sub_404936", "__int64 __fastcall sub_404936(_QWORD *a1, __int64 a2, unsigned __int64 a3)\n{\n  __int64 result; // rax\n  __int64 v5; // [rsp+20h] [rbp-10h]\n  __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v5 = sub_4047C2(a1, a2);\n  if ( !v5 )\n    return 0xFFFFFFFFLL;\n  v6 = sub_4048B6((__int64)a1, a3);\n  if ( v6 == -1 )\n    result = 0xFFFFFFFFLL;\n  else\n    result = sub_409ACD(v5, v6, 0LL);\n  return result;\n}\n"], [4213166, "sub_4049AE", "__int64 __fastcall sub_4049AE(_QWORD *a1, __int64 a2, unsigned __int64 a3)\n{\n  __int64 result; // rax\n  __int64 v5; // [rsp+20h] [rbp-10h]\n  __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v5 = sub_4047C2(a1, a2);\n  if ( !v5 )\n    return 0xFFFFFFFFLL;\n  v6 = sub_4048B6((__int64)a1, a3);\n  if ( v6 == -1 )\n    result = 0xFFFFFFFFLL;\n  else\n    result = sub_408B18(v5, v6) != 0;\n  return result;\n}\n"], [4213290, "sub_404A2A", "_BYTE *__fastcall sub_404A2A(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4213395, "sub_404A93", "size_t __fastcall sub_404A93(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4213473, "sub_404AE1", "bool __fastcall sub_404AE1(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_417560[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4213527, "sub_404B17", "__int64 __fastcall sub_404B17(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  size_t v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_404AE1(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_40DBF1(*(_QWORD *)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4214007, "sub_404CF7", "__int64 __fastcall sub_404CF7(const char *a1, char a2)\n{\n  char *reject; // [rsp+10h] [rbp-10h]\n  size_t v5; // [rsp+18h] [rbp-8h]\n\n  reject = \"\\\\?*[]\";\n  if ( (a2 & 2) != 0 )\n    reject = \"?*[]\";\n  while ( *a1 )\n  {\n    v5 = strcspn(a1, reject);\n    if ( !a1[v5] )\n      break;\n    if ( a1[v5] != 92 )\n      return 1LL;\n    a1 += v5 + 1;\n    if ( *a1 )\n      ++a1;\n  }\n  return 0LL;\n}\n"], [4214165, "sub_404D95", "__int64 __fastcall sub_404D95(_BYTE *a1)\n{\n  _BYTE *v1; // rax\n  _BYTE *v2; // rdx\n  __int64 result; // rax\n  _BYTE *v4; // [rsp+0h] [rbp-18h]\n  int v5; // [rsp+Ch] [rbp-Ch]\n  _BYTE *v6; // [rsp+10h] [rbp-8h]\n\n  v4 = a1;\n  v5 = 0;\n  v6 = a1;\n  do\n  {\n    if ( v5 )\n    {\n      if ( *v6 == 93 )\n        v5 = 0;\n    }\n    else if ( *v6 == 91 )\n    {\n      v5 = 1;\n    }\n    else if ( *v6 == 92 )\n    {\n      ++v6;\n    }\n    v1 = v4++;\n    v2 = v6++;\n    *v1 = *v2;\n    result = (unsigned __int8)*v1;\n  }\n  while ( (_BYTE)result );\n  return result;\n}\n"], [4214288, "sub_404E10", "__int64 sub_404E10()\n{\n  return sub_40EC0C(16LL);\n}\n"], [4214304, "sub_404E20", "__int64 __fastcall sub_404E20(__int64 a1, __int64 a2)\n{\n  return sub_408DD1(a1, a2);\n}\n"], [4214349, "sub_404E4D", "unsigned __int64 __fastcall sub_404E4D(char *a1, unsigned __int64 a2)\n{\n  signed int v4; // [rsp+1Ch] [rbp-94h]\n  unsigned __int64 v5; // [rsp+20h] [rbp-90h]\n  char v6[4]; // [rsp+60h] [rbp-50h] BYREF\n  int v7; // [rsp+64h] [rbp-4Ch] BYREF\n  char i; // [rsp+6Ch] [rbp-44h]\n  char *v9; // [rsp+70h] [rbp-40h]\n  __int64 v10; // [rsp+78h] [rbp-38h]\n  __int64 v11; // [rsp+80h] [rbp-30h]\n  unsigned __int64 v12; // [rsp+A8h] [rbp-8h]\n\n  v12 = __readfsqword(0x28u);\n  v5 = 0LL;\n  v9 = a1;\n  v6[0] = 0;\n  memset(&v7, 0, 8uLL);\n  for ( i = 0; ; i = 0 )\n  {\n    sub_404B17((__int64)v6);\n    if ( (unsigned __int8)v11 == 1 && !HIDWORD(v11) )\n      break;\n    if ( (_BYTE)v11 )\n      v4 = towlower(HIDWORD(v11));\n    else\n      v4 = *v9;\n    v5 = (31 * v5 + v4) % a2;\n    v9 += v10;\n  }\n  return v5;\n}\n"], [4214702, "sub_404FAE", "bool __fastcall sub_404FAE(const char *a1, const char *a2)\n{\n  return strcmp(a1, a2) == 0;\n}\n"], [4214760, "sub_404FE8", "bool __fastcall sub_404FE8(__int64 a1, __int64 a2)\n{\n  return (unsigned int)sub_40B517(a1, a2) == 0;\n}\n"], [4214818, "sub_405022", "void __fastcall sub_405022(void *a1)\n{\n  free(a1);\n}\n"], [4214844, "sub_40503C", "__int64 __fastcall sub_40503C(__int64 a1, int a2, int a3)\n{\n  void *v3; // rdx\n  void *v4; // rax\n  __int64 v7; // [rsp+18h] [rbp-8h]\n\n  v7 = sub_40EC0C(40LL);\n  *(_DWORD *)(v7 + 8) = a2;\n  *(_DWORD *)(v7 + 12) = a3;\n  if ( !a2 )\n  {\n    if ( (a3 & 0x10) != 0 )\n      v3 = sub_404FE8;\n    else\n      v3 = sub_404FAE;\n    if ( (a3 & 0x10) != 0 )\n      v4 = sub_404E4D;\n    else\n      v4 = sub_404E20;\n    *(_QWORD *)(v7 + 16) = sub_409151(0LL, 0LL, v4, v3, sub_405022);\n  }\n  if ( *(_QWORD *)(a1 + 8) )\n    **(_QWORD **)(a1 + 8) = v7;\n  else\n    *(_QWORD *)a1 = v7;\n  *(_QWORD *)(a1 + 8) = v7;\n  return v7;\n}\n"], [4215047, "sub_405107", "void __fastcall sub_405107(__int64 a1)\n{\n  int v1; // eax\n\n  v1 = *(_DWORD *)(a1 + 8);\n  if ( v1 )\n  {\n    if ( v1 == 1 )\n      free(*(void **)(a1 + 16));\n  }\n  else\n  {\n    sub_4093BC(*(_QWORD *)(a1 + 16));\n  }\n  free((void *)a1);\n}\n"], [4215124, "sub_405154", "void __fastcall sub_405154(_QWORD **a1)\n{\n  _QWORD *i; // [rsp+10h] [rbp-10h]\n  _QWORD *v2; // [rsp+18h] [rbp-8h]\n\n  for ( i = *a1; i; i = v2 )\n  {\n    v2 = (_QWORD *)*i;\n    sub_405107((__int64)i);\n  }\n  free(a1);\n}\n"], [4215201, "sub_4051A1", "int __fastcall sub_4051A1(const char *a1, const char *a2, char a3)\n{\n  int result; // eax\n  char *v4; // rax\n  int v5; // [rsp+20h] [rbp-20h]\n  int v6; // [rsp+24h] [rbp-1Ch]\n  char *s; // [rsp+28h] [rbp-18h]\n  char *sa; // [rsp+28h] [rbp-18h]\n  size_t n; // [rsp+30h] [rbp-10h]\n  char *ptr; // [rsp+38h] [rbp-8h]\n\n  if ( (a3 & 8) != 0 )\n  {\n    if ( (a3 & 0x10) != 0 )\n    {\n      ptr = (char *)sub_40ECA1(a2);\n      s = ptr;\n      while ( 1 )\n      {\n        sa = strchr(s, 47);\n        if ( sa )\n          *sa = 0;\n        v6 = sub_40B517(a1, ptr);\n        if ( !sa || v6 <= 0 )\n          break;\n        v4 = sa;\n        s = sa + 1;\n        *v4 = 47;\n      }\n      free(ptr);\n      result = v6;\n    }\n    else\n    {\n      n = strlen(a1);\n      v5 = strncmp(a1, a2, n);\n      if ( !v5 )\n      {\n        v5 = a2[n];\n        if ( v5 == 47 )\n          v5 = 0;\n      }\n      result = v5;\n    }\n  }\n  else if ( (a3 & 0x10) != 0 )\n  {\n    result = sub_40B517(a1, a2);\n  }\n  else\n  {\n    result = strcmp(a1, a2);\n  }\n  return result;\n}\n"], [4215509, "sub_4052D5", "_BOOL8 __fastcall sub_4052D5(__int64 a1, _BYTE *a2, unsigned int a3)\n{\n  void *v3; // rax\n  bool v6; // [rsp+2Fh] [rbp-11h]\n  _BYTE *i; // [rsp+30h] [rbp-10h]\n  unsigned int (__fastcall *v8)(__int64, _BYTE *, _QWORD); // [rsp+38h] [rbp-8h]\n\n  if ( (a3 & 0x10000000) != 0 )\n    v3 = fnmatch;\n  else\n    v3 = sub_4051A1;\n  v8 = (unsigned int (__fastcall *)(__int64, _BYTE *, _QWORD))v3;\n  v6 = ((unsigned int (__fastcall *)(__int64, _BYTE *, _QWORD))v3)(a1, a2, a3) == 0;\n  if ( (a3 & 0x40000000) == 0 )\n  {\n    for ( i = a2; *i && !v6; ++i )\n    {\n      if ( *i == 47 && i[1] != 47 )\n        v6 = v8(a1, i + 1, a3) == 0;\n    }\n  }\n  return v6;\n}\n"], [4215697, "sub_405391", "_BOOL8 __fastcall sub_405391(__int64 a1, _BYTE *a2)\n{\n  bool v3; // [rsp+1Bh] [rbp-25h]\n  unsigned __int64 i; // [rsp+20h] [rbp-20h]\n  unsigned __int64 v5; // [rsp+28h] [rbp-18h]\n  __int64 v6; // [rsp+30h] [rbp-10h]\n\n  v5 = *(_QWORD *)(a1 + 32);\n  v6 = *(_QWORD *)(a1 + 16);\n  v3 = (*(_DWORD *)(v6 + 8) & 0x20000000) != 0;\n  for ( i = 0LL; i < v5; ++i )\n  {\n    if ( sub_4052D5(*(_QWORD *)(16 * i + v6), a2, *(_DWORD *)(16 * i + v6 + 8)) )\n      return !v3;\n  }\n  return v3;\n}\n"], [4215883, "sub_40544B", "_BOOL8 __fastcall sub_40544B(__int64 a1, char *a2, char *a3)\n{\n  int v6; // [rsp+2Ch] [rbp-14h]\n  __int64 v7; // [rsp+30h] [rbp-10h]\n  char *v8; // [rsp+38h] [rbp-8h]\n\n  v6 = *(_DWORD *)(a1 + 12);\n  v7 = *(_QWORD *)(a1 + 16);\n  do\n  {\n    strcpy(a3, a2);\n    while ( 1 )\n    {\n      if ( sub_408B18(v7, a3) )\n        return (v6 & 0x20000000) == 0;\n      if ( (v6 & 8) == 0 )\n        break;\n      v8 = strrchr(a3, 47);\n      if ( !v8 )\n        break;\n      *v8 = 0;\n    }\n    if ( (v6 & 0x40000000) != 0 )\n      break;\n    a2 = strchr(a2, 47);\n    if ( a2 )\n      ++a2;\n  }\n  while ( a2 );\n  return (v6 & 0x20000000) != 0;\n}\n"], [4216118, "sub_405536", "__int64 __fastcall sub_405536(__int64 *a1, char *a2)\n{\n  int v3; // eax\n  size_t v4; // rax\n  unsigned __int8 v5; // [rsp+1Eh] [rbp-12h]\n  unsigned __int8 v6; // [rsp+1Fh] [rbp-11h]\n  __int64 i; // [rsp+20h] [rbp-10h]\n  char *ptr; // [rsp+28h] [rbp-8h]\n\n  ptr = 0LL;\n  if ( !*a1 )\n    return 0LL;\n  v5 = (*(_DWORD *)(*a1 + 12) & 0x20000000) != 0;\n  for ( i = *a1; i; i = *(_QWORD *)i )\n  {\n    v3 = *(_DWORD *)(i + 8);\n    if ( v3 )\n    {\n      if ( v3 != 1 )\n        abort();\n      v6 = sub_405391(i, a2);\n    }\n    else\n    {\n      if ( !ptr )\n      {\n        v4 = strlen(a2);\n        ptr = (char *)sub_40EB4C(v4 + 1);\n      }\n      v6 = sub_40544B(i, a2, ptr);\n    }\n    if ( v6 != v5 )\n    {\n      v5 = v6;\n      break;\n    }\n  }\n  free(ptr);\n  return v5;\n}\n"], [4216369, "sub_405631", "void __fastcall sub_405631(__int64 a1, const char *a2, int a3)\n{\n  __int64 v3; // rsi\n  __int64 v4; // rax\n  _QWORD *v7; // [rsp+28h] [rbp-28h]\n  __int64 v8; // [rsp+28h] [rbp-28h]\n  __int64 *v9; // [rsp+30h] [rbp-20h]\n  _BYTE *ptr; // [rsp+40h] [rbp-10h]\n\n  if ( (a3 & 0x10000000) != 0 && (unsigned __int8)sub_404CF7(a2, a3) )\n  {\n    if ( *(_QWORD *)(a1 + 8)\n      && *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8LL) == 1\n      && ((a3 ^ *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12LL)) & 0x20000000) == 0 )\n    {\n      v7 = *(_QWORD **)(a1 + 8);\n    }\n    else\n    {\n      v7 = (_QWORD *)sub_40503C(a1, 1, a3);\n    }\n    v9 = v7 + 2;\n    if ( v7[4] == v7[3] )\n      *v9 = sub_40EA8D(v7[2], v7 + 3, 16LL);\n    v3 = *v9;\n    v4 = v7[4];\n    v7[4] = v4 + 1;\n    v4 *= 16LL;\n    *(_QWORD *)(v3 + v4) = a2;\n    *(_DWORD *)(v3 + v4 + 8) = a3;\n  }\n  else\n  {\n    if ( !*(_QWORD *)(a1 + 8)\n      || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8LL)\n      || ((a3 ^ *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12LL)) & 0x60000018) != 0 )\n    {\n      v8 = sub_40503C(a1, 0, a3);\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 8);\n    }\n    ptr = (_BYTE *)sub_40ECA1(a2);\n    if ( (a3 & 0x10000000) != 0 )\n      sub_404D95(ptr);\n    if ( (_BYTE *)sub_409DE7(*(_QWORD *)(v8 + 16), ptr) != ptr )\n      free(ptr);\n  }\n}\n"], [4216834, "sub_405802", "__int64 __fastcall sub_405802(void (__fastcall *a1)(__int64, _BYTE *, _QWORD), __int64 a2, __int64 a3, unsigned int a4, unsigned __int8 a5)\n{\n  bool v5; // al\n  __int64 result; // rax\n  __int64 v7; // rax\n  _BOOL4 v8; // eax\n  bool v11; // [rsp+27h] [rbp-49h]\n  int v12; // [rsp+28h] [rbp-48h]\n  int v13; // [rsp+2Ch] [rbp-44h]\n  __int64 v14; // [rsp+30h] [rbp-40h] BYREF\n  FILE *stream; // [rsp+38h] [rbp-38h]\n  _BYTE *v16; // [rsp+40h] [rbp-30h]\n  _BYTE *i; // [rsp+48h] [rbp-28h]\n  _BYTE *v18; // [rsp+50h] [rbp-20h]\n  __int64 v19; // [rsp+58h] [rbp-18h]\n  _BYTE *v20; // [rsp+60h] [rbp-10h]\n  unsigned __int64 v21; // [rsp+68h] [rbp-8h]\n\n  v5 = *(_BYTE *)a3 == 45 && !*(_BYTE *)(a3 + 1);\n  v11 = v5;\n  v16 = 0LL;\n  v14 = 0LL;\n  v19 = 0LL;\n  v12 = 0;\n  if ( v5 )\n  {\n    stream = stdin;\n  }\n  else\n  {\n    stream = fopen((const char *)a3, \"r\");\n    if ( !stream )\n      return 0xFFFFFFFFLL;\n  }\n  while ( 1 )\n  {\n    v13 = getc_unlocked(stream);\n    if ( v13 == -1 )\n      break;\n    if ( v19 == v14 )\n      v16 = (_BYTE *)sub_40EBE2(v16, &v14);\n    v7 = v19++;\n    v16[v7] = v13;\n  }\n  if ( ferror_unlocked(stream) )\n    v12 = *__errno_location();\n  if ( !v11 && (unsigned int)sub_40F927(stream) )\n    v12 = *__errno_location();\n  v16 = (_BYTE *)sub_40EB81(v16, v19 + 1);\n  v16[v19] = a5;\n  v8 = v19 && v16[v19 - 1] != a5;\n  v21 = (unsigned __int64)&v16[v19 + v8];\n  v18 = v16;\n  for ( i = v16; (unsigned __int64)i < v21; ++i )\n  {\n    if ( *i == a5 )\n    {\n      v20 = i;\n      if ( ((*__ctype_b_loc())[a5] & 0x2000) != 0 )\n      {\n        while ( v20 != v18 )\n        {\n          if ( ((*__ctype_b_loc())[(unsigned __int8)*(v20 - 1)] & 0x2000) == 0 )\n            goto LABEL_29;\n          --v20;\n        }\n      }\n      else\n      {\nLABEL_29:\n        *v20 = 0;\n        a1(a2, v18, a4);\n      }\n      v18 = i + 1;\n    }\n  }\n  *__errno_location() = v12;\n  if ( v12 )\n    result = 0xFFFFFFFFLL;\n  else\n    result = 0LL;\n  return result;\n}\n"], [4217479, "sub_405A87", "__int64 __fastcall sub_405A87(FILE *a1, unsigned __int8 *a2, __int64 a3)\n{\n  int v3; // eax\n  __int64 result; // rax\n\n  while ( 1 )\n  {\n    result = a3--;\n    if ( !result )\n      break;\n    v3 = tolower(*a2);\n    fputc(v3, a1);\n    ++a2;\n  }\n  return result;\n}\n"], [4217556, "sub_405AD4", "__int64 __fastcall sub_405AD4(FILE *a1, unsigned __int8 *a2, __int64 a3)\n{\n  int v3; // eax\n  __int64 result; // rax\n\n  while ( 1 )\n  {\n    result = a3--;\n    if ( !result )\n      break;\n    v3 = toupper(*a2);\n    fputc(v3, a1);\n    ++a2;\n  }\n  return result;\n}\n"], [4217633, "sub_405B21", "__int64 __fastcall sub_405B21(int a1, int a2)\n{\n  return (unsigned int)(a1 - (a1 - a2 + 382) % 7 + 3);\n}\n"], [4217714, "sub_405B72", "__int64 __fastcall sub_405B72(unsigned __int8 a1, FILE *a2, char *a3, const struct tm *a4, unsigned int a5, unsigned int a6)\n{\n  __int64 result; // rax\n  int v7; // eax\n  int v8; // eax\n  char *v9; // rax\n  unsigned __int64 v10; // rax\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  _BOOL4 v13; // eax\n  char v14; // al\n  unsigned __int64 v15; // rax\n  int v16; // eax\n  unsigned __int64 v17; // rax\n  unsigned __int64 v18; // rax\n  unsigned __int64 v19; // rax\n  unsigned __int64 v20; // rax\n  unsigned __int64 v21; // rax\n  unsigned __int8 v22; // al\n  unsigned __int64 v23; // rax\n  int v24; // eax\n  _BOOL4 v25; // eax\n  _BOOL4 v26; // eax\n  int v27; // eax\n  int v28; // eax\n  int v29; // eax\n  unsigned __int64 v30; // rax\n  unsigned __int64 v31; // rax\n  bool v35; // [rsp+3Ah] [rbp-7D6h]\n  char v36; // [rsp+3Bh] [rbp-7D5h]\n  char v37; // [rsp+3Ch] [rbp-7D4h]\n  unsigned __int8 v38; // [rsp+3Dh] [rbp-7D3h]\n  char v39; // [rsp+3Eh] [rbp-7D2h]\n  char v40; // [rsp+3Fh] [rbp-7D1h]\n  int v41; // [rsp+40h] [rbp-7D0h]\n  int v42; // [rsp+44h] [rbp-7CCh]\n  int v43; // [rsp+48h] [rbp-7C8h]\n  int v44; // [rsp+4Ch] [rbp-7C4h]\n  int v45; // [rsp+50h] [rbp-7C0h]\n  unsigned int v46; // [rsp+54h] [rbp-7BCh]\n  int v47; // [rsp+58h] [rbp-7B8h]\n  int v48; // [rsp+5Ch] [rbp-7B4h]\n  int v49; // [rsp+60h] [rbp-7B0h]\n  int ll; // [rsp+64h] [rbp-7ACh]\n  int v51; // [rsp+68h] [rbp-7A8h]\n  int v52; // [rsp+6Ch] [rbp-7A4h]\n  int v53; // [rsp+70h] [rbp-7A0h]\n  int ii; // [rsp+74h] [rbp-79Ch]\n  int v55; // [rsp+78h] [rbp-798h]\n  int v56; // [rsp+7Ch] [rbp-794h]\n  int v57; // [rsp+80h] [rbp-790h]\n  int v58; // [rsp+84h] [rbp-78Ch]\n  int v59; // [rsp+88h] [rbp-788h]\n  int v60; // [rsp+8Ch] [rbp-784h]\n  int v61; // [rsp+90h] [rbp-780h]\n  int v62; // [rsp+94h] [rbp-77Ch]\n  int v63; // [rsp+98h] [rbp-778h]\n  int v64; // [rsp+9Ch] [rbp-774h]\n  char *v65; // [rsp+A0h] [rbp-770h]\n  __int64 v66; // [rsp+A8h] [rbp-768h]\n  const char *v68; // [rsp+B8h] [rbp-758h]\n  unsigned __int8 *ptr; // [rsp+C0h] [rbp-750h]\n  __int64 i5; // [rsp+C8h] [rbp-748h]\n  unsigned __int64 i1; // [rsp+E0h] [rbp-730h]\n  unsigned __int64 i2; // [rsp+E8h] [rbp-728h]\n  unsigned __int64 mm; // [rsp+F0h] [rbp-720h]\n  unsigned __int64 nn; // [rsp+F8h] [rbp-718h]\n  char *v75; // [rsp+100h] [rbp-710h]\n  unsigned __int64 i3; // [rsp+108h] [rbp-708h]\n  unsigned __int64 i4; // [rsp+110h] [rbp-700h]\n  unsigned __int64 i6; // [rsp+120h] [rbp-6F0h]\n  unsigned __int64 i14; // [rsp+128h] [rbp-6E8h]\n  unsigned __int64 i15; // [rsp+138h] [rbp-6D8h]\n  unsigned __int64 i11; // [rsp+140h] [rbp-6D0h]\n  unsigned __int64 i12; // [rsp+148h] [rbp-6C8h]\n  unsigned __int64 i13; // [rsp+150h] [rbp-6C0h]\n  unsigned __int64 i9; // [rsp+158h] [rbp-6B8h]\n  unsigned __int64 i10; // [rsp+160h] [rbp-6B0h]\n  unsigned __int64 i7; // [rsp+168h] [rbp-6A8h]\n  unsigned __int64 i8; // [rsp+170h] [rbp-6A0h]\n  unsigned __int64 k; // [rsp+178h] [rbp-698h]\n  unsigned __int64 l; // [rsp+180h] [rbp-690h]\n  time_t v90; // [rsp+188h] [rbp-688h]\n  unsigned __int64 i; // [rsp+190h] [rbp-680h]\n  unsigned __int64 j; // [rsp+198h] [rbp-678h]\n  unsigned __int64 m; // [rsp+1A0h] [rbp-670h]\n  unsigned __int64 n; // [rsp+1A8h] [rbp-668h]\n  unsigned __int64 jj; // [rsp+1B0h] [rbp-660h]\n  unsigned __int64 kk; // [rsp+1B8h] [rbp-658h]\n  unsigned __int64 v97; // [rsp+1F8h] [rbp-618h]\n  unsigned __int64 v98; // [rsp+200h] [rbp-610h]\n  unsigned __int64 v99; // [rsp+208h] [rbp-608h]\n  unsigned __int64 v100; // [rsp+218h] [rbp-5F8h]\n  unsigned __int64 v101; // [rsp+220h] [rbp-5F0h]\n  unsigned __int64 v102; // [rsp+228h] [rbp-5E8h]\n  unsigned __int64 v103; // [rsp+238h] [rbp-5D8h]\n  unsigned __int64 v104; // [rsp+240h] [rbp-5D0h]\n  unsigned __int64 v105; // [rsp+248h] [rbp-5C8h]\n  unsigned __int64 v106; // [rsp+250h] [rbp-5C0h]\n  unsigned __int64 v107; // [rsp+260h] [rbp-5B0h]\n  unsigned __int64 v108; // [rsp+268h] [rbp-5A8h]\n  unsigned __int64 v109; // [rsp+270h] [rbp-5A0h]\n  unsigned __int64 v110; // [rsp+278h] [rbp-598h]\n  unsigned __int64 v111; // [rsp+280h] [rbp-590h]\n  unsigned __int64 v112; // [rsp+288h] [rbp-588h]\n  unsigned __int64 v113; // [rsp+290h] [rbp-580h]\n  unsigned __int64 v114; // [rsp+2A8h] [rbp-568h]\n  unsigned __int64 v115; // [rsp+2B0h] [rbp-560h]\n  unsigned __int64 v116; // [rsp+2C8h] [rbp-548h]\n  unsigned __int64 v117; // [rsp+2D0h] [rbp-540h]\n  unsigned __int64 v118; // [rsp+2E8h] [rbp-528h]\n  unsigned __int64 v119; // [rsp+2F0h] [rbp-520h]\n  unsigned __int64 v120; // [rsp+2F8h] [rbp-518h]\n  unsigned __int64 v121; // [rsp+308h] [rbp-508h]\n  unsigned __int64 v122; // [rsp+310h] [rbp-500h]\n  unsigned __int64 v123; // [rsp+318h] [rbp-4F8h]\n  _BYTE *v124; // [rsp+320h] [rbp-4F0h]\n  unsigned __int64 v125; // [rsp+328h] [rbp-4E8h]\n  unsigned __int64 v126; // [rsp+330h] [rbp-4E0h]\n  unsigned __int64 v127; // [rsp+338h] [rbp-4D8h]\n  size_t v128; // [rsp+348h] [rbp-4C8h]\n  unsigned __int64 size; // [rsp+350h] [rbp-4C0h]\n  unsigned __int64 v130; // [rsp+358h] [rbp-4B8h]\n  unsigned __int64 v131; // [rsp+360h] [rbp-4B0h]\n  unsigned __int64 v132; // [rsp+368h] [rbp-4A8h]\n  unsigned __int64 v133; // [rsp+380h] [rbp-490h]\n  unsigned __int64 v134; // [rsp+388h] [rbp-488h]\n  unsigned __int64 v135; // [rsp+390h] [rbp-480h]\n  struct tm v136; // [rsp+3A0h] [rbp-470h] BYREF\n  char format[2]; // [rsp+3E0h] [rbp-430h] BYREF\n  char v138; // [rsp+3E2h] [rbp-42Eh] BYREF\n  _BYTE v139[5]; // [rsp+3E3h] [rbp-42Dh] BYREF\n  char s; // [rsp+3F0h] [rbp-420h] BYREF\n  unsigned __int8 v141[22]; // [rsp+3F1h] [rbp-41Fh] BYREF\n  _BYTE v142[1033]; // [rsp+407h] [rbp-409h] BYREF\n  __int64 savedregs; // [rsp+810h] [rbp+0h] BYREF\n\n  *(_QWORD *)&v142[1009] = __readfsqword(0x28u);\n  v41 = a4->tm_hour;\n  v66 = 0LL;\n  v65 = (char *)a4->tm_zone;\n  if ( v41 <= 12 )\n  {\n    if ( !v41 )\n      v41 = 12;\n  }\n  else\n  {\n    v41 -= 12;\n  }\n  while ( 2 )\n  {\n    if ( !*a3 )\n      return v66;\n    v42 = 0;\n    v44 = 0;\n    v48 = -1;\n    v37 = 0;\n    v38 = a1;\n    v39 = 0;\n    if ( *a3 != 37 )\n    {\n      if ( (unsigned __int64)(-1 - v66) <= 1 )\n        return 0LL;\n      if ( a2 )\n        fputc(*a3, a2);\n      ++v66;\n      goto LABEL_521;\n    }\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v7 = *++a3;\n        if ( v7 == 48 )\n          goto LABEL_19;\n        if ( v7 > 48 )\n          break;\n        if ( v7 == 35 )\n        {\n          v39 = 1;\n        }\n        else\n        {\n          if ( v7 != 45 )\n            goto LABEL_22;\nLABEL_19:\n          v42 = *a3;\n        }\n      }\n      if ( v7 != 94 )\n        break;\n      v38 = 1;\n    }\n    if ( v7 == 95 )\n      goto LABEL_19;\nLABEL_22:\n    if ( (unsigned int)(*a3 - 48) <= 9 )\n    {\n      v48 = 0;\n      do\n      {\n        if ( v48 > 214748364 || v48 == 214748364 && *a3 - 48 > 7 )\n          v48 = 0x7FFFFFFF;\n        else\n          v48 = *a3 - 48 + 10 * v48;\n        ++a3;\n      }\n      while ( (unsigned int)(*a3 - 48) <= 9 );\n    }\n    v8 = *a3;\n    if ( v8 == 69 || v8 == 79 )\n    {\n      v9 = a3++;\n      v43 = *v9;\n    }\n    else\n    {\n      v43 = 0;\n    }\n    v49 = *a3;\n    if ( v49 == 89 )\n    {\n      if ( v43 == 69 )\n        goto LABEL_160;\n      if ( v43 == 79 )\n        goto LABEL_498;\n      v44 = 4;\n      v35 = a4->tm_year < -1900;\n      v46 = a4->tm_year + 1900;\n      goto LABEL_207;\n    }\n    if ( v49 > 89 )\n    {\n      if ( v49 == 108 )\n      {\n        if ( v43 == 69 )\n          goto LABEL_498;\n        v44 = 2;\n        v45 = v41;\n      }\n      else\n      {\n        if ( v49 > 108 )\n        {\n          if ( v49 == 116 )\n          {\n            LODWORD(v23) = 0;\n            if ( v48 >= 0 )\n              LODWORD(v23) = v48;\n            v107 = (int)v23;\n            v23 = (int)v23;\n            if ( (unsigned __int64)(int)v23 <= 1 )\n              v23 = 1LL;\n            v108 = v23;\n            if ( -1 - v66 > v23 )\n            {\n              if ( a2 )\n              {\n                if ( v107 > 1 )\n                {\n                  v109 = v48 - 1LL;\n                  if ( v42 == 48 )\n                  {\n                    for ( i = 0LL; i < v109; ++i )\n                      fputc(48, a2);\n                  }\n                  else\n                  {\n                    for ( j = 0LL; j < v109; ++j )\n                      fputc(32, a2);\n                  }\n                }\n                fputc(9, a2);\n              }\n              v66 += v108;\n              goto LABEL_521;\n            }\n            return 0LL;\n          }\n          if ( v49 > 116 )\n          {\n            if ( v49 == 120 )\n            {\n              if ( v43 == 79 )\n                goto LABEL_498;\n              goto LABEL_160;\n            }\n            if ( v49 > 120 )\n            {\n              if ( v49 != 121 )\n              {\n                if ( v49 != 122 )\n                  goto LABEL_498;\n                i5 = 0LL;\n                goto LABEL_485;\n              }\n              if ( v43 == 69 )\n                goto LABEL_160;\n              v53 = a4->tm_year % 100;\n              if ( v53 < 0 )\n              {\n                if ( a4->tm_year >= -1900 )\n                  v29 = v53 + 100;\n                else\n                  v29 = -v53;\n                v53 = v29;\n              }\n              v44 = 2;\n              v45 = v53;\n            }\n            else if ( v49 == 117 )\n            {\n              v44 = 1;\n              v45 = (a4->tm_wday + 6) % 7 + 1;\n            }\n            else\n            {\n              if ( v49 != 119 || v43 == 69 )\n                goto LABEL_498;\n              v44 = 1;\n              v45 = a4->tm_wday;\n            }\n            goto LABEL_206;\n          }\n          if ( v49 != 112 )\n          {\n            if ( v49 > 112 )\n            {\n              if ( v49 == 114 )\n                goto LABEL_160;\n              if ( v49 != 115 )\n                goto LABEL_498;\n              v136 = *a4;\n              v90 = mktime(&v136);\n              ptr = v142;\n              v35 = v90 < 0;\n              do\n              {\n                v56 = (int)v90 % 10;\n                v90 /= 10LL;\n                --ptr;\n                if ( v35 )\n                  v22 = 48 - v56;\n                else\n                  v22 = v56 + 48;\n                *ptr = v22;\n              }\n              while ( v90 );\n              v44 = 1;\n              v36 = 0;\n              goto LABEL_216;\n            }\n            if ( v49 != 109 )\n            {\n              if ( v49 != 110 )\n                goto LABEL_498;\n              LODWORD(v21) = 0;\n              if ( v48 >= 0 )\n                LODWORD(v21) = v48;\n              v100 = (int)v21;\n              v21 = (int)v21;\n              if ( (unsigned __int64)(int)v21 <= 1 )\n                v21 = 1LL;\n              v101 = v21;\n              if ( -1 - v66 > v21 )\n              {\n                if ( a2 )\n                {\n                  if ( v100 > 1 )\n                  {\n                    v102 = v48 - 1LL;\n                    if ( v42 == 48 )\n                    {\n                      for ( k = 0LL; k < v102; ++k )\n                        fputc(48, a2);\n                    }\n                    else\n                    {\n                      for ( l = 0LL; l < v102; ++l )\n                        fputc(32, a2);\n                    }\n                  }\n                  fputc(10, a2);\n                }\n                v66 += v101;\n                goto LABEL_521;\n              }\n              return 0LL;\n            }\n            if ( v43 == 69 )\n              goto LABEL_498;\n            v44 = 2;\n            v35 = a4->tm_mon < -1;\n            v46 = a4->tm_mon + 1;\n            goto LABEL_207;\n          }\n          goto LABEL_375;\n        }\n        if ( v49 == 100 )\n        {\n          if ( v43 == 69 )\n            goto LABEL_498;\n          v44 = 2;\n          v45 = a4->tm_mday;\n          goto LABEL_206;\n        }\n        if ( v49 <= 100 )\n        {\n          if ( v49 == 97 )\n          {\n            if ( v43 )\n              goto LABEL_498;\n            if ( v39 )\n            {\n              v38 = 1;\n              v37 = 0;\n            }\n            goto LABEL_160;\n          }\n          if ( v49 <= 97 )\n          {\n            if ( v49 != 90 )\n              goto LABEL_498;\n            if ( v39 )\n            {\n              v38 = 0;\n              v37 = 1;\n            }\n            if ( !v65 )\n              v65 = (char *)&unk_4173D4;\n            v110 = strlen(v65);\n            LODWORD(v30) = 0;\n            if ( v48 >= 0 )\n              LODWORD(v30) = v48;\n            v111 = (int)v30;\n            v30 = (int)v30;\n            if ( v110 >= (int)v30 )\n              v30 = v110;\n            v112 = v30;\n            if ( -1 - v66 > v30 )\n            {\n              if ( a2 )\n              {\n                if ( v110 < v111 )\n                {\n                  v113 = v48 - v110;\n                  if ( v42 == 48 )\n                  {\n                    for ( m = 0LL; m < v113; ++m )\n                      fputc(48, a2);\n                  }\n                  else\n                  {\n                    for ( n = 0LL; n < v113; ++n )\n                      fputc(32, a2);\n                  }\n                }\n                if ( v37 )\n                {\n                  sub_405A87(a2, (unsigned __int8 *)v65, v110);\n                }\n                else if ( v38 )\n                {\n                  sub_405AD4(a2, (unsigned __int8 *)v65, v110);\n                }\n                else\n                {\n                  fwrite(v65, v110, 1uLL, a2);\n                }\n              }\n              v66 += v112;\n              goto LABEL_521;\n            }\n            return 0LL;\n          }\n          if ( v49 != 98 )\n          {\n            if ( v43 == 79 )\n              goto LABEL_498;\n            goto LABEL_160;\n          }\nLABEL_132:\n          if ( v39 )\n          {\n            v38 = 1;\n            v37 = 0;\n          }\n          if ( !v43 )\n            goto LABEL_160;\nLABEL_498:\n          for ( ii = 1; a3[1 - ii] != 37; ++ii )\n            ;\n          LODWORD(v31) = 0;\n          if ( v48 >= 0 )\n            LODWORD(v31) = v48;\n          v133 = (int)v31;\n          v31 = (int)v31;\n          if ( ii >= (unsigned __int64)(int)v31 )\n            v31 = ii;\n          v134 = v31;\n          if ( -1 - v66 > v31 )\n          {\n            if ( a2 )\n            {\n              if ( ii < v133 )\n              {\n                v135 = v48 - (__int64)ii;\n                if ( v42 == 48 )\n                {\n                  for ( jj = 0LL; jj < v135; ++jj )\n                    fputc(48, a2);\n                }\n                else\n                {\n                  for ( kk = 0LL; kk < v135; ++kk )\n                    fputc(32, a2);\n                }\n              }\n              if ( v38 )\n                sub_405AD4(a2, (unsigned __int8 *)&a3[1 - ii], ii);\n              else\n                fwrite(&a3[1 - ii], ii, 1uLL, a2);\n            }\n            v66 += v134;\n            goto LABEL_521;\n          }\n          return 0LL;\n        }\n        if ( v49 == 104 )\n          goto LABEL_132;\n        if ( v49 > 104 )\n        {\n          if ( v49 == 106 )\n          {\n            if ( v43 == 69 )\n              goto LABEL_498;\n            v44 = 3;\n            v35 = a4->tm_yday < -1;\n            v46 = a4->tm_yday + 1;\n            goto LABEL_207;\n          }\n          if ( v49 != 107 || v43 == 69 )\n            goto LABEL_498;\n          v44 = 2;\n          v45 = a4->tm_hour;\n        }\n        else\n        {\n          if ( v49 != 101 )\n          {\n            if ( v49 != 103 )\n              goto LABEL_498;\n            goto LABEL_411;\n          }\n          if ( v43 == 69 )\n            goto LABEL_498;\n          v44 = 2;\n          v45 = a4->tm_mday;\n        }\n      }\n      if ( v42 != 48 && v42 != 45 )\n        v42 = 95;\n      goto LABEL_206;\n    }\n    if ( v49 == 73 )\n    {\n      if ( v43 == 69 )\n        goto LABEL_498;\n      v44 = 2;\n      v45 = v41;\n      goto LABEL_206;\n    }\n    if ( v49 > 73 )\n    {\n      if ( v49 == 83 )\n      {\n        if ( v43 == 69 )\n          goto LABEL_498;\n        v44 = 2;\n        v45 = a4->tm_sec;\n      }\n      else if ( v49 > 83 )\n      {\n        if ( v49 == 86 )\n          goto LABEL_411;\n        if ( v49 > 86 )\n        {\n          if ( v49 != 87 )\n          {\n            if ( v43 == 79 )\n              goto LABEL_498;\n            goto LABEL_160;\n          }\n          if ( v43 == 69 )\n            goto LABEL_498;\n          v44 = 2;\n          v45 = (a4->tm_yday - (a4->tm_wday + 6) % 7 + 7) / 7;\n          goto LABEL_206;\n        }\n        if ( v49 == 84 )\n        {\n          v68 = \"%H:%M:%S\";\n          v11 = sub_405B72(v38, 0LL, \"%H:%M:%S\", a4, a5, a6);\n          goto LABEL_142;\n        }\n        if ( v43 == 69 )\n          goto LABEL_498;\n        v44 = 2;\n        v45 = (a4->tm_yday - a4->tm_wday + 7) / 7;\n      }\n      else\n      {\n        if ( v49 != 78 )\n        {\n          if ( v49 <= 78 )\n          {\n            if ( v49 != 77 || v43 == 69 )\n              goto LABEL_498;\n            v44 = 2;\n            v45 = a4->tm_min;\n            goto LABEL_206;\n          }\n          if ( v49 != 80 )\n          {\n            if ( v49 != 82 )\n              goto LABEL_498;\n            v68 = \"%H:%M\";\n            v11 = sub_405B72(v38, 0LL, \"%H:%M\", a4, a5, a6);\n            goto LABEL_142;\n          }\n          v37 = 1;\n          LOBYTE(v49) = 112;\nLABEL_375:\n          if ( v39 )\n          {\n            v38 = 0;\n            v37 = 1;\n          }\n          goto LABEL_160;\n        }\n        if ( v43 == 69 )\n          goto LABEL_498;\n        v45 = a6;\n        if ( v48 == -1 )\n        {\n          v48 = 9;\n        }\n        else\n        {\n          for ( ll = v48; ll <= 8; ++ll )\n            v45 /= 10;\n        }\n        v44 = v48;\n      }\nLABEL_206:\n      v35 = v45 < 0;\n      v46 = v45;\n      goto LABEL_207;\n    }\n    if ( v49 == 66 )\n    {\n      if ( v43 )\n        goto LABEL_498;\n      if ( v39 )\n      {\n        v38 = 1;\n        v37 = 0;\n      }\n      goto LABEL_160;\n    }\n    if ( v49 > 66 )\n    {\n      if ( v49 != 70 )\n      {\n        if ( v49 <= 70 )\n        {\n          if ( v49 != 67 )\n          {\n            if ( v49 != 68 || v43 )\n              goto LABEL_498;\n            v68 = \"%m/%d/%y\";\n            v11 = sub_405B72(v38, 0LL, \"%m/%d/%y\", a4, a5, a6);\n            goto LABEL_142;\n          }\n          if ( v43 == 79 )\n            goto LABEL_498;\n          if ( v43 == 69 )\n            goto LABEL_160;\n          v55 = a4->tm_year / 100 + 19;\n          v13 = a4->tm_year % 100 < 0 && v55 > 0;\n          v44 = 2;\n          v35 = a4->tm_year < -1900;\n          v46 = v55 - v13;\nLABEL_207:\n          v36 = 0;\n          v47 = 0;\n          goto LABEL_208;\n        }\n        if ( v49 != 71 )\n        {\n          if ( v43 == 69 )\n            goto LABEL_498;\n          v44 = 2;\n          v45 = a4->tm_hour;\n          goto LABEL_206;\n        }\nLABEL_411:\n        if ( v43 == 69 )\n          goto LABEL_498;\n        if ( a4->tm_year >= 0 )\n          v24 = -100;\n        else\n          v24 = 300;\n        v57 = a4->tm_year + v24;\n        v51 = 0;\n        v52 = sub_405B21(a4->tm_yday, a4->tm_wday);\n        if ( v52 >= 0 )\n        {\n          v26 = (v57 & 3) == 0 && (v57 % 100 || !(v57 % 400));\n          v58 = sub_405B21(a4->tm_yday + -365 - v26, a4->tm_wday);\n          if ( v58 >= 0 )\n          {\n            v51 = 1;\n            v52 = v58;\n          }\n        }\n        else\n        {\n          v51 = -1;\n          v25 = (((_BYTE)v57 - 1) & 3) == 0 && ((v57 - 1) % 100 || !((v57 - 1) % 400));\n          v52 = sub_405B21(a4->tm_yday + v25 + 365, a4->tm_wday);\n        }\n        v27 = *a3;\n        if ( v27 == 71 )\n        {\n          v44 = 4;\n          v35 = a4->tm_year < -1900 - v51;\n          v46 = a4->tm_year + v51 + 1900;\n          goto LABEL_207;\n        }\n        if ( v27 == 103 )\n        {\n          v59 = (a4->tm_year % 100 + v51) % 100;\n          v44 = 2;\n          if ( v59 >= 0 )\n          {\n            v28 = (a4->tm_year % 100 + v51) % 100;\n          }\n          else if ( a4->tm_year >= -1900 - v51 )\n          {\n            v28 = v59 + 100;\n          }\n          else\n          {\n            v28 = -v59;\n          }\n          v45 = v28;\n        }\n        else\n        {\n          v44 = 2;\n          v45 = v52 / 7 + 1;\n        }\n        goto LABEL_206;\n      }\n      if ( v43 )\n        goto LABEL_498;\n      v68 = \"%Y-%m-%d\";\n      v11 = sub_405B72(v38, 0LL, \"%Y-%m-%d\", a4, a5, a6);\nLABEL_142:\n      v103 = v11;\n      LODWORD(v11) = 0;\n      if ( v48 >= 0 )\n        LODWORD(v11) = v48;\n      v104 = (int)v11;\n      v11 = (int)v11;\n      if ( v103 >= (int)v11 )\n        v11 = v103;\n      v105 = v11;\n      if ( -1 - v66 <= v11 )\n        return 0LL;\n      if ( a2 )\n      {\n        if ( v103 < v104 )\n        {\n          v106 = v48 - v103;\n          if ( v42 == 48 )\n          {\n            for ( mm = 0LL; mm < v106; ++mm )\n              fputc(48, a2);\n          }\n          else\n          {\n            for ( nn = 0LL; nn < v106; ++nn )\n              fputc(32, a2);\n          }\n        }\n        sub_405B72(v38, a2, v68, a4, a5, a6);\n      }\n      v66 += v105;\n      goto LABEL_521;\n    }\n    if ( v49 == 37 )\n    {\n      if ( v43 )\n        goto LABEL_498;\n      LODWORD(v10) = 0;\n      if ( v48 >= 0 )\n        LODWORD(v10) = v48;\n      v97 = (int)v10;\n      v10 = (int)v10;\n      if ( (unsigned __int64)(int)v10 <= 1 )\n        v10 = 1LL;\n      v98 = v10;\n      if ( -1 - v66 <= v10 )\n        return 0LL;\n      if ( a2 )\n      {\n        if ( v97 > 1 )\n        {\n          v99 = v48 - 1LL;\n          if ( v42 == 48 )\n          {\n            for ( i1 = 0LL; i1 < v99; ++i1 )\n              fputc(48, a2);\n          }\n          else\n          {\n            for ( i2 = 0LL; i2 < v99; ++i2 )\n              fputc(32, a2);\n          }\n        }\n        fputc(*a3, a2);\n      }\n      v66 += v98;\n      goto LABEL_521;\n    }\n    if ( v49 <= 37 )\n    {\n      if ( !*a3 )\n        --a3;\n      goto LABEL_498;\n    }\n    if ( v49 != 58 )\n    {\n      if ( v49 != 65 || v43 )\n        goto LABEL_498;\n      if ( v39 )\n      {\n        v38 = 1;\n        v37 = 0;\n      }\nLABEL_160:\n      format[0] = 32;\n      v75 = &v138;\n      format[1] = 37;\n      if ( v43 )\n      {\n        v75 = v139;\n        v138 = v43;\n      }\n      *v75 = v49;\n      v75[1] = 0;\n      v128 = strftime(&s, 0x400uLL, format, a4);\n      if ( v128 )\n      {\n        size = v128 - 1;\n        LODWORD(v12) = 0;\n        if ( v48 >= 0 )\n          LODWORD(v12) = v48;\n        v130 = (int)v12;\n        v12 = (int)v12;\n        if ( size >= (int)v12 )\n          v12 = v128 - 1;\n        v131 = v12;\n        if ( -1 - v66 <= v12 )\n          return 0LL;\n        if ( a2 )\n        {\n          if ( !v44 && size < v130 )\n          {\n            v132 = v48 - size;\n            if ( v42 == 48 )\n            {\n              for ( i3 = 0LL; i3 < v132; ++i3 )\n                fputc(48, a2);\n            }\n            else\n            {\n              for ( i4 = 0LL; i4 < v132; ++i4 )\n                fputc(32, a2);\n            }\n          }\n          if ( v37 )\n          {\n            sub_405A87(a2, v141, size);\n          }\n          else if ( v38 )\n          {\n            sub_405AD4(a2, v141, size);\n          }\n          else\n          {\n            fwrite(v141, size, 1uLL, a2);\n          }\n        }\n        v66 += v131;\n      }\nLABEL_521:\n      ++a3;\n      continue;\n    }\n    break;\n  }\n  for ( i5 = 1LL; a3[i5] == 58; ++i5 )\n    ;\n  if ( a3[i5] != 122 )\n    goto LABEL_498;\n  a3 += i5;\nLABEL_485:\n  if ( a4->tm_isdst < 0 )\n    goto LABEL_521;\n  v60 = a4->tm_gmtoff;\n  v61 = v60 / 3600;\n  v62 = v60 / 60 % 60;\n  v63 = v60 % 60;\n  switch ( i5 )\n  {\n    case 1LL:\n      goto LABEL_492;\n    case 0LL:\n      v44 = 5;\n      v35 = v60 < 0;\n      v47 = 0;\n      v46 = 100 * v61 + v62;\n      goto LABEL_202;\n    case 2LL:\n      goto LABEL_493;\n  }\n  if ( i5 != 3 )\n    goto LABEL_498;\n  if ( v63 )\n  {\nLABEL_493:\n    v44 = 9;\n    v35 = v60 < 0;\n    v47 = 20;\n    v46 = 100 * v62 + 10000 * v61 + v63;\n    goto LABEL_202;\n  }\n  if ( v62 )\n  {\nLABEL_492:\n    v44 = 6;\n    v35 = v60 < 0;\n    v47 = 4;\n    v46 = 100 * v61 + v62;\n    goto LABEL_202;\n  }\n  v44 = 3;\n  v35 = v60 < 0;\n  v47 = 0;\n  v46 = v60 / 3600;\nLABEL_202:\n  v36 = 1;\nLABEL_208:\n  if ( v43 == 79 && !v35 )\n    goto LABEL_160;\n  ptr = v142;\n  if ( v35 )\n    v46 = -v46;\n  do\n  {\n    if ( (v47 & 1) != 0 )\n      *--ptr = 58;\n    v47 >>= 1;\n    *--ptr = v46 % 0xA + 48;\n    v46 /= 0xAu;\n  }\n  while ( v46 || v47 );\nLABEL_216:\n  if ( v44 < v48 )\n    v44 = v48;\n  if ( v35 )\n  {\n    v14 = 45;\n  }\n  else if ( v36 )\n  {\n    v14 = 43;\n  }\n  else\n  {\n    v14 = 0;\n  }\n  v40 = v14;\n  if ( v42 == 45 )\n  {\n    if ( v14 )\n    {\n      LODWORD(v15) = 0;\n      if ( v48 >= 0 )\n        LODWORD(v15) = v48;\n      v114 = (int)v15;\n      v15 = (int)v15;\n      if ( (unsigned __int64)(int)v15 <= 1 )\n        v15 = 1LL;\n      v115 = v15;\n      if ( -1 - v66 <= v15 )\n        return 0LL;\n      if ( a2 )\n      {\n        if ( !v44 && v114 > 1 )\n        {\n          for ( i6 = 0LL; i6 < v48 - 1LL; ++i6 )\n            fputc(32, a2);\n        }\n        fputc(v40, a2);\n      }\n      v66 += v115;\n    }\nLABEL_312:\n    v124 = (_BYTE *)(v142 - ptr);\n    LODWORD(v20) = 0;\n    if ( v48 >= 0 )\n      LODWORD(v20) = v48;\n    v125 = (int)v20;\n    v20 = (int)v20;\n    if ( (unsigned __int64)v124 >= (int)v20 )\n      v20 = v142 - ptr;\n    v126 = v20;\n    if ( -1 - v66 > v20 )\n    {\n      if ( a2 )\n      {\n        if ( !v44 && (unsigned __int64)v124 < v125 )\n        {\n          v127 = v48 - (_QWORD)v124;\n          if ( v42 == 48 )\n          {\n            for ( i7 = 0LL; i7 < v127; ++i7 )\n              fputc(48, a2);\n          }\n          else\n          {\n            for ( i8 = 0LL; i8 < v127; ++i8 )\n              fputc(32, a2);\n          }\n        }\n        if ( v38 )\n          sub_405AD4(a2, ptr, (__int64)v124);\n        else\n          fwrite(ptr, (size_t)v124, 1uLL, a2);\n      }\n      v66 += v126;\n      goto LABEL_521;\n    }\n    result = 0LL;\n  }\n  else\n  {\n    v64 = v44 + (_DWORD)ptr - ((unsigned int)&savedregs - 1056 + 23) - (v14 != 0);\n    if ( v64 <= 0 )\n    {\n      if ( !v14 )\n        goto LABEL_312;\n      LODWORD(v19) = 0;\n      if ( v48 >= 0 )\n        LODWORD(v19) = v48;\n      v121 = (int)v19;\n      v19 = (int)v19;\n      if ( (unsigned __int64)(int)v19 <= 1 )\n        v19 = 1LL;\n      v122 = v19;\n      if ( -1 - v66 > v19 )\n      {\n        if ( a2 )\n        {\n          if ( !v44 && v121 > 1 )\n          {\n            v123 = v48 - 1LL;\n            if ( v42 == 48 )\n            {\n              for ( i9 = 0LL; i9 < v123; ++i9 )\n                fputc(48, a2);\n            }\n            else\n            {\n              for ( i10 = 0LL; i10 < v123; ++i10 )\n                fputc(32, a2);\n            }\n          }\n          fputc(v40, a2);\n        }\n        v66 += v122;\n        goto LABEL_312;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      if ( v42 != 95 )\n      {\n        if ( v44 >= (unsigned __int64)(-1 - v66) )\n          return 0LL;\n        if ( v14 )\n        {\n          LODWORD(v18) = 0;\n          if ( v48 >= 0 )\n            LODWORD(v18) = v48;\n          v118 = (int)v18;\n          v18 = (int)v18;\n          if ( (unsigned __int64)(int)v18 <= 1 )\n            v18 = 1LL;\n          v119 = v18;\n          if ( -1 - v66 <= v18 )\n            return 0LL;\n          if ( a2 )\n          {\n            if ( !v44 && v118 > 1 )\n            {\n              v120 = v48 - 1LL;\n              if ( v42 == 48 )\n              {\n                for ( i11 = 0LL; i11 < v120; ++i11 )\n                  fputc(48, a2);\n              }\n              else\n              {\n                for ( i12 = 0LL; i12 < v120; ++i12 )\n                  fputc(32, a2);\n              }\n            }\n            fputc(v40, a2);\n          }\n          v66 += v119;\n        }\n        if ( a2 )\n        {\n          for ( i13 = 0LL; v64 > i13; ++i13 )\n            fputc(48, a2);\n        }\n        v66 += v64;\n        v48 = 0;\n        goto LABEL_312;\n      }\n      if ( v64 < (unsigned __int64)(-1 - v66) )\n      {\n        if ( a2 )\n        {\n          for ( i14 = 0LL; v64 > i14; ++i14 )\n            fputc(32, a2);\n        }\n        v66 += v64;\n        if ( v48 <= v64 )\n          v16 = 0;\n        else\n          v16 = v48 - v64;\n        v48 = v16;\n        if ( !v40 )\n          goto LABEL_312;\n        LODWORD(v17) = 0;\n        if ( v48 >= 0 )\n          LODWORD(v17) = v48;\n        v116 = (int)v17;\n        v17 = (int)v17;\n        if ( (unsigned __int64)(int)v17 <= 1 )\n          v17 = 1LL;\n        v117 = v17;\n        if ( -1 - v66 > v17 )\n        {\n          if ( a2 )\n          {\n            if ( !v44 && v116 > 1 )\n            {\n              for ( i15 = 0LL; i15 < v48 - 1LL; ++i15 )\n                fputc(32, a2);\n            }\n            fputc(v40, a2);\n          }\n          v66 += v117;\n          goto LABEL_312;\n        }\n        result = 0LL;\n      }\n      else\n      {\n        result = 0LL;\n      }\n    }\n  }\n  return result;\n}\n"], [4228695, "sub_408657", "__int64 __fastcall sub_408657(FILE *a1, char *a2, const struct tm *a3, unsigned int a4, unsigned int a5)\n{\n  return sub_405B72(0, a1, a2, a3, a4, a5);\n}\n"], [4228761, "sub_408699", "__int64 __fastcall sub_408699(int a1)\n{\n  int fd; // [rsp+1Ch] [rbp-4h]\n\n  fd = open(\"/dev/null\", 0);\n  if ( fd == a1 )\n    return 1LL;\n  if ( fd >= 0 )\n  {\n    close(fd);\n    *__errno_location() = 9;\n  }\n  return 0LL;\n}\n"], [4228844, "sub_4086EC", "FILE *__fastcall sub_4086EC(const char *a1, const char *a2, FILE *a3)\n{\n  int v3; // eax\n  FILE *streama; // [rsp+8h] [rbp-28h]\n  char v7; // [rsp+29h] [rbp-7h]\n  char v8; // [rsp+2Ah] [rbp-6h]\n  char v9; // [rsp+2Bh] [rbp-5h]\n  int v10; // [rsp+2Ch] [rbp-4h]\n\n  v7 = 0;\n  v8 = 0;\n  v9 = 0;\n  v3 = fileno(a3);\n  if ( v3 != 1 )\n  {\n    if ( v3 != 2 )\n    {\n      if ( !v3 )\n        goto LABEL_10;\n      if ( dup2(2, 2) != 2 )\n        v9 = 1;\n    }\n    if ( dup2(1, 1) != 1 )\n      v8 = 1;\n  }\n  if ( dup2(0, 0) )\n    v7 = 1;\nLABEL_10:\n  if ( v7 && (unsigned __int8)sub_408699(0) != 1 )\n  {\n    streama = 0LL;\n  }\n  else if ( v8 && (unsigned __int8)sub_408699(1) != 1 )\n  {\n    streama = 0LL;\n  }\n  else if ( v9 && (unsigned __int8)sub_408699(2) != 1 )\n  {\n    streama = 0LL;\n  }\n  else\n  {\n    streama = freopen(a1, a2, a3);\n  }\n  v10 = *__errno_location();\n  if ( v9 )\n    close(2);\n  if ( v8 )\n    close(1);\n  if ( v7 )\n    close(0);\n  if ( !streama )\n    *__errno_location() = v10;\n  return streama;\n}\n"], [4229183, "sub_40883F", "__int64 __fastcall sub_40883F(__int64 a1, char a2)\n{\n  return __ROR8__(a1, a2);\n}\n"], [4229211, "sub_40885B", "__int64 __fastcall sub_40885B(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 16);\n}\n"], [4229229, "sub_40886D", "__int64 __fastcall sub_40886D(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 24);\n}\n"], [4229247, "sub_40887F", "__int64 __fastcall sub_40887F(__int64 a1)\n{\n  return *(_QWORD *)(a1 + 32);\n}\n"], [4229265, "sub_408891", "unsigned __int64 __fastcall sub_408891(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  unsigned __int64 v3; // [rsp+10h] [rbp-18h]\n  _QWORD *v4; // [rsp+18h] [rbp-10h]\n  unsigned __int64 j; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v4 = i;\n      for ( j = 1LL; ; ++j )\n      {\n        v4 = (_QWORD *)v4[1];\n        if ( !v4 )\n          break;\n      }\n      if ( j > v3 )\n        v3 = j;\n    }\n  }\n  return v3;\n}\n"], [4229391, "sub_40890F", "_BOOL8 __fastcall sub_40890F(__int64 a1)\n{\n  _QWORD *i; // [rsp+8h] [rbp-20h]\n  __int64 v3; // [rsp+10h] [rbp-18h]\n  __int64 v4; // [rsp+18h] [rbp-10h]\n  _QWORD *v5; // [rsp+20h] [rbp-8h]\n\n  v3 = 0LL;\n  v4 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      v5 = i;\n      ++v3;\n      ++v4;\n      while ( 1 )\n      {\n        v5 = (_QWORD *)v5[1];\n        if ( !v5 )\n          break;\n        ++v4;\n      }\n    }\n  }\n  return *(_QWORD *)(a1 + 24) == v3 && *(_QWORD *)(a1 + 32) == v4;\n}\n"], [4229545, "sub_4089A9", "int __fastcall sub_4089A9(__int64 a1, FILE *a2)\n{\n  double v2; // xmm0_8\n  double v3; // xmm1_8\n  double v4; // xmm0_8\n  __int64 v6; // [rsp+10h] [rbp-20h]\n  __int64 v7; // [rsp+18h] [rbp-18h]\n  __int64 v8; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v9; // [rsp+28h] [rbp-8h]\n\n  v6 = sub_40887F(a1);\n  v7 = sub_40885B(a1);\n  v8 = sub_40886D(a1);\n  v9 = sub_408891(a1);\n  fprintf(a2, \"# entries:         %lu\\n\", v6);\n  fprintf(a2, \"# buckets:         %lu\\n\", v7);\n  if ( v8 < 0 )\n    v2 = (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1)) + (double)(int)(v8 & 1 | ((unsigned __int64)v8 >> 1));\n  else\n    v2 = (double)(int)v8;\n  v3 = 100.0 * v2;\n  if ( v7 < 0 )\n    v4 = (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1)) + (double)(int)(v7 & 1 | ((unsigned __int64)v7 >> 1));\n  else\n    v4 = (double)(int)v7;\n  fprintf(a2, \"# buckets used:    %lu (%.2f%%)\\n\", v8, v3 / v4);\n  return fprintf(a2, \"max bucket length: %lu\\n\", v9);\n}\n"], [4229825, "sub_408AC1", "__int64 __fastcall sub_408AC1(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v3 )\n    abort();\n  return 16 * v3 + *(_QWORD *)a1;\n}\n"], [4229912, "sub_408B18", "__int64 __fastcall sub_408B18(__int64 a1, __int64 a2)\n{\n  _QWORD *i; // [rsp+10h] [rbp-10h]\n  _QWORD *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = (_QWORD *)sub_408AC1(a1, a2);\n  if ( !*v4 )\n    return 0LL;\n  for ( i = v4; i; i = (_QWORD *)i[1] )\n  {\n    if ( *i == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *i) )\n      return *i;\n  }\n  return 0LL;\n}\n"], [4230059, "sub_408BAB", "__int64 __fastcall sub_408BAB(unsigned __int64 *a1)\n{\n  unsigned __int64 i; // [rsp+18h] [rbp-8h]\n\n  if ( !a1[4] )\n    return 0LL;\n  for ( i = *a1; ; i += 16LL )\n  {\n    if ( a1[1] <= i )\n      abort();\n    if ( *(_QWORD *)i )\n      break;\n  }\n  return *(_QWORD *)i;\n}\n"], [4230151, "sub_408C07", "__int64 __fastcall sub_408C07(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_408AC1(a1, a2);\n  v4 = v3;\n  do\n  {\n    if ( *(_QWORD *)v4 == a2 && *(_QWORD *)(v4 + 8) )\n      return **(_QWORD **)(v4 + 8);\n    v4 = *(_QWORD *)(v4 + 8);\n  }\n  while ( v4 );\n  while ( 1 )\n  {\n    v3 += 16LL;\n    if ( v3 >= *(_QWORD *)(a1 + 8) )\n      break;\n    if ( *(_QWORD *)v3 )\n      return *(_QWORD *)v3;\n  }\n  return 0LL;\n}\n"], [4230305, "sub_408CA1", "unsigned __int64 __fastcall sub_408CA1(__int64 a1, __int64 a2, unsigned __int64 a3)\n{\n  __int64 v4; // rax\n  unsigned __int64 v5; // [rsp+20h] [rbp-18h]\n  _QWORD *i; // [rsp+28h] [rbp-10h]\n  _QWORD *j; // [rsp+30h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( v5 >= a3 )\n          return v5;\n        v4 = v5++;\n        *(_QWORD *)(a2 + 8 * v4) = *j;\n      }\n    }\n  }\n  return v5;\n}\n"], [4230461, "sub_408D3D", "__int64 __fastcall sub_408D3D(__int64 a1, unsigned __int8 (__fastcall *a2)(_QWORD, __int64), __int64 a3)\n{\n  __int64 v5; // [rsp+28h] [rbp-18h]\n  _QWORD *i; // [rsp+30h] [rbp-10h]\n  _QWORD *j; // [rsp+38h] [rbp-8h]\n\n  v5 = 0LL;\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = i; j; j = (_QWORD *)j[1] )\n      {\n        if ( a2(*j, a3) != 1 )\n          return v5;\n        ++v5;\n      }\n    }\n  }\n  return v5;\n}\n"], [4230609, "sub_408DD1", "unsigned __int64 __fastcall sub_408DD1(_BYTE *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = 0LL;\n  while ( *a1 )\n    v4 = (31 * v4 + (unsigned __int8)*a1++) % a2;\n  return v4;\n}\n"], [4230695, "sub_408E27", "bool __fastcall sub_408E27(unsigned __int64 a1)\n{\n  unsigned __int64 v2; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+8h] [rbp-10h]\n  unsigned __int64 v4; // [rsp+10h] [rbp-8h]\n\n  v2 = 3LL;\n  v4 = 9LL;\n  while ( v4 < a1 && a1 % v2 )\n  {\n    v3 = v2 + 1;\n    v4 += 4 * v3;\n    v2 = v3 + 1;\n  }\n  return a1 % v2 != 0;\n}\n"], [4230803, "sub_408E93", "__int64 __fastcall sub_408E93(unsigned __int64 a1)\n{\n  __int64 v2; // [rsp+0h] [rbp-8h]\n  __int64 i; // [rsp+0h] [rbp-8h]\n\n  v2 = a1;\n  if ( a1 <= 9 )\n    v2 = 10LL;\n  for ( i = v2 | 1; i != -1 && !sub_408E27(i); i += 2LL )\n    ;\n  return i;\n}\n"], [4230874, "sub_408EDA", "__int64 __fastcall sub_408EDA(__int64 a1)\n{\n  __int64 result; // rax\n\n  *(_DWORD *)a1 = 0;\n  *(_DWORD *)(a1 + 4) = 1065353216;\n  *(_DWORD *)(a1 + 8) = 1061997773;\n  *(_DWORD *)(a1 + 12) = 1068826100;\n  result = a1;\n  *(_BYTE *)(a1 + 16) = 0;\n  return result;\n}\n"], [4230943, "sub_408F1F", "unsigned __int64 __fastcall sub_408F1F(__int64 a1, unsigned __int64 a2)\n{\n  return sub_40883F(a1, 3) % a2;\n}\n"], [4230998, "sub_408F56", "bool __fastcall sub_408F56(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"], [4231023, "sub_408F6F", "__int64 __fastcall sub_408F6F(__int64 a1)\n{\n  __int64 v2; // [rsp+10h] [rbp-8h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( (_UNKNOWN *)v2 == &unk_4173E0 )\n    return 1LL;\n  if ( *(float *)(v2 + 8) > 0.1\n    && (float)(1.0 - 0.1) > *(float *)(v2 + 8)\n    && *(float *)(v2 + 12) > (float)(0.1 + 1.0)\n    && *(float *)v2 >= 0.0\n    && *(float *)(v2 + 4) > (float)(*(float *)v2 + 0.1)\n    && *(float *)(v2 + 4) <= 1.0\n    && *(float *)(v2 + 8) > (float)(*(float *)v2 + 0.1) )\n  {\n    return 1LL;\n  }\n  *(_QWORD *)(a1 + 40) = &unk_4173E0;\n  return 0LL;\n}\n"], [4231271, "sub_409067", "unsigned __int64 __fastcall sub_409067(__int64 a1, __int64 a2)\n{\n  float v2; // xmm0_4\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // [rsp+8h] [rbp-18h]\n  unsigned __int64 v5; // [rsp+8h] [rbp-18h]\n  float v6; // [rsp+1Ch] [rbp-4h]\n\n  v4 = a1;\n  if ( *(_BYTE *)(a2 + 16) != 1 )\n  {\n    if ( a1 < 0 )\n      v2 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n         + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n    else\n      v2 = (float)(int)a1;\n    v6 = v2 / *(float *)(a2 + 8);\n    if ( v6 >= 1.8446744e19 )\n      return 0LL;\n    if ( v6 >= 9.223372e18 )\n      v4 = (unsigned int)(int)(float)(v6 - 9.223372e18) ^ 0x8000000000000000LL;\n    else\n      v4 = (unsigned int)(int)v6;\n  }\n  v5 = sub_408E93(v4);\n  if ( v5 <= 0x1FFFFFFFFFFFFFFFLL )\n    result = v5;\n  else\n    result = 0LL;\n  return result;\n}\n"], [4231505, "sub_409151", "size_t *__fastcall sub_409151(__int64 a1, void *a2, unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2), bool (__fastcall *a4)(__int64 a1, __int64 a2), size_t a5)\n{\n  size_t *result; // rax\n  bool (__fastcall *v7)(__int64, __int64); // [rsp+10h] [rbp-30h]\n  unsigned __int64 (__fastcall *v8)(__int64, unsigned __int64); // [rsp+18h] [rbp-28h]\n  void *v9; // [rsp+20h] [rbp-20h]\n  size_t *ptr; // [rsp+38h] [rbp-8h]\n\n  v9 = a2;\n  v8 = a3;\n  v7 = a4;\n  if ( !a3 )\n    v8 = sub_408F1F;\n  if ( !a4 )\n    v7 = sub_408F56;\n  ptr = (size_t *)malloc(0x50uLL);\n  if ( !ptr )\n    return 0LL;\n  if ( !a2 )\n    v9 = &unk_4173E0;\n  ptr[5] = (size_t)v9;\n  if ( (unsigned __int8)sub_408F6F((__int64)ptr) == 1\n    && (ptr[2] = sub_409067(a1, (__int64)v9)) != 0\n    && (*ptr = (size_t)calloc(ptr[2], 0x10uLL)) != 0 )\n  {\n    ptr[1] = 16 * ptr[2] + *ptr;\n    ptr[3] = 0LL;\n    ptr[4] = 0LL;\n    ptr[6] = (size_t)v8;\n    ptr[7] = (size_t)v7;\n    ptr[8] = a5;\n    ptr[9] = 0LL;\n    result = ptr;\n  }\n  else\n  {\n    free(ptr);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4231862, "sub_4092B6", "__int64 __fastcall sub_4092B6(__int64 a1)\n{\n  __int64 result; // rax\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+20h] [rbp-10h]\n  _QWORD *v4; // [rsp+28h] [rbp-8h]\n\n  for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (_QWORD *)i[1]; j; j = v4 )\n      {\n        if ( *(_QWORD *)(a1 + 64) )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*j);\n        *j = 0LL;\n        v4 = (_QWORD *)j[1];\n        j[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = j;\n      }\n      if ( *(_QWORD *)(a1 + 64) )\n        (*(void (__fastcall **)(_QWORD))(a1 + 64))(*i);\n      *i = 0LL;\n      i[1] = 0LL;\n    }\n  }\n  *(_QWORD *)(a1 + 24) = 0LL;\n  result = a1;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  return result;\n}\n"], [4232124, "sub_4093BC", "void __fastcall sub_4093BC(__int64 a1)\n{\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n  _QWORD *j; // [rsp+18h] [rbp-18h]\n  _QWORD *ptr; // [rsp+20h] [rbp-10h]\n  _QWORD *ptra; // [rsp+20h] [rbp-10h]\n  _QWORD *ptrb; // [rsp+20h] [rbp-10h]\n  _QWORD *v6; // [rsp+28h] [rbp-8h]\n  _QWORD *v7; // [rsp+28h] [rbp-8h]\n\n  if ( *(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 32) )\n  {\n    for ( i = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)i; i += 2 )\n    {\n      if ( *i )\n      {\n        for ( ptr = i; ptr; ptr = (_QWORD *)ptr[1] )\n          (*(void (__fastcall **)(_QWORD))(a1 + 64))(*ptr);\n      }\n    }\n  }\n  for ( j = *(_QWORD **)a1; *(_QWORD *)(a1 + 8) > (unsigned __int64)j; j += 2 )\n  {\n    for ( ptra = (_QWORD *)j[1]; ptra; ptra = v6 )\n    {\n      v6 = (_QWORD *)ptra[1];\n      free(ptra);\n    }\n  }\n  for ( ptrb = *(_QWORD **)(a1 + 72); ptrb; ptrb = v7 )\n  {\n    v7 = (_QWORD *)ptrb[1];\n    free(ptrb);\n  }\n  free(*(void **)a1);\n  free((void *)a1);\n}\n"], [4232422, "sub_4094E6", "void *__fastcall sub_4094E6(__int64 a1)\n{\n  __int64 v2; // [rsp+18h] [rbp-8h]\n\n  if ( !*(_QWORD *)(a1 + 72) )\n    return malloc(0x10uLL);\n  v2 = *(_QWORD *)(a1 + 72);\n  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v2 + 8);\n  return (void *)v2;\n}\n"], [4232497, "sub_409531", "__int64 __fastcall sub_409531(__int64 a1, _QWORD *a2)\n{\n  __int64 result; // rax\n\n  *a2 = 0LL;\n  a2[1] = *(_QWORD *)(a1 + 72);\n  result = a1;\n  *(_QWORD *)(a1 + 72) = a2;\n  return result;\n}\n"], [4232550, "sub_409566", "__int64 __fastcall sub_409566(__int64 a1, __int64 a2, _QWORD *a3, char a4)\n{\n  __int64 result; // rax\n  __int64 v5; // rdx\n  _QWORD *i; // [rsp+20h] [rbp-30h]\n  _QWORD *v9; // [rsp+28h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-20h]\n  _QWORD *v11; // [rsp+38h] [rbp-18h]\n  __int64 v12; // [rsp+40h] [rbp-10h]\n  _QWORD *v13; // [rsp+48h] [rbp-8h]\n\n  v9 = (_QWORD *)sub_408AC1(a1, a2);\n  *a3 = v9;\n  if ( !*v9 )\n    return 0LL;\n  if ( *v9 == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *v9) )\n  {\n    v12 = *v9;\n    if ( a4 )\n    {\n      if ( v9[1] )\n      {\n        v13 = (_QWORD *)v9[1];\n        v5 = v13[1];\n        *v9 = *v13;\n        v9[1] = v5;\n        sub_409531(a1, v13);\n      }\n      else\n      {\n        *v9 = 0LL;\n      }\n    }\n    result = v12;\n  }\n  else\n  {\n    for ( i = v9; ; i = (_QWORD *)i[1] )\n    {\n      if ( !i[1] )\n        return 0LL;\n      if ( *(_QWORD *)i[1] == a2 || (*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(a1 + 56))(a2, *(_QWORD *)i[1]) )\n        break;\n    }\n    v10 = *(_QWORD *)i[1];\n    if ( a4 )\n    {\n      v11 = (_QWORD *)i[1];\n      i[1] = v11[1];\n      sub_409531(a1, v11);\n    }\n    result = v10;\n  }\n  return result;\n}\n"], [4232955, "sub_4096FB", "__int64 __fastcall sub_4096FB(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *i; // [rsp+20h] [rbp-30h]\n  __int64 *j; // [rsp+28h] [rbp-28h]\n  __int64 v7; // [rsp+30h] [rbp-20h]\n  __int64 v8; // [rsp+30h] [rbp-20h]\n  _QWORD *v9; // [rsp+38h] [rbp-18h]\n  _QWORD *v10; // [rsp+38h] [rbp-18h]\n  __int64 *v11; // [rsp+40h] [rbp-10h]\n  _QWORD *v12; // [rsp+48h] [rbp-8h]\n\n  for ( i = *(__int64 **)a2; *(_QWORD *)(a2 + 8) > (unsigned __int64)i; i += 2 )\n  {\n    if ( *i )\n    {\n      for ( j = (__int64 *)i[1]; j; j = v11 )\n      {\n        v7 = *j;\n        v9 = (_QWORD *)sub_408AC1(a1, *j);\n        v11 = (__int64 *)j[1];\n        if ( *v9 )\n        {\n          j[1] = v9[1];\n          v9[1] = j;\n        }\n        else\n        {\n          *v9 = v7;\n          ++*(_QWORD *)(a1 + 24);\n          sub_409531(a1, j);\n        }\n      }\n      v8 = *i;\n      i[1] = 0LL;\n      if ( !a3 )\n      {\n        v10 = (_QWORD *)sub_408AC1(a1, v8);\n        if ( *v10 )\n        {\n          v12 = sub_4094E6(a1);\n          if ( !v12 )\n            return 0LL;\n          *v12 = v8;\n          v12[1] = v10[1];\n          v10[1] = v12;\n        }\n        else\n        {\n          *v10 = v8;\n          ++*(_QWORD *)(a1 + 24);\n        }\n        *i = 0LL;\n        --*(_QWORD *)(a2 + 24);\n      }\n    }\n  }\n  return 1LL;\n}\n"], [4233417, "sub_4098C9", "__int64 __fastcall sub_4098C9(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 nmemb; // [rsp+10h] [rbp-60h]\n  void *v4; // [rsp+20h] [rbp-50h] BYREF\n  __int64 v5; // [rsp+28h] [rbp-48h]\n  unsigned __int64 v6; // [rsp+30h] [rbp-40h]\n  __int64 v7; // [rsp+38h] [rbp-38h]\n  __int64 v8; // [rsp+40h] [rbp-30h]\n  __int64 v9; // [rsp+48h] [rbp-28h]\n  __int64 v10; // [rsp+50h] [rbp-20h]\n  __int64 v11; // [rsp+58h] [rbp-18h]\n  __int64 v12; // [rsp+60h] [rbp-10h]\n  __int64 v13; // [rsp+68h] [rbp-8h]\n\n  nmemb = sub_409067(a2, *(_QWORD *)(a1 + 40));\n  if ( !nmemb )\n    return 0LL;\n  if ( *(_QWORD *)(a1 + 16) == nmemb )\n    return 1LL;\n  v4 = calloc(nmemb, 0x10uLL);\n  if ( !v4 )\n    return 0LL;\n  v6 = nmemb;\n  v5 = (__int64)v4 + 16 * nmemb;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = *(_QWORD *)(a1 + 40);\n  v10 = *(_QWORD *)(a1 + 48);\n  v11 = *(_QWORD *)(a1 + 56);\n  v12 = *(_QWORD *)(a1 + 64);\n  v13 = *(_QWORD *)(a1 + 72);\n  if ( (unsigned __int8)sub_4096FB((__int64)&v4, a1, 0) )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = v4;\n    *(_QWORD *)(a1 + 8) = v5;\n    *(_QWORD *)(a1 + 16) = v6;\n    *(_QWORD *)(a1 + 24) = v7;\n    *(_QWORD *)(a1 + 72) = v13;\n    result = 1LL;\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 72) = v13;\n    if ( (unsigned __int8)sub_4096FB(a1, (__int64)&v4, 1) != 1 || (unsigned __int8)sub_4096FB(a1, (__int64)&v4, 0) != 1 )\n      abort();\n    free(v4);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4233933, "sub_409ACD", "__int64 __fastcall sub_409ACD(_QWORD *a1, __int64 a2, _QWORD *a3)\n{\n  __int64 result; // rax\n  __int64 v4; // rax\n  float v5; // xmm0_4\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  float v8; // xmm1_4\n  __int64 v9; // rdx\n  __int64 v10; // rax\n  float v11; // xmm0_4\n  __int64 v12; // rdx\n  __int64 v13; // rax\n  float v14; // xmm1_4\n  __int64 v15; // rdx\n  __int64 v16; // rax\n  float v17; // xmm0_4\n  __int64 v18; // rdx\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  __int64 v23; // rax\n  __int64 *v25; // [rsp+30h] [rbp-20h] BYREF\n  __int64 v26; // [rsp+38h] [rbp-18h]\n  __int64 v27; // [rsp+40h] [rbp-10h]\n  _QWORD *v28; // [rsp+48h] [rbp-8h]\n\n  if ( !a2 )\n    abort();\n  v26 = sub_409566((__int64)a1, a2, &v25, 0);\n  if ( v26 )\n  {\n    if ( a3 )\n      *a3 = v26;\n    result = 0LL;\n  }\n  else\n  {\n    v4 = a1[3];\n    if ( v4 < 0 )\n    {\n      v6 = a1[3] & 1LL | ((unsigned __int64)v4 >> 1);\n      v5 = (float)(int)v6 + (float)(int)v6;\n    }\n    else\n    {\n      v5 = (float)(int)v4;\n    }\n    v7 = a1[2];\n    if ( v7 < 0 )\n    {\n      v9 = a1[2] & 1LL | ((unsigned __int64)v7 >> 1);\n      v8 = (float)(int)v9 + (float)(int)v9;\n    }\n    else\n    {\n      v8 = (float)(int)v7;\n    }\n    if ( v5 > (float)(v8 * *(float *)(a1[5] + 8LL)) )\n    {\n      sub_408F6F((__int64)a1);\n      v10 = a1[3];\n      if ( v10 < 0 )\n      {\n        v12 = a1[3] & 1LL | ((unsigned __int64)v10 >> 1);\n        v11 = (float)(int)v12 + (float)(int)v12;\n      }\n      else\n      {\n        v11 = (float)(int)v10;\n      }\n      v13 = a1[2];\n      if ( v13 < 0 )\n      {\n        v15 = a1[2] & 1LL | ((unsigned __int64)v13 >> 1);\n        v14 = (float)(int)v15 + (float)(int)v15;\n      }\n      else\n      {\n        v14 = (float)(int)v13;\n      }\n      if ( v11 > (float)(v14 * *(float *)(a1[5] + 8LL)) )\n      {\n        v27 = a1[5];\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v16 = a1[2];\n          if ( v16 < 0 )\n          {\n            v18 = a1[2] & 1LL | ((unsigned __int64)v16 >> 1);\n            v17 = (float)(int)v18 + (float)(int)v18;\n          }\n          else\n          {\n            v17 = (float)(int)v16;\n          }\n          v19 = v17 * *(float *)(v27 + 12);\n        }\n        else\n        {\n          v20 = a1[2];\n          if ( v20 < 0 )\n          {\n            v22 = a1[2] & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v19 = (float)(v21 * *(float *)(v27 + 12)) * *(float *)(v27 + 8);\n        }\n        if ( v19 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        if ( v19 >= 9.223372e18 )\n          v23 = (unsigned int)(int)(float)(v19 - 9.223372e18) ^ 0x8000000000000000LL;\n        else\n          v23 = (unsigned int)(int)v19;\n        if ( (unsigned __int8)sub_4098C9((__int64)a1, v23) != 1 )\n          return 0xFFFFFFFFLL;\n        if ( sub_409566((__int64)a1, a2, &v25, 0) )\n          abort();\n      }\n    }\n    if ( *v25 )\n    {\n      v28 = sub_4094E6((__int64)a1);\n      if ( v28 )\n      {\n        *v28 = a2;\n        v28[1] = v25[1];\n        v25[1] = (__int64)v28;\n        ++a1[4];\n        result = 1LL;\n      }\n      else\n      {\n        result = 0xFFFFFFFFLL;\n      }\n    }\n    else\n    {\n      *v25 = a2;\n      ++a1[4];\n      ++a1[3];\n      result = 1LL;\n    }\n  }\n  return result;\n}\n"], [4234727, "sub_409DE7", "__int64 __fastcall sub_409DE7(_QWORD *a1, __int64 a2)\n{\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h] BYREF\n\n  v3 = sub_409ACD(a1, a2, &v4);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( v3 )\n    return a2;\n  return v4;\n}\n"], [4234800, "sub_409E30", "__int64 __fastcall sub_409E30(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rax\n  float v4; // xmm0_4\n  __int64 v5; // rdx\n  __int64 v6; // rax\n  float v7; // xmm1_4\n  __int64 v8; // rdx\n  __int64 v9; // rax\n  float v10; // xmm0_4\n  __int64 v11; // rdx\n  __int64 v12; // rax\n  float v13; // xmm1_4\n  __int64 v14; // rdx\n  __int64 v15; // rax\n  float v16; // xmm0_4\n  __int64 v17; // rdx\n  float v18; // xmm0_4\n  __int64 v19; // rax\n  __int64 v20; // rax\n  float v21; // xmm0_4\n  __int64 v22; // rdx\n  float v23; // xmm0_4\n  _QWORD *v24; // [rsp+10h] [rbp-30h] BYREF\n  void *ptr; // [rsp+18h] [rbp-28h]\n  __int64 v26; // [rsp+20h] [rbp-20h]\n  __int64 v27; // [rsp+28h] [rbp-18h]\n  __int64 v28; // [rsp+30h] [rbp-10h]\n  void *v29; // [rsp+38h] [rbp-8h]\n\n  v26 = sub_409566(a1, a2, &v24, 1);\n  if ( !v26 )\n    return 0LL;\n  --*(_QWORD *)(a1 + 32);\n  if ( !*v24 )\n  {\n    v3 = --*(_QWORD *)(a1 + 24);\n    if ( v3 < 0 )\n    {\n      v5 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v3 >> 1);\n      v4 = (float)(int)v5 + (float)(int)v5;\n    }\n    else\n    {\n      v4 = (float)(int)v3;\n    }\n    v6 = *(_QWORD *)(a1 + 16);\n    if ( v6 < 0 )\n    {\n      v8 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v6 >> 1);\n      v7 = (float)(int)v8 + (float)(int)v8;\n    }\n    else\n    {\n      v7 = (float)(int)v6;\n    }\n    if ( (float)(v7 * **(float **)(a1 + 40)) > v4 )\n    {\n      sub_408F6F(a1);\n      v9 = *(_QWORD *)(a1 + 24);\n      if ( v9 < 0 )\n      {\n        v11 = *(_QWORD *)(a1 + 24) & 1LL | ((unsigned __int64)v9 >> 1);\n        v10 = (float)(int)v11 + (float)(int)v11;\n      }\n      else\n      {\n        v10 = (float)(int)v9;\n      }\n      v12 = *(_QWORD *)(a1 + 16);\n      if ( v12 < 0 )\n      {\n        v14 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v12 >> 1);\n        v13 = (float)(int)v14 + (float)(int)v14;\n      }\n      else\n      {\n        v13 = (float)(int)v12;\n      }\n      if ( (float)(v13 * **(float **)(a1 + 40)) > v10 )\n      {\n        v27 = *(_QWORD *)(a1 + 40);\n        if ( *(_BYTE *)(v27 + 16) )\n        {\n          v15 = *(_QWORD *)(a1 + 16);\n          if ( v15 < 0 )\n          {\n            v17 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v15 >> 1);\n            v16 = (float)(int)v17 + (float)(int)v17;\n          }\n          else\n          {\n            v16 = (float)(int)v15;\n          }\n          v18 = v16 * *(float *)(v27 + 4);\n          if ( v18 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v18;\n        }\n        else\n        {\n          v20 = *(_QWORD *)(a1 + 16);\n          if ( v20 < 0 )\n          {\n            v22 = *(_QWORD *)(a1 + 16) & 1LL | ((unsigned __int64)v20 >> 1);\n            v21 = (float)(int)v22 + (float)(int)v22;\n          }\n          else\n          {\n            v21 = (float)(int)v20;\n          }\n          v23 = (float)(v21 * *(float *)(v27 + 4)) * *(float *)(v27 + 8);\n          if ( v23 >= 9.223372e18 )\n            v19 = (unsigned int)(int)(float)(v23 - 9.223372e18) ^ 0x8000000000000000LL;\n          else\n            v19 = (unsigned int)(int)v23;\n        }\n        v28 = v19;\n        if ( (unsigned __int8)sub_4098C9(a1, v19) != 1 )\n        {\n          for ( ptr = *(void **)(a1 + 72); ptr; ptr = v29 )\n          {\n            v29 = (void *)*((_QWORD *)ptr + 1);\n            free(ptr);\n          }\n          *(_QWORD *)(a1 + 72) = 0LL;\n        }\n      }\n    }\n  }\n  return v26;\n}\n"], [4235487, "sub_40A0DF", "long double __fastcall sub_40A0DF(int a1, long double a2)\n{\n  _BOOL4 v7; // eax\n  long double v9; // [rsp+0h] [rbp-30h]\n  unsigned __int64 v10; // [rsp+28h] [rbp-8h]\n\n  if ( a1 != 1 && a2 < 1.8446744073709551615e19 )\n  {\n    if ( a2 >= 9.223372036854775808e18 )\n      v10 = (__int64)(a2 - 9.223372036854775808e18) ^ 0x8000000000000000LL;\n    else\n      v10 = (__int64)a2;\n    v7 = !a1 && a2 != (long double)v10;\n    a2 = (long double)(v7 + v10);\n  }\n  *(_QWORD *)&v9 = *(_QWORD *)&a2;\n  DWORD2(v9) = DWORD2(a2);\n  return v9;\n}\n"], [4235734, "sub_40A1D6", "char *__fastcall sub_40A1D6(char *a1, size_t a2, unsigned __int8 *a3, const char *a4)\n{\n  char *i; // rbx\n  size_t v5; // rax\n  char *v6; // rbx\n  unsigned __int8 v10; // [rsp+27h] [rbp-69h]\n  size_t v11; // [rsp+28h] [rbp-68h]\n  size_t v12; // [rsp+30h] [rbp-60h]\n  size_t v13; // [rsp+38h] [rbp-58h]\n  char dest[56]; // [rsp+40h] [rbp-50h] BYREF\n  unsigned __int64 v15; // [rsp+78h] [rbp-18h]\n\n  v15 = __readfsqword(0x28u);\n  v11 = -1LL;\n  v13 = strlen(a4);\n  v12 = a2;\n  memcpy(dest, a1, a2);\n  for ( i = &a1[a2]; ; memcpy(i, a4, v13) )\n  {\n    v10 = *a3;\n    if ( *a3 )\n    {\n      if ( v10 > 0x7Eu )\n        v5 = v12;\n      else\n        v5 = v10;\n      v11 = v5;\n      ++a3;\n    }\n    if ( v12 < v11 )\n      v11 = v12;\n    v6 = &i[-v11];\n    v12 -= v11;\n    memcpy(v6, &dest[v12], v11);\n    if ( !v12 )\n      break;\n    i = &v6[-v13];\n  }\n  return v6;\n}\n"], [4236045, "sub_40A30D", "char *__fastcall sub_40A30D(unsigned __int64 a1, char *a2, __int16 a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  int v5; // eax\n  int v6; // eax\n  long double v7; // fst7\n  long double v8; // fst7\n  long double v9; // fst7\n  int v10; // eax\n  bool v11; // al\n  bool v12; // al\n  bool v13; // al\n  bool v14; // al\n  char *v15; // rax\n  char v16; // dl\n  char *v17; // rax\n  char *v18; // rax\n  long double v20; // [rsp+0h] [rbp-130h]\n  int v24; // [rsp+44h] [rbp-ECh]\n  int v25; // [rsp+48h] [rbp-E8h]\n  int v26; // [rsp+4Ch] [rbp-E4h]\n  int v27; // [rsp+50h] [rbp-E0h]\n  unsigned int v28; // [rsp+54h] [rbp-DCh]\n  unsigned int v29; // [rsp+5Ch] [rbp-D4h]\n  unsigned int v30; // [rsp+60h] [rbp-D0h]\n  unsigned __int64 v31; // [rsp+68h] [rbp-C8h]\n  char *dest; // [rsp+70h] [rbp-C0h]\n  char *desta; // [rsp+70h] [rbp-C0h]\n  char *v34; // [rsp+78h] [rbp-B8h]\n  char *v35; // [rsp+80h] [rbp-B0h]\n  char *src; // [rsp+88h] [rbp-A8h]\n  size_t v37; // [rsp+90h] [rbp-A0h]\n  const char *v38; // [rsp+98h] [rbp-98h]\n  unsigned __int64 n; // [rsp+A0h] [rbp-90h]\n  size_t v40; // [rsp+A8h] [rbp-88h]\n  unsigned __int64 i; // [rsp+B0h] [rbp-80h]\n  unsigned __int8 *v42; // [rsp+B8h] [rbp-78h]\n  struct lconv *v43; // [rsp+C0h] [rbp-70h]\n  size_t v44; // [rsp+C8h] [rbp-68h]\n  unsigned __int64 v45; // [rsp+E8h] [rbp-48h]\n  long double v46; // [rsp+F0h] [rbp-40h]\n  long double v47; // [rsp+110h] [rbp-20h]\n  long double v48; // [rsp+110h] [rbp-20h]\n\n  v27 = a3 & 3;\n  if ( (a3 & 0x20) != 0 )\n    v5 = 1024;\n  else\n    v5 = 1000;\n  v28 = v5;\n  v25 = -1;\n  src = \".\";\n  v37 = 1LL;\n  v38 = (const char *)&unk_41749B;\n  v43 = localeconv();\n  v44 = strlen(v43->decimal_point);\n  if ( v44 && v44 <= 0x10 )\n  {\n    src = v43->decimal_point;\n    v37 = v44;\n  }\n  v42 = (unsigned __int8 *)v43->grouping;\n  if ( strlen(v43->thousands_sep) <= 0x10 )\n    v38 = v43->thousands_sep;\n  v34 = a2 + 648;\n  dest = a2 + 648;\n  if ( a5 > a4 )\n  {\n    if ( a4 && !(a5 % a4) )\n    {\n      v45 = 2 * (10 * (a1 % (a5 / a4)) % (a5 / a4));\n      v31 = a1 / (a5 / a4);\n      v24 = 10 * (a1 % (a5 / a4)) / (a5 / a4);\n      if ( v45 >= a5 / a4 )\n      {\n        if ( a5 / a4 >= v45 )\n          v6 = 2;\n        else\n          v6 = 3;\n      }\n      else\n      {\n        v6 = v45 != 0;\n      }\n      v26 = v6;\nLABEL_32:\n      if ( (a3 & 0x10) != 0 )\n      {\n        v25 = 0;\n        if ( v28 <= v31 )\n        {\n          do\n          {\n            v29 = 10 * (v31 % v28) + v24;\n            v30 = 2 * (v29 % v28) + (v26 >> 1);\n            v31 /= v28;\n            v24 = v29 / v28;\n            if ( v30 >= v28 )\n            {\n              if ( v26 + v30 <= v28 )\n                v10 = 2;\n              else\n                v10 = 3;\n            }\n            else\n            {\n              v10 = v26 + v30 != 0;\n            }\n            v26 = v10;\n            ++v25;\n          }\n          while ( v28 <= v31 && v25 < 8 );\n          if ( v31 <= 9 )\n          {\n            if ( v27 == 1 )\n            {\n              v11 = (int)(((v29 / v28) & 1) + v10) > 2;\n            }\n            else\n            {\n              v12 = !v27 && v10 > 0;\n              v11 = v12;\n            }\n            if ( v11 )\n            {\n              ++v24;\n              v26 = 0;\n              if ( v24 == 10 )\n              {\n                ++v31;\n                v24 = 0;\n              }\n            }\n            if ( v31 <= 9 && (v24 || (a3 & 8) == 0) )\n            {\n              a2[647] = v24 + 48;\n              dest = &a2[-v37 + 647];\n              memcpy(dest, src, v37);\n              v26 = 0;\n              v24 = 0;\n            }\n          }\n        }\n      }\n      if ( v27 == 1 )\n      {\n        v13 = ((v31 & 1) + v26 != 0) + v24 > 5;\n      }\n      else\n      {\n        v14 = !v27 && v24 + v26 > 0;\n        v13 = v14;\n      }\n      if ( v13 )\n      {\n        ++v31;\n        if ( (a3 & 0x10) != 0 && v28 == v31 && v25 < 8 )\n        {\n          ++v25;\n          if ( (a3 & 8) == 0 )\n          {\n            desta = dest - 1;\n            *desta = 48;\n            dest = &desta[-v37];\n            memcpy(dest, src, v37);\n          }\n          v31 = 1LL;\n        }\n      }\n      v35 = dest;\n      do\n      {\n        *--dest = v31 % 0xA + 48;\n        v31 /= 0xAuLL;\n      }\n      while ( v31 );\n      goto LABEL_72;\n    }\n  }\n  else if ( !(a4 % a5) )\n  {\n    v31 = a4 / a5 * a1;\n    if ( v31 / (a4 / a5) == a1 )\n    {\n      v24 = 0;\n      v26 = 0;\n      goto LABEL_32;\n    }\n  }\n  v47 = (long double)a1 * ((long double)a4 / (long double)a5);\n  if ( (a3 & 0x10) != 0 )\n  {\n    *(_QWORD *)&v46 = 0x8000000000000000LL;\n    DWORD2(v46) = 0x3FFF;\n    v25 = 0;\n    do\n    {\n      v46 = (long double)v28 * v46;\n      ++v25;\n    }\n    while ( v47 >= (long double)v28 * v46 && v25 < 8 );\n    v48 = v47 / v46;\n    *(_QWORD *)&v20 = *(_QWORD *)&v48;\n    DWORD2(v20) = DWORD2(v48);\n    v8 = sub_40A0DF(v27, v20);\n    sprintf(a2, \"%.1Lf\", v8);\n    n = strlen(a2);\n    v40 = v37 + 1;\n    if ( ((a3 & 0x20) == 0) + v37 + 1 + 1 < n || (a3 & 8) != 0 && a2[n - 1] == 48 )\n    {\n      v9 = sub_40A0DF(v27, v48 * 10.0);\n      sprintf(a2, \"%.0Lf\", v9 / 10.0);\n      n = strlen(a2);\n      v40 = 0LL;\n    }\n  }\n  else\n  {\n    *(_QWORD *)&v20 = *(_QWORD *)&v47;\n    DWORD2(v20) = DWORD2(v47);\n    v7 = sub_40A0DF(v27, v20);\n    sprintf(a2, \"%.0Lf\", v7);\n    n = strlen(a2);\n    v40 = 0LL;\n  }\n  dest = &v34[-n];\n  memmove(&v34[-n], a2, n);\n  v35 = &v34[-v40];\nLABEL_72:\n  if ( (a3 & 4) != 0 )\n    dest = sub_40A1D6(dest, v35 - dest, v42, v38);\n  if ( (a3 & 0x80) != 0 )\n  {\n    if ( v25 < 0 )\n    {\n      v25 = 0;\n      for ( i = 1LL; i < a5; i *= v28 )\n      {\n        if ( ++v25 == 8 )\n          break;\n      }\n    }\n    if ( v25 | a3 & 0x100 && (a3 & 0x40) != 0 )\n    {\n      v34 = a2 + 649;\n      a2[648] = 32;\n    }\n    if ( v25 )\n    {\n      v15 = v34++;\n      if ( (a3 & 0x20) == 0 && v25 == 1 )\n        v16 = 107;\n      else\n        v16 = byte_417490[v25];\n      *v15 = v16;\n    }\n    if ( (a3 & 0x100) != 0 )\n    {\n      if ( (a3 & 0x20) != 0 && v25 )\n      {\n        v17 = v34++;\n        *v17 = 105;\n      }\n      v18 = v34++;\n      *v18 = 66;\n    }\n  }\n  *v34 = 0;\n  return dest;\n}\n"], [4238763, "sub_40ADAB", "__int64 sub_40ADAB()\n{\n  __int64 result; // rax\n\n  if ( getenv(\"POSIXLY_CORRECT\") )\n    result = 512LL;\n  else\n    result = 1024LL;\n  return result;\n}\n"], [4238796, "sub_40ADCC", "__int64 __fastcall sub_40ADCC(char *a1, _QWORD *a2, int *a3)\n{\n  char *v5; // [rsp+18h] [rbp-28h]\n  int v6; // [rsp+2Ch] [rbp-14h]\n  int v7; // [rsp+30h] [rbp-10h]\n  unsigned int v8; // [rsp+34h] [rbp-Ch]\n  char *v9; // [rsp+38h] [rbp-8h] BYREF\n\n  v5 = a1;\n  v6 = 0;\n  if ( a1 || (v5 = getenv(\"BLOCK_SIZE\")) != 0LL || (v5 = getenv(\"BLOCKSIZE\")) != 0LL )\n  {\n    if ( *v5 == 39 )\n    {\n      v6 = 4;\n      ++v5;\n    }\n    v7 = sub_403EE7(v5, (__int64)off_4174C0, (__int64)dword_4174D8, 4uLL);\n    if ( v7 < 0 )\n    {\n      v8 = sub_40F4BB(v5, &v9, 0LL, a2, \"eEgGkKmMpPtTyYzZ0\");\n      if ( v8 )\n      {\n        *a3 = 0;\n        return v8;\n      }\n      while ( *v5 <= 47 || *v5 > 57 )\n      {\n        if ( v5 == v9 )\n        {\n          v6 |= 0x80u;\n          if ( *(v9 - 1) == 66 )\n            v6 |= 0x100u;\n          if ( *(v9 - 1) != 66 || *(v9 - 2) == 105 )\n            v6 |= 0x20u;\n          break;\n        }\n        ++v5;\n      }\n    }\n    else\n    {\n      v6 |= dword_4174D8[v7];\n      *a2 = 1LL;\n    }\n  }\n  else\n  {\n    *a2 = sub_40ADAB();\n  }\n  *a3 = v6;\n  return 0LL;\n}\n"], [4239158, "sub_40AF36", "__int64 __fastcall sub_40AF36(char *a1, int *a2, _QWORD *a3)\n{\n  unsigned int v5; // [rsp+2Ch] [rbp-4h]\n\n  v5 = sub_40ADCC(a1, a3, a2);\n  if ( !*a3 )\n  {\n    *a3 = sub_40ADAB();\n    v5 = 4;\n  }\n  return v5;\n}\n"], [4239240, "sub_40AF88", "unsigned __int64 __fastcall sub_40AF88(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"], [4239347, "sub_40AFF3", "bool __fastcall sub_40AFF3(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n"], [4239397, "sub_40B025", "_QWORD *__fastcall sub_40B025(__int64 a1)\n{\n  _QWORD *ptr; // [rsp+18h] [rbp-8h]\n\n  ptr = malloc(0x18uLL);\n  if ( ptr )\n  {\n    *ptr = sub_409151(\n             1021LL,\n             0LL,\n             (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_40AF88,\n             (bool (__fastcall *)(__int64, __int64))sub_40AFF3,\n             (size_t)free);\n    if ( !*ptr )\n    {\n      free(ptr);\n      return 0LL;\n    }\n    ptr[1] = a1;\n    ptr[2] = 0LL;\n  }\n  return ptr;\n}\n"], [4239529, "sub_40B0A9", "void __fastcall sub_40B0A9(__int64 a1)\n{\n  sub_4093BC(*(_QWORD *)a1);\n  free(*(void **)(a1 + 16));\n  free((void *)a1);\n}\n"], [4239586, "sub_40B0E2", "__int64 __fastcall sub_40B0E2(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rax\n  _QWORD *v4; // [rsp+10h] [rbp-10h]\n  __int64 v5; // [rsp+18h] [rbp-8h]\n\n  v4 = *(_QWORD **)(a1 + 16);\n  if ( v4 )\n  {\n    if ( *v4 == a2 )\n      return v4[1];\n  }\n  else\n  {\n    v4 = malloc(0x10uLL);\n    *(_QWORD *)(a1 + 16) = v4;\n    if ( !v4 )\n      return -1LL;\n  }\n  *v4 = a2;\n  v5 = sub_409DE7(*(_QWORD **)a1, (__int64)v4);\n  if ( !v5 )\n    return -1LL;\n  if ( (_QWORD *)v5 == v4 )\n  {\n    *(_QWORD *)(a1 + 16) = 0LL;\n    v3 = *(_QWORD *)(a1 + 8);\n    *(_QWORD *)(a1 + 8) = v3 + 1;\n    v4[1] = v3;\n  }\n  else\n  {\n    v4[1] = *(_QWORD *)(v5 + 8);\n  }\n  return v4[1];\n}\n"], [4239823, "sub_40B1CF", "__int64 __fastcall sub_40B1CF(__int64 a1, __int64 a2)\n{\n  __int64 v3; // [rsp+8h] [rbp-18h]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = a1;\n  v4 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  if ( a1 >= 0 )\n  {\n    do\n    {\n      *(_BYTE *)--v4 = (char)v3 % 10 + 48;\n      v3 /= 10LL;\n    }\n    while ( v3 );\n  }\n  else\n  {\n    do\n    {\n      *(_BYTE *)--v4 = 48 - (char)v3 % 10;\n      v3 /= 10LL;\n    }\n    while ( v3 );\n    *(_BYTE *)--v4 = 45;\n  }\n  return v4;\n}\n"], [4240129, "sub_40B301", "bool __fastcall sub_40B301(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_417560[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4240183, "sub_40B337", "__int64 __fastcall sub_40B337(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  size_t v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_40B301(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_40DBF1(*(_QWORD *)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4240663, "sub_40B517", "__int64 __fastcall sub_40B517(unsigned __int8 *a1, unsigned __int8 *a2)\n{\n  __int64 result; // rax\n  wint_t v3; // ebx\n  unsigned __int8 v8; // al\n  unsigned __int8 v9; // al\n  unsigned __int8 v10; // [rsp+1Ah] [rbp-B6h]\n  unsigned __int8 *v11; // [rsp+20h] [rbp-B0h]\n  unsigned __int8 *v12; // [rsp+28h] [rbp-A8h]\n  char v13[4]; // [rsp+30h] [rbp-A0h] BYREF\n  int v14; // [rsp+34h] [rbp-9Ch] BYREF\n  char v15; // [rsp+3Ch] [rbp-94h]\n  void *s1; // [rsp+40h] [rbp-90h]\n  size_t n; // [rsp+48h] [rbp-88h]\n  char v18; // [rsp+50h] [rbp-80h]\n  wint_t wc; // [rsp+54h] [rbp-7Ch]\n  char v20[4]; // [rsp+70h] [rbp-60h] BYREF\n  int v21; // [rsp+74h] [rbp-5Ch] BYREF\n  char i; // [rsp+7Ch] [rbp-54h]\n  void *s2; // [rsp+80h] [rbp-50h]\n  size_t v24; // [rsp+88h] [rbp-48h]\n  char v25; // [rsp+90h] [rbp-40h]\n  wint_t v26; // [rsp+94h] [rbp-3Ch]\n  unsigned __int64 v27; // [rsp+B8h] [rbp-18h]\n\n  v27 = __readfsqword(0x28u);\n  if ( a1 == a2 )\n    return 0LL;\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    v11 = a1;\n    v12 = a2;\n    do\n    {\n      if ( ((*__ctype_b_loc())[*v11] & 0x100) != 0 )\n        v8 = tolower(*v11);\n      else\n        v8 = *v11;\n      v10 = v8;\n      if ( ((*__ctype_b_loc())[*v12] & 0x100) != 0 )\n        v9 = tolower(*v12);\n      else\n        v9 = *v12;\n      if ( !v10 )\n        break;\n      ++v11;\n      ++v12;\n    }\n    while ( v10 == v9 );\n    result = v10 - (unsigned int)v9;\n  }\n  else\n  {\n    s1 = a1;\n    v13[0] = 0;\n    memset(&v14, 0, 8uLL);\n    v15 = 0;\n    s2 = a2;\n    v20[0] = 0;\n    memset(&v21, 0, 8uLL);\n    for ( i = 0; ; i = 0 )\n    {\n      sub_40B337((__int64)v13);\n      if ( v18 == 1 && !wc )\n        break;\n      sub_40B337((__int64)v20);\n      if ( v25 == 1 && !v26 )\n        break;\n      if ( v18 )\n      {\n        if ( v25 )\n        {\n          v3 = towlower(wc);\n          LODWORD(result) = v3 - towlower(v26);\n        }\n        else\n        {\n          LODWORD(result) = -1;\n        }\n      }\n      else if ( v25 )\n      {\n        LODWORD(result) = 1;\n      }\n      else if ( n == v24 )\n      {\n        LODWORD(result) = memcmp(s1, s2, n);\n      }\n      else if ( n >= v24 )\n      {\n        if ( memcmp(s1, s2, v24) < 0 )\n          LODWORD(result) = -1;\n        else\n          LODWORD(result) = 1;\n      }\n      else if ( memcmp(s1, s2, n) <= 0 )\n      {\n        LODWORD(result) = -1;\n      }\n      else\n      {\n        LODWORD(result) = 1;\n      }\n      if ( (_DWORD)result )\n        return (unsigned int)result;\n      s1 = (char *)s1 + n;\n      v15 = 0;\n      s2 = (char *)s2 + v24;\n    }\n    sub_40B337((__int64)v13);\n    if ( v18 != 1 || wc )\n    {\n      result = 1LL;\n    }\n    else\n    {\n      sub_40B337((__int64)v20);\n      if ( v25 != 1 || v26 )\n        result = 0xFFFFFFFFLL;\n      else\n        result = 0LL;\n    }\n  }\n  return result;\n}\n"], [4241661, "sub_40B8FD", "char *__fastcall sub_40B8FD(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_61B480 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4241892, "sub_40B9E4", "bool __fastcall sub_40B9E4(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_417560[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4241946, "sub_40BA1A", "__int64 __fastcall sub_40BA1A(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  size_t v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_40B9E4(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_40DBF1(*(_QWORD *)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4242426, "sub_40BBFA", "__int64 __fastcall sub_40BBFA(_BYTE *a1, __int64 a2)\n{\n  size_t v7; // rax\n  unsigned __int8 v10; // [rsp+13h] [rbp-ADh]\n  char v11; // [rsp+14h] [rbp-ACh]\n  char v12; // [rsp+15h] [rbp-ABh]\n  char v13; // [rsp+16h] [rbp-AAh]\n  char v14; // [rsp+17h] [rbp-A9h]\n  char *s; // [rsp+18h] [rbp-A8h]\n  _BYTE *v16; // [rsp+20h] [rbp-A0h]\n  char v17[4]; // [rsp+30h] [rbp-90h] BYREF\n  int v18; // [rsp+34h] [rbp-8Ch] BYREF\n  char v19; // [rsp+3Ch] [rbp-84h]\n  unsigned __int64 v20; // [rsp+40h] [rbp-80h]\n  __int64 v21; // [rsp+48h] [rbp-78h]\n  __int64 v22; // [rsp+50h] [rbp-70h]\n  __int64 v23; // [rsp+58h] [rbp-68h]\n  __int64 v24; // [rsp+60h] [rbp-60h]\n  __int64 v25; // [rsp+68h] [rbp-58h]\n  unsigned __int64 v26; // [rsp+70h] [rbp-50h] BYREF\n  __int64 v27; // [rsp+78h] [rbp-48h]\n  wint_t wc[2]; // [rsp+80h] [rbp-40h]\n  __int64 v29; // [rsp+88h] [rbp-38h]\n  __int64 v30; // [rsp+90h] [rbp-30h]\n  __int64 v31; // [rsp+98h] [rbp-28h]\n  unsigned __int64 v32; // [rsp+B8h] [rbp-8h]\n\n  v32 = __readfsqword(0x28u);\n  s = (char *)sub_40DE53(a2, 2LL);\n  v10 = 0;\n  while ( *a1 )\n  {\n    v16 = (_BYTE *)sub_413EE7(a1, s);\n    if ( !v16 )\n      break;\n    if ( __ctype_get_mb_cur_max() <= 1 )\n    {\n      v13 = 1;\n      if ( a1 < v16 && ((*__ctype_b_loc())[(unsigned __int8)*(v16 - 1)] & 8) != 0 )\n        v13 = 0;\n      v7 = strlen(s);\n      v14 = 1;\n      if ( v16[v7] && ((*__ctype_b_loc())[(unsigned __int8)v16[v7]] & 8) != 0 )\n        v14 = 0;\n      if ( v13 && v14 )\n      {\n        v10 = 1;\n        break;\n      }\n      if ( !*v16 )\n        break;\n      a1 = v16 + 1;\n    }\n    else\n    {\n      v20 = (unsigned __int64)a1;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      v11 = 1;\n      if ( v20 < (unsigned __int64)v16 )\n      {\n        do\n        {\n          sub_40BA1A((__int64)v17);\n          if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n            abort();\n          v26 = v20;\n          v27 = v21;\n          *(_QWORD *)wc = v22;\n          v29 = v23;\n          v30 = v24;\n          v31 = v25;\n          v20 += v21;\n          v19 = 0;\n        }\n        while ( v20 < (unsigned __int64)v16 );\n        if ( LOBYTE(wc[0]) && iswalnum(wc[1]) )\n          v11 = 0;\n      }\n      v20 = (unsigned __int64)v16;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      *(_QWORD *)wc = s;\n      LOBYTE(v26) = 0;\n      memset((char *)&v26 + 4, 0, sizeof(unsigned __int64));\n      for ( BYTE4(v27) = 0; ; BYTE4(v27) = 0 )\n      {\n        sub_40BA1A((__int64)&v26);\n        if ( (unsigned __int8)v30 == 1 && !HIDWORD(v30) )\n          break;\n        sub_40BA1A((__int64)v17);\n        if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n          abort();\n        v20 += v21;\n        v19 = 0;\n        *(_QWORD *)wc += v29;\n      }\n      v12 = 1;\n      sub_40BA1A((__int64)v17);\n      if ( (unsigned __int8)v22 != 1 || HIDWORD(v22) )\n      {\n        v26 = v20;\n        v27 = v21;\n        *(_QWORD *)wc = v22;\n        v29 = v23;\n        v30 = v24;\n        v31 = v25;\n        if ( (_BYTE)v22 )\n        {\n          if ( iswalnum(wc[1]) )\n            v12 = 0;\n        }\n      }\n      if ( v11 && v12 )\n      {\n        v10 = 1;\n        break;\n      }\n      v20 = (unsigned __int64)v16;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      sub_40BA1A((__int64)v17);\n      if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n        break;\n      a1 = &v16[v21];\n    }\n  }\n  free(s);\n  return v10;\n}\n"], [4243656, "sub_40C0C8", "const char *__fastcall sub_40C0C8(const char *a1)\n{\n  size_t v2; // rbx\n  size_t v3; // rax\n  char *s; // [rsp+10h] [rbp-20h]\n  char *v5; // [rsp+18h] [rbp-18h]\n\n  s = gettext(a1);\n  if ( s == a1 )\n    return a1;\n  if ( (unsigned __int8)sub_40BBFA(s, (__int64)a1) )\n    return s;\n  v2 = strlen(s);\n  v3 = strlen(a1);\n  v5 = (char *)sub_40EB4C(v2 + v3 + 4);\n  sprintf(v5, \"%s (%s)\", s, a1);\n  return v5;\n}\n"], [4243817, "sub_40C169", "char *__fastcall sub_40C169(const char *a1, __int64 a2)\n{\n  char *v2; // rax\n  char *result; // rax\n  size_t v4; // rbx\n  size_t v5; // rax\n  char *ptr; // [rsp+18h] [rbp-68h]\n  char *v7; // [rsp+20h] [rbp-60h]\n  __int64 v8; // [rsp+28h] [rbp-58h]\n  __int64 v9; // [rsp+30h] [rbp-50h]\n  char *s1; // [rsp+38h] [rbp-48h]\n  char *s; // [rsp+40h] [rbp-40h]\n  size_t n; // [rsp+48h] [rbp-38h]\n  char *dest; // [rsp+50h] [rbp-30h]\n  char *v14; // [rsp+58h] [rbp-28h]\n  char *v15; // [rsp+60h] [rbp-20h]\n  char *v16; // [rsp+68h] [rbp-18h]\n\n  s1 = gettext(a1);\n  s = (char *)sub_4131D1();\n  ptr = 0LL;\n  v7 = 0LL;\n  v9 = 0LL;\n  if ( (unsigned int)sub_4127B1(s, \"UTF-8\") )\n  {\n    ptr = (char *)sub_40EDA2(a2, \"UTF-8\", s);\n    v8 = (__int64)ptr;\n    n = strlen(s);\n    dest = (char *)sub_40EB4C(n + 11);\n    memcpy(dest, s, n);\n    memcpy(&dest[n], \"//TRANSLIT\", 0xBuLL);\n    v14 = (char *)sub_40EDA2(a2, \"UTF-8\", dest);\n    free(dest);\n    if ( v14 )\n    {\n      if ( strchr(v14, 63) )\n      {\n        free(v14);\n      }\n      else\n      {\n        v7 = v14;\n        v9 = (__int64)v14;\n      }\n    }\n  }\n  else\n  {\n    v8 = a2;\n    v9 = a2;\n  }\n  if ( v8 )\n  {\n    v2 = (char *)v8;\n  }\n  else if ( v9 )\n  {\n    v2 = (char *)v9;\n  }\n  else\n  {\n    v2 = (char *)a1;\n  }\n  v15 = v2;\n  if ( !strcmp(s1, a1) )\n  {\n    if ( ptr && ptr != v15 )\n      free(ptr);\n    if ( v7 && v7 != v15 )\n      free(v7);\n    result = v15;\n  }\n  else if ( (unsigned __int8)sub_40BBFA(s1, (__int64)a1)\n         || v8 && (unsigned __int8)sub_40BBFA(s1, v8)\n         || v9 && (unsigned __int8)sub_40BBFA(s1, v9) )\n  {\n    if ( ptr )\n      free(ptr);\n    if ( v7 )\n      free(v7);\n    result = s1;\n  }\n  else\n  {\n    v4 = strlen(s1);\n    v5 = strlen(v15);\n    v16 = (char *)sub_40EB4C(v4 + v5 + 4);\n    sprintf(v16, \"%s (%s)\", s1, v15);\n    if ( ptr )\n      free(ptr);\n    if ( v7 )\n      free(v7);\n    result = v16;\n  }\n  return result;\n}\n"], [4244533, "sub_40C435", "__int64 __fastcall sub_40C435(unsigned int a1, __int64 a2)\n{\n  return sub_40D8E4(a1, 6LL, a2);\n}\n"], [4244569, "sub_40C459", "__int64 __fastcall sub_40C459(__int64 a1)\n{\n  return sub_40C435(0, a1);\n}\n"], [4244600, "sub_40C478", "__int64 __fastcall sub_40C478(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_61B4A0;\n  v4 = sub_40EC70(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4244673, "sub_40C4C1", "__int64 __fastcall sub_40C4C1(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_61B4A0;\n  return *(unsigned int *)v1;\n}\n"], [4244703, "sub_40C4DF", "__int64 *__fastcall sub_40C4DF(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_61B4A0;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4244739, "sub_40C503", "__int64 __fastcall sub_40C503(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_61B4A0;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4244875, "sub_40C58B", "__int64 __fastcall sub_40C58B(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_61B4A0;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4244926, "sub_40C5BE", "__int64 *__fastcall sub_40C5BE(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_61B4A0;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4245016, "sub_40C618", "_QWORD *__fastcall sub_40C618(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4245136, "sub_40C690", "char *__fastcall sub_40C690(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'\";\n  return v3;\n}\n"], [4245197, "sub_40C6CD", "unsigned __int64 __fastcall sub_40C6CD(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_40C690((const char *)L\"`'\", a5);\n        a9 = sub_40C690((const char *)L\"'\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_40C6CD(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4248344, "sub_40D318", "unsigned __int64 __fastcall sub_40D318(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_61B4A0;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_40C6CD(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4248504, "sub_40D3B8", "__int64 __fastcall sub_40D3B8(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_40D3EA(a1, a2, 0LL, a3);\n}\n"], [4248554, "sub_40D3EA", "__int64 __fastcall sub_40D3EA(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_61B4A0;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_40C6CD(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_40EB32(v10);\n  sub_40C6CD(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4248854, "sub_40D516", "void sub_40D516()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_61B370;\n  for ( i = 1; i < dword_61B350; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_61B4E0 )\n  {\n    free(ptr[1]);\n    qword_61B360 = 256LL;\n    off_61B368 = &unk_61B4E0;\n  }\n  if ( ptr != (void **)&qword_61B360 )\n  {\n    free(ptr);\n    off_61B370 = &qword_61B360;\n  }\n  dword_61B350 = 1;\n}\n"], [4249025, "sub_40D5C1", "void *__fastcall sub_40D5C1(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_61B370;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_61B350 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_61B370 == &qword_61B360;\n    if ( off_61B370 == &qword_61B360 )\n      v4 = 0LL;\n    else\n      v4 = off_61B370;\n    v12 = (__int64 *)sub_40EB81(v4, 16 * v14);\n    off_61B370 = v12;\n    if ( v9 )\n    {\n      v5 = off_61B368;\n      *v12 = qword_61B360;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_61B350], 0, 16 * (v14 - (unsigned int)dword_61B350));\n    dword_61B350 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_40C6CD((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_61B4E0 )\n      free(ptr);\n    ptr = (void *)sub_40EB32(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_40C6CD((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4249671, "sub_40D847", "void *__fastcall sub_40D847(int a1, __int64 a2)\n{\n  return sub_40D5C1(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_61B4A0);\n}\n"], [4249714, "sub_40D872", "void *__fastcall sub_40D872(int a1, __int64 a2, size_t a3)\n{\n  return sub_40D5C1(a1, a2, a3, (__int64)&qword_61B4A0);\n}\n"], [4249758, "sub_40D89E", "void *__fastcall sub_40D89E(__int64 a1)\n{\n  return sub_40D847(0, a1);\n}\n"], [4249789, "sub_40D8BD", "void *__fastcall sub_40D8BD(__int64 a1, size_t a2)\n{\n  return sub_40D872(0, a1, a2);\n}\n"], [4249828, "sub_40D8E4", "void *__fastcall sub_40D8E4(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_40C618(v5, a2);\n  return sub_40D5C1(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4249893, "sub_40D925", "void *__fastcall sub_40D925(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_40C618(v7, a2);\n  return sub_40D5C1(a1, a3, a4, (__int64)v7);\n}\n"], [4249956, "sub_40D964", "void *__fastcall sub_40D964(int a1, __int64 a2)\n{\n  return sub_40D8E4(0, a1, a2);\n}\n"], [4249992, "sub_40D988", "void *__fastcall sub_40D988(int a1, __int64 a2, size_t a3)\n{\n  return sub_40D925(0, a1, a2, a3);\n}\n"], [4250036, "sub_40D9B4", "void *__fastcall sub_40D9B4(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_61B4A0;\n  v4[1] = qword_61B4A8;\n  v4[2] = qword_61B4B0;\n  v4[3] = qword_61B4B8;\n  v4[4] = qword_61B4C0;\n  v4[5] = qword_61B4C8;\n  v4[6] = qword_61B4D0;\n  sub_40C503(v4, a3, 1);\n  return sub_40D5C1(0, a1, a2, (__int64)v4);\n}\n"], [4250184, "sub_40DA48", "void *__fastcall sub_40DA48(__int64 a1, unsigned __int8 a2)\n{\n  return sub_40D9B4(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4250226, "sub_40DA72", "void *__fastcall sub_40DA72(__int64 a1)\n{\n  return sub_40DA48(a1, 0x3Au);\n}\n"], [4250257, "sub_40DA91", "void *__fastcall sub_40DA91(__int64 a1, size_t a2)\n{\n  return sub_40D9B4(a1, a2, 0x3Au);\n}\n"], [4250299, "sub_40DABB", "__int64 __fastcall sub_40DABB(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_40DAF1(a1, a2, a3, a4, -1LL);\n}\n"], [4250353, "sub_40DAF1", "void *__fastcall sub_40DAF1(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_61B4A0;\n  v8[1] = qword_61B4A8;\n  v8[2] = qword_61B4B0;\n  v8[3] = qword_61B4B8;\n  v8[4] = qword_61B4C0;\n  v8[5] = qword_61B4C8;\n  v8[6] = qword_61B4D0;\n  sub_40C5BE(v8, a2, a3);\n  return sub_40D5C1(a1, a4, a5, (__int64)v8);\n}\n"], [4250504, "sub_40DB88", "__int64 __fastcall sub_40DB88(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_40DABB(0, a1, a2, a3);\n}\n"], [4250551, "sub_40DBB7", "void *__fastcall sub_40DBB7(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_40DAF1(0, a1, a2, a3, a4);\n}\n"], [4250609, "sub_40DBF1", "__int64 __fastcall sub_40DBF1(const void *a1, size_t a2)\n{\n  __int64 result; // rax\n  _BYTE *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = memchr(a1, 0, a2);\n  if ( v3 )\n    result = v3 - (_BYTE *)a1 + 1;\n  else\n    result = a2;\n  return result;\n}\n"], [4250683, "sub_40DC3B", "bool __fastcall sub_40DC3B(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_417560[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4250737, "sub_40DC71", "__int64 __fastcall sub_40DC71(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = *(unsigned __int8 *)(a1 + 20);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)(a1 + 8) )\n    {\n      if ( sub_40DC3B(**(_BYTE **)(a1 + 24)) )\n      {\n        *(_QWORD *)(a1 + 32) = 1LL;\n        *(_DWORD *)(a1 + 44) = **(char **)(a1 + 24);\n        *(_BYTE *)(a1 + 40) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 20) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 12)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbiter.h\", 0x86u, \"mbiter_multi_next\");\n      *(_BYTE *)(a1 + 8) = 1;\n    }\n    *(_QWORD *)(a1 + 32) = mbrtowc(\n                             (wchar_t *)(a1 + 44),\n                             *(const char **)(a1 + 24),\n                             *(_QWORD *)a1 - *(_QWORD *)(a1 + 24),\n                             (mbstate_t *)(a1 + 12));\n    if ( *(_QWORD *)(a1 + 32) == -1LL )\n    {\n      *(_QWORD *)(a1 + 32) = 1LL;\n      *(_BYTE *)(a1 + 40) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 32) == -2LL )\n    {\n      *(_QWORD *)(a1 + 32) = *(_QWORD *)a1 - *(_QWORD *)(a1 + 24);\n      *(_BYTE *)(a1 + 40) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 32) )\n      {\n        *(_QWORD *)(a1 + 32) = 1LL;\n        if ( **(_BYTE **)(a1 + 24) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbiter.h\", 0xA1u, \"mbiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 44) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbiter.h\", 0xA2u, \"mbiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 40) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 12)) )\n        *(_BYTE *)(a1 + 8) = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4251219, "sub_40DE53", "char *__fastcall sub_40DE53(const char *a1, int a2)\n{\n  size_t v2; // rax\n  size_t v3; // rax\n  int v5; // [rsp+14h] [rbp-7Ch]\n  char *v6; // [rsp+18h] [rbp-78h]\n  char *i; // [rsp+20h] [rbp-70h]\n  char *j; // [rsp+20h] [rbp-70h]\n  char *v9; // [rsp+28h] [rbp-68h]\n  unsigned __int64 v10; // [rsp+30h] [rbp-60h] BYREF\n  char v11; // [rsp+38h] [rbp-58h]\n  int v12; // [rsp+3Ch] [rbp-54h] BYREF\n  char k; // [rsp+44h] [rbp-4Ch]\n  char *v14; // [rsp+48h] [rbp-48h]\n  __int64 v15; // [rsp+50h] [rbp-40h]\n  char v16; // [rsp+58h] [rbp-38h]\n  wint_t wc; // [rsp+5Ch] [rbp-34h]\n  unsigned __int64 v18; // [rsp+78h] [rbp-18h]\n\n  v18 = __readfsqword(0x28u);\n  v9 = strdup(a1);\n  if ( !v9 )\n    sub_40ECCE();\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( a2 )\n    {\n      for ( i = v9; *i && ((*__ctype_b_loc())[(unsigned __int8)*i] & 0x2000) != 0; ++i )\n        ;\n      v3 = strlen(i);\n      memmove(v9, i, v3 + 1);\n    }\n    if ( a2 != 1 )\n    {\n      for ( j = &v9[strlen(v9) - 1]; j >= v9 && ((*__ctype_b_loc())[(unsigned __int8)*j] & 0x2000) != 0; --j )\n        *j = 0;\n    }\n  }\n  else\n  {\n    if ( a2 )\n    {\n      v14 = v9;\n      v10 = (unsigned __int64)&v9[strlen(v9)];\n      v11 = 0;\n      memset(&v12, 0, 8uLL);\n      for ( k = 0; (unsigned __int64)v14 < v10; k = 0 )\n      {\n        sub_40DC71((__int64)&v10);\n        if ( !v16 || !iswspace(wc) )\n          break;\n        v14 += v15;\n      }\n      v2 = strlen(v14);\n      memmove(v9, v14, v2 + 1);\n    }\n    if ( a2 != 1 )\n    {\n      v5 = 0;\n      v14 = v9;\n      v10 = (unsigned __int64)&v9[strlen(v9)];\n      v11 = 0;\n      memset(&v12, 0, 8uLL);\n      k = 0;\n      while ( (unsigned __int64)v14 < v10 )\n      {\n        sub_40DC71((__int64)&v10);\n        if ( v5 || !v16 || !iswspace(wc) )\n        {\n          if ( v5 || v16 == 1 && iswspace(wc) )\n          {\n            if ( v5 != 1 || v16 == 1 && iswspace(wc) )\n            {\n              if ( v5 == 1 && v16 && iswspace(wc) )\n              {\n                v5 = 2;\n                v6 = v14;\n              }\n              else if ( v5 != 2 || !v16 || !iswspace(wc) )\n              {\n                v5 = 1;\n              }\n            }\n          }\n          else\n          {\n            v5 = 1;\n          }\n        }\n        v14 += v15;\n        k = 0;\n      }\n      if ( v5 == 2 )\n        *v6 = 0;\n    }\n  }\n  return v9;\n}\n"], [4252082, "sub_40E1B2", "int __fastcall sub_40E1B2(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4253597, "sub_40E79D", "int __fastcall sub_40E79D(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_40E1B2(a1, a2, a3, a4, a5, i);\n}\n"], [4253707, "sub_40E80B", "int __fastcall sub_40E80B(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_40E1B2(a1, a2, a3, a4, v8, i);\n}\n"], [4253924, "sub_40E8E4", "int sub_40E8E4(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_40E80B(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4254106, "sub_40E99A", "int sub_40E99A()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4254211, "sub_40EA03", "__int64 __fastcall sub_40EA03(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_40ECCE(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_40EB4C(a2 * a1);\n}\n"], [4254273, "sub_40EA41", "__int64 __fastcall sub_40EA41(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_40ECCE(a1, a2, v4);\n  return sub_40EB81(a1, a3 * a2);\n}\n"], [4254349, "sub_40EA8D", "__int64 __fastcall sub_40EA8D(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_40ECCE(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_40EB81(a1, a3 * v6);\n}\n"], [4254514, "sub_40EB32", "__int64 __fastcall sub_40EB32(__int64 a1)\n{\n  return sub_40EB4C(a1);\n}\n"], [4254540, "sub_40EB4C", "void *__fastcall sub_40EB4C(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_40ECCE(a1, a2, v2);\n  return v4;\n}\n"], [4254593, "sub_40EB81", "void *__fastcall sub_40EB81(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_40ECCE(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4254690, "sub_40EBE2", "__int64 __fastcall sub_40EBE2(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_40EA8D(a1, a2, 1uLL);\n}\n"], [4254732, "sub_40EC0C", "void *__fastcall sub_40EC0C(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_40EB4C(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4254775, "sub_40EC37", "void *__fastcall sub_40EC37(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_40ECCE(a1, a2, v2);\n  return v4;\n}\n"], [4254832, "sub_40EC70", "void *__fastcall sub_40EC70(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_40EB4C(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4254881, "sub_40ECA1", "void *__fastcall sub_40ECA1(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_40EC70(a1, v1 + 1);\n}\n"], [4254926, "sub_40ECCE", "void __noreturn sub_40ECCE()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4255069, "sub_40ED5D", "__int64 __fastcall sub_40ED5D(__int64 a1, __int64 a2)\n{\n  __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_414BBF(a1, a2);\n  if ( !v3 && *__errno_location() == 12 )\n    sub_40ECCE();\n  return v3;\n}\n"], [4255138, "sub_40EDA2", "__int64 __fastcall sub_40EDA2(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  v4 = sub_414EF4(a1, a2, a3);\n  if ( !v4 && *__errno_location() == 12 )\n    sub_40ECCE();\n  return v4;\n}\n"], [4255215, "sub_40EDEF", "__int64 __fastcall sub_40EDEF(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4255310, "sub_40EE4E", "__int64 __fastcall sub_40EE4E(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_40EDEF(a1, a2) )\n    ;\n  return i;\n}\n"], [4255375, "sub_40EE8F", "__int64 __fastcall sub_40EE8F(const char *a1, char **a2, int a3, _QWORD *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  unsigned __int64 v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoul\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoul(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_40EE4E(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_40EDEF(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_40EE4E(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_40EDEF(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_40EE4E(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_40EE4E(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_40EDEF(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_40EE4E(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_40EE4E(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_40EE4E(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_40EE4E(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4256507, "sub_40F2FB", "void __fastcall sub_40F2FB(unsigned int a1, int a2, char a3, __int64 a4, __int64 a5, int a6)\n{\n  char *v6; // rax\n  char v9[8]; // [rsp+20h] [rbp-20h] BYREF\n  const char *v10; // [rsp+28h] [rbp-18h]\n  char *msgid; // [rsp+30h] [rbp-10h]\n  char *v12; // [rsp+38h] [rbp-8h]\n\n  v10 = \"--\";\n  if ( a1 > 3 )\n  {\n    if ( a1 != 4 )\n      goto LABEL_6;\n    msgid = \"invalid %s%s argument `%s'\";\n  }\n  else if ( a1 >= 2 )\n  {\n    msgid = \"invalid suffix in %s%s argument `%s'\";\n  }\n  else\n  {\n    if ( a1 != 1 )\nLABEL_6:\n      abort();\n    msgid = \"%s%s argument `%s' too large\";\n  }\n  if ( a2 >= 0 )\n  {\n    v12 = *(char **)(32LL * a2 + a4);\n  }\n  else\n  {\n    v10 -= a2;\n    v9[0] = a3;\n    v9[1] = 0;\n    v12 = v9;\n  }\n  v6 = gettext(msgid);\n  error(a6, 0, v6, v10, v12, a5);\n}\n"], [4256725, "sub_40F3D5", "void __fastcall __noreturn sub_40F3D5(unsigned int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  sub_40F2FB(a1, a2, a3, a4, a5, status);\n  abort();\n}\n"], [4256795, "sub_40F41B", "__int64 __fastcall sub_40F41B(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4256890, "sub_40F47A", "__int64 __fastcall sub_40F47A(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_40F41B(a1, a2) )\n    ;\n  return i;\n}\n"], [4256955, "sub_40F4BB", "__int64 __fastcall sub_40F4BB(const char *a1, char **a2, int a3, uintmax_t *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  uintmax_t v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoumax\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoumax(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_40F47A(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_40F41B(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_40F47A(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_40F41B(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_40F47A(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_40F47A(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_40F41B(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_40F47A(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_40F47A(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_40F47A(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_40F47A(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4258087, "sub_40F927", "int __fastcall sub_40F927(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_40FA0F(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4258268, "sub_40F9DC", "__int64 __fastcall sub_40F9DC(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_40FA5A(a1, 0LL, 1LL);\n  return result;\n}\n"], [4258319, "sub_40FA0F", "int __fastcall sub_40FA0F(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_40F9DC(a1);\n  return fflush(a1);\n}\n"], [4258394, "sub_40FA5A", "int __fastcall sub_40FA5A(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4258578, "sub_40FB12", "_BOOL8 __fastcall sub_40FB12(_QWORD *a1, _QWORD *a2)\n{\n  return a1[1] == a2[1] && *a1 == *a2;\n}\n"], [4258663, "sub_40FB67", "unsigned __int64 __fastcall sub_40FB67(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n"], [4258705, "sub_40FB91", "__int64 __fastcall sub_40FB91(__int64 a1)\n{\n  if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n  {\n    *(_QWORD *)(a1 + 88) = sub_409151(\n                             31LL,\n                             0LL,\n                             sub_40FB67,\n                             (bool (__fastcall *)(__int64, __int64))sub_40FB12,\n                             (size_t)free);\n    if ( !*(_QWORD *)(a1 + 88) )\n      return 0LL;\n  }\n  else\n  {\n    *(_QWORD *)(a1 + 88) = malloc(0x20uLL);\n    if ( !*(_QWORD *)(a1 + 88) )\n      return 0LL;\n    sub_412970(*(_QWORD *)(a1 + 88));\n  }\n  return 1LL;\n}\n"], [4258858, "sub_40FC2A", "__int64 __fastcall sub_40FC2A(__int64 a1, __int64 a2)\n{\n  _QWORD *ptr; // [rsp+20h] [rbp-10h]\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n  {\n    ptr = malloc(0x18uLL);\n    if ( !ptr )\n      return 0LL;\n    *ptr = *(_QWORD *)(a2 + 120);\n    ptr[1] = *(_QWORD *)(a2 + 128);\n    ptr[2] = a2;\n    v4 = sub_409DE7(*(_QWORD **)(a1 + 88), (__int64)ptr);\n    if ( (_QWORD *)v4 != ptr )\n    {\n      free(ptr);\n      if ( !v4 )\n        return 0LL;\n      *(_QWORD *)a2 = *(_QWORD *)(v4 + 16);\n      *(_WORD *)(a2 + 112) = 2;\n    }\n  }\n  else if ( (unsigned __int8)sub_412991(*(_QWORD *)(a1 + 88), a2 + 120) )\n  {\n    *(_QWORD *)a2 = a2;\n    *(_WORD *)(a2 + 112) = 2;\n  }\n  return 1LL;\n}\n"], [4259130, "sub_40FD3A", "void __fastcall sub_40FD3A(__int64 a1, __int64 a2)\n{\n  __int64 *v2; // [rsp+18h] [rbp-38h]\n  void *ptr; // [rsp+20h] [rbp-30h]\n  __int64 *v4; // [rsp+28h] [rbp-28h]\n  __int64 v5[4]; // [rsp+30h] [rbp-20h] BYREF\n\n  v2 = (__int64 *)(a2 + 120);\n  if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n  {\n    v5[0] = *v2;\n    v5[1] = *(_QWORD *)(a2 + 128);\n    ptr = (void *)sub_409E30(*(_QWORD *)(a1 + 88), (__int64)v5);\n    if ( !ptr )\n      abort();\n    free(ptr);\n  }\n  else\n  {\n    v4 = *(__int64 **)(a2 + 8);\n    if ( v4 && v4[11] >= 0 )\n    {\n      if ( !*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16LL) )\n        abort();\n      if ( **(_QWORD **)(a1 + 88) == *(_QWORD *)(a2 + 128) && *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8LL) == *v2 )\n      {\n        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8LL) = v4[15];\n        **(_QWORD **)(a1 + 88) = v4[16];\n      }\n    }\n  }\n}\n"], [4259399, "sub_40FE47", "void __fastcall sub_40FE47(__int64 a1)\n{\n  if ( (*(_DWORD *)(a1 + 72) & 0x102) != 0 )\n  {\n    if ( *(_QWORD *)(a1 + 88) )\n      sub_4093BC(*(_QWORD *)(a1 + 88));\n  }\n  else\n  {\n    free(*(void **)(a1 + 88));\n  }\n}\n"], [4259476, "sub_40FE94", "__int64 __fastcall sub_40FE94(__int64 a1)\n{\n  __int64 result; // rax\n  int fd; // [rsp+1Ch] [rbp-4h]\n\n  while ( 1 )\n  {\n    result = (unsigned int)sub_412BCF(a1) ^ 1;\n    if ( !(_BYTE)result )\n      break;\n    fd = sub_412C69(a1);\n    if ( fd >= 0 )\n      close(fd);\n  }\n  return result;\n}\n"], [4259542, "sub_40FED6", "__int64 __fastcall sub_40FED6(__int64 a1, char a2)\n{\n  __int64 result; // rax\n\n  if ( *(_WORD *)(a1 + 112) != 11 )\n    abort();\n  if ( a2 )\n    result = 2LL;\n  else\n    result = 1LL;\n  *(_QWORD *)(a1 + 168) = result;\n  return result;\n}\n"], [4259609, "sub_40FF19", "__int64 __fastcall sub_40FF19(int a1, int a2, int a3, int *a4, int a5, int a6)\n{\n  int fd; // [rsp+20h] [rbp-10h]\n  _BYTE v9[12]; // [rsp+24h] [rbp-Ch]\n\n  fd = sub_4146C7(a1, a2, a3 | 0x10900u, a2, a5, a6);\n  if ( fd < 0 )\n    return 0LL;\n  sub_412828((unsigned int)fd, 1LL);\n  *(_QWORD *)&v9[4] = fdopendir(fd);\n  if ( *(_QWORD *)&v9[4] )\n  {\n    *a4 = fd;\n  }\n  else\n  {\n    *(_QWORD *)v9 = (unsigned int)*__errno_location();\n    close(fd);\n    *__errno_location() = *(_DWORD *)v9;\n  }\n  return *(_QWORD *)&v9[4];\n}\n"], [4259762, "sub_40FFB2", "__int64 __fastcall sub_40FFB2(__int64 a1, int a2, char a3)\n{\n  __int64 result; // rax\n  int v4; // [rsp+18h] [rbp-8h]\n  int fd; // [rsp+1Ch] [rbp-4h]\n\n  v4 = *(_DWORD *)(a1 + 44);\n  if ( v4 == a2 && v4 != -100 )\n    abort();\n  if ( a3 )\n  {\n    fd = sub_412BE1(a1 + 96, (unsigned int)v4);\n    if ( fd >= 0 )\n      close(fd);\n  }\n  else if ( (*(_DWORD *)(a1 + 72) & 4) == 0 && v4 >= 0 )\n  {\n    close(v4);\n  }\n  result = a1;\n  *(_DWORD *)(a1 + 44) = a2;\n  return result;\n}\n"], [4259903, "sub_41003F", "__int64 __fastcall sub_41003F(__int64 a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // edx\n  int v7; // eax\n  int v8; // eax\n  int v10; // [rsp+18h] [rbp-8h]\n  unsigned int v11; // [rsp+1Ch] [rbp-4h]\n\n  if ( (*(_DWORD *)(a1 + 72) & 0x10) != 0 )\n    v6 = 198912;\n  else\n    v6 = 67840;\n  if ( (*(_DWORD *)(a1 + 72) & 0x800) != 0 )\n    v7 = 0x40000;\n  else\n    v7 = 0;\n  v10 = v6 | v7;\n  if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n    v8 = sub_4146C7(*(_DWORD *)(a1 + 44), a2, v10, a2, a5, a6);\n  else\n    v8 = sub_412A65(a2, v10, v10, a4, a5, a6, a2);\n  v11 = v8;\n  if ( v8 >= 0 )\n    sub_412828((unsigned int)v8, 1LL);\n  return v11;\n}\n"], [4260076, "fts_open", "__int64 __fastcall fts_open(const char **a1, int a2, __int64 a3)\n{\n  void *v4; // rax\n  __int64 v5; // rbx\n  int v6; // eax\n  __int64 v7; // rax\n  bool v8; // al\n  void *v9; // r13\n  unsigned __int64 v10; // r14\n  __int64 v11; // rax\n  _QWORD *v12; // r12\n  __int64 v13; // rdx\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  const char **v18; // [rsp+8h] [rbp-58h]\n  bool v19; // [rsp+1Fh] [rbp-41h]\n  _QWORD *ptr; // [rsp+20h] [rbp-40h]\n  _QWORD *v21; // [rsp+28h] [rbp-38h]\n  unsigned __int64 v22; // [rsp+30h] [rbp-30h]\n  size_t v23; // [rsp+38h] [rbp-28h]\n\n  v18 = a1;\n  ptr = 0LL;\n  v21 = 0LL;\n  if ( (a2 & 0xFFFFF000) != 0 || (a2 & 4) != 0 && (a2 & 0x200) != 0 || (a2 & 0x12) == 0 )\n  {\n    *__errno_location() = 22;\n    return 0LL;\n  }\n  v4 = malloc(0x80uLL);\n  v5 = (__int64)v4;\n  if ( !v4 )\n    return 0LL;\n  memset(v4, 0, 0x80uLL);\n  *(_QWORD *)(v5 + 64) = a3;\n  *(_DWORD *)(v5 + 72) = a2;\n  if ( (*(_DWORD *)(v5 + 72) & 2) != 0 )\n  {\n    *(_DWORD *)(v5 + 72) |= 4u;\n    v6 = *(_DWORD *)(v5 + 72);\n    BYTE1(v6) &= 0xFDu;\n    *(_DWORD *)(v5 + 72) = v6;\n  }\n  *(_DWORD *)(v5 + 44) = -100;\n  v22 = sub_4123E8(a1);\n  v7 = 4096LL;\n  if ( v22 >= 0x1000 )\n    v7 = v22;\n  if ( (unsigned __int8)sub_412208(v5, v7) != 1 )\n    goto LABEL_47;\n  if ( *a1 )\n  {\n    ptr = (_QWORD *)sub_41211F(v5, &unk_417CA1, 0LL);\n    if ( ptr )\n    {\n      ptr[11] = -1LL;\n      goto LABEL_17;\n    }\nLABEL_46:\n    free(*(void **)(v5 + 32));\nLABEL_47:\n    free((void *)v5);\n    return 0LL;\n  }\nLABEL_17:\n  v8 = !a3 || (*(_DWORD *)(v5 + 72) & 0x400) != 0;\n  v19 = v8;\n  v9 = 0LL;\n  v10 = 0LL;\n  while ( *v18 )\n  {\n    v23 = strlen(*v18);\n    v11 = sub_41211F(v5, *v18, v23);\n    v12 = (_QWORD *)v11;\n    if ( !v11 )\n      goto LABEL_45;\n    *(_QWORD *)(v11 + 88) = 0LL;\n    *(_QWORD *)(v11 + 8) = ptr;\n    *(_QWORD *)(v11 + 48) = v11 + 264;\n    if ( v19 && v9 )\n    {\n      *(_WORD *)(v11 + 112) = 11;\n      sub_40FED6(v11, 1);\n    }\n    else\n    {\n      *(_WORD *)(v11 + 112) = sub_411DD6(v5, v11, 0LL);\n    }\n    if ( a3 )\n    {\n      v12[2] = v9;\n      v9 = v12;\n    }\n    else\n    {\n      v12[2] = 0LL;\n      if ( v9 )\n        v21[2] = v12;\n      else\n        v9 = v12;\n      v21 = v12;\n    }\n    ++v18;\n    ++v10;\n  }\n  if ( a3 && v10 > 1 )\n    v9 = (void *)sub_411FD8(v5, v9, v10);\n  *(_QWORD *)v5 = sub_41211F(v5, &unk_417CA1, 0LL);\n  if ( !*(_QWORD *)v5\n    || (*(_QWORD *)(*(_QWORD *)v5 + 16LL) = v9,\n        *(_WORD *)(*(_QWORD *)v5 + 112LL) = 9,\n        (unsigned __int8)sub_40FB91(v5) ^ 1) )\n  {\nLABEL_45:\n    sub_4121CD(v9);\n    free(ptr);\n    goto LABEL_46;\n  }\n  if ( (*(_DWORD *)(v5 + 72) & 4) == 0 && (*(_DWORD *)(v5 + 72) & 0x200) == 0 )\n  {\n    *(_DWORD *)(v5 + 40) = sub_41003F(v5, (int)\".\", v13, v14, v15, v16);\n    if ( *(int *)(v5 + 40) < 0 )\n      *(_DWORD *)(v5 + 72) |= 4u;\n  }\n  sub_412B77(v5 + 96, 0xFFFFFFFFLL);\n  return v5;\n}\n"], [4260934, "sub_410446", "__int64 __fastcall sub_410446(__int64 a1, const char *a2)\n{\n  char *v2; // r12\n  const char *v3; // r12\n  size_t v4; // r13\n  __int64 result; // rax\n\n  *((_QWORD *)a2 + 9) = *((_QWORD *)a2 + 12);\n  memmove(*(void **)(a1 + 32), a2 + 264, *((_QWORD *)a2 + 9) + 1LL);\n  v2 = strrchr(a2 + 264, 47);\n  if ( v2 && (a2 + 264 != v2 || v2[1]) )\n  {\n    v3 = v2 + 1;\n    v4 = strlen(v3);\n    memmove((void *)(a2 + 264), v3, v4 + 1);\n    *((_QWORD *)a2 + 12) = v4;\n  }\n  *((_QWORD *)a2 + 7) = *(_QWORD *)(a1 + 32);\n  result = *((_QWORD *)a2 + 7);\n  *((_QWORD *)a2 + 6) = result;\n  return result;\n}\n"], [4261120, "fts_close", "__int64 __fastcall fts_close(__int64 a1)\n{\n  _QWORD *v1; // rbx\n  void *v2; // r12\n  _QWORD *v3; // rax\n  int v5; // [rsp+1Ch] [rbp-14h]\n\n  v5 = 0;\n  if ( *(_QWORD *)a1 )\n  {\n    v1 = *(_QWORD **)a1;\n    while ( (__int64)v1[11] >= 0 )\n    {\n      v2 = v1;\n      if ( v1[2] )\n        v3 = (_QWORD *)v1[2];\n      else\n        v3 = (_QWORD *)v1[1];\n      v1 = v3;\n      free(v2);\n    }\n    free(v1);\n  }\n  if ( *(_QWORD *)(a1 + 8) )\n    sub_4121CD(*(void **)(a1 + 8));\n  free(*(void **)(a1 + 16));\n  free(*(void **)(a1 + 32));\n  if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n  {\n    if ( *(int *)(a1 + 44) >= 0 && close(*(_DWORD *)(a1 + 44)) )\n    {\nLABEL_20:\n      v5 = *__errno_location();\n      goto LABEL_21;\n    }\n  }\n  else if ( (*(_DWORD *)(a1 + 72) & 4) == 0 )\n  {\n    if ( fchdir(*(_DWORD *)(a1 + 40)) )\n      v5 = *__errno_location();\n    if ( close(*(_DWORD *)(a1 + 40)) && !v5 )\n      goto LABEL_20;\n  }\nLABEL_21:\n  sub_40FE94(a1 + 96);\n  if ( *(_QWORD *)(a1 + 80) )\n    sub_4093BC(*(_QWORD *)(a1 + 80));\n  sub_40FE47(a1);\n  free((void *)a1);\n  if ( !v5 )\n    return 0LL;\n  *__errno_location() = v5;\n  return 0xFFFFFFFFLL;\n}\n"], [4261513, "sub_410689", "_BOOL8 __fastcall sub_410689(int a1)\n{\n  struct statfs buf; // [rsp+10h] [rbp-80h] BYREF\n\n  if ( fstatfs(a1, &buf) )\n    return 1LL;\n  return buf.f_type != 26985 && buf.f_type != 16914836;\n}\n"], [4261595, "sub_4106DB", "_BOOL8 __fastcall sub_4106DB(int a1)\n{\n  _BOOL8 result; // rax\n  struct statfs buf; // [rsp+10h] [rbp-80h] BYREF\n\n  if ( fstatfs(a1, &buf) )\n    result = 0LL;\n  else\n    result = buf.f_type == 1382369651;\n  return result;\n}\n"], [4261669, "sub_410725", "unsigned __int64 __fastcall sub_410725(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"], [4261710, "sub_41074E", "bool __fastcall sub_41074E(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n"], [4261760, "sub_410780", "__int64 __fastcall sub_410780(__int64 a1)\n{\n  __int64 result; // rax\n  bool v2; // [rsp+1Fh] [rbp-31h]\n  _QWORD *v3; // [rsp+20h] [rbp-30h]\n  __int64 v4; // [rsp+28h] [rbp-28h]\n  __int64 v5; // [rsp+30h] [rbp-20h]\n  __int64 v6; // [rsp+30h] [rbp-20h]\n  _BYTE *ptr; // [rsp+38h] [rbp-18h]\n  __int64 v8; // [rsp+40h] [rbp-10h] BYREF\n\n  v4 = *(_QWORD *)(a1 + 80);\n  v3 = *(_QWORD **)(v4 + 80);\n  if ( (*(_DWORD *)(v4 + 72) & 0x200) == 0 )\n    return 0LL;\n  if ( !v3 )\n  {\n    *(_QWORD *)(v4 + 80) = sub_409151(\n                             13LL,\n                             0LL,\n                             (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_410725,\n                             (bool (__fastcall *)(__int64, __int64))sub_41074E,\n                             (size_t)free);\n    v3 = *(_QWORD **)(v4 + 80);\n    if ( !v3 )\n      return 0LL;\n  }\n  v8 = *(_QWORD *)(a1 + 120);\n  v5 = sub_408B18((__int64)v3, (__int64)&v8);\n  if ( v5 )\n    return *(unsigned __int8 *)(v5 + 8);\n  ptr = malloc(0x10uLL);\n  if ( !ptr )\n    return 0LL;\n  v2 = sub_4106DB(*(_DWORD *)(v4 + 44));\n  ptr[8] = v2;\n  *(_QWORD *)ptr = *(_QWORD *)(a1 + 120);\n  v6 = sub_409DE7(v3, (__int64)ptr);\n  if ( v6 )\n  {\n    if ( (_BYTE *)v6 != ptr )\n      abort();\n    result = v2;\n  }\n  else\n  {\n    free(ptr);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4262093, "fts_read", "__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 result; // rax\n  __int64 v2; // rbx\n  __int16 v3; // r13\n  __int64 v4; // rdx\n  int v5; // ecx\n  int v6; // er8\n  int v7; // er9\n  int v8; // eax\n  _QWORD *i; // rbx\n  _QWORD *v10; // r13\n  __int64 v11; // rbx\n  int v12; // eax\n  int v13; // eax\n  __int64 v14; // rdx\n  int v15; // ecx\n  int v16; // er8\n  int v17; // er9\n  __int64 v18; // rax\n  _BYTE *v19; // rax\n  __int64 v20; // rbx\n  int v21; // eax\n  bool v22; // al\n  int v23; // eax\n  int v24; // eax\n  __int16 v25; // ax\n  int v26; // [rsp+4h] [rbp-2Ch]\n  __int64 v27; // [rsp+8h] [rbp-28h]\n\n  if ( !*(_QWORD *)a1 || (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n    return 0LL;\n  v2 = *(_QWORD *)a1;\n  v3 = *(_WORD *)(*(_QWORD *)a1 + 116LL);\n  *(_WORD *)(*(_QWORD *)a1 + 116LL) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v2 + 112) = sub_411DD6(a1, v2, 0LL);\n    return v2;\n  }\n  if ( v3 == 2 && (*(_WORD *)(v2 + 112) == 12 || *(_WORD *)(v2 + 112) == 13) )\n  {\n    *(_WORD *)(v2 + 112) = sub_411DD6(a1, v2, 1LL);\n    if ( *(_WORD *)(v2 + 112) == 1 && (*(_DWORD *)(a1 + 72) & 4) == 0 )\n    {\n      *(_DWORD *)(v2 + 68) = sub_41003F(a1, (int)\".\", v4, v5, v6, v7);\n      if ( *(int *)(v2 + 68) >= 0 )\n      {\n        *(_WORD *)(v2 + 114) |= 2u;\n      }\n      else\n      {\n        *(_DWORD *)(v2 + 64) = *__errno_location();\n        *(_WORD *)(v2 + 112) = 7;\n      }\n    }\n    goto LABEL_71;\n  }\n  if ( *(_WORD *)(v2 + 112) == 1 )\n  {\n    if ( v3 == 4 || (*(_DWORD *)(a1 + 72) & 0x40) != 0 && *(_QWORD *)(v2 + 120) != *(_QWORD *)(a1 + 24) )\n    {\n      if ( (*(_WORD *)(v2 + 114) & 2) != 0 )\n        close(*(_DWORD *)(v2 + 68));\n      if ( *(_QWORD *)(a1 + 8) )\n      {\n        sub_4121CD(*(void **)(a1 + 8));\n        *(_QWORD *)(a1 + 8) = 0LL;\n      }\n      *(_WORD *)(v2 + 112) = 6;\n      sub_40FD3A(a1, v2);\n      return v2;\n    }\n    if ( *(_QWORD *)(a1 + 8) && (*(_DWORD *)(a1 + 72) & 0x1000) != 0 )\n    {\n      v8 = *(_DWORD *)(a1 + 72);\n      BYTE1(v8) &= 0xEFu;\n      *(_DWORD *)(a1 + 72) = v8;\n      sub_4121CD(*(void **)(a1 + 8));\n      *(_QWORD *)(a1 + 8) = 0LL;\n    }\n    if ( *(_QWORD *)(a1 + 8) )\n    {\n      if ( (unsigned int)sub_41243E(a1, v2, 0xFFFFFFFFLL, *(_QWORD *)(v2 + 48)) )\n      {\n        *(_DWORD *)(v2 + 64) = *__errno_location();\n        *(_WORD *)(v2 + 114) |= 1u;\n        for ( i = *(_QWORD **)(a1 + 8); i; i = (_QWORD *)i[2] )\n          i[6] = *(_QWORD *)(i[1] + 48LL);\n      }\n    }\n    else\n    {\n      *(_QWORD *)(a1 + 8) = sub_411394(a1, 3LL);\n      if ( !*(_QWORD *)(a1 + 8) )\n      {\n        if ( (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n          return 0LL;\n        if ( *(_DWORD *)(v2 + 64) && *(_WORD *)(v2 + 112) != 4 )\n          *(_WORD *)(v2 + 112) = 7;\n        sub_40FD3A(a1, v2);\n        return v2;\n      }\n    }\n    v2 = *(_QWORD *)(a1 + 8);\n    *(_QWORD *)(a1 + 8) = 0LL;\nLABEL_67:\n    if ( *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 56LL) + *(_QWORD *)(*(_QWORD *)(v2 + 8) + 72LL) - 1LL) == 47 )\n      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 72LL) - 1LL;\n    else\n      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 72LL);\n    v19 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v18);\n    *v19 = 47;\n    memmove(v19 + 1, (const void *)(v2 + 264), *(_QWORD *)(v2 + 96) + 1LL);\n    goto LABEL_71;\n  }\n  while ( 1 )\n  {\n    v10 = (_QWORD *)v2;\n    if ( !*(_QWORD *)(v2 + 16) && *(_QWORD *)(*(_QWORD *)(v2 + 8) + 24LL) )\n    {\n      v11 = *(_QWORD *)(v2 + 8);\n      *(_QWORD *)a1 = v11;\n      *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v11 + 72)) = 0;\n      v2 = sub_411394(a1, 3LL);\n      if ( v2 )\n      {\n        free(v10);\n        goto LABEL_67;\n      }\n      if ( (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n        return 0LL;\nLABEL_91:\n      v20 = v10[1];\n      *(_QWORD *)a1 = v20;\n      free(v10);\n      if ( *(_QWORD *)(v20 + 88) == -1LL )\n      {\n        free((void *)v20);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return 0LL;\n      }\n      if ( *(_WORD *)(v20 + 112) == 11 )\n        abort();\n      *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v20 + 72)) = 0;\n      if ( *(_QWORD *)(v20 + 88) )\n      {\n        if ( (*(_WORD *)(v20 + 114) & 2) != 0 )\n        {\n          if ( (*(_DWORD *)(a1 + 72) & 4) == 0 )\n          {\n            if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n            {\n              sub_40FFB2(a1, *(_DWORD *)(v20 + 68), 1);\n              v22 = 0;\n            }\n            else\n            {\n              v22 = fchdir(*(_DWORD *)(v20 + 68)) != 0;\n            }\n            if ( v22 )\n            {\n              v26 = *__errno_location();\n              close(*(_DWORD *)(v20 + 68));\n              *__errno_location() = v26;\n              *(_DWORD *)(v20 + 64) = *__errno_location();\n              v23 = *(_DWORD *)(a1 + 72);\n              BYTE1(v23) |= 0x20u;\n              *(_DWORD *)(a1 + 72) = v23;\n            }\n          }\n          close(*(_DWORD *)(v20 + 68));\n          goto LABEL_115;\n        }\n        if ( (*(_WORD *)(v20 + 114) & 1) == 0 && (unsigned int)sub_41243E(a1, *(_QWORD *)(v20 + 8), 0xFFFFFFFFLL, \"..\") )\n          goto LABEL_114;\n        goto LABEL_115;\n      }\n      sub_40FE94(a1 + 96);\n      if ( (*(_DWORD *)(a1 + 72) & 4) == 0 )\n      {\n        if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n        {\n          sub_40FFB2(a1, -100, 1);\n        }\n        else if ( fchdir(*(_DWORD *)(a1 + 40)) )\n        {\n          v21 = 1;\n          goto LABEL_102;\n        }\n      }\n      v21 = 0;\nLABEL_102:\n      if ( v21 )\n      {\nLABEL_114:\n        *(_DWORD *)(v20 + 64) = *__errno_location();\n        v24 = *(_DWORD *)(a1 + 72);\n        BYTE1(v24) |= 0x20u;\n        *(_DWORD *)(a1 + 72) = v24;\n      }\nLABEL_115:\n      if ( *(_DWORD *)(v20 + 64) )\n        v25 = 7;\n      else\n        v25 = 6;\n      *(_WORD *)(v20 + 112) = v25;\n      if ( !*(_DWORD *)(v20 + 64) )\n        sub_40FD3A(a1, v20);\n      if ( (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n        result = 0LL;\n      else\n        result = v20;\n      return result;\n    }\n    v2 = *(_QWORD *)(v2 + 16);\n    if ( !v2 )\n      goto LABEL_91;\n    *(_QWORD *)a1 = v2;\n    free(v10);\n    if ( !*(_QWORD *)(v2 + 88) )\n      break;\n    if ( *(_WORD *)(v2 + 116) != 4 )\n    {\n      if ( *(_WORD *)(v2 + 116) == 2 )\n      {\n        *(_WORD *)(v2 + 112) = sub_411DD6(a1, v2, 1LL);\n        if ( *(_WORD *)(v2 + 112) == 1 && (*(_DWORD *)(a1 + 72) & 4) == 0 )\n        {\n          *(_DWORD *)(v2 + 68) = sub_41003F(a1, (int)\".\", v14, v15, v16, v17);\n          if ( *(int *)(v2 + 68) >= 0 )\n          {\n            *(_WORD *)(v2 + 114) |= 2u;\n          }\n          else\n          {\n            *(_DWORD *)(v2 + 64) = *__errno_location();\n            *(_WORD *)(v2 + 112) = 7;\n          }\n        }\n        *(_WORD *)(v2 + 116) = 3;\n      }\n      goto LABEL_67;\n    }\n  }\n  sub_40FE94(a1 + 96);\n  if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n    goto LABEL_55;\n  if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n  {\n    sub_40FFB2(a1, -100, 1);\n    goto LABEL_55;\n  }\n  if ( fchdir(*(_DWORD *)(a1 + 40)) )\n    v12 = 1;\n  else\nLABEL_55:\n    v12 = 0;\n  if ( v12 )\n  {\n    v13 = *(_DWORD *)(a1 + 72);\n    BYTE1(v13) |= 0x20u;\n    *(_DWORD *)(a1 + 72) = v13;\n    return 0LL;\n  }\n  sub_40FE47(a1);\n  sub_410446(a1, (const char *)v2);\n  sub_40FB91(a1);\nLABEL_71:\n  *(_QWORD *)a1 = v2;\n  if ( *(_WORD *)(v2 + 112) == 11 )\n  {\n    if ( *(_QWORD *)(v2 + 168) == 2LL )\n    {\n      v27 = *(_QWORD *)(v2 + 8);\n      if ( *(__int64 *)(v2 + 88) <= 0\n        || *(_QWORD *)(v27 + 104)\n        || (*(_DWORD *)(a1 + 72) & 8) == 0\n        || (*(_DWORD *)(a1 + 72) & 0x10) == 0\n        || !(unsigned __int8)sub_410780(v27) )\n      {\n        *(_WORD *)(v2 + 112) = sub_411DD6(a1, v2, 0LL);\n        if ( (*(_DWORD *)(v2 + 144) & 0xF000) == 0x4000 && *(_QWORD *)(v2 + 88) && *(_QWORD *)(v27 + 104) )\n          --*(_QWORD *)(v27 + 104);\n      }\n    }\n    else if ( *(_QWORD *)(v2 + 168) != 1LL )\n    {\n      abort();\n    }\n  }\n  if ( *(_WORD *)(v2 + 112) != 1 )\n    return v2;\n  if ( !*(_QWORD *)(v2 + 88) )\n    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v2 + 120);\n  if ( (unsigned __int8)sub_40FC2A(a1, v2) == 1 )\n    return v2;\n  *__errno_location() = 12;\n  return 0LL;\n}\n"], [4264128, "fts_set", "__int64 __fastcall fts_set(__int64 a1, __int64 a2, int a3)\n{\n  __int64 result; // rax\n\n  if ( !a3 || a3 == 1 || a3 == 2 || a3 == 3 || a3 == 4 )\n  {\n    *(_WORD *)(a2 + 116) = a3;\n    result = 0LL;\n  }\n  else\n  {\n    *__errno_location() = 22;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4264215, "fts_children", "__int64 __fastcall fts_children(__int64 a1, int a2)\n{\n  __int64 v3; // r12\n  __int64 v4; // rdx\n  int v5; // ecx\n  int v6; // er8\n  int v7; // er9\n  int v8; // eax\n  unsigned int v9; // [rsp+Ch] [rbp-24h]\n  int fd; // [rsp+18h] [rbp-18h]\n  int v11; // [rsp+1Ch] [rbp-14h]\n\n  if ( a2 && a2 != 4096 )\n  {\n    *__errno_location() = 22;\n    return 0LL;\n  }\n  v3 = *(_QWORD *)a1;\n  *__errno_location() = 0;\n  if ( (*(_DWORD *)(a1 + 72) & 0x2000) != 0 )\n    return 0LL;\n  if ( *(_WORD *)(v3 + 112) == 9 )\n    return *(_QWORD *)(v3 + 16);\n  if ( *(_WORD *)(v3 + 112) != 1 )\n    return 0LL;\n  if ( *(_QWORD *)(a1 + 8) )\n    sub_4121CD(*(void **)(a1 + 8));\n  if ( a2 == 4096 )\n  {\n    v8 = *(_DWORD *)(a1 + 72);\n    BYTE1(v8) |= 0x10u;\n    *(_DWORD *)(a1 + 72) = v8;\n    v9 = 2;\n  }\n  else\n  {\n    v9 = 1;\n  }\n  if ( *(_QWORD *)(v3 + 88) || **(_BYTE **)(v3 + 48) == 47 || (*(_DWORD *)(a1 + 72) & 4) != 0 )\n  {\n    *(_QWORD *)(a1 + 8) = sub_411394(a1, v9);\n    return *(_QWORD *)(a1 + 8);\n  }\n  fd = sub_41003F(a1, (int)\".\", v4, v5, v6, v7);\n  if ( fd < 0 )\n  {\n    *(_QWORD *)(a1 + 8) = 0LL;\n    return 0LL;\n  }\n  *(_QWORD *)(a1 + 8) = sub_411394(a1, v9);\n  if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n  {\n    sub_40FFB2(a1, fd, 1);\n  }\n  else\n  {\n    if ( fchdir(fd) )\n    {\n      v11 = *__errno_location();\n      close(fd);\n      *__errno_location() = v11;\n      return 0LL;\n    }\n    close(fd);\n  }\n  return *(_QWORD *)(a1 + 8);\n}\n"], [4264621, "sub_4112AD", "__int64 __fastcall sub_4112AD(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( *(_QWORD *)(*(_QWORD *)a1 + 128LL) < *(_QWORD *)(*(_QWORD *)a2 + 128LL) )\n    result = 0xFFFFFFFFLL;\n  else\n    result = *(_QWORD *)(*(_QWORD *)a2 + 128LL) < *(_QWORD *)(*(_QWORD *)a1 + 128LL);\n  return result;\n}\n"], [4264712, "sub_411308", "__int64 __fastcall sub_411308(__int64 a1, unsigned int a2)\n{\n  __int64 result; // rax\n  int v3; // [rsp+18h] [rbp-4h]\n\n  if ( a2 == 6 )\n  {\n    v3 = 24576;\n  }\n  else if ( a2 > 6 )\n  {\n    switch ( a2 )\n    {\n      case 0xAu:\n        v3 = 40960;\n        break;\n      case 0xCu:\n        v3 = 49152;\n        break;\n      case 8u:\n        v3 = 0x8000;\n        break;\n      default:\n        goto LABEL_18;\n    }\n  }\n  else\n  {\n    switch ( a2 )\n    {\n      case 2u:\n        v3 = 0x2000;\n        break;\n      case 4u:\n        v3 = 0x4000;\n        break;\n      case 1u:\n        v3 = 4096;\n        break;\n      default:\nLABEL_18:\n        v3 = 0;\n        break;\n    }\n  }\n  result = a1;\n  *(_DWORD *)(a1 + 24) = v3;\n  return result;\n}\n"], [4264852, "sub_411394", "void *__fastcall sub_411394(__int64 a1, int a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  void *result; // rax\n  int v8; // edx\n  int v9; // eax\n  int v10; // edi\n  int v11; // eax\n  __int64 v12; // rax\n  __int16 v13; // ax\n  unsigned __int64 v14; // rax\n  __int64 v15; // rax\n  __int64 v16; // rax\n  _BYTE *v17; // rax\n  void *v18; // r13\n  unsigned __int64 v19; // r14\n  size_t v20; // rax\n  __int64 v21; // r12\n  size_t v22; // rax\n  size_t v23; // rax\n  int v24; // eax\n  size_t v25; // rax\n  int v26; // eax\n  bool v27; // al\n  bool v28; // al\n  bool v29; // al\n  int v30; // eax\n  bool v31; // al\n  int v32; // eax\n  char v33; // [rsp+12h] [rbp-8Eh]\n  char v34; // [rsp+13h] [rbp-8Dh]\n  unsigned __int8 v35; // [rsp+14h] [rbp-8Ch]\n  bool v36; // [rsp+15h] [rbp-8Bh]\n  bool v37; // [rsp+16h] [rbp-8Ah]\n  bool v38; // [rsp+17h] [rbp-89h]\n  int fd; // [rsp+18h] [rbp-88h] BYREF\n  int v40; // [rsp+1Ch] [rbp-84h]\n  void *ptr; // [rsp+20h] [rbp-80h]\n  __int64 v42; // [rsp+28h] [rbp-78h]\n  unsigned __int64 v43; // [rsp+30h] [rbp-70h]\n  void *dest; // [rsp+38h] [rbp-68h]\n  __int64 v45; // [rsp+40h] [rbp-60h]\n  DIR *dirp; // [rsp+48h] [rbp-58h]\n  unsigned __int64 v47; // [rsp+50h] [rbp-50h]\n  unsigned __int64 v48; // [rsp+58h] [rbp-48h]\n  __int64 v49; // [rsp+60h] [rbp-40h]\n  struct dirent *v50; // [rsp+68h] [rbp-38h]\n  __int64 v51; // [rsp+70h] [rbp-30h]\n  unsigned __int64 v52; // [rsp+78h] [rbp-28h]\n\n  v45 = *(_QWORD *)a1;\n  v37 = *(_QWORD *)(v45 + 24) != 0LL;\n  if ( *(_QWORD *)(v45 + 24) )\n  {\n    dirp = *(DIR **)(v45 + 24);\n    fd = dirfd(dirp);\n    if ( fd < 0 )\n    {\n      closedir(*(DIR **)(v45 + 24));\n      *(_QWORD *)(v45 + 24) = 0LL;\n      if ( a2 == 3 )\n      {\n        *(_WORD *)(v45 + 112) = 4;\n        *(_DWORD *)(v45 + 64) = *__errno_location();\n      }\n      return 0LL;\n    }\nLABEL_28:\n    if ( *(_QWORD *)(a1 + 64) )\n      v14 = -1LL;\n    else\n      v14 = 100000LL;\n    v47 = v14;\n    if ( a2 == 2 )\n    {\n      v42 = 0LL;\n      v35 = 0;\n    }\n    else if ( (*(_DWORD *)(a1 + 72) & 8) != 0 && (*(_DWORD *)(a1 + 72) & 0x10) != 0 )\n    {\n      if ( (*(_DWORD *)(a1 + 72) & 0x20) != 0 )\n        v15 = 0LL;\n      else\n        v15 = 2LL;\n      v42 = *(_QWORD *)(v45 + 136) - v15;\n      v35 = 1;\n    }\n    else\n    {\n      v42 = -1LL;\n      v35 = 0;\n    }\n    if ( v37 )\n    {\n      v33 = 1;\n    }\n    else if ( v42 || a2 == 3 )\n    {\n      if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n      {\n        fd = sub_414FF7((unsigned int)fd);\n        if ( fd >= 0 )\n          sub_412828((unsigned int)fd, 1LL);\n      }\n      if ( fd < 0 || (unsigned int)sub_41243E(a1, v45, (unsigned int)fd, 0LL) )\n      {\n        if ( v42 && a2 == 3 )\n          *(_DWORD *)(v45 + 64) = *__errno_location();\n        *(_WORD *)(v45 + 114) |= 1u;\n        v33 = 0;\n        closedir(*(DIR **)(v45 + 24));\n        *(_QWORD *)(v45 + 24) = 0LL;\n        if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 && fd >= 0 )\n          close(fd);\n        *(_QWORD *)(v45 + 24) = 0LL;\n      }\n      else\n      {\n        v33 = 1;\n      }\n    }\n    else\n    {\n      v33 = 0;\n    }\n    if ( *(_BYTE *)(*(_QWORD *)(v45 + 56) + *(_QWORD *)(v45 + 72) - 1LL) == 47 )\n      v16 = *(_QWORD *)(v45 + 72) - 1LL;\n    else\n      v16 = *(_QWORD *)(v45 + 72);\n    v48 = v16;\n    if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n    {\n      v17 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v48);\n      dest = v17 + 1;\n      *v17 = 47;\n    }\n    else\n    {\n      dest = 0LL;\n    }\n    ++v48;\n    v43 = *(_QWORD *)(a1 + 48) - v48;\n    v49 = *(_QWORD *)(v45 + 88) + 1LL;\n    v34 = 0;\n    v18 = 0LL;\n    ptr = 0LL;\n    v19 = 0LL;\n    while ( *(_QWORD *)(v45 + 24) )\n    {\n      v50 = readdir(*(DIR **)(v45 + 24));\n      if ( !v50 )\n        break;\n      if ( (*(_DWORD *)(a1 + 72) & 0x20) != 0\n        || v50->d_name[0] != 46\n        || v50->d_name[1] && (v50->d_name[1] != 46 || v50->d_name[2]) )\n      {\n        v20 = strlen(v50->d_name);\n        v21 = sub_41211F(a1, v50->d_name, v20);\n        if ( !v21 )\n          goto LABEL_75;\n        v22 = strlen(v50->d_name);\n        if ( v22 >= v43 )\n        {\n          v51 = *(_QWORD *)(a1 + 32);\n          v23 = strlen(v50->d_name);\n          if ( (unsigned __int8)sub_412208(a1, v48 + v23 + 1) != 1 )\n          {\nLABEL_75:\n            v40 = *__errno_location();\n            free((void *)v21);\n            sub_4121CD(v18);\n            closedir(*(DIR **)(v45 + 24));\n            *(_QWORD *)(v45 + 24) = 0LL;\n            *(_WORD *)(v45 + 112) = 7;\n            v24 = *(_DWORD *)(a1 + 72);\n            BYTE1(v24) |= 0x20u;\n            *(_DWORD *)(a1 + 72) = v24;\n            *__errno_location() = v40;\n            return 0LL;\n          }\n          if ( *(_QWORD *)(a1 + 32) != v51 )\n          {\n            v34 = 1;\n            if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n              dest = (void *)(*(_QWORD *)(a1 + 32) + v48);\n          }\n          v43 = *(_QWORD *)(a1 + 48) - v48;\n        }\n        v25 = strlen(v50->d_name);\n        v52 = v48 + v25;\n        if ( v48 + v25 < v48 )\n        {\n          free((void *)v21);\n          sub_4121CD(v18);\n          closedir(*(DIR **)(v45 + 24));\n          *(_QWORD *)(v45 + 24) = 0LL;\n          *(_WORD *)(v45 + 112) = 7;\n          v26 = *(_DWORD *)(a1 + 72);\n          BYTE1(v26) |= 0x20u;\n          *(_DWORD *)(a1 + 72) = v26;\n          *__errno_location() = 36;\n          return 0LL;\n        }\n        *(_QWORD *)(v21 + 88) = v49;\n        *(_QWORD *)(v21 + 8) = *(_QWORD *)a1;\n        *(_QWORD *)(v21 + 72) = v52;\n        *(_QWORD *)(v21 + 128) = v50->d_ino;\n        if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n        {\n          *(_QWORD *)(v21 + 48) = *(_QWORD *)(v21 + 56);\n          memmove(dest, (const void *)(v21 + 264), *(_QWORD *)(v21 + 96) + 1LL);\n        }\n        else\n        {\n          *(_QWORD *)(v21 + 48) = v21 + 264;\n        }\n        if ( *(_QWORD *)(a1 + 64) && (*(_DWORD *)(a1 + 72) & 0x400) == 0 )\n        {\n          *(_WORD *)(v21 + 112) = sub_411DD6(a1, v21, 0LL);\n          v29 = *(_WORD *)(v21 + 112) == 1 || *(_WORD *)(v21 + 112) == 2 || *(_WORD *)(v21 + 112) == 5;\n          v36 = v29;\n        }\n        else\n        {\n          v27 = (*(_DWORD *)(a1 + 72) & 0x10) != 0 && (*(_DWORD *)(a1 + 72) & 8) != 0 && v50->d_type && v50->d_type != 4;\n          v38 = v27;\n          *(_WORD *)(v21 + 112) = 11;\n          sub_411308(v21 + 120, v50->d_type);\n          sub_40FED6(v21, !v38);\n          v28 = (*(_DWORD *)(a1 + 72) & 0x10) != 0 && v50->d_type == 4;\n          v36 = v28;\n        }\n        if ( v42 && v36 )\n          v42 -= v35;\n        *(_QWORD *)(v21 + 16) = 0LL;\n        if ( v18 )\n        {\n          *((_QWORD *)ptr + 2) = v21;\n          ptr = (void *)v21;\n        }\n        else\n        {\n          ptr = (void *)v21;\n          v18 = (void *)v21;\n        }\n        if ( v47 <= ++v19 )\n          goto LABEL_114;\n      }\n    }\n    if ( *(_QWORD *)(v45 + 24) )\n    {\n      closedir(*(DIR **)(v45 + 24));\n      *(_QWORD *)(v45 + 24) = 0LL;\n    }\nLABEL_114:\n    if ( v34 )\n      sub_4122D5(a1, v18);\n    if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n    {\n      if ( *(_QWORD *)(a1 + 48) == v48 || !v19 )\n        dest = (char *)dest - 1;\n      *(_BYTE *)dest = 0;\n    }\n    if ( v37 || !v33 || a2 != 1 && v19 )\n    {\nLABEL_136:\n      if ( v19 )\n      {\n        if ( v19 > 0x2710\n          && !*(_QWORD *)(a1 + 64)\n          && (*(_DWORD *)(a1 + 72) & 0x200) != 0\n          && sub_410689(*(_DWORD *)(a1 + 44)) )\n        {\n          *(_QWORD *)(a1 + 64) = sub_4112AD;\n          v18 = (void *)sub_411FD8(a1, v18, v19);\n          *(_QWORD *)(a1 + 64) = 0LL;\n        }\n        if ( *(_QWORD *)(a1 + 64) && v19 > 1 )\n          v18 = (void *)sub_411FD8(a1, v18, v19);\n        result = v18;\n      }\n      else\n      {\n        if ( a2 == 3 )\n          *(_WORD *)(v45 + 112) = 6;\n        sub_4121CD(v18);\n        result = 0LL;\n      }\n      return result;\n    }\n    if ( *(_QWORD *)(v45 + 88) )\n    {\n      v31 = (unsigned int)sub_41243E(a1, *(_QWORD *)(v45 + 8), 0xFFFFFFFFLL, \"..\") != 0;\nLABEL_134:\n      if ( v31 )\n      {\n        *(_WORD *)(v45 + 112) = 7;\n        v32 = *(_DWORD *)(a1 + 72);\n        BYTE1(v32) |= 0x20u;\n        *(_DWORD *)(a1 + 72) = v32;\n        sub_4121CD(v18);\n        return 0LL;\n      }\n      goto LABEL_136;\n    }\n    sub_40FE94(a1 + 96);\n    if ( (*(_DWORD *)(a1 + 72) & 4) == 0 )\n    {\n      if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n      {\n        sub_40FFB2(a1, -100, 1);\n      }\n      else if ( fchdir(*(_DWORD *)(a1 + 40)) )\n      {\n        v30 = 1;\nLABEL_132:\n        v31 = v30 != 0;\n        goto LABEL_134;\n      }\n    }\n    v30 = 0;\n    goto LABEL_132;\n  }\n  if ( (*(_DWORD *)(a1 + 72) & 0x10) != 0 && ((*(_DWORD *)(a1 + 72) & 1) == 0 || *(_QWORD *)(v45 + 88)) )\n    v8 = 0x20000;\n  else\n    v8 = 0;\n  if ( (*(_DWORD *)(a1 + 72) & 0x800) != 0 )\n    v9 = 0x40000;\n  else\n    v9 = 0;\n  v10 = v9 | v8;\n  if ( (*(_DWORD *)(a1 + 72) & 4) != 0 || (*(_DWORD *)(a1 + 72) & 0x200) == 0 )\n    v11 = -100;\n  else\n    v11 = *(_DWORD *)(a1 + 44);\n  v12 = sub_40FF19(v11, *(_QWORD *)(v45 + 48), v10, &fd, a5, a6);\n  *(_QWORD *)(v45 + 24) = v12;\n  if ( *(_QWORD *)(v45 + 24) )\n  {\n    if ( *(_WORD *)(v45 + 112) == 11 )\n    {\n      v13 = sub_411DD6(a1, v45, 0LL);\n      *(_WORD *)(v45 + 112) = v13;\n    }\n    else if ( (*(_DWORD *)(a1 + 72) & 0x100) != 0 )\n    {\n      sub_40FD3A(a1, v45);\n      sub_411DD6(a1, v45, 0LL);\n      if ( (unsigned __int8)sub_40FC2A(a1, v45) != 1 )\n      {\n        *__errno_location() = 12;\n        return 0LL;\n      }\n    }\n    goto LABEL_28;\n  }\n  if ( a2 == 3 )\n  {\n    *(_WORD *)(v45 + 112) = 4;\n    *(_DWORD *)(v45 + 64) = *__errno_location();\n  }\n  return 0LL;\n}\n"], [4267478, "sub_411DD6", "__int64 __fastcall sub_411DD6(__int64 a1, __int64 a2, char a3)\n{\n  __int64 result; // rax\n  __int64 v4; // rax\n  int v6; // [rsp+14h] [rbp-1Ch]\n  struct stat *s; // [rsp+18h] [rbp-18h]\n\n  s = (struct stat *)(a2 + 120);\n  if ( !*(_QWORD *)(a2 + 88) && (*(_DWORD *)(a1 + 72) & 1) != 0 )\n    a3 = 1;\n  if ( (*(_DWORD *)(a1 + 72) & 2) != 0 || a3 )\n  {\n    if ( (unsigned int)sub_415AC0(*(char **)(a2 + 48), s) )\n    {\n      v6 = *__errno_location();\n      if ( *__errno_location() == 2 && !(unsigned int)sub_415AE0(*(char **)(a2 + 48), s) )\n      {\n        *__errno_location() = 0;\n        return 13LL;\n      }\n      *(_DWORD *)(a2 + 64) = v6;\n      goto LABEL_14;\n    }\n  }\n  else if ( (unsigned int)sub_415AF0(*(_DWORD *)(a1 + 44), *(char **)(a2 + 48), s, 256) )\n  {\n    *(_DWORD *)(a2 + 64) = *__errno_location();\nLABEL_14:\n    memset(s, 0, sizeof(struct stat));\n    return 10LL;\n  }\n  switch ( *(_DWORD *)(a2 + 144) & 0xF000 )\n  {\n    case 16384:\n      if ( (*(_DWORD *)(a1 + 72) & 0x20) != 0 )\n        v4 = 0LL;\n      else\n        v4 = 2LL;\n      *(_QWORD *)(a2 + 104) = *(_QWORD *)(a2 + 136) - v4;\n      if ( *(_BYTE *)(a2 + 264) != 46 || *(_BYTE *)(a2 + 265) && (*(_BYTE *)(a2 + 265) != 46 || *(_BYTE *)(a2 + 266)) )\n      {\n        result = 1LL;\n      }\n      else if ( *(_QWORD *)(a2 + 88) )\n      {\n        result = 5LL;\n      }\n      else\n      {\n        result = 1LL;\n      }\n      break;\n    case 40960:\n      result = 12LL;\n      break;\n    case 32768:\n      result = 8LL;\n      break;\n    default:\n      result = 3LL;\n      break;\n  }\n  return result;\n}\n"], [4267927, "sub_411F97", "__int64 __fastcall sub_411F97(__int64 a1, __int64 a2)\n{\n  return (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)(*(_QWORD *)a1 + 80LL) + 64LL))(a1, a2);\n}\n"], [4267992, "sub_411FD8", "__int64 __fastcall sub_411FD8(__int64 a1, __int64 a2, size_t a3)\n{\n  size_t v3; // r12\n  _QWORD *v5; // rbx\n  __int64 i; // r13\n  _QWORD *v7; // rax\n  _QWORD *v8; // rbx\n  __int64 v9; // [rsp+0h] [rbp-50h]\n  int (*compar)(const void *, const void *); // [rsp+20h] [rbp-30h]\n  void *v11; // [rsp+28h] [rbp-28h]\n\n  v3 = a3;\n  compar = *(int (**)(const void *, const void *))(a1 + 64);\n  if ( *(_QWORD *)(a1 + 56) < a3 )\n  {\n    *(_QWORD *)(a1 + 56) = a3 + 40;\n    if ( *(_QWORD *)(a1 + 56) > 0x1FFFFFFFFFFFFFFFuLL\n      || (v11 = realloc(*(void **)(a1 + 16), 8LL * *(_QWORD *)(a1 + 56))) == 0LL )\n    {\n      free(*(void **)(a1 + 16));\n      *(_QWORD *)(a1 + 16) = 0LL;\n      *(_QWORD *)(a1 + 56) = 0LL;\n      return a2;\n    }\n    *(_QWORD *)(a1 + 16) = v11;\n  }\n  v5 = *(_QWORD **)(a1 + 16);\n  for ( i = a2; i; i = *(_QWORD *)(i + 16) )\n  {\n    v7 = v5++;\n    *v7 = i;\n  }\n  qsort(*(void **)(a1 + 16), v3, 8uLL, compar);\n  v8 = *(_QWORD **)(a1 + 16);\n  v9 = *v8;\n  while ( --v3 )\n  {\n    *(_QWORD *)(*v8 + 16LL) = v8[1];\n    ++v8;\n  }\n  *(_QWORD *)(*v8 + 16LL) = 0LL;\n  return v9;\n}\n"], [4268319, "sub_41211F", "char *__fastcall sub_41211F(__int64 a1, const void *a2, size_t a3)\n{\n  char *v4; // rbx\n\n  v4 = (char *)malloc(a3 + 272);\n  if ( !v4 )\n    return 0LL;\n  memmove(v4 + 264, a2, a3);\n  v4[a3 + 264] = 0;\n  *((_QWORD *)v4 + 12) = a3;\n  *((_QWORD *)v4 + 10) = a1;\n  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 32);\n  *((_DWORD *)v4 + 16) = 0;\n  *((_QWORD *)v4 + 3) = 0LL;\n  *((_WORD *)v4 + 57) = 0;\n  *((_WORD *)v4 + 58) = 3;\n  *((_QWORD *)v4 + 4) = 0LL;\n  *((_QWORD *)v4 + 5) = 0LL;\n  return v4;\n}\n"], [4268493, "sub_4121CD", "void __fastcall sub_4121CD(void *ptr)\n{\n  DIR **v2; // rbx\n\n  while ( 1 )\n  {\n    v2 = (DIR **)ptr;\n    if ( !ptr )\n      break;\n    ptr = (void *)*((_QWORD *)ptr + 2);\n    if ( v2[3] )\n      closedir(v2[3]);\n    free(v2);\n  }\n}\n"], [4268552, "sub_412208", "__int64 __fastcall sub_412208(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 v3; // [rsp+10h] [rbp-10h]\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *(_QWORD *)(a1 + 48) + a2 + 256;\n  if ( *(_QWORD *)(a1 + 48) <= v3 )\n  {\n    *(_QWORD *)(a1 + 48) = v3;\n    v4 = realloc(*(void **)(a1 + 32), *(_QWORD *)(a1 + 48));\n    if ( v4 )\n    {\n      *(_QWORD *)(a1 + 32) = v4;\n      result = 1LL;\n    }\n    else\n    {\n      free(*(void **)(a1 + 32));\n      *(_QWORD *)(a1 + 32) = 0LL;\n      result = 0LL;\n    }\n  }\n  else\n  {\n    free(*(void **)(a1 + 32));\n    *(_QWORD *)(a1 + 32) = 0LL;\n    *__errno_location() = 36;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4268757, "sub_4122D5", "__int64 __fastcall sub_4122D5(__int64 a1, _QWORD *a2)\n{\n  _QWORD *v2; // rax\n  __int64 result; // rax\n  _QWORD *i; // [rsp+10h] [rbp-10h]\n  __int64 v6; // [rsp+18h] [rbp-8h]\n\n  v6 = *(_QWORD *)(a1 + 32);\n  for ( i = *(_QWORD **)(a1 + 8); i; i = (_QWORD *)i[2] )\n  {\n    if ( (_QWORD *)i[6] != i + 33 )\n      i[6] = v6 + i[6] - i[7];\n    i[7] = v6;\n  }\n  while ( 1 )\n  {\n    result = a2[11];\n    if ( result < 0 )\n      break;\n    if ( (_QWORD *)a2[6] != a2 + 33 )\n      a2[6] = v6 + a2[6] - a2[7];\n    a2[7] = v6;\n    if ( a2[2] )\n      v2 = (_QWORD *)a2[2];\n    else\n      v2 = (_QWORD *)a2[1];\n    a2 = v2;\n  }\n  return result;\n}\n"], [4269032, "sub_4123E8", "size_t __fastcall sub_4123E8(const char **a1)\n{\n  size_t v3; // [rsp+10h] [rbp-10h]\n  size_t v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0LL;\n  while ( *a1 )\n  {\n    v4 = strlen(*a1);\n    if ( v4 > v3 )\n      v3 = v4;\n    ++a1;\n  }\n  return v3 + 1;\n}\n"], [4269118, "sub_41243E", "__int64 __fastcall sub_41243E(__int64 a1, __int64 a2, int a3, const char *a4, int a5, int a6)\n{\n  bool v6; // al\n  char *s1; // [rsp+0h] [rbp-D0h]\n  char v10; // [rsp+2Fh] [rbp-A1h]\n  unsigned int v11; // [rsp+30h] [rbp-A0h]\n  int fildes; // [rsp+34h] [rbp-9Ch]\n  int v13; // [rsp+38h] [rbp-98h]\n  int v14; // [rsp+3Ch] [rbp-94h]\n  struct stat stat_buf; // [rsp+40h] [rbp-90h] BYREF\n\n  s1 = (char *)a4;\n  v6 = a4 && !strcmp(a4, \"..\");\n  v10 = v6;\n  if ( (*(_DWORD *)(a1 + 72) & 4) != 0 )\n  {\n    if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 && a3 >= 0 )\n      close(a3);\n    return 0LL;\n  }\n  if ( a3 < 0 )\n  {\n    if ( v10 )\n    {\n      if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 && (unsigned __int8)sub_412BCF(a1 + 96) != 1 )\n      {\n        v13 = sub_412C69(a1 + 96);\n        v10 = 1;\n        if ( v13 >= 0 )\n        {\n          a3 = v13;\n          s1 = 0LL;\n        }\n      }\n    }\n  }\n  fildes = a3;\n  if ( a3 < 0 )\n  {\n    fildes = sub_41003F(a1, (int)s1, (__int64)s1, (int)a4, a5, a6);\n    if ( fildes < 0 )\n      return 0xFFFFFFFFLL;\n  }\n  if ( (*(_DWORD *)(a1 + 72) & 2) == 0 && (!s1 || strcmp(s1, \"..\")) )\n    goto LABEL_27;\n  if ( !(unsigned int)sub_415AD0(fildes, &stat_buf) )\n  {\n    if ( *(_QWORD *)(a2 + 120) != stat_buf.st_dev || *(_QWORD *)(a2 + 128) != stat_buf.st_ino )\n    {\n      *__errno_location() = 2;\n      v11 = -1;\n      goto LABEL_30;\n    }\nLABEL_27:\n    if ( (*(_DWORD *)(a1 + 72) & 0x200) != 0 )\n    {\n      sub_40FFB2(a1, fildes, v10 == 0);\n      return 0LL;\n    }\n    v11 = fchdir(fildes);\n    goto LABEL_30;\n  }\n  v11 = -1;\nLABEL_30:\n  if ( a3 < 0 )\n  {\n    v14 = *__errno_location();\n    close(fildes);\n    *__errno_location() = v14;\n  }\n  return v11;\n}\n"], [4269799, "sub_4126E7", "__int64 __fastcall sub_4126E7(const char **a1, int a2, __int64 a3)\n{\n  int v3; // eax\n  __int64 v5; // [rsp+28h] [rbp-8h]\n\n  v3 = a2;\n  BYTE1(v3) = BYTE1(a2) | 2;\n  v5 = fts_open(a1, v3, a3);\n  if ( !v5 )\n  {\n    if ( *__errno_location() == 22 )\n      __assert_fail(\"(*__errno_location ()) != 22\", \"../../src/lib/xfts.c\", 0x29u, \"xfts_open\");\n    sub_40ECCE();\n  }\n  return v5;\n}\n"], [4269903, "sub_41274F", "_BOOL8 __fastcall sub_41274F(__int64 a1, __int64 a2)\n{\n  return (*(_DWORD *)(a1 + 72) & 0x10) != 0 && (*(_DWORD *)(a1 + 72) & 1) == 0\n      || (*(_DWORD *)(a1 + 72) & 0x10) != 0 && (*(_DWORD *)(a1 + 72) & 1) != 0 && *(_QWORD *)(a2 + 88);\n}\n"], [4270001, "sub_4127B1", "__int64 __fastcall sub_4127B1(unsigned __int8 *a1, unsigned __int8 *a2)\n{\n  unsigned __int8 *v2; // r12\n  unsigned __int8 *v3; // rbx\n  unsigned __int8 v5; // [rsp+1Eh] [rbp-12h]\n  unsigned __int8 v6; // [rsp+1Fh] [rbp-11h]\n\n  v2 = a1;\n  v3 = a2;\n  if ( a1 == a2 )\n    return 0LL;\n  do\n  {\n    v5 = sub_41556C(*v2);\n    v6 = sub_41556C(*v3);\n    if ( !v5 )\n      break;\n    ++v2;\n    ++v3;\n  }\n  while ( v5 == v6 );\n  return v5 - (unsigned int)v6;\n}\n"], [4270120, "sub_412828", "__int64 __fastcall sub_412828(int a1, char a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ecx\n  int v7; // er8\n  int v8; // er9\n  unsigned int v9; // eax\n  __int64 result; // rax\n  int v11; // [rsp+18h] [rbp-8h]\n\n  v11 = sub_41506A(a1, 1, 0, a4, a5, a6);\n  if ( v11 < 0\n    || (!a2 ? (v9 = v11 & 0xFFFFFFFE) : (v9 = v11 | 1),\n        v11 != v9 && (unsigned int)sub_41506A(a1, 2, v9, v6, v7, v8) == -1) )\n  {\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    result = 0LL;\n  }\n  return result;\n}\n"], [4270243, "sub_4128A3", "__int64 __fastcall sub_4128A3(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_41506A(a1, 1030, 0, a4, a5, a6);\n}\n"], [4270281, "sub_4128C9", "__int64 __fastcall sub_4128C9(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = sub_40F927(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4270420, "sub_412954", "bool __fastcall sub_412954(__int64 a1)\n{\n  return (a1 & (a1 - 1)) == 0;\n}\n"], [4270448, "sub_412970", "__int64 __fastcall sub_412970(__int64 a1)\n{\n  __int64 result; // rax\n\n  *(_QWORD *)(a1 + 16) = 0LL;\n  result = a1;\n  *(_DWORD *)(a1 + 24) = 9827862;\n  return result;\n}\n"], [4270481, "sub_412991", "__int64 __fastcall sub_412991(__int64 a1, _QWORD *a2)\n{\n  if ( *(_DWORD *)(a1 + 24) != 9827862 )\n    __assert_fail(\"state->magic == 9827862\", \"../../src/lib/cycle-check.c\", 0x3Cu, \"cycle_check\");\n  if ( *(_QWORD *)(a1 + 16) && a2[1] == *(_QWORD *)a1 && *a2 == *(_QWORD *)(a1 + 8) )\n    return 1LL;\n  if ( sub_412954(++*(_QWORD *)(a1 + 16)) )\n  {\n    if ( !*(_QWORD *)(a1 + 16) )\n      return 1LL;\n    *(_QWORD *)(a1 + 8) = *a2;\n    *(_QWORD *)a1 = a2[1];\n  }\n  return 0LL;\n}\n"], [4270693, "sub_412A65", "__int64 __fastcall sub_412A65(const char *a1, char a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  unsigned int v5; // [rsp+14h] [rbp-CCh]\n\n  v5 = 0;\n  if ( (a2 & 0x40) != 0 )\n    v5 = a3;\n  v3 = open(a1, a2, v5);\n  return sub_41501D(v3);\n}\n"], [4270967, "sub_412B77", "__int64 __fastcall sub_412B77(__int64 a1, int a2)\n{\n  __int64 result; // rax\n  int i; // [rsp+18h] [rbp-4h]\n\n  *(_BYTE *)(a1 + 28) = 1;\n  *(_DWORD *)(a1 + 20) = 0;\n  *(_DWORD *)(a1 + 24) = 0;\n  for ( i = 0; i <= 3; ++i )\n    *(_DWORD *)(a1 + 4LL * i) = a2;\n  result = a1;\n  *(_DWORD *)(a1 + 16) = a2;\n  return result;\n}\n"], [4271055, "sub_412BCF", "__int64 __fastcall sub_412BCF(__int64 a1)\n{\n  return *(unsigned __int8 *)(a1 + 28);\n}\n"], [4271073, "sub_412BE1", "__int64 __fastcall sub_412BE1(__int64 a1, int a2)\n{\n  int v3; // [rsp+14h] [rbp-8h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = ((unsigned __int8)*(_DWORD *)(a1 + 20) + (*(_BYTE *)(a1 + 28) ^ 1)) & 3;\n  v4 = *(_DWORD *)(a1 + 4LL * (((unsigned __int8)*(_DWORD *)(a1 + 20) + (*(_BYTE *)(a1 + 28) ^ 1)) & 3));\n  *(_DWORD *)(a1 + 4LL * (((unsigned __int8)*(_DWORD *)(a1 + 20) + (*(_BYTE *)(a1 + 28) ^ 1)) & 3)) = a2;\n  *(_DWORD *)(a1 + 20) = v3;\n  if ( *(_DWORD *)(a1 + 24) == v3 )\n    *(_DWORD *)(a1 + 24) = ((unsigned __int8)*(_DWORD *)(a1 + 24) + (*(_BYTE *)(a1 + 28) ^ 1)) & 3;\n  *(_BYTE *)(a1 + 28) = 0;\n  return v4;\n}\n"], [4271209, "sub_412C69", "__int64 __fastcall sub_412C69(__int64 a1)\n{\n  unsigned int v2; // [rsp+1Ch] [rbp-4h]\n\n  if ( (unsigned __int8)sub_412BCF(a1) )\n    abort();\n  v2 = *(_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  *(_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20)) = *(_DWORD *)(a1 + 16);\n  if ( *(_DWORD *)(a1 + 20) == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((unsigned __int8)*(_DWORD *)(a1 + 20) + 3) & 3;\n  return v2;\n}\n"], [4271339, "sub_412CEB", "void *sub_412CEB()\n{\n  _BOOL4 v0; // eax\n  size_t v1; // rax\n  _BOOL4 v3; // [rsp+4h] [rbp-FCh]\n  int fd; // [rsp+8h] [rbp-F8h]\n  int c; // [rsp+Ch] [rbp-F4h]\n  int ca; // [rsp+Ch] [rbp-F4h]\n  void *v7; // [rsp+10h] [rbp-F0h]\n  const char *s; // [rsp+18h] [rbp-E8h]\n  void *ptr; // [rsp+20h] [rbp-E0h]\n  __int64 v10; // [rsp+28h] [rbp-D8h]\n  size_t n; // [rsp+38h] [rbp-C8h]\n  size_t v12; // [rsp+40h] [rbp-C0h]\n  char *dest; // [rsp+48h] [rbp-B8h]\n  FILE *stream; // [rsp+50h] [rbp-B0h]\n  size_t v15; // [rsp+58h] [rbp-A8h]\n  size_t v16; // [rsp+60h] [rbp-A0h]\n  void *v17; // [rsp+68h] [rbp-98h]\n  char src[64]; // [rsp+70h] [rbp-90h] BYREF\n  char v19[56]; // [rsp+B0h] [rbp-50h] BYREF\n  unsigned __int64 v20; // [rsp+E8h] [rbp-18h]\n\n  v20 = __readfsqword(0x28u);\n  v7 = (void *)qword_61B5E0;\n  if ( !qword_61B5E0 )\n  {\n    s = getenv(\"CHARSETALIASDIR\");\n    if ( !s || !*s )\n      s = \"/root/Product/coreutils/exe/lib\";\n    n = strlen(s);\n    v12 = strlen(\"charset.alias\");\n    v0 = n && s[n - 1] != 47;\n    v3 = v0;\n    dest = (char *)malloc(n + v0 + v12 + 1);\n    if ( dest )\n    {\n      memcpy(dest, s, n);\n      if ( v3 )\n        dest[n] = 47;\n      memcpy(&dest[n + v3], \"charset.alias\", v12 + 1);\n    }\n    if ( dest )\n    {\n      fd = open(dest, 0x20000);\n      if ( fd >= 0 )\n      {\n        stream = fdopen(fd, \"r\");\n        if ( stream )\n        {\n          ptr = 0LL;\n          v10 = 0LL;\n          while ( 1 )\n          {\n            c = getc_unlocked(stream);\n            if ( c == -1 )\n              break;\n            if ( c != 10 && c != 32 && c != 9 )\n            {\n              if ( c == 35 )\n              {\n                do\n                  ca = getc_unlocked(stream);\n                while ( ca != -1 && ca != 10 );\n                if ( ca == -1 )\n                  break;\n              }\n              else\n              {\n                ungetc(c, stream);\n                if ( fscanf(stream, \"%50s %50s\", src, v19) <= 1 )\n                  break;\n                v15 = strlen(src);\n                v16 = strlen(v19);\n                v17 = ptr;\n                if ( v10 )\n                {\n                  v1 = v16 + v15 + v10;\n                  v10 = v1 + 2;\n                  ptr = realloc(ptr, v1 + 3);\n                }\n                else\n                {\n                  v10 = v15 + v16 + 2;\n                  ptr = malloc(v15 + v16 + 3);\n                }\n                if ( !ptr )\n                {\n                  v10 = 0LL;\n                  free(v17);\n                  break;\n                }\n                strcpy((char *)ptr + v10 - v16 - v15 - 2, src);\n                strcpy((char *)ptr + v10 - v16 - 1, v19);\n              }\n            }\n          }\n          sub_40F927(stream);\n          if ( v10 )\n          {\n            *((_BYTE *)ptr + v10) = 0;\n            v7 = ptr;\n          }\n          else\n          {\n            v7 = &unk_417D68;\n          }\n        }\n        else\n        {\n          close(fd);\n          v7 = &unk_417D68;\n        }\n      }\n      else\n      {\n        v7 = &unk_417D68;\n      }\n      free(dest);\n    }\n    else\n    {\n      v7 = &unk_417D68;\n    }\n    qword_61B5E0 = (__int64)v7;\n  }\n  return v7;\n}\n"], [4272593, "sub_4131D1", "const char *sub_4131D1()\n{\n  const char *s1; // [rsp+0h] [rbp-10h]\n  char *s2; // [rsp+8h] [rbp-8h]\n  char *s2a; // [rsp+8h] [rbp-8h]\n\n  s1 = nl_langinfo(14);\n  if ( !s1 )\n    s1 = (const char *)&unk_417D68;\n  for ( s2 = (char *)sub_412CEB(); *s2; s2 = &s2a[strlen(s2a) + 1] )\n  {\n    if ( !strcmp(s1, s2) || *s2 == 42 && !s2[1] )\n    {\n      s1 = &s2[strlen(s2) + 1];\n      break;\n    }\n    s2a = &s2[strlen(s2) + 1];\n  }\n  if ( !*s1 )\n    s1 = \"ASCII\";\n  return s1;\n}\n"], [4272799, "sub_41329F", "__int64 __fastcall sub_41329F(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( *(_QWORD *)a2 == a2 + 24 )\n  {\n    memcpy((void *)(a1 + 24), (const void *)(a2 + 24), *(_QWORD *)(a2 + 8));\n    *(_QWORD *)a1 = a1 + 24;\n  }\n  else\n  {\n    *(_QWORD *)a1 = *(_QWORD *)a2;\n  }\n  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);\n  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);\n  result = *(unsigned __int8 *)(a1 + 16);\n  if ( (_BYTE)result )\n  {\n    result = a1;\n    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);\n  }\n  return result;\n}\n"], [4272960, "sub_413340", "bool __fastcall sub_413340(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_417560[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4273014, "sub_413376", "__int64 __fastcall sub_413376(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_413340(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_40DBF1(*(const void **)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4273494, "sub_413556", "__int64 __fastcall sub_413556(_BYTE *a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)\n{\n  void *v4; // rsp\n  unsigned __int64 v5; // rax\n  __int64 v8; // [rsp+8h] [rbp-68h] BYREF\n  __int64 v9; // [rsp+10h] [rbp-60h]\n  _BYTE *v10; // [rsp+18h] [rbp-58h]\n  char v11; // [rsp+27h] [rbp-49h]\n  unsigned __int64 i; // [rsp+28h] [rbp-48h]\n  __int64 v13; // [rsp+30h] [rbp-40h]\n  __int64 v14; // [rsp+38h] [rbp-38h]\n  _BYTE *v15; // [rsp+40h] [rbp-30h]\n  _BYTE *v16; // [rsp+48h] [rbp-28h]\n  unsigned __int64 v17; // [rsp+50h] [rbp-20h]\n  unsigned __int64 v18; // [rsp+58h] [rbp-18h]\n\n  v10 = a1;\n  v9 = a2;\n  HIBYTE(v8) = HIBYTE(a3);\n  v17 = a3;\n  if ( a3 > 0x1FFFFFFFFFFFFFFFLL )\n  {\n    v5 = 0LL;\n  }\n  else if ( 8 * v17 > 0xFAF )\n  {\n    v5 = sub_4155AC(8 * v17);\n  }\n  else\n  {\n    v4 = alloca(16 * ((8 * (v17 + 2) + 30) / 0x10));\n    v5 = 16 * (((unsigned __int64)&v8 + 7) >> 4) + 16;\n  }\n  v18 = v5;\n  if ( !v5 )\n    return 0LL;\n  *(_QWORD *)(v18 + 8) = 1LL;\n  v13 = 0LL;\n  for ( i = 2LL; i < v17; ++i )\n  {\n    v11 = *(_BYTE *)(i - 1 + v9);\n    while ( 1 )\n    {\n      if ( *(_BYTE *)(v9 + v13) == v11 )\n      {\n        ++v13;\n        *(_QWORD *)(8 * i + v18) = i - v13;\n        goto LABEL_15;\n      }\n      if ( !v13 )\n        break;\n      v13 -= *(_QWORD *)(8 * v13 + v18);\n    }\n    *(_QWORD *)(v18 + 8 * i) = i;\nLABEL_15:\n    ;\n  }\n  *a4 = 0LL;\n  v14 = 0LL;\n  v15 = v10;\n  v16 = v10;\n  while ( *v16 )\n  {\n    if ( *(_BYTE *)(v9 + v14) == *v16 )\n    {\n      ++v14;\n      ++v16;\n      if ( v14 == v17 )\n      {\n        *a4 = v15;\n        break;\n      }\n    }\n    else if ( v14 )\n    {\n      v15 += *(_QWORD *)(8 * v14 + v18);\n      v14 -= *(_QWORD *)(8 * v14 + v18);\n    }\n    else\n    {\n      ++v15;\n      ++v16;\n    }\n  }\n  sub_415667(v18);\n  return 1LL;\n}\n"], [4274080, "sub_4137A0", "__int64 __fastcall sub_4137A0(char *a1, void *a2, _QWORD *a3)\n{\n  void *v3; // rsp\n  unsigned __int64 v4; // rax\n  bool v7; // al\n  bool v8; // al\n  bool v9; // al\n  bool v10; // al\n  _QWORD *v14; // [rsp+8h] [rbp-108h] BYREF\n  void *v15; // [rsp+10h] [rbp-100h]\n  char *v16; // [rsp+18h] [rbp-F8h]\n  __int64 v17; // [rsp+20h] [rbp-F0h]\n  unsigned __int64 i; // [rsp+28h] [rbp-E8h]\n  __int64 v19; // [rsp+30h] [rbp-E0h]\n  __int64 v20; // [rsp+38h] [rbp-D8h]\n  __int64 v21; // [rsp+40h] [rbp-D0h]\n  unsigned __int64 v22; // [rsp+48h] [rbp-C8h]\n  unsigned __int64 v23; // [rsp+50h] [rbp-C0h]\n  unsigned __int64 v24; // [rsp+58h] [rbp-B8h]\n  unsigned __int64 v25; // [rsp+60h] [rbp-B0h]\n  unsigned __int64 v26; // [rsp+68h] [rbp-A8h]\n  char v27[4]; // [rsp+70h] [rbp-A0h] BYREF\n  int v28; // [rsp+74h] [rbp-9Ch] BYREF\n  char v29; // [rsp+7Ch] [rbp-94h]\n  char *v30; // [rsp+80h] [rbp-90h]\n  __int64 v31; // [rsp+88h] [rbp-88h]\n  char v32; // [rsp+90h] [rbp-80h]\n  int v33; // [rsp+94h] [rbp-7Ch]\n  char v34[4]; // [rsp+B0h] [rbp-60h] BYREF\n  int v35; // [rsp+B4h] [rbp-5Ch] BYREF\n  char v36; // [rsp+BCh] [rbp-54h]\n  void *s2; // [rsp+C0h] [rbp-50h] BYREF\n  __int64 v38; // [rsp+C8h] [rbp-48h]\n  char v39; // [rsp+D0h] [rbp-40h]\n  int v40; // [rsp+D4h] [rbp-3Ch]\n  unsigned __int64 v41; // [rsp+F8h] [rbp-18h]\n\n  v16 = a1;\n  v15 = a2;\n  v14 = a3;\n  v41 = __readfsqword(0x28u);\n  v22 = sub_415946(a2);\n  if ( v22 > 0x492492492492492LL )\n  {\n    v4 = 0LL;\n  }\n  else if ( 56 * v22 > 0xFAF )\n  {\n    v4 = sub_4155AC(56 * v22);\n  }\n  else\n  {\n    v3 = alloca(16 * ((56 * v22 + 46) / 0x10));\n    v4 = 16 * (((unsigned __int64)&v14 + 7) >> 4) + 16;\n  }\n  v23 = v4;\n  if ( !v4 )\n    return 0LL;\n  v24 = v23;\n  v25 = 48 * v22 + v23;\n  v17 = 0LL;\n  s2 = v15;\n  v34[0] = 0;\n  memset(&v35, 0, 8uLL);\n  v36 = 0;\n  while ( 1 )\n  {\n    sub_413376((__int64)v34);\n    if ( v39 == 1 && !v40 )\n      break;\n    sub_41329F(48 * v17 + v24, (__int64)&s2);\n    s2 = (char *)s2 + v38;\n    v36 = 0;\n    ++v17;\n  }\n  *(_QWORD *)(v25 + 8) = 1LL;\n  v19 = 0LL;\n  for ( i = 2LL; i < v22; ++i )\n  {\n    v26 = 48 * i - 48 + v24;\n    while ( 1 )\n    {\n      if ( *(_BYTE *)(v26 + 16) && *(_BYTE *)(48 * v19 + v24 + 16) )\n      {\n        v7 = *(_DWORD *)(v26 + 20) == *(_DWORD *)(48 * v19 + v24 + 20);\n      }\n      else\n      {\n        v8 = *(_QWORD *)(v26 + 8) == *(_QWORD *)(48 * v19 + v24 + 8)\n          && !memcmp(*(const void **)v26, *(const void **)(48 * v19 + v24), *(_QWORD *)(v26 + 8));\n        v7 = v8;\n      }\n      if ( v7 )\n      {\n        ++v19;\n        *(_QWORD *)(8 * i + v25) = i - v19;\n        goto LABEL_30;\n      }\n      if ( !v19 )\n        break;\n      v19 -= *(_QWORD *)(8 * v19 + v25);\n    }\n    *(_QWORD *)(v25 + 8 * i) = i;\nLABEL_30:\n    ;\n  }\n  *v14 = 0LL;\n  v20 = 0LL;\n  v30 = v16;\n  v27[0] = 0;\n  memset(&v28, 0, 8uLL);\n  v29 = 0;\n  s2 = v16;\n  v34[0] = 0;\n  memset(&v35, 0, 8uLL);\n  v36 = 0;\n  while ( 1 )\n  {\n    sub_413376((__int64)v34);\n    if ( v39 == 1 && !v40 )\n      break;\n    if ( *(_BYTE *)(48 * v20 + v24 + 16) && v39 )\n    {\n      v9 = *(_DWORD *)(48 * v20 + v24 + 20) == v40;\n    }\n    else\n    {\n      v10 = *(_QWORD *)(48 * v20 + v24 + 8) == v38\n         && !memcmp(*(const void **)(48 * v20 + v24), s2, *(_QWORD *)(48 * v20 + v24 + 8));\n      v9 = v10;\n    }\n    if ( v9 )\n    {\n      ++v20;\n      s2 = (char *)s2 + v38;\n      v36 = 0;\n      if ( v20 == v22 )\n      {\n        *v14 = v30;\n        break;\n      }\n    }\n    else if ( v20 )\n    {\n      v21 = *(_QWORD *)(8 * v20 + v25);\n      v20 -= v21;\n      while ( v21 )\n      {\n        sub_413376((__int64)v27);\n        if ( v32 == 1 && !v33 )\n          abort();\n        v30 += v31;\n        v29 = 0;\n        --v21;\n      }\n    }\n    else\n    {\n      sub_413376((__int64)v27);\n      if ( v32 == 1 && !v33 )\n        abort();\n      v30 += v31;\n      v29 = 0;\n      s2 = (char *)s2 + v38;\n      v36 = 0;\n    }\n  }\n  sub_415667(v23);\n  return 1LL;\n}\n"], [4275943, "sub_413EE7", "_BYTE *__fastcall sub_413EE7(_BYTE *a1, char *a2)\n{\n  _BYTE *result; // rax\n  bool v7; // al\n  bool v8; // al\n  bool v12; // al\n  bool v13; // al\n  size_t v14; // rax\n  unsigned __int64 v15; // rax\n  _BYTE *v16; // [rsp+8h] [rbp-1C8h]\n  char v17; // [rsp+13h] [rbp-1BDh]\n  char v18; // [rsp+14h] [rbp-1BCh]\n  char v19; // [rsp+16h] [rbp-1BAh]\n  __int64 v20; // [rsp+18h] [rbp-1B8h] BYREF\n  unsigned __int64 v21; // [rsp+20h] [rbp-1B0h]\n  unsigned __int64 v22; // [rsp+28h] [rbp-1A8h]\n  unsigned __int64 v23; // [rsp+30h] [rbp-1A0h]\n  unsigned __int64 j; // [rsp+38h] [rbp-198h]\n  unsigned __int64 v25; // [rsp+40h] [rbp-190h]\n  unsigned __int64 v26; // [rsp+48h] [rbp-188h]\n  unsigned __int64 v27; // [rsp+50h] [rbp-180h]\n  char *string; // [rsp+58h] [rbp-178h]\n  _BYTE *v29; // [rsp+60h] [rbp-170h]\n  _BYTE *i; // [rsp+68h] [rbp-168h]\n  char v31[4]; // [rsp+70h] [rbp-160h] BYREF\n  _BYTE v32[12]; // [rsp+74h] [rbp-15Ch] BYREF\n  void *s2; // [rsp+80h] [rbp-150h]\n  __int64 v34; // [rsp+88h] [rbp-148h]\n  char v35; // [rsp+90h] [rbp-140h]\n  int v36; // [rsp+94h] [rbp-13Ch]\n  char v37[4]; // [rsp+B0h] [rbp-120h] BYREF\n  int v38; // [rsp+B4h] [rbp-11Ch] BYREF\n  char v39; // [rsp+BCh] [rbp-114h]\n  char *v40; // [rsp+C0h] [rbp-110h]\n  __int64 v41; // [rsp+C8h] [rbp-108h]\n  char v42; // [rsp+D0h] [rbp-100h]\n  int v43; // [rsp+D4h] [rbp-FCh]\n  __int64 v44; // [rsp+F0h] [rbp-E0h] BYREF\n  __int64 v45; // [rsp+F8h] [rbp-D8h]\n  void *s1; // [rsp+100h] [rbp-D0h]\n  size_t n; // [rsp+108h] [rbp-C8h]\n  __int64 v48; // [rsp+110h] [rbp-C0h]\n  __int64 v49; // [rsp+118h] [rbp-B8h]\n  __int64 v50; // [rsp+120h] [rbp-B0h]\n  __int64 v51; // [rsp+128h] [rbp-A8h]\n  __int64 v52; // [rsp+130h] [rbp-A0h] BYREF\n  __int64 v53; // [rsp+138h] [rbp-98h]\n  void *v54; // [rsp+140h] [rbp-90h]\n  size_t v55; // [rsp+148h] [rbp-88h]\n  __int64 v56; // [rsp+150h] [rbp-80h]\n  __int64 v57; // [rsp+158h] [rbp-78h]\n  __int64 v58; // [rsp+160h] [rbp-70h]\n  __int64 v59; // [rsp+168h] [rbp-68h]\n  char v60[4]; // [rsp+170h] [rbp-60h] BYREF\n  int v61; // [rsp+174h] [rbp-5Ch] BYREF\n  char k; // [rsp+17Ch] [rbp-54h]\n  void *v63; // [rsp+180h] [rbp-50h]\n  __int64 v64; // [rsp+188h] [rbp-48h]\n  char v65; // [rsp+190h] [rbp-40h]\n  int v66; // [rsp+194h] [rbp-3Ch]\n  unsigned __int64 v67; // [rsp+1B8h] [rbp-18h]\n\n  v16 = a1;\n  v67 = __readfsqword(0x28u);\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( *a2 )\n    {\n      v18 = 1;\n      v25 = 0LL;\n      v26 = 0LL;\n      v27 = 0LL;\n      string = a2;\n      v19 = *a2;\n      while ( 1 )\n      {\n        if ( !*v16 )\n          return 0LL;\n        if ( v18 && v25 > 9 && 5 * v25 <= v26 )\n        {\n          if ( string )\n          {\n            v14 = strnlen(string, v26 - v27);\n            string += v14;\n            if ( !*string )\n              string = 0LL;\n            v27 = v26;\n          }\n          if ( !string )\n          {\n            v15 = strlen(a2);\n            if ( (unsigned __int8)sub_413556(v16, (__int64)a2, v15, &v20) )\n              return (_BYTE *)v20;\n            v18 = 0;\n          }\n        }\n        ++v25;\n        ++v26;\n        if ( *v16 == v19 )\n          break;\nLABEL_96:\n        ++v16;\n      }\n      v29 = v16 + 1;\n      for ( i = a2 + 1; ; ++i )\n      {\n        if ( !*i )\n          return v16;\n        if ( !*v29 )\n          break;\n        ++v26;\n        if ( *v29 != *i )\n          goto LABEL_96;\n        ++v29;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      result = a1;\n    }\n  }\n  else\n  {\n    s2 = a2;\n    v31[0] = 0;\n    memset(v32, 0, 8uLL);\n    v32[8] = 0;\n    sub_413376((__int64)v31);\n    if ( v35 != 1 || v36 )\n    {\n      v17 = 1;\n      v21 = 0LL;\n      v22 = 0LL;\n      v23 = 0LL;\n      v40 = a2;\n      v37[0] = 0;\n      memset(&v38, 0, 8uLL);\n      v39 = 0;\n      s1 = a1;\n      LOBYTE(v44) = 0;\n      memset((char *)&v44 + 4, 0, sizeof(__int64));\n      for ( BYTE4(v45) = 0; ; BYTE4(v45) = 0 )\n      {\n        sub_413376((__int64)&v44);\n        if ( (unsigned __int8)v48 == 1 && !HIDWORD(v48) )\n          return 0LL;\n        if ( v17 && v21 > 9 && 5 * v21 <= v22 )\n        {\n          for ( j = v22 - v23; j; --j )\n          {\n            sub_413376((__int64)v37);\n            if ( v42 == 1 && !v43 )\n              break;\n            v40 += v41;\n            v39 = 0;\n          }\n          v23 = v22;\n          sub_413376((__int64)v37);\n          if ( v42 == 1 && !v43 )\n          {\n            if ( (unsigned __int8)sub_4137A0(a1, a2, &v20) )\n              return (_BYTE *)v20;\n            v17 = 0;\n          }\n        }\n        ++v21;\n        ++v22;\n        if ( (_BYTE)v48 && v35 )\n        {\n          v7 = HIDWORD(v48) == v36;\n        }\n        else\n        {\n          v8 = n == v34 && !memcmp(s1, s2, n);\n          v7 = v8;\n        }\n        if ( v7 )\n          break;\nLABEL_71:\n        s1 = (char *)s1 + n;\n      }\n      v52 = v44;\n      v53 = v45;\n      v55 = n;\n      v56 = v48;\n      v57 = v49;\n      v58 = v50;\n      v59 = v51;\n      v54 = (char *)s1 + n;\n      BYTE4(v53) = 0;\n      v63 = a2;\n      v60[0] = 0;\n      memset(&v61, 0, 8uLL);\n      k = 0;\n      sub_413376((__int64)v60);\n      if ( v65 == 1 && !v66 )\n        abort();\n      v63 = (char *)v63 + v64;\n      for ( k = 0; ; k = 0 )\n      {\n        sub_413376((__int64)v60);\n        if ( v65 == 1 && !v66 )\n          return s1;\n        sub_413376((__int64)&v52);\n        if ( (unsigned __int8)v56 == 1 && !HIDWORD(v56) )\n          break;\n        ++v22;\n        if ( (_BYTE)v56 && v65 )\n        {\n          v12 = HIDWORD(v56) != v66;\n        }\n        else\n        {\n          v13 = v55 != v64 || memcmp(v54, v63, v55);\n          v12 = v13;\n        }\n        if ( v12 )\n          goto LABEL_71;\n        v54 = (char *)v54 + v55;\n        BYTE4(v53) = 0;\n        v63 = (char *)v63 + v64;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      result = a1;\n    }\n  }\n  return result;\n}\n"], [4277959, "sub_4146C7", "__int64 __fastcall sub_4146C7(int a1, const char *a2, char a3, unsigned int a4)\n{\n  unsigned int v4; // eax\n  unsigned int v6; // [rsp+14h] [rbp-CCh]\n\n  v6 = 0;\n  if ( (a3 & 0x40) != 0 )\n    v6 = a4;\n  v4 = openat(a1, a2, a3, v6);\n  return sub_41501D(v4);\n}\n"], [4278235, "sub_4147DB", "__int64 __fastcall sub_4147DB(char *a1, size_t a2, void *a3, void **a4, size_t *a5)\n{\n  int v9; // [rsp+34h] [rbp-107Ch]\n  char *inbuf; // [rsp+38h] [rbp-1078h] BYREF\n  size_t inbytesleft; // [rsp+40h] [rbp-1070h] BYREF\n  char *outbuf; // [rsp+48h] [rbp-1068h] BYREF\n  size_t outbytesleft; // [rsp+50h] [rbp-1060h] BYREF\n  void *ptr; // [rsp+58h] [rbp-1058h]\n  size_t v15; // [rsp+60h] [rbp-1050h]\n  size_t v16; // [rsp+68h] [rbp-1048h]\n  size_t v17; // [rsp+70h] [rbp-1040h]\n  size_t size; // [rsp+78h] [rbp-1038h]\n  size_t v19; // [rsp+80h] [rbp-1030h]\n  size_t v20; // [rsp+88h] [rbp-1028h]\n  char v21[4104]; // [rsp+90h] [rbp-1020h] BYREF\n  unsigned __int64 v22; // [rsp+1098h] [rbp-18h]\n\n  v22 = __readfsqword(0x28u);\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  v15 = 0LL;\n  inbuf = a1;\n  inbytesleft = a2;\n  while ( inbytesleft )\n  {\n    outbuf = v21;\n    outbytesleft = 4096LL;\n    v16 = iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n    if ( v16 == -1LL && *__errno_location() != 7 )\n    {\n      if ( *__errno_location() != 22 )\n        return 0xFFFFFFFFLL;\n      break;\n    }\n    v15 += outbuf - v21;\n  }\n  outbuf = v21;\n  outbytesleft = 4096LL;\n  v17 = iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft);\n  if ( v17 == -1LL )\n    return 0xFFFFFFFFLL;\n  v15 += outbuf - v21;\n  size = v15;\n  if ( !v15 )\n  {\n    *a5 = 0LL;\n    return 0LL;\n  }\n  if ( *a4 && *a5 >= size )\n  {\n    ptr = *a4;\n  }\n  else\n  {\n    ptr = malloc(size);\n    if ( !ptr )\n    {\n      *__errno_location() = 12;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  inbytesleft = a2;\n  outbuf = (char *)ptr;\n  outbytesleft = size;\n  while ( inbytesleft )\n  {\n    v19 = iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n    if ( v19 == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_26;\n      break;\n    }\n  }\n  v20 = iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft);\n  if ( v20 != -1LL )\n  {\n    if ( outbytesleft )\n      abort();\n    *a4 = ptr;\n    *a5 = size;\n    return 0LL;\n  }\nLABEL_26:\n  if ( *a4 != ptr )\n  {\n    v9 = *__errno_location();\n    free(ptr);\n    *__errno_location() = v9;\n  }\n  return 0xFFFFFFFFLL;\n}\n"], [4279231, "sub_414BBF", "void *__fastcall sub_414BBF(char *a1, void *a2)\n{\n  void *result; // rax\n  char *v3; // rax\n  int v4; // [rsp+14h] [rbp-8Ch]\n  char *inbuf; // [rsp+18h] [rbp-88h] BYREF\n  size_t inbytesleft; // [rsp+20h] [rbp-80h] BYREF\n  char *outbuf; // [rsp+28h] [rbp-78h] BYREF\n  size_t outbytesleft; // [rsp+30h] [rbp-70h] BYREF\n  void *ptr; // [rsp+38h] [rbp-68h]\n  size_t size; // [rsp+40h] [rbp-60h]\n  __int64 v11; // [rsp+48h] [rbp-58h]\n  size_t v12; // [rsp+50h] [rbp-50h]\n  __int64 v13; // [rsp+58h] [rbp-48h]\n  size_t v14; // [rsp+60h] [rbp-40h]\n  char *v15; // [rsp+68h] [rbp-38h]\n  size_t v16; // [rsp+70h] [rbp-30h]\n  __int64 v17; // [rsp+78h] [rbp-28h]\n  size_t v18; // [rsp+80h] [rbp-20h]\n  char *v19; // [rsp+88h] [rbp-18h]\n  size_t v20; // [rsp+90h] [rbp-10h]\n  void *v21; // [rsp+98h] [rbp-8h]\n\n  inbuf = a1;\n  inbytesleft = strlen(a1);\n  size = inbytesleft;\n  v11 = 0xFFFFFFFFLL;\n  if ( inbytesleft <= 0xFFFFFFF )\n    size *= 16LL;\n  ptr = malloc(++size);\n  if ( ptr )\n  {\n    iconv(a2, 0LL, 0LL, 0LL, 0LL);\n    outbuf = (char *)ptr;\n    for ( outbytesleft = size - 1; ; outbytesleft = v14 - v13 - 1 )\n    {\n      v12 = iconv(a2, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n      if ( v12 != -1LL || *__errno_location() == 22 )\n        break;\n      if ( *__errno_location() != 7 )\n        goto LABEL_23;\n      v13 = outbuf - (_BYTE *)ptr;\n      v14 = 2 * size;\n      if ( 2 * size <= size || (v15 = (char *)realloc(ptr, v14)) == 0LL )\n      {\nLABEL_18:\n        *__errno_location() = 12;\nLABEL_23:\n        v4 = *__errno_location();\n        free(ptr);\n        *__errno_location() = v4;\n        return 0LL;\n      }\n      ptr = v15;\n      size = v14;\n      outbuf = &v15[v13];\n    }\n    while ( 1 )\n    {\n      v16 = iconv(a2, 0LL, 0LL, &outbuf, &outbytesleft);\n      if ( v16 != -1LL )\n        break;\n      if ( *__errno_location() != 7 )\n        goto LABEL_23;\n      v17 = outbuf - (_BYTE *)ptr;\n      v18 = 2 * size;\n      if ( 2 * size <= size )\n        goto LABEL_18;\n      v19 = (char *)realloc(ptr, v18);\n      if ( !v19 )\n        goto LABEL_18;\n      ptr = v19;\n      size = v18;\n      outbuf = &v19[v17];\n      outbytesleft = v18 - v17 - 1;\n    }\n    v3 = outbuf++;\n    *v3 = 0;\n    v20 = outbuf - (_BYTE *)ptr;\n    if ( outbuf - (_BYTE *)ptr < size )\n    {\n      v21 = realloc(ptr, v20);\n      if ( v21 )\n        ptr = v21;\n    }\n    result = ptr;\n  }\n  else\n  {\n    *__errno_location() = 12;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4280052, "sub_414EF4", "char *__fastcall sub_414EF4(char *a1, char *a2, char *a3)\n{\n  char *result; // rax\n  int v5; // [rsp+20h] [rbp-20h]\n  int v6; // [rsp+24h] [rbp-1Ch]\n  iconv_t cd; // [rsp+28h] [rbp-18h]\n  void *ptr; // [rsp+30h] [rbp-10h]\n  char *v9; // [rsp+38h] [rbp-8h]\n\n  if ( *a1 && (unsigned int)sub_4127B1((unsigned __int8 *)a2, (unsigned __int8 *)a3) )\n  {\n    cd = iconv_open(a3, a2);\n    if ( cd == (iconv_t)-1LL )\n      return 0LL;\n    ptr = sub_414BBF(a1, cd);\n    if ( ptr )\n    {\n      if ( iconv_close(cd) < 0 )\n      {\n        v6 = *__errno_location();\n        free(ptr);\n        *__errno_location() = v6;\n        return 0LL;\n      }\n    }\n    else\n    {\n      v5 = *__errno_location();\n      iconv_close(cd);\n      *__errno_location() = v5;\n    }\n    result = (char *)ptr;\n  }\n  else\n  {\n    v9 = strdup(a1);\n    if ( !v9 )\n      *__errno_location() = 12;\n    result = v9;\n  }\n  return result;\n}\n"], [4280311, "sub_414FF7", "__int64 __fastcall sub_414FF7(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_41506A(a1, 0, 3, a4, a5, a6);\n}\n"], [4280349, "sub_41501D", "__int64 __fastcall sub_41501D(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  unsigned int fd; // [rsp+Ch] [rbp-14h]\n  unsigned int v8; // [rsp+18h] [rbp-8h]\n  int v9; // [rsp+1Ch] [rbp-4h]\n\n  fd = a1;\n  if ( a1 >= 0 && a1 <= 2 )\n  {\n    v8 = sub_414FF7(a1, a2, a3, a4, a5, a6);\n    v9 = *__errno_location();\n    close(a1);\n    *__errno_location() = v9;\n    fd = v8;\n  }\n  return fd;\n}\n"], [4280426, "sub_41506A", "__int64 __fastcall sub_41506A(int a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128 a7, __m128 a8, __m128 a9, __m128 a10, __m128 a11, __m128 a12, __m128 a13, __m128 a14)\n{\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  int v18; // [rsp+10h] [rbp-E0h]\n  int v19; // [rsp+14h] [rbp-DCh]\n  int v20; // [rsp+18h] [rbp-D8h]\n  int v21; // [rsp+1Ch] [rbp-D4h]\n  __int64 v22; // [rsp+50h] [rbp-A0h]\n  __int64 v23; // [rsp+58h] [rbp-98h]\n  __int64 v24; // [rsp+60h] [rbp-90h]\n  __int64 v25; // [rsp+68h] [rbp-88h]\n  __m128 v26; // [rsp+70h] [rbp-80h]\n  __m128 v27; // [rsp+80h] [rbp-70h]\n  __m128 v28; // [rsp+90h] [rbp-60h]\n  __m128 v29; // [rsp+A0h] [rbp-50h]\n  __m128 v30; // [rsp+B0h] [rbp-40h]\n  __m128 v31; // [rsp+C0h] [rbp-30h]\n  __m128 v32; // [rsp+D0h] [rbp-20h]\n  __m128 v33; // [rsp+E0h] [rbp-10h]\n\n  v22 = a3;\n  v23 = a4;\n  v24 = a5;\n  v25 = a6;\n  v26 = a7;\n  v27 = a8;\n  v28 = a9;\n  v29 = a10;\n  v30 = a11;\n  v31 = a12;\n  v32 = a13;\n  v33 = a14;\n  if ( a2 != 1030 )\n    return (unsigned int)fcntl(a1, a2, v22);\n  v19 = v22;\n  if ( dword_61B5E8 < 0 )\n  {\n    v18 = sub_41506A(a1, 0, v22, a4, a5, a6);\n  }\n  else\n  {\n    v18 = fcntl(a1, 1030, (unsigned int)v22);\n    if ( v18 < 0 && *__errno_location() == 22 )\n    {\n      v18 = sub_41506A(a1, 0, v19, v14, v15, v16);\n      if ( v18 < 0 )\n        return (unsigned int)v18;\n      dword_61B5E8 = -1;\n    }\n    else\n    {\n      dword_61B5E8 = 1;\n    }\n  }\n  if ( v18 >= 0 && dword_61B5E8 == -1 )\n  {\n    v20 = fcntl(v18, 1);\n    if ( v20 < 0 || fcntl(v18, 2, v20 | 1u) == -1 )\n    {\n      v21 = *__errno_location();\n      close(v18);\n      *__errno_location() = v21;\n      v18 = -1;\n    }\n  }\n  return (unsigned int)v18;\n}\n"], [4281124, "sub_415324", "_BOOL8 __fastcall sub_415324(int a1)\n{\n  return a1 >= 0 && a1 <= 127;\n}\n"], [4281160, "sub_415348", "_BOOL8 __fastcall sub_415348(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4281218, "sub_415382", "_BOOL8 __fastcall sub_415382(int a1)\n{\n  return (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4281264, "sub_4153B0", "_BOOL8 __fastcall sub_4153B0(int a1)\n{\n  return a1 == 32 || a1 == 9;\n}\n"], [4281300, "sub_4153D4", "_BOOL8 __fastcall sub_4153D4(int a1)\n{\n  return (a1 & 0xFFFFFFE0) == 0 || a1 == 127;\n}\n"], [4281340, "sub_4153FC", "_BOOL8 __fastcall sub_4153FC(int a1)\n{\n  return a1 > 47 && a1 <= 57;\n}\n"], [4281376, "sub_415420", "_BOOL8 __fastcall sub_415420(int a1)\n{\n  return a1 > 96 && a1 <= 122;\n}\n"], [4281412, "sub_415444", "_BOOL8 __fastcall sub_415444(int a1)\n{\n  return a1 > 32 && a1 <= 126;\n}\n"], [4281448, "sub_415468", "_BOOL8 __fastcall sub_415468(int a1)\n{\n  return a1 > 31 && a1 <= 126;\n}\n"], [4281484, "sub_41548C", "_BOOL8 __fastcall sub_41548C(int a1)\n{\n  return a1 > 32 && a1 <= 126 && (a1 <= 47 || a1 > 57) && ((int)(a1 & 0xFFFFFFDF) <= 64 || (int)(a1 & 0xFFFFFFDF) > 90);\n}\n"], [4281554, "sub_4154D2", "_BOOL8 __fastcall sub_4154D2(int a1)\n{\n  return a1 == 32 || a1 == 9 || a1 == 10 || a1 == 11 || a1 == 12 || a1 == 13;\n}\n"], [4281614, "sub_41550E", "_BOOL8 __fastcall sub_41550E(int a1)\n{\n  return a1 > 64 && a1 <= 90;\n}\n"], [4281650, "sub_415532", "_BOOL8 __fastcall sub_415532(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 70;\n}\n"], [4281708, "sub_41556C", "__int64 __fastcall sub_41556C(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 64 || a1 > 90 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 + 32);\n  return result;\n}\n"], [4281740, "sub_41558C", "__int64 __fastcall sub_41558C(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 96 || a1 > 122 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 - 32);\n  return result;\n}\n"], [4281772, "sub_4155AC", "unsigned __int64 __fastcall sub_4155AC(unsigned __int64 a1)\n{\n  void *v2; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+20h] [rbp-10h]\n\n  if ( a1 + 16 < a1 )\n    return 0LL;\n  v2 = malloc(a1 + 16);\n  if ( !v2 )\n    return 0LL;\n  v3 = (unsigned __int64)v2 + 16;\n  *(_DWORD *)(v3 - 4) = 336984906;\n  *(_QWORD *)(v3 - 16) = qword_61B600[v3 % 0x101];\n  qword_61B600[v3 % 0x101] = v3;\n  return v3;\n}\n"], [4281959, "sub_415667", "void __fastcall sub_415667(unsigned __int64 a1)\n{\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n\n  if ( a1 && *(_DWORD *)(a1 - 4) == 336984906 )\n  {\n    for ( i = (_QWORD *)(8 * (a1 % 0x101) + 6403584); *i; i = (_QWORD *)(*i - 16LL) )\n    {\n      if ( *i == a1 )\n      {\n        *i = *(_QWORD *)(a1 - 16);\n        free((void *)(a1 - 16));\n        return;\n      }\n    }\n  }\n}\n"], [4282160, "sub_415730", "bool __fastcall sub_415730(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_417560[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4282214, "sub_415766", "__int64 __fastcall sub_415766(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_415730(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_40DBF1(*(const void **)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4282694, "sub_415946", "size_t __fastcall sub_415946(const char *a1)\n{\n  __int64 v3; // [rsp+18h] [rbp-58h]\n  char v4[4]; // [rsp+20h] [rbp-50h] BYREF\n  int v5; // [rsp+24h] [rbp-4Ch] BYREF\n  char i; // [rsp+2Ch] [rbp-44h]\n  const char *v7; // [rsp+30h] [rbp-40h]\n  __int64 v8; // [rsp+38h] [rbp-38h]\n  char v9; // [rsp+40h] [rbp-30h]\n  int v10; // [rsp+44h] [rbp-2Ch]\n  unsigned __int64 v11; // [rsp+68h] [rbp-8h]\n\n  v11 = __readfsqword(0x28u);\n  if ( __ctype_get_mb_cur_max() <= 1 )\n    return strlen(a1);\n  v3 = 0LL;\n  v7 = a1;\n  v4[0] = 0;\n  memset(&v5, 0, 8uLL);\n  for ( i = 0; ; i = 0 )\n  {\n    sub_415766((__int64)v4);\n    if ( v9 == 1 && !v10 )\n      break;\n    ++v3;\n    v7 += v8;\n  }\n  return v3;\n}\n"], [4282912, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_61AE18 - off_61AE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_61AE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4283024, "fini", "void fini(void)\n{\n  ;\n}\n"], [4283040, "sub_415AA0", "int __fastcall sub_415AA0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_61B328 )\n    v1 = (void *)qword_61B328;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4283072, "sub_415AC0", "int __fastcall sub_415AC0(char *filename, struct stat *stat_buf)\n{\n  return __xstat(1, filename, stat_buf);\n}\n"], [4283088, "sub_415AD0", "int __fastcall sub_415AD0(int fildes, struct stat *stat_buf)\n{\n  return __fxstat(1, fildes, stat_buf);\n}\n"], [4283104, "sub_415AE0", "int __fastcall sub_415AE0(char *filename, struct stat *stat_buf)\n{\n  return __lxstat(1, filename, stat_buf);\n}\n"], [4283120, "sub_415AF0", "int __fastcall sub_415AF0(int fildes, char *filename, struct stat *stat_buf, int flag)\n{\n  return __fxstatat(1, fildes, filename, stat_buf, flag);\n}\n"], [4283144, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]