[[4198824, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4198864, "sub_4011D0", "__int64 sub_4011D0()\n{\n  return qword_60D010();\n}\n"], [4198880, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4198896, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4198912, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4198928, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4198944, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4198960, ".strcpy", "// attributes: thunk\nchar *strcpy(char *dest, const char *src)\n{\n  return strcpy(dest, src);\n}\n"], [4198976, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4198992, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4199008, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4199024, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4199040, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4199056, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4199072, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4199088, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4199104, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4199120, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4199136, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4199152, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4199168, ".newlocale", "// attributes: thunk\n__locale_t newlocale(int category_mask, const char *locale, __locale_t base)\n{\n  return newlocale(category_mask, locale, base);\n}\n"], [4199184, ".snprintf", "// attributes: thunk\nint snprintf(char *s, size_t maxlen, const char *format, ...)\n{\n  return snprintf(s, maxlen, format);\n}\n"], [4199200, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4199216, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4199232, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4199248, ".strspn", "// attributes: thunk\nsize_t strspn(const char *s, const char *accept)\n{\n  return strspn(s, accept);\n}\n"], [4199264, ".strcspn", "// attributes: thunk\nsize_t strcspn(const char *s, const char *reject)\n{\n  return strcspn(s, reject);\n}\n"], [4199280, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4199296, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4199312, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4199328, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4199344, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4199360, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4199376, ".fputc_unlocked", "// attributes: thunk\nint fputc_unlocked(int c, FILE *stream)\n{\n  return fputc_unlocked(c, stream);\n}\n"], [4199392, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4199408, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4199424, ".strtol", "// attributes: thunk\n__int64 strtol(const char *nptr, char **endptr, int base)\n{\n  return strtol(nptr, endptr, base);\n}\n"], [4199440, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4199456, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4199472, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4199488, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4199504, ".nl_langinfo", "// attributes: thunk\nchar *nl_langinfo(nl_item item)\n{\n  return nl_langinfo(item);\n}\n"], [4199520, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4199536, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4199552, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4199568, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4199584, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4199600, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4199616, ".sprintf", "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\n  return sprintf(s, format);\n}\n"], [4199632, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4199648, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4199664, ".strtold_l", "// attributes: thunk\nlong double strtold_l(const char *nptr, char **endptr, __locale_t loc)\n{\n  return strtold_l(nptr, endptr, loc);\n}\n"], [4199680, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4199696, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4199712, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4199728, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4199776, "sub_401560", "signed __int64 sub_401560()\n{\n  signed __int64 result; // rax\n\n  result = &unk_60D20F - &unk_60D208;\n  if ( (unsigned __int64)(&unk_60D20F - &unk_60D208) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4199824, "sub_401590", "__int64 sub_401590()\n{\n  return 0LL;\n}\n"], [4199888, "sub_4015D0", "signed __int64 sub_4015D0()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_60D278 )\n  {\n    result = sub_401560();\n    byte_60D278 = 1;\n  }\n  return result;\n}\n"], [4199920, "sub_4015F0", "__int64 sub_4015F0()\n{\n  return sub_401590();\n}\n"], [4199965, "sub_40161D", "__int64 __fastcall sub_40161D(unsigned __int8 a1)\n{\n  return a1;\n}\n"], [4199980, "sub_40162C", "int sub_40162C()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_402873(qword_60D2C8);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_402873(qword_60D2C8);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_402873(qword_60D2C8);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4200246, "sub_401736", "void __fastcall __noreturn sub_401736(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  __int64 v3; // r13\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  char *v6; // rax\n  FILE *v7; // rbx\n  char *v8; // rax\n  FILE *v9; // rbx\n  char *v10; // rax\n  FILE *v11; // rbx\n  char *v12; // rax\n  FILE *v13; // rbx\n  char *v14; // rax\n  FILE *v15; // rbx\n  char *v16; // rax\n\n  if ( a1 )\n  {\n    v1 = qword_60D2C8;\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = qword_60D2C8;\n    v4 = qword_60D2C8;\n    v5 = qword_60D2C8;\n    v6 = gettext(\"Usage: %s [OPTION]... LAST\\n  or:  %s [OPTION]... FIRST LAST\\n  or:  %s [OPTION]... FIRST INCREMENT LAST\\n\");\n    printf(v6, v5, v4, v3);\n    v7 = stdout;\n    v8 = gettext(\n           \"Print numbers from FIRST to LAST, in steps of INCREMENT.\\n\"\n           \"\\n\"\n           \"  -f, --format=FORMAT      use printf style floating-point FORMAT\\n\"\n           \"  -s, --separator=STRING   use STRING to separate numbers (default: \\\\n)\\n\"\n           \"  -w, --equal-width        equalize width by padding with leading zeroes\\n\");\n    fputs_unlocked(v8, v7);\n    v9 = stdout;\n    v10 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v10, v9);\n    v11 = stdout;\n    v12 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v12, v11);\n    v13 = stdout;\n    v14 = gettext(\n            \"\\n\"\n            \"If FIRST or INCREMENT is omitted, it defaults to 1.  That is, an\\n\"\n            \"omitted INCREMENT defaults to 1 even when LAST is smaller than FIRST.\\n\"\n            \"FIRST, INCREMENT, and LAST are interpreted as floating point values.\\n\"\n            \"INCREMENT is usually positive if FIRST is smaller than LAST, and\\n\"\n            \"INCREMENT is usually negative if FIRST is greater than LAST.\\n\");\n    fputs_unlocked(v14, v13);\n    v15 = stdout;\n    v16 = gettext(\n            \"FORMAT must be suitable for printing one argument of type `double';\\n\"\n            \"it defaults to %.PRECf if FIRST, INCREMENT, and LAST are all fixed point\\n\"\n            \"decimal numbers with maximum precision PREC, and to %g otherwise.\\n\");\n    fputs_unlocked(v16, v15);\n    sub_40162C();\n  }\n  exit(a1);\n}\n"], [4200527, "sub_40184F", "__int64 __fastcall sub_40184F(__int64 a1, unsigned __int8 *a2)\n{\n  char *v2; // rax\n  const unsigned __int16 *v3; // rbx\n  __int64 v4; // rax\n  int v5; // eax\n  unsigned __int8 *s; // [rsp+0h] [rbp-60h]\n  char *v8; // [rsp+10h] [rbp-50h]\n  char *v9; // [rsp+18h] [rbp-48h]\n  size_t v10; // [rsp+20h] [rbp-40h]\n  __int64 v11; // [rsp+28h] [rbp-38h]\n  long double v12; // [rsp+30h] [rbp-30h] BYREF\n  size_t v13; // [rsp+40h] [rbp-20h]\n  __int64 v14; // [rsp+48h] [rbp-18h]\n\n  s = a2;\n  if ( (unsigned __int8)sub_404D1E(a2, 0LL, &v12, sub_4026F3) != 1 )\n  {\n    v2 = gettext(\"invalid floating point argument: %s\");\n    error(0, 0, v2, a2);\n    sub_401736(1);\n  }\n  while ( 1 )\n  {\n    v3 = *__ctype_b_loc();\n    if ( (v3[(unsigned __int8)sub_40161D(*s)] & 0x2000) == 0 && *s != 43 )\n      break;\n    ++s;\n  }\n  v13 = strlen((const char *)s);\n  LODWORD(v14) = 0x7FFFFFFF;\n  if ( !s[strcspn((const char *)s, \"xX\")] && 0.0 == v12 * 0.0 )\n  {\n    v9 = strchr((const char *)s, 46);\n    if ( v9 )\n    {\n      v10 = strcspn(v9 + 1, \"eE\");\n      if ( v10 <= 0x7FFFFFFF )\n        LODWORD(v14) = v10;\n      if ( v10 )\n      {\n        LODWORD(v4) = v9 == (char *)s || (unsigned int)(*(v9 - 1) - 48) > 9;\n        v4 = (int)v4;\n      }\n      else\n      {\n        v4 = -1LL;\n      }\n      v13 += v4;\n    }\n    else\n    {\n      LODWORD(v14) = 0;\n    }\n    v8 = strchr((const char *)s, 101);\n    if ( !v8 )\n      v8 = strchr((const char *)s, 69);\n    if ( v8 )\n    {\n      v11 = strtol(v8 + 1, 0LL, 10);\n      if ( v11 >= 0 )\n        v5 = 0;\n      else\n        v5 = -(int)v11;\n      LODWORD(v14) = v14 + v5;\n    }\n  }\n  *(long double *)a1 = v12;\n  *(_QWORD *)(a1 + 16) = v13;\n  *(_QWORD *)(a1 + 24) = v14;\n  return a1;\n}\n"], [4201099, "sub_401A8B", "void *__fastcall sub_401A8B(_BYTE *a1, _QWORD *a2)\n{\n  __int64 v2; // rbx\n  char *v3; // rax\n  __int64 v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  unsigned int v7; // er12\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 v13; // rax\n  bool v14; // [rsp+1Fh] [rbp-41h]\n  __int64 i; // [rsp+20h] [rbp-40h]\n  size_t v16; // [rsp+20h] [rbp-40h]\n  size_t v17; // [rsp+20h] [rbp-40h]\n  size_t v18; // [rsp+20h] [rbp-40h]\n  size_t j; // [rsp+20h] [rbp-40h]\n  __int64 v20; // [rsp+28h] [rbp-38h]\n  __int64 v21; // [rsp+30h] [rbp-30h]\n  size_t n; // [rsp+38h] [rbp-28h]\n  void *dest; // [rsp+48h] [rbp-18h]\n\n  v20 = 0LL;\n  v21 = 0LL;\n  for ( i = 0LL; a1[i] != 37 || a1[i + 1] == 37; i += v4 )\n  {\n    if ( !a1[i] )\n    {\n      v2 = sub_402A35(a1);\n      v3 = gettext(\"format %s has no %% directive\");\n      error(1, 0, v3, v2);\n    }\n    ++v20;\n    if ( a1[i] == 37 )\n      v4 = 2LL;\n    else\n      v4 = 1LL;\n  }\n  v16 = strspn(&a1[i + 1], \"-+#0 '\") + i + 1;\n  v17 = strspn(&a1[v16], \"0123456789\") + v16;\n  if ( a1[v17] == 46 )\n    v17 += strspn(&a1[v17 + 1], \"0123456789\") + 1;\n  n = v17;\n  v14 = a1[v17] == 76;\n  v18 = v14 + v17;\n  if ( !a1[v18] )\n  {\n    v5 = sub_402A35(a1);\n    v6 = gettext(\"format %s ends in %%\");\n    error(1, 0, v6, v5);\n  }\n  if ( !strchr(\"efgaEFGA\", (char)a1[v18]) )\n  {\n    v7 = (char)a1[v18];\n    v8 = sub_402A35(a1);\n    v9 = gettext(\"format %s has unknown %%%c directive\");\n    error(1, 0, v9, v8, v7);\n  }\n  for ( j = v18 + 1; ; j += v13 )\n  {\n    if ( a1[j] == 37 && a1[j + 1] != 37 )\n    {\n      v10 = sub_402A35(a1);\n      v11 = gettext(\"format %s has too many %% directives\");\n      error(1, 0, v11, v10);\n      goto LABEL_23;\n    }\n    if ( !a1[j] )\n      break;\n    ++v21;\nLABEL_23:\n    if ( a1[j] == 37 )\n      v13 = 2LL;\n    else\n      v13 = 1LL;\n  }\n  dest = (void *)sub_404B67(j + 2);\n  memcpy(dest, a1, n);\n  *((_BYTE *)dest + n) = 76;\n  strcpy((char *)dest + n + 1, &a1[n + v14]);\n  *a2 = v20;\n  a2[1] = v21;\n  return dest;\n}\n"], [4201940, "sub_401DD4", "int __fastcall sub_401DD4(const char *a1, __int64 a2, __int64 a3, long double a4, long double a5, long double a6)\n{\n  bool v9; // al\n  int result; // eax\n  bool v11; // al\n  int v12; // er8\n  int v13; // er9\n  int v14; // er8\n  int v15; // er9\n  __int64 v16; // [rsp+8h] [rbp-88h]\n  bool v18; // [rsp+3Ah] [rbp-56h]\n  bool v19; // [rsp+3Bh] [rbp-55h]\n  int v20; // [rsp+3Ch] [rbp-54h]\n  char *s2; // [rsp+40h] [rbp-50h] BYREF\n  char *s1; // [rsp+48h] [rbp-48h] BYREF\n  long double v23; // [rsp+50h] [rbp-40h] BYREF\n  long double v24; // [rsp+60h] [rbp-30h]\n  long double v25; // [rsp+70h] [rbp-20h]\n  long double v26; // [rsp+80h] [rbp-10h]\n\n  if ( a5 >= 0.0 )\n    v9 = a4 > a6;\n  else\n    v9 = a6 > a4;\n  v18 = v9;\n  result = !v9;\n  if ( (_BYTE)result )\n  {\n    *(_QWORD *)&v24 = *(_QWORD *)&a4;\n    DWORD2(v24) = DWORD2(a4);\n    *(_QWORD *)&v25 = 0x8000000000000000LL;\n    DWORD2(v25) = 0x3FFF;\n    while ( 1 )\n    {\n      v26 = v24;\n      printf(a1);\n      if ( v18 )\n        break;\n      v24 = v25 * a5 + a4;\n      v11 = a5 >= 0.0 ? v24 > a6 : a6 > v24;\n      v18 = v11;\n      if ( v11 )\n      {\n        v19 = 0;\n        setlocale(1, \"C\");\n        LODWORD(v16) = DWORD2(v24);\n        v20 = sub_404DCD((unsigned int)&s2, (_DWORD)a1, DWORD2(v24), (unsigned int)&s2, v12, v13, *(_QWORD *)&v24, v16);\n        setlocale(1, &byte_40B14F);\n        if ( v20 < 0 )\n          sub_404CE9();\n        s2[v20 - a3] = 0;\n        if ( (unsigned __int8)sub_404D1E(&s2[a2], 0LL, &v23, sub_4026F3) && a6 == v23 )\n        {\n          s1 = 0LL;\n          LODWORD(v16) = DWORD2(v26);\n          if ( (int)sub_404DCD(\n                      (unsigned int)&s1,\n                      (_DWORD)a1,\n                      DWORD2(v26),\n                      (unsigned int)&s1,\n                      v14,\n                      v15,\n                      *(_QWORD *)&v26,\n                      v16) < 0 )\n            sub_404CE9();\n          v19 = strcmp(s1, s2) != 0;\n          free(s1);\n        }\n        free(s2);\n        if ( !v19 )\n          break;\n      }\n      fputs_unlocked(qword_60D288, stdout);\n      v25 = v25 + 1.0;\n    }\n    result = fputc_unlocked(10, stdout);\n  }\n  return result;\n}\n"], [4202550, "sub_402036", "const char *__fastcall sub_402036(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, __int64 a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, __int64 a17, int a18)\n{\n  unsigned int v18; // eax\n  unsigned __int64 v19; // rax\n  unsigned int v21; // [rsp+0h] [rbp-20h]\n  unsigned __int64 v22; // [rsp+8h] [rbp-18h]\n  unsigned __int64 v23; // [rsp+10h] [rbp-10h]\n\n  v18 = a10;\n  if ( a14 >= a10 )\n    v18 = a14;\n  v21 = v18;\n  if ( v18 != 0x7FFFFFFF && a18 != 0x7FFFFFFF )\n  {\n    if ( !byte_60D280 )\n    {\n      sprintf(byte_60D290, \"%%.%dLf\", v18);\n      return byte_60D290;\n    }\n    v23 = a9 + (int)(v18 - a10);\n    v22 = a17 + (int)(v18 - a18);\n    if ( a18 && !v18 )\n      --v22;\n    if ( !a18 && v18 )\n      ++v22;\n    v19 = a9 + (int)(v18 - a10);\n    if ( v22 >= v23 )\n      v19 = v22;\n    if ( v19 <= 0x7FFFFFFF )\n    {\n      sprintf(byte_60D290, \"%%0%d.%dLf\", (unsigned int)v19, v21);\n      return byte_60D290;\n    }\n  }\n  return \"%Lg\";\n}\n"], [4202808, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  char *v3; // rax\n  __int64 v4; // rbx\n  char *v5; // rax\n  int v6; // eax\n  char *v7; // rsi\n  __int128 *v8; // rdi\n  __int64 v9; // rdx\n  __int64 v10; // rcx\n  __int64 v11; // r8\n  __int64 v12; // r9\n  int v13; // eax\n  int v14; // eax\n  char *v15; // rax\n  long double v16; // [rsp+0h] [rbp-120h]\n  long double v17; // [rsp+10h] [rbp-110h]\n  long double v18; // [rsp+20h] [rbp-100h]\n  __int128 v19; // [rsp+60h] [rbp-C0h] BYREF\n  __int128 v20; // [rsp+70h] [rbp-B0h]\n  char **argv; // [rsp+80h] [rbp-A0h]\n  int argc; // [rsp+8Ch] [rbp-94h]\n  int v23; // [rsp+94h] [rbp-8Ch]\n  char *v24; // [rsp+98h] [rbp-88h]\n  __int64 v25; // [rsp+A0h] [rbp-80h] BYREF\n  __int64 v26; // [rsp+A8h] [rbp-78h]\n  __int128 v27; // [rsp+B0h] [rbp-70h]\n  __int128 v28; // [rsp+C0h] [rbp-60h]\n  __int128 v29; // [rsp+D0h] [rbp-50h]\n  __int128 v30; // [rsp+E0h] [rbp-40h]\n  __int128 v31; // [rsp+F0h] [rbp-30h] BYREF\n  __int128 v32; // [rsp+100h] [rbp-20h]\n\n  argc = a1;\n  argv = a2;\n  *(_QWORD *)&v27 = 0x8000000000000000LL;\n  DWORD2(v27) = 0x3FFF;\n  *(_QWORD *)&v28 = 1LL;\n  DWORD2(v28) = 0;\n  *(_QWORD *)&v29 = 0x8000000000000000LL;\n  DWORD2(v29) = 0x3FFF;\n  *(_QWORD *)&v30 = 1LL;\n  DWORD2(v30) = 0;\n  v25 = 0LL;\n  v26 = 0LL;\n  v24 = 0LL;\n  sub_40292A(*a2);\n  setlocale(6, &byte_40B14F);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40A9D0(sub_402788);\n  byte_60D280 = 0;\n  qword_60D288 = \"\\n\";\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      if ( optind >= argc\n        || *argv[optind] == 45 && ((v23 = argv[optind][1], v23 == 46) || (unsigned int)(v23 - 48) <= 9)\n        || (v23 = getopt_long(argc, argv, \"+f:s:w\", &longopts, 0LL), v23 == -1) )\n      {\n        if ( argc - optind <= 0 )\n        {\n          v3 = gettext(\"missing operand\");\n          error(0, 0, v3);\n          sub_401736(1);\n        }\n        if ( argc - optind > 3 )\n        {\n          v4 = sub_402A35(argv[optind + 3]);\n          v5 = gettext(\"extra operand %s\");\n          error(0, 0, v5, v4);\n          sub_401736(1);\n        }\n        if ( v24 )\n          v24 = (char *)sub_401A8B(v24, &v25);\n        v6 = optind++;\n        v7 = argv[v6];\n        v8 = &v31;\n        sub_40184F((__int64)&v31, (unsigned __int8 *)v7);\n        if ( optind < argc )\n        {\n          v27 = v31;\n          v28 = v32;\n          v13 = optind++;\n          v7 = argv[v13];\n          v8 = &v19;\n          sub_40184F((__int64)&v19, (unsigned __int8 *)v7);\n          v31 = v19;\n          v32 = v20;\n          if ( optind < argc )\n          {\n            v29 = v31;\n            v30 = v32;\n            v14 = optind++;\n            v7 = argv[v14];\n            v8 = &v19;\n            sub_40184F((__int64)&v19, (unsigned __int8 *)v7);\n            v31 = v19;\n            v32 = v20;\n          }\n        }\n        if ( v24 && byte_60D280 )\n        {\n          v15 = gettext(\"format string may not be specified when printing equal width strings\");\n          error(0, 0, v15);\n          sub_401736(1);\n        }\n        if ( !v24 )\n          v24 = (char *)sub_402036(\n                          (__int64)v8,\n                          (__int64)v7,\n                          v9,\n                          v10,\n                          v11,\n                          v12,\n                          v27,\n                          SDWORD2(v27),\n                          v28,\n                          SDWORD2(v28),\n                          v29,\n                          SDWORD2(v29),\n                          v30,\n                          SDWORD2(v30),\n                          v31,\n                          SDWORD2(v31),\n                          v32,\n                          SDWORD2(v32));\n        *(_QWORD *)&v18 = v31;\n        DWORD2(v18) = DWORD2(v31);\n        *(_QWORD *)&v17 = v29;\n        DWORD2(v17) = DWORD2(v29);\n        *(_QWORD *)&v16 = v27;\n        DWORD2(v16) = DWORD2(v27);\n        sub_401DD4(v24, v25, v26, v16, v17, v18);\n        exit(0);\n      }\n      if ( v23 != 102 )\n        break;\n      v24 = (char *)optarg;\n    }\n    if ( v23 <= 102 )\n      break;\n    if ( v23 == 115 )\n    {\n      qword_60D288 = (char *)optarg;\n    }\n    else\n    {\n      if ( v23 != 119 )\n        goto LABEL_19;\n      byte_60D280 = 1;\n    }\n  }\n  if ( v23 == -131 )\n  {\n    sub_4048FF(\n      (_DWORD)stdout,\n      (unsigned int)\"seq\",\n      (unsigned int)\"GNU coreutils\",\n      (_DWORD)off_60D1D0,\n      (unsigned int)\"Ulrich Drepper\",\n      0);\n    exit(0);\n  }\n  if ( v23 == -130 )\n    sub_401736(0);\nLABEL_19:\n  sub_401736(1);\n}\n"], [4204223, "sub_4026BF", "__int64 sub_4026BF()\n{\n  if ( !qword_60D2B0 )\n    qword_60D2B0 = (__int64)newlocale(8127, \"C\", 0LL);\n  return qword_60D2B0;\n}\n"], [4204275, "sub_4026F3", "long double __fastcall sub_4026F3(const char *a1, char **a2)\n{\n  __int64 v2; // rax\n  int v3; // edx\n  long double v5; // [rsp+0h] [rbp-40h]\n  struct __locale_struct *loc; // [rsp+28h] [rbp-18h]\n  long double v7; // [rsp+30h] [rbp-10h]\n\n  loc = (struct __locale_struct *)sub_4026BF();\n  if ( loc )\n  {\n    v7 = strtold_l(a1, a2, loc);\n    v2 = *(_QWORD *)&v7;\n    v3 = DWORD2(v7);\n  }\n  else\n  {\n    if ( a2 )\n      *a2 = (char *)a1;\n    v2 = 0LL;\n    v3 = 0;\n  }\n  *(_QWORD *)&v5 = v2;\n  DWORD2(v5) = v3;\n  return v5;\n}\n"], [4204382, "sub_40275E", "__int64 __fastcall sub_40275E(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  qword_60D2B8 = a1;\n  return result;\n}\n"], [4204403, "sub_402773", "__int64 __fastcall sub_402773(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_60D2C0 = a1;\n  return result;\n}\n"], [4204424, "sub_402788", "__int64 sub_402788()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_404EFB(stdout) && (byte_60D2C0 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_60D2B8 )\n    {\n      v0 = (const char *)sub_40404E(qword_60D2B8);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_404EFB(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4204659, "sub_402873", "_BYTE *__fastcall sub_402873(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4204764, "sub_4028DC", "size_t __fastcall sub_4028DC(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4204842, "sub_40292A", "char *__fastcall sub_40292A(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_60D2C8 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4205073, "sub_402A11", "__int64 __fastcall sub_402A11(unsigned int a1, __int64 a2)\n{\n  return sub_403EC0(a1, 6LL, a2);\n}\n"], [4205109, "sub_402A35", "__int64 __fastcall sub_402A35(__int64 a1)\n{\n  return sub_402A11(0, a1);\n}\n"], [4205140, "sub_402A54", "__int64 __fastcall sub_402A54(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60D2E0;\n  v4 = sub_404C8B(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4205213, "sub_402A9D", "__int64 __fastcall sub_402A9D(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_60D2E0;\n  return *(unsigned int *)v1;\n}\n"], [4205243, "sub_402ABB", "__int64 *__fastcall sub_402ABB(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_60D2E0;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4205279, "sub_402ADF", "__int64 __fastcall sub_402ADF(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_60D2E0;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4205415, "sub_402B67", "__int64 __fastcall sub_402B67(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_60D2E0;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4205466, "sub_402B9A", "__int64 *__fastcall sub_402B9A(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_60D2E0;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4205556, "sub_402BF4", "_QWORD *__fastcall sub_402BF4(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4205676, "sub_402C6C", "char *__fastcall sub_402C6C(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'\";\n  return v3;\n}\n"], [4205737, "sub_402CA9", "unsigned __int64 __fastcall sub_402CA9(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_402C6C((const char *)L\"`'\", a5);\n        a9 = sub_402C6C((const char *)L\"'\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_402CA9(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4208884, "sub_4038F4", "unsigned __int64 __fastcall sub_4038F4(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_60D2E0;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_402CA9(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4209044, "sub_403994", "__int64 __fastcall sub_403994(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_4039C6(a1, a2, 0LL, a3);\n}\n"], [4209094, "sub_4039C6", "__int64 __fastcall sub_4039C6(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_60D2E0;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_402CA9(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_404B4D(v10);\n  sub_402CA9(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4209394, "sub_403AF2", "void sub_403AF2()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_60D200;\n  for ( i = 1; i < dword_60D1E0; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_60D320 )\n  {\n    free(ptr[1]);\n    qword_60D1F0 = 256LL;\n    off_60D1F8 = &unk_60D320;\n  }\n  if ( ptr != (void **)&qword_60D1F0 )\n  {\n    free(ptr);\n    off_60D200 = &qword_60D1F0;\n  }\n  dword_60D1E0 = 1;\n}\n"], [4209565, "sub_403B9D", "void *__fastcall sub_403B9D(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_60D200;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60D1E0 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_60D200 == &qword_60D1F0;\n    if ( off_60D200 == &qword_60D1F0 )\n      v4 = 0LL;\n    else\n      v4 = off_60D200;\n    v12 = (__int64 *)sub_404B9C(v4, 16 * v14);\n    off_60D200 = v12;\n    if ( v9 )\n    {\n      v5 = off_60D1F8;\n      *v12 = qword_60D1F0;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_60D1E0], 0, 16 * (v14 - (unsigned int)dword_60D1E0));\n    dword_60D1E0 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_402CA9((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_60D320 )\n      free(ptr);\n    ptr = (void *)sub_404B4D(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_402CA9((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4210211, "sub_403E23", "void *__fastcall sub_403E23(int a1, __int64 a2)\n{\n  return sub_403B9D(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_60D2E0);\n}\n"], [4210254, "sub_403E4E", "void *__fastcall sub_403E4E(int a1, __int64 a2, size_t a3)\n{\n  return sub_403B9D(a1, a2, a3, (__int64)&qword_60D2E0);\n}\n"], [4210298, "sub_403E7A", "void *__fastcall sub_403E7A(__int64 a1)\n{\n  return sub_403E23(0, a1);\n}\n"], [4210329, "sub_403E99", "void *__fastcall sub_403E99(__int64 a1, size_t a2)\n{\n  return sub_403E4E(0, a1, a2);\n}\n"], [4210368, "sub_403EC0", "void *__fastcall sub_403EC0(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_402BF4(v5, a2);\n  return sub_403B9D(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4210433, "sub_403F01", "void *__fastcall sub_403F01(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_402BF4(v7, a2);\n  return sub_403B9D(a1, a3, a4, (__int64)v7);\n}\n"], [4210496, "sub_403F40", "void *__fastcall sub_403F40(int a1, __int64 a2)\n{\n  return sub_403EC0(0, a1, a2);\n}\n"], [4210532, "sub_403F64", "void *__fastcall sub_403F64(int a1, __int64 a2, size_t a3)\n{\n  return sub_403F01(0, a1, a2, a3);\n}\n"], [4210576, "sub_403F90", "void *__fastcall sub_403F90(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_60D2E0;\n  v4[1] = qword_60D2E8;\n  v4[2] = qword_60D2F0;\n  v4[3] = qword_60D2F8;\n  v4[4] = qword_60D300;\n  v4[5] = qword_60D308;\n  v4[6] = qword_60D310;\n  sub_402ADF(v4, a3, 1);\n  return sub_403B9D(0, a1, a2, (__int64)v4);\n}\n"], [4210724, "sub_404024", "void *__fastcall sub_404024(__int64 a1, unsigned __int8 a2)\n{\n  return sub_403F90(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4210766, "sub_40404E", "void *__fastcall sub_40404E(__int64 a1)\n{\n  return sub_404024(a1, 0x3Au);\n}\n"], [4210797, "sub_40406D", "void *__fastcall sub_40406D(__int64 a1, size_t a2)\n{\n  return sub_403F90(a1, a2, 0x3Au);\n}\n"], [4210839, "sub_404097", "__int64 __fastcall sub_404097(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_4040CD(a1, a2, a3, a4, -1LL);\n}\n"], [4210893, "sub_4040CD", "void *__fastcall sub_4040CD(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_60D2E0;\n  v8[1] = qword_60D2E8;\n  v8[2] = qword_60D2F0;\n  v8[3] = qword_60D2F8;\n  v8[4] = qword_60D300;\n  v8[5] = qword_60D308;\n  v8[6] = qword_60D310;\n  sub_402B9A(v8, a2, a3);\n  return sub_403B9D(a1, a4, a5, (__int64)v8);\n}\n"], [4211044, "sub_404164", "__int64 __fastcall sub_404164(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_404097(0, a1, a2, a3);\n}\n"], [4211091, "sub_404193", "void *__fastcall sub_404193(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_4040CD(0, a1, a2, a3, a4);\n}\n"], [4211149, "sub_4041CD", "int __fastcall sub_4041CD(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4212664, "sub_4047B8", "int __fastcall sub_4047B8(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_4041CD(a1, a2, a3, a4, a5, i);\n}\n"], [4212774, "sub_404826", "int __fastcall sub_404826(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_4041CD(a1, a2, a3, a4, v8, i);\n}\n"], [4212991, "sub_4048FF", "int sub_4048FF(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_404826(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4213173, "sub_4049B5", "int sub_4049B5()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4213278, "sub_404A1E", "__int64 __fastcall sub_404A1E(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_404CE9(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_404B67(a2 * a1);\n}\n"], [4213340, "sub_404A5C", "__int64 __fastcall sub_404A5C(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_404CE9(a1, a2, v4);\n  return sub_404B9C(a1, a3 * a2);\n}\n"], [4213416, "sub_404AA8", "__int64 __fastcall sub_404AA8(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_404CE9(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_404B9C(a1, a3 * v6);\n}\n"], [4213581, "sub_404B4D", "__int64 __fastcall sub_404B4D(__int64 a1)\n{\n  return sub_404B67(a1);\n}\n"], [4213607, "sub_404B67", "void *__fastcall sub_404B67(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_404CE9(a1, a2, v2);\n  return v4;\n}\n"], [4213660, "sub_404B9C", "void *__fastcall sub_404B9C(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_404CE9(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4213757, "sub_404BFD", "__int64 __fastcall sub_404BFD(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_404AA8(a1, a2, 1uLL);\n}\n"], [4213799, "sub_404C27", "void *__fastcall sub_404C27(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_404B67(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4213842, "sub_404C52", "void *__fastcall sub_404C52(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_404CE9(a1, a2, v2);\n  return v4;\n}\n"], [4213899, "sub_404C8B", "void *__fastcall sub_404C8B(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_404B67(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4213948, "sub_404CBC", "void *__fastcall sub_404CBC(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_404C8B(a1, v1 + 1);\n}\n"], [4213993, "sub_404CE9", "void __noreturn sub_404CE9()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4214046, "sub_404D1E", "__int64 __fastcall sub_404D1E(_BYTE *a1, _QWORD *a2, __int64 a3, long double (__fastcall *a4)(_BYTE *, _BYTE **))\n{\n  int v4; // edx\n  unsigned __int8 v8; // [rsp+27h] [rbp-19h]\n  _BYTE *v9; // [rsp+28h] [rbp-18h] BYREF\n  long double v10; // [rsp+30h] [rbp-10h]\n\n  v8 = 1;\n  *__errno_location() = 0;\n  v10 = a4(a1, &v9);\n  if ( v9 == a1 || !a2 && *v9 )\n  {\n    v8 = 0;\n  }\n  else if ( 0.0 != v10 && *__errno_location() == 34 )\n  {\n    v8 = 0;\n  }\n  if ( a2 )\n    *a2 = v9;\n  v4 = DWORD2(v10);\n  *(_QWORD *)a3 = *(_QWORD *)&v10;\n  *(_DWORD *)(a3 + 8) = v4;\n  return v8;\n}\n"], [4214221, "sub_404DCD", "__int64 sub_404DCD(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+18h] [rbp-C8h] BYREF\n\n  va_start(va, a2);\n  return (unsigned int)sub_404E81(a1, a2, va);\n}\n"], [4214401, "sub_404E81", "unsigned __int64 __fastcall sub_404E81(void **a1, __int64 a2, __int64 a3)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v4; // [rsp+20h] [rbp-10h] BYREF\n  void *ptr; // [rsp+28h] [rbp-8h]\n\n  ptr = (void *)sub_405281(0LL, &v4, a2, a3);\n  if ( !ptr )\n    return 0xFFFFFFFFLL;\n  if ( v4 <= 0x7FFFFFFF )\n  {\n    *a1 = ptr;\n    result = v4;\n  }\n  else\n  {\n    free(ptr);\n    *__errno_location() = 75;\n    result = 0xFFFFFFFFLL;\n  }\n  return result;\n}\n"], [4214523, "sub_404EFB", "__int64 __fastcall sub_404EFB(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = (unsigned int)sub_404F86(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4214662, "sub_404F86", "int __fastcall sub_404F86(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_40506E(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4214843, "sub_40503B", "__int64 __fastcall sub_40503B(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_4050B9(a1, 0LL, 1LL);\n  return result;\n}\n"], [4214894, "sub_40506E", "int __fastcall sub_40506E(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_40503B(a1);\n  return fflush(a1);\n}\n"], [4214969, "sub_4050B9", "int __fastcall sub_4050B9(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4215153, "sub_405171", "__int64 __fastcall sub_405171(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4215205, "sub_4051A5", "__int64 __fastcall sub_4051A5(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  __int64 v5; // rax\n\n  v4 = sub_405171(a1, a2);\n  v5 = sub_405171(v4, a3);\n  return sub_405171(v5, a4);\n}\n"], [4215280, "sub_4051F0", "unsigned __int64 __fastcall sub_4051F0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int64 result; // rax\n\n  result = a2;\n  if ( a1 >= a2 )\n    result = a1;\n  return result;\n}\n"], [4215307, "sub_40520B", "__int64 sub_40520B()\n{\n  __int64 result; // rax\n  char *v1; // [rsp+8h] [rbp-8h]\n\n  v1 = nl_langinfo(0x10000);\n  if ( *v1 )\n    result = (unsigned __int8)*v1;\n  else\n    result = 46LL;\n  return result;\n}\n"], [4215356, "sub_40523C", "_BOOL8 __fastcall sub_40523C(int a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, __int64 a11, int a12, int a13, int a14, long double a15)\n{\n  return (unsigned int)sub_408A3C(a1, a2, DWORD2(a15), a12, a13, a14, *(__int64 *)&a15, DWORD2(a15)) || a15 == a15 + a15;\n}\n"], [4215425, "sub_405281", "void *__fastcall sub_405281(void *a1, unsigned __int64 *a2, void *a3, __int64 a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)\n{\n  int v13; // esi\n  int v14; // edi\n  int v15; // ecx\n  int v16; // er8\n  int v17; // er9\n  double v18; // xmm4_8\n  double v19; // xmm5_8\n  void *v20; // rsp\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  unsigned __int64 v23; // rax\n  unsigned int v24; // eax\n  char *v25; // rax\n  char *v26; // rax\n  __int64 v27; // rcx\n  unsigned __int64 v28; // rax\n  char *v29; // rax\n  __int64 v30; // rcx\n  unsigned __int64 v31; // rax\n  int v32; // edi\n  int v33; // ecx\n  int v34; // er8\n  int v35; // er9\n  char *v36; // rax\n  int v37; // edx\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  char *v41; // rax\n  char *v42; // rax\n  char *v43; // rax\n  __int16 v44; // ax\n  __int16 v45; // fps\n  char *v47; // rax\n  char *v48; // rax\n  char *v49; // rax\n  char *v50; // rax\n  char *v51; // rax\n  char *v52; // rax\n  char *v53; // rax\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rbx\n  char *v58; // rax\n  char *v59; // rax\n  char *v60; // rbx\n  char *v61; // rax\n  char *v62; // rax\n  char *v63; // rax\n  char *v64; // rax\n  char *v65; // rax\n  char *v66; // rax\n  __int64 v67; // rax\n  char *v68; // rbx\n  char *v69; // rax\n  char *v70; // rax\n  char *v71; // rax\n  char *v72; // rax\n  char *v73; // rbx\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *v77; // rax\n  char *v78; // rax\n  char *v79; // rax\n  char *v80; // rax\n  unsigned __int64 v81; // rax\n  _BYTE *v82; // rax\n  _BYTE *v83; // rax\n  _BYTE *v84; // rax\n  _BYTE *v85; // rax\n  _BYTE *v86; // rax\n  _BYTE *v87; // rax\n  _BYTE *v88; // rax\n  _BYTE *v89; // rax\n  _BYTE *v90; // rax\n  _BYTE *v91; // rax\n  unsigned int v92; // eax\n  unsigned int v93; // eax\n  unsigned __int64 v94; // rax\n  __int64 v95; // rax\n  unsigned __int64 v96; // rax\n  char *v97; // rax\n  int v98; // edx\n  int *v99; // rdx\n  int v100; // eax\n  unsigned __int64 v101; // rbx\n  __int64 v102; // rax\n  unsigned __int64 v103; // rax\n  __int64 v104; // rax\n  unsigned __int64 v105; // rax\n  long double v106; // [rsp+0h] [rbp-8E0h]\n  __int64 v107; // [rsp+18h] [rbp-8C8h] BYREF\n  __int64 v108; // [rsp+20h] [rbp-8C0h]\n  void *v109; // [rsp+28h] [rbp-8B8h]\n  unsigned __int64 *v110; // [rsp+30h] [rbp-8B0h]\n  void *v111; // [rsp+38h] [rbp-8A8h]\n  __int16 v112; // [rsp+4Ah] [rbp-896h]\n  int v113; // [rsp+4Ch] [rbp-894h] BYREF\n  int v114; // [rsp+50h] [rbp-890h]\n  int v115; // [rsp+54h] [rbp-88Ch]\n  int v116; // [rsp+58h] [rbp-888h]\n  int v117; // [rsp+5Ch] [rbp-884h]\n  unsigned int v118; // [rsp+60h] [rbp-880h]\n  int v119; // [rsp+64h] [rbp-87Ch]\n  int v120; // [rsp+68h] [rbp-878h]\n  int v121; // [rsp+6Ch] [rbp-874h]\n  unsigned int v122; // [rsp+70h] [rbp-870h]\n  int v123; // [rsp+74h] [rbp-86Ch]\n  int v124; // [rsp+78h] [rbp-868h]\n  unsigned int v125; // [rsp+7Ch] [rbp-864h]\n  unsigned int v126; // [rsp+80h] [rbp-860h]\n  unsigned int v127; // [rsp+84h] [rbp-85Ch]\n  unsigned int v128; // [rsp+88h] [rbp-858h]\n  unsigned int v129; // [rsp+8Ch] [rbp-854h]\n  unsigned int v130; // [rsp+90h] [rbp-850h]\n  unsigned int v131; // [rsp+94h] [rbp-84Ch]\n  unsigned int v132; // [rsp+98h] [rbp-848h]\n  int v133; // [rsp+9Ch] [rbp-844h]\n  unsigned int v134; // [rsp+A0h] [rbp-840h]\n  unsigned int v135; // [rsp+A4h] [rbp-83Ch]\n  char *format; // [rsp+A8h] [rbp-838h]\n  void *v137; // [rsp+B0h] [rbp-830h]\n  void *v138; // [rsp+B8h] [rbp-828h]\n  __int64 v139; // [rsp+C0h] [rbp-820h]\n  char *i; // [rsp+C8h] [rbp-818h]\n  void *src; // [rsp+D0h] [rbp-810h]\n  unsigned __int64 v142; // [rsp+D8h] [rbp-808h]\n  size_t n; // [rsp+E0h] [rbp-800h]\n  void *dest; // [rsp+E8h] [rbp-7F8h]\n  void *v145; // [rsp+F0h] [rbp-7F0h]\n  unsigned __int64 v146; // [rsp+F8h] [rbp-7E8h]\n  unsigned __int64 v147; // [rsp+100h] [rbp-7E0h]\n  unsigned __int64 v148; // [rsp+108h] [rbp-7D8h]\n  void *v149; // [rsp+110h] [rbp-7D0h]\n  unsigned __int64 v150; // [rsp+118h] [rbp-7C8h]\n  char *v151; // [rsp+120h] [rbp-7C0h]\n  char *v152; // [rsp+128h] [rbp-7B8h]\n  char *v153; // [rsp+130h] [rbp-7B0h]\n  __int64 v154; // [rsp+138h] [rbp-7A8h]\n  unsigned __int64 v155; // [rsp+140h] [rbp-7A0h]\n  _BYTE *v156; // [rsp+148h] [rbp-798h]\n  _BYTE *v157; // [rsp+150h] [rbp-790h]\n  void *v158; // [rsp+158h] [rbp-788h]\n  void *v159; // [rsp+160h] [rbp-780h]\n  void *v160; // [rsp+168h] [rbp-778h]\n  size_t maxlen; // [rsp+170h] [rbp-770h]\n  void *v162; // [rsp+178h] [rbp-768h]\n  void *v163; // [rsp+180h] [rbp-760h]\n  unsigned __int64 v164; // [rsp+188h] [rbp-758h]\n  size_t size; // [rsp+190h] [rbp-750h]\n  size_t v166; // [rsp+198h] [rbp-748h]\n  unsigned __int64 v167; // [rsp+1A0h] [rbp-740h]\n  size_t v168; // [rsp+1A8h] [rbp-738h]\n  size_t v169; // [rsp+1B0h] [rbp-730h]\n  void *v170; // [rsp+1B8h] [rbp-728h]\n  unsigned __int64 v171; // [rsp+1C0h] [rbp-720h]\n  size_t v172; // [rsp+1C8h] [rbp-718h]\n  size_t v173; // [rsp+1D0h] [rbp-710h]\n  _BYTE *v174; // [rsp+1D8h] [rbp-708h]\n  size_t v175; // [rsp+1E0h] [rbp-700h]\n  unsigned __int64 v176; // [rsp+1E8h] [rbp-6F8h]\n  size_t v177; // [rsp+1F0h] [rbp-6F0h]\n  size_t v178; // [rsp+1F8h] [rbp-6E8h]\n  size_t v179; // [rsp+200h] [rbp-6E0h]\n  size_t v180; // [rsp+208h] [rbp-6D8h]\n  __int64 v181; // [rsp+210h] [rbp-6D0h]\n  __int64 v182; // [rsp+218h] [rbp-6C8h]\n  __int64 v183; // [rsp+220h] [rbp-6C0h]\n  __int64 v184; // [rsp+228h] [rbp-6B8h]\n  double v185; // [rsp+230h] [rbp-6B0h]\n  __int64 v186; // [rsp+238h] [rbp-6A8h]\n  __int64 v187; // [rsp+240h] [rbp-6A0h]\n  __int64 v188; // [rsp+248h] [rbp-698h]\n  unsigned __int64 v189; // [rsp+250h] [rbp-690h]\n  size_t v190; // [rsp+258h] [rbp-688h]\n  long double v191; // [rsp+260h] [rbp-680h]\n  __int64 v192; // [rsp+270h] [rbp-670h]\n  int v193; // [rsp+278h] [rbp-668h]\n  char v194[8]; // [rsp+280h] [rbp-660h] BYREF\n  void *v195; // [rsp+288h] [rbp-658h]\n  _BYTE v196[224]; // [rsp+290h] [rbp-650h] BYREF\n  __int64 v197; // [rsp+370h] [rbp-570h] BYREF\n  void *ptr; // [rsp+378h] [rbp-568h]\n  __int64 v199; // [rsp+380h] [rbp-560h]\n  __int64 v200; // [rsp+388h] [rbp-558h]\n  _BYTE v201[624]; // [rsp+390h] [rbp-550h] BYREF\n  char v202[712]; // [rsp+600h] [rbp-2E0h] BYREF\n  unsigned __int64 v203; // [rsp+8C8h] [rbp-18h]\n\n  v111 = a1;\n  v110 = a2;\n  v109 = a3;\n  v108 = a4;\n  v203 = __readfsqword(0x28u);\n  if ( (int)sub_4093A6(a3, &v197, v194) < 0 )\n    return 0LL;\n  if ( (int)sub_408A94(v108, v194) < 0 )\n  {\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 22;\n    return 0LL;\n  }\n  v13 = v199;\n  v14 = 7;\n  v164 = sub_4051A5(7uLL, v199, v200, 6LL);\n  if ( v164 > 0xF9F )\n  {\n    size = v164;\n    if ( v164 == -1LL )\n      goto LABEL_530;\n    v14 = size;\n    format = (char *)malloc(size);\n    if ( !format )\n      goto LABEL_530;\n    v137 = format;\n  }\n  else\n  {\n    v20 = alloca(16 * ((v164 + 30) / 0x10));\n    format = (char *)(16 * (((unsigned __int64)&v107 + 7) >> 4));\n    v137 = 0LL;\n  }\n  if ( v111 )\n  {\n    src = v111;\n    v142 = *v110;\n  }\n  else\n  {\n    src = 0LL;\n    v142 = 0LL;\n  }\n  n = 0LL;\n  v138 = v109;\n  v139 = 0LL;\n  for ( i = (char *)ptr; ; i += 88 )\n  {\n    if ( *(void **)i != v138 )\n    {\n      v166 = *(_QWORD *)i - (_QWORD)v138;\n      v167 = sub_405171(n, v166);\n      if ( v167 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v21 = -1LL;\n          else\n            v21 = 2 * v142;\n        }\n        else\n        {\n          v21 = 12LL;\n        }\n        v142 = v21;\n        if ( v167 > v21 )\n          v142 = v167;\n        v168 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        dest = src != v111 && src ? realloc(src, v168) : malloc(v168);\n        if ( !dest )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(dest, src, n);\n        src = dest;\n      }\n      v13 = (int)v138;\n      v14 = (_DWORD)src + n;\n      memcpy((char *)src + n, v138, v166);\n      n = v167;\n    }\n    if ( v197 == v139 )\n    {\n      v22 = sub_405171(n, 1LL);\n      if ( v22 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v104 = -1LL;\n          else\n            v104 = 2 * v142;\n        }\n        else\n        {\n          v104 = 12LL;\n        }\n        v142 = v104;\n        v105 = sub_405171(n, 1LL);\n        if ( v105 > v142 )\n          v142 = sub_405171(n, 1LL);\n        v169 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v163 = src != v111 && src ? realloc(src, v169) : malloc(v169);\n        if ( !v163 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v163, src, n);\n        src = v163;\n      }\n      *((_BYTE *)src + n) = 0;\n      if ( src != v111 && n + 1 < v142 )\n      {\n        v170 = realloc(src, n + 1);\n        if ( v170 )\n          src = v170;\n      }\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      *v110 = n;\n      return src;\n    }\n    if ( i[72] == 37 )\n    {\n      if ( *((_QWORD *)i + 10) != -1LL )\n        abort();\n      v13 = 1;\n      v14 = n;\n      v171 = sub_405171(n, 1LL);\n      if ( v171 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v23 = -1LL;\n          else\n            v23 = 2 * v142;\n        }\n        else\n        {\n          v23 = 12LL;\n        }\n        v142 = v23;\n        if ( v171 > v23 )\n          v142 = v171;\n        v172 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        if ( src != v111 && src )\n        {\n          v13 = v172;\n          v14 = (int)src;\n          v145 = realloc(src, v172);\n        }\n        else\n        {\n          v14 = v172;\n          v145 = malloc(v172);\n        }\n        if ( !v145 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n        {\n          v13 = (int)src;\n          v14 = (int)v145;\n          memcpy(v145, src, n);\n        }\n        src = v145;\n      }\n      *((_BYTE *)src + n) = 37;\n      n = v171;\n      goto LABEL_487;\n    }\n    if ( *((_QWORD *)i + 10) == -1LL )\n      abort();\n    if ( i[72] == 110 )\n    {\n      v24 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n      if ( v24 == 20 )\n      {\n        **((_DWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n        goto LABEL_487;\n      }\n      if ( v24 > 0x14 )\n      {\n        if ( v24 == 21 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 22 )\n        {\n          **((_QWORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      else\n      {\n        if ( v24 == 18 )\n        {\n          **((_BYTE **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n        if ( v24 == 19 )\n        {\n          **((_WORD **)v195 + 4 * *((_QWORD *)i + 10) + 2) = n;\n          goto LABEL_487;\n        }\n      }\n      abort();\n    }\n    if ( i[72] != 102\n      && i[72] != 70\n      && i[72] != 101\n      && i[72] != 69\n      && i[72] != 103\n      && i[72] != 71\n      && i[72] != 97\n      && i[72] != 65 )\n    {\n      break;\n    }\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10)) != 12 )\n      break;\n    v25 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    *(_QWORD *)&v106 = *((_QWORD *)v25 + 2);\n    DWORD2(v106) = *((_DWORD *)v25 + 6);\n    if ( !sub_40523C(v14, v13, a5, a6, a7, a8, v18, v19, a11, a12, DWORD2(v106), v15, v16, v17, v106) )\n      break;\n    v114 = *((_DWORD *)i + 4);\n    v115 = 0;\n    v146 = 0LL;\n    if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n    {\n      if ( *((_QWORD *)i + 5) == -1LL )\n      {\n        v152 = (char *)*((_QWORD *)i + 3);\n        do\n        {\n          v26 = v152++;\n          v27 = *v26 - 48;\n          if ( v146 > 0x1999999999999999LL )\n            v28 = -1LL;\n          else\n            v28 = 10 * v146;\n          v146 = sub_405171(v28, v27);\n        }\n        while ( *((char **)i + 4) != v152 );\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n          abort();\n        v120 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n        if ( v120 >= 0 )\n        {\n          v146 = v120;\n        }\n        else\n        {\n          v114 |= 2u;\n          v146 = (unsigned int)-v120;\n        }\n      }\n      v115 = 1;\n    }\n    v116 = 0;\n    v147 = 0LL;\n    if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n    {\n      if ( *((_QWORD *)i + 8) == -1LL )\n      {\n        v153 = (char *)(*((_QWORD *)i + 6) + 1LL);\n        v147 = 0LL;\n        while ( *((char **)i + 7) != v153 )\n        {\n          v29 = v153++;\n          v30 = *v29 - 48;\n          if ( v147 > 0x1999999999999999LL )\n            v31 = -1LL;\n          else\n            v31 = 10 * v147;\n          v147 = sub_405171(v31, v30);\n        }\n        v116 = 1;\n      }\n      else\n      {\n        if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n          abort();\n        v121 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n        if ( v121 >= 0 )\n        {\n          v147 = v121;\n          v116 = 1;\n        }\n      }\n    }\n    if ( !v116 && i[72] != 97 && i[72] != 65 )\n      v147 = 6LL;\n    v148 = 0LL;\n    if ( v147 )\n      v148 = v147;\n    v148 = sub_405171(v148, 12LL);\n    if ( v148 < v146 )\n      v148 = v146;\n    v32 = v148;\n    v148 = sub_405171(v148, 1LL);\n    if ( v148 > 0x2BC )\n    {\n      v173 = v148;\n      if ( v148 == -1LL )\n        goto LABEL_525;\n      v32 = v173;\n      v149 = malloc(v173);\n      if ( !v149 )\n        goto LABEL_525;\n    }\n    else\n    {\n      v149 = v202;\n    }\n    v150 = 0LL;\n    v151 = (char *)v149;\n    v36 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n    v37 = *((_DWORD *)v36 + 6);\n    *(_QWORD *)&v191 = *((_QWORD *)v36 + 2);\n    DWORD2(v191) = v37;\n    if ( (unsigned int)sub_408A3C(v32, 1, v37, v33, v34, v35, *(__int64 *)&v191, v37) )\n    {\n      if ( i[72] <= 64 || i[72] > 90 )\n      {\n        v41 = v151++;\n        *v41 = 110;\n        v42 = v151++;\n        *v42 = 97;\n        v43 = v151++;\n        *v43 = 110;\n      }\n      else\n      {\n        v38 = v151++;\n        *v38 = 78;\n        v39 = v151++;\n        *v39 = 65;\n        v40 = v151++;\n        *v40 = 78;\n      }\n    }\n    else\n    {\n      v117 = 0;\n      v112 = v134;\n      LOBYTE(v44) = v134;\n      HIBYTE(v44) = BYTE1(v134) | 3;\n      LOWORD(v134) = v44;\n      _FST7 = v191;\n      __asm { fxam }\n      if ( (v45 & 0x200) != 0 )\n      {\n        v117 = -1;\n        v191 = -v191;\n      }\n      if ( v117 >= 0 )\n      {\n        if ( (v114 & 4) != 0 )\n        {\n          v48 = v151++;\n          *v48 = 43;\n        }\n        else if ( (v114 & 8) != 0 )\n        {\n          v49 = v151++;\n          *v49 = 32;\n        }\n      }\n      else\n      {\n        v47 = v151++;\n        *v47 = 45;\n      }\n      if ( v191 > 0.0 && v191 == v191 + v191 )\n      {\n        if ( i[72] <= 64 || i[72] > 90 )\n        {\n          v53 = v151++;\n          *v53 = 105;\n          v54 = v151++;\n          *v54 = 110;\n          v55 = v151++;\n          *v55 = 102;\n        }\n        else\n        {\n          v50 = v151++;\n          *v50 = 73;\n          v51 = v151++;\n          *v51 = 78;\n          v52 = v151++;\n          *v52 = 70;\n        }\n      }\n      else\n      {\n        if ( 0.0 != v191 )\n          abort();\n        v150 = (unsigned __int64)v151;\n        switch ( i[72] )\n        {\n          case 'f':\n          case 'F':\n            v56 = v151++;\n            *v56 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v57 = v151++;\n              *v57 = sub_40520B();\n              while ( v147 )\n              {\n                v58 = v151++;\n                *v58 = 48;\n                --v147;\n              }\n            }\n            break;\n          case 'e':\n          case 'E':\n            v59 = v151++;\n            *v59 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v60 = v151++;\n              *v60 = sub_40520B();\n              while ( v147 )\n              {\n                v61 = v151++;\n                *v61 = 48;\n                --v147;\n              }\n            }\n            v62 = v151++;\n            *v62 = i[72];\n            v63 = v151++;\n            *v63 = 43;\n            v64 = v151++;\n            *v64 = 48;\n            v65 = v151++;\n            *v65 = 48;\n            break;\n          case 'g':\n          case 'G':\n            v66 = v151++;\n            *v66 = 48;\n            if ( (v114 & 0x10) != 0 )\n            {\n              if ( v147 )\n                v67 = v147 - 1;\n              else\n                v67 = 0LL;\n              v154 = v67;\n              v68 = v151++;\n              *v68 = sub_40520B();\n              while ( v154 )\n              {\n                v69 = v151++;\n                *v69 = 48;\n                --v154;\n              }\n            }\n            break;\n          case 'a':\n          case 'A':\n            v70 = v151++;\n            *v70 = 48;\n            v71 = v151++;\n            *v71 = i[72] + 23;\n            v150 = (unsigned __int64)v151;\n            v72 = v151++;\n            *v72 = 48;\n            if ( (v114 & 0x10) != 0 || v147 )\n            {\n              v73 = v151++;\n              *v73 = sub_40520B();\n              while ( v147 )\n              {\n                v74 = v151++;\n                *v74 = 48;\n                --v147;\n              }\n            }\n            v75 = v151++;\n            *v75 = i[72] + 15;\n            v76 = v151++;\n            *v76 = 43;\n            v77 = v151++;\n            *v77 = 48;\n            break;\n          default:\n            abort();\n        }\n      }\n      LOWORD(v134) = v112;\n    }\n    if ( v115 && v151 - (_BYTE *)v149 < v146 )\n    {\n      v155 = (_BYTE *)v149 - v151 + v146;\n      v174 = (char *)v149 + v146;\n      if ( (v114 & 2) != 0 )\n      {\n        while ( v155 )\n        {\n          v78 = v151++;\n          *v78 = 32;\n          --v155;\n        }\n      }\n      else if ( (v114 & 0x20) != 0 && v150 )\n      {\n        v156 = v174;\n        while ( (unsigned __int64)v151 > v150 )\n          *--v156 = *--v151;\n        while ( v155 )\n        {\n          v79 = v151++;\n          *v79 = 48;\n          --v155;\n        }\n      }\n      else\n      {\n        v157 = v174;\n        while ( v151 > v149 )\n          *--v157 = *--v151;\n        while ( v155 )\n        {\n          v80 = v151++;\n          *v80 = 32;\n          --v155;\n        }\n      }\n      v151 = v174;\n    }\n    v175 = v151 - (_BYTE *)v149;\n    if ( v151 - (_BYTE *)v149 >= v148 )\n      abort();\n    if ( v142 - n <= v175 )\n    {\n      v176 = sub_405171(n, v175);\n      if ( v176 > v142 )\n      {\n        if ( v142 )\n        {\n          if ( (v142 & 0x8000000000000000LL) != 0LL )\n            v81 = -1LL;\n          else\n            v81 = 2 * v142;\n        }\n        else\n        {\n          v81 = 12LL;\n        }\n        v142 = v81;\n        if ( v176 > v81 )\n          v142 = v176;\n        v177 = v142;\n        if ( v142 == -1LL )\n          goto LABEL_525;\n        v158 = src != v111 && src ? realloc(src, v177) : malloc(v177);\n        if ( !v158 )\n          goto LABEL_525;\n        if ( src == v111 && n )\n          memcpy(v158, src, n);\n        src = v158;\n      }\n    }\n    v13 = (int)v149;\n    v14 = (_DWORD)src + n;\n    memcpy((char *)src + n, v149, v175);\n    if ( v149 != v202 )\n    {\n      v14 = (int)v149;\n      free(v149);\n    }\n    n += v175;\nLABEL_487:\n    v138 = (void *)*((_QWORD *)i + 1);\n    ++v139;\n  }\n  v122 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10));\n  v123 = *((_DWORD *)i + 4);\n  v159 = format + 1;\n  *format = 37;\n  if ( (v123 & 1) != 0 )\n  {\n    v82 = v159;\n    v159 = (char *)v159 + 1;\n    *v82 = 39;\n  }\n  if ( (v123 & 2) != 0 )\n  {\n    v83 = v159;\n    v159 = (char *)v159 + 1;\n    *v83 = 45;\n  }\n  if ( (v123 & 4) != 0 )\n  {\n    v84 = v159;\n    v159 = (char *)v159 + 1;\n    *v84 = 43;\n  }\n  if ( (v123 & 8) != 0 )\n  {\n    v85 = v159;\n    v159 = (char *)v159 + 1;\n    *v85 = 32;\n  }\n  if ( (v123 & 0x10) != 0 )\n  {\n    v86 = v159;\n    v159 = (char *)v159 + 1;\n    *v86 = 35;\n  }\n  if ( (v123 & 0x40) != 0 )\n  {\n    v87 = v159;\n    v159 = (char *)v159 + 1;\n    *v87 = 73;\n  }\n  if ( (v123 & 0x20) != 0 )\n  {\n    v88 = v159;\n    v159 = (char *)v159 + 1;\n    *v88 = 48;\n  }\n  if ( *((_QWORD *)i + 3) != *((_QWORD *)i + 4) )\n  {\n    v178 = *((_QWORD *)i + 4) - *((_QWORD *)i + 3);\n    memcpy(v159, *((const void **)i + 3), v178);\n    v159 = (char *)v159 + v178;\n  }\n  if ( *((_QWORD *)i + 6) != *((_QWORD *)i + 7) )\n  {\n    v179 = *((_QWORD *)i + 7) - *((_QWORD *)i + 6);\n    memcpy(v159, *((const void **)i + 6), v179);\n    v159 = (char *)v159 + v179;\n  }\n  if ( v122 > 0xA )\n  {\n    if ( v122 == 14 || v122 == 16 )\n      goto LABEL_260;\n    if ( v122 == 12 )\n    {\n      v91 = v159;\n      v159 = (char *)v159 + 1;\n      *v91 = 76;\n    }\n  }\n  else\n  {\n    if ( v122 >= 9 )\n    {\n      v89 = v159;\n      v159 = (char *)v159 + 1;\n      *v89 = 108;\n      goto LABEL_260;\n    }\n    if ( v122 >= 7 )\n    {\nLABEL_260:\n      v90 = v159;\n      v159 = (char *)v159 + 1;\n      *v90 = 108;\n    }\n  }\n  *(_WORD *)v159 = (unsigned __int8)i[72];\n  v118 = 0;\n  if ( *((_QWORD *)i + 5) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5)) != 5 )\n      abort();\n    v92 = v118++;\n    *(&v134 + v92) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 5) + 4);\n  }\n  if ( *((_QWORD *)i + 8) != -1LL )\n  {\n    if ( *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8)) != 5 )\n      abort();\n    v93 = v118++;\n    *(&v134 + v93) = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 8) + 4);\n  }\n  v94 = sub_405171(n, 2LL);\n  if ( v94 > v142 )\n  {\n    if ( v142 )\n    {\n      if ( (v142 & 0x8000000000000000LL) != 0LL )\n        v95 = -1LL;\n      else\n        v95 = 2 * v142;\n    }\n    else\n    {\n      v95 = 12LL;\n    }\n    v142 = v95;\n    v96 = sub_405171(n, 2LL);\n    if ( v96 > v142 )\n      v142 = sub_405171(n, 2LL);\n    v180 = v142;\n    if ( v142 != -1LL )\n    {\n      v160 = src != v111 && src ? realloc(src, v180) : malloc(v180);\n      if ( v160 )\n      {\n        if ( src == v111 && n )\n          memcpy(v160, src, n);\n        src = v160;\n        goto LABEL_288;\n      }\n    }\nLABEL_525:\n    if ( src != v111 && src )\n      free(src);\n    if ( v137 )\n      free(v137);\nLABEL_530:\n    if ( ptr != v201 )\n      free(ptr);\n    if ( v195 != v196 )\n      free(v195);\n    *__errno_location() = 12;\n    return 0LL;\n  }\nLABEL_288:\n  *((_BYTE *)src + n) = 0;\n  v124 = *__errno_location();\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v113 = -1;\n      v119 = 0;\n      maxlen = v142 - n;\n      if ( v142 - n > 0x7FFFFFFF )\n        maxlen = 0x7FFFFFFFLL;\n      *__errno_location() = 0;\n      if ( v122 == 9 )\n      {\n        v183 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v183, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v183, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v183, &v113);\n        }\n      }\n      else if ( v122 > 9 )\n      {\n        if ( v122 == 13 )\n        {\n          v131 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v131, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v131, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v131, &v113);\n          }\n        }\n        else if ( v122 > 0xD )\n        {\n          if ( v122 == 15 )\n          {\n            v186 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v186, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v186, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v186, &v113);\n            }\n          }\n          else if ( v122 < 0xF )\n          {\n            v132 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v132, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v132, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v132, &v113);\n            }\n          }\n          else if ( v122 == 16 )\n          {\n            v187 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v187, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v187, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v187, &v113);\n            }\n          }\n          else\n          {\n            if ( v122 != 17 )\nLABEL_432:\n              abort();\n            v188 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n            if ( v118 == 1 )\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v188, &v113);\n            }\n            else if ( v118 )\n            {\n              if ( v118 != 2 )\n                abort();\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v188, &v113);\n            }\n            else\n            {\n              v14 = (_DWORD)src + n;\n              v13 = maxlen;\n              v119 = snprintf((char *)src + n, maxlen, format, v188, &v113);\n            }\n          }\n        }\n        else if ( v122 == 11 )\n        {\n          v185 = *((double *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113, v185);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v185);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            HIBYTE(v107) = HIBYTE(v185);\n            a5 = v185;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113, v185);\n          }\n        }\n        else if ( v122 > 0xB )\n        {\n          v97 = (char *)v195 + 32 * *((_QWORD *)i + 10);\n          v98 = *((_DWORD *)v97 + 6);\n          v192 = *((_QWORD *)v97 + 2);\n          v193 = v98;\n          if ( v118 == 1 )\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v13 = maxlen;\n            DWORD2(v106) = v193;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, &v113, v192, *((_QWORD *)&v106 + 1));\n          }\n          else\n          {\n            v13 = maxlen;\n            v14 = (_DWORD)src + n;\n            v119 = snprintf((char *)src + n, maxlen, format, &v113);\n          }\n        }\n        else\n        {\n          v184 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v184, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v184, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v184, &v113);\n          }\n        }\n      }\n      else if ( v122 == 4 )\n      {\n        v128 = *((unsigned __int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v128, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v128, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v128, &v113);\n        }\n      }\n      else if ( v122 > 4 )\n      {\n        if ( v122 == 6 )\n        {\n          v130 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v130, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v130, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v130, &v113);\n          }\n        }\n        else if ( v122 < 6 )\n        {\n          v129 = *((_DWORD *)v195 + 8 * *((_QWORD *)i + 10) + 4);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v129, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v129, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v129, &v113);\n          }\n        }\n        else if ( v122 == 7 )\n        {\n          v181 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v181, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v181, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v181, &v113);\n          }\n        }\n        else\n        {\n          v182 = *((_QWORD *)v195 + 4 * *((_QWORD *)i + 10) + 2);\n          if ( v118 == 1 )\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v182, &v113);\n          }\n          else if ( v118 )\n          {\n            if ( v118 != 2 )\n              abort();\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v182, &v113);\n          }\n          else\n          {\n            v14 = (_DWORD)src + n;\n            v13 = maxlen;\n            v119 = snprintf((char *)src + n, maxlen, format, v182, &v113);\n          }\n        }\n      }\n      else if ( v122 == 2 )\n      {\n        v126 = *((unsigned __int8 *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v126, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v126, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v126, &v113);\n        }\n      }\n      else if ( v122 > 2 )\n      {\n        v127 = *((__int16 *)v195 + 16 * *((_QWORD *)i + 10) + 8);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v127, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v127, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v127, &v113);\n        }\n      }\n      else\n      {\n        if ( v122 != 1 )\n          goto LABEL_432;\n        v125 = *((char *)v195 + 32 * *((_QWORD *)i + 10) + 16);\n        if ( v118 == 1 )\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v125, &v113);\n        }\n        else if ( v118 )\n        {\n          if ( v118 != 2 )\n            abort();\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v134, v135, v125, &v113);\n        }\n        else\n        {\n          v14 = (_DWORD)src + n;\n          v13 = maxlen;\n          v119 = snprintf((char *)src + n, maxlen, format, v125, &v113);\n        }\n      }\n      if ( v113 >= 0 )\n      {\n        if ( v113 < maxlen && *((_BYTE *)src + n + v113) )\n          abort();\n        if ( v119 > v113 )\n          v113 = v119;\n        goto LABEL_443;\n      }\n      if ( !*((_BYTE *)v159 + 1) )\n        break;\n      *((_BYTE *)v159 + 1) = 0;\n    }\n    if ( v119 >= 0 )\n      v113 = v119;\nLABEL_443:\n    if ( v113 < 0 )\n    {\n      v133 = *__errno_location();\n      if ( src != v111 && src )\n        free(src);\n      if ( v137 )\n        free(v137);\n      if ( ptr != v201 )\n        free(ptr);\n      if ( v195 != v196 )\n        free(v195);\n      v99 = __errno_location();\n      if ( v133 )\n      {\n        v100 = v133;\n      }\n      else if ( i[72] == 99 || i[72] == 115 )\n      {\n        v100 = 84;\n      }\n      else\n      {\n        v100 = 22;\n      }\n      *v99 = v100;\n      return 0LL;\n    }\n    if ( (unsigned int)(v113 + 1) < maxlen )\n    {\n      n += v113;\n      *__errno_location() = v124;\n      goto LABEL_487;\n    }\n    if ( maxlen == 0x7FFFFFFF )\n      break;\n    if ( (v142 & 0x8000000000000000LL) != 0LL )\n      v101 = -1LL;\n    else\n      v101 = 2 * v142;\n    v102 = sub_405171(n, (unsigned int)(v113 + 2));\n    v189 = sub_4051F0(v102, v101);\n    if ( v189 > v142 )\n    {\n      if ( v142 )\n      {\n        if ( (v142 & 0x8000000000000000LL) != 0LL )\n          v103 = -1LL;\n        else\n          v103 = 2 * v142;\n      }\n      else\n      {\n        v103 = 12LL;\n      }\n      v142 = v103;\n      if ( v189 > v103 )\n        v142 = v189;\n      v190 = v142;\n      if ( v142 == -1LL )\n        goto LABEL_525;\n      v162 = src != v111 && src ? realloc(src, v190) : malloc(v190);\n      if ( !v162 )\n        goto LABEL_525;\n      if ( src == v111 && n )\n        memcpy(v162, src, n);\n      src = v162;\n    }\n  }\n  if ( src != v111 && src )\n    free(src);\n  if ( v137 )\n    free(v137);\n  if ( ptr != v201 )\n    free(ptr);\n  if ( v195 != v196 )\n    free(v195);\n  *__errno_location() = 75;\n  return 0LL;\n}\n"], [4229692, "sub_408A3C", "_BOOL8 __fastcall sub_408A3C(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int16 a8)\n{\n  if ( (a8 & 0x7FFF) == 0 )\n    return HIDWORD(a7) >> 31;\n  if ( (a8 & 0x7FFF) == 0x7FFF )\n    return (HIDWORD(a7) ^ 0x80000000 | (unsigned int)a7) != 0;\n  return a7 >= 0;\n}\n"], [4229780, "sub_408A94", "__int64 __fastcall sub_408A94(unsigned int *a1, unsigned __int64 *a2)\n{\n  unsigned int v2; // eax\n  _DWORD *v3; // rax\n  _DWORD *v4; // rax\n  _DWORD *v5; // rax\n  _DWORD *v6; // rax\n  _DWORD *v7; // rax\n  _DWORD *v8; // rax\n  _QWORD *v9; // rax\n  _QWORD *v10; // rax\n  _QWORD *v11; // rax\n  _QWORD *v12; // rax\n  _QWORD *v13; // rax\n  unsigned __int64 v14; // rdx\n  __int64 v15; // rax\n  _DWORD *v16; // rax\n  _DWORD *v17; // rax\n  _QWORD *v18; // rax\n  _QWORD *v19; // rax\n  _QWORD *v20; // rax\n  _QWORD *v21; // rax\n  _QWORD *v22; // rax\n  _QWORD *v23; // rax\n  _QWORD *v24; // rax\n  _QWORD *v25; // rax\n  unsigned __int64 v27; // [rsp+10h] [rbp-10h]\n  unsigned __int64 v28; // [rsp+18h] [rbp-8h]\n\n  v27 = 0LL;\n  v28 = a2[1];\n  while ( *a2 > v27 )\n  {\n    v2 = *(_DWORD *)v28;\n    if ( *(_DWORD *)v28 == 11 )\n    {\n      if ( a1[1] >= 0xB0 )\n      {\n        v13 = (_QWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v13 + 1;\n      }\n      else\n      {\n        v13 = (_QWORD *)(*((_QWORD *)a1 + 2) + a1[1]);\n        a1[1] += 16;\n      }\n      *(_QWORD *)(v28 + 16) = *v13;\n    }\n    else if ( v2 > 0xB )\n    {\n      if ( v2 == 17 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v20 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v20 + 1;\n        }\n        else\n        {\n          v20 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v20;\n      }\n      else if ( v2 > 0x11 )\n      {\n        if ( v2 == 20 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v23 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v23 + 1;\n          }\n          else\n          {\n            v23 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v23;\n        }\n        else if ( v2 > 0x14 )\n        {\n          if ( v2 == 21 )\n          {\n            if ( *a1 >= 0x30 )\n            {\n              v24 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v24 + 1;\n            }\n            else\n            {\n              v24 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v24;\n          }\n          else\n          {\n            if ( v2 != 22 )\n              return 0xFFFFFFFFLL;\n            if ( *a1 >= 0x30 )\n            {\n              v25 = (_QWORD *)*((_QWORD *)a1 + 1);\n              *((_QWORD *)a1 + 1) = v25 + 1;\n            }\n            else\n            {\n              v25 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n              *a1 += 8;\n            }\n            *(_QWORD *)(v28 + 16) = *v25;\n          }\n        }\n        else if ( v2 == 18 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v21 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v21 + 1;\n          }\n          else\n          {\n            v21 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v21;\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v22 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v22 + 1;\n          }\n          else\n          {\n            v22 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v22;\n        }\n      }\n      else if ( v2 == 14 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v17 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v17 + 2;\n        }\n        else\n        {\n          v17 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v17;\n      }\n      else if ( v2 > 0xE )\n      {\n        if ( v2 == 15 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v18 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v18 + 1;\n          }\n          else\n          {\n            v18 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v18;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(NULL)\";\n        }\n        else\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v19 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v19 + 1;\n          }\n          else\n          {\n            v19 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v19;\n          if ( !*(_QWORD *)(v28 + 16) )\n            *(_QWORD *)(v28 + 16) = \"(\";\n        }\n      }\n      else if ( v2 == 12 )\n      {\n        v14 = (*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;\n        *((_QWORD *)a1 + 1) = v14 + 16;\n        v15 = *(_QWORD *)v14;\n        LODWORD(v14) = *(_DWORD *)(v14 + 8);\n        *(_QWORD *)(v28 + 16) = v15;\n        *(_DWORD *)(v28 + 24) = v14;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v16 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v16 + 2;\n        }\n        else\n        {\n          v16 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v16;\n      }\n    }\n    else if ( v2 == 5 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v7 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v7 + 2;\n      }\n      else\n      {\n        v7 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_DWORD *)(v28 + 16) = *v7;\n    }\n    else if ( v2 > 5 )\n    {\n      if ( v2 == 8 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v10 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v10 + 1;\n        }\n        else\n        {\n          v10 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v10;\n      }\n      else if ( v2 > 8 )\n      {\n        if ( v2 == 9 )\n        {\n          if ( *a1 >= 0x30 )\n          {\n            v11 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v11 + 1;\n          }\n          else\n          {\n            v11 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v11;\n        }\n        else\n        {\n          if ( v2 != 10 )\n            return 0xFFFFFFFFLL;\n          if ( *a1 >= 0x30 )\n          {\n            v12 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 1;\n          }\n          else\n          {\n            v12 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n            *a1 += 8;\n          }\n          *(_QWORD *)(v28 + 16) = *v12;\n        }\n      }\n      else if ( v2 == 6 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v8 + 2;\n        }\n        else\n        {\n          v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_DWORD *)(v28 + 16) = *v8;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v9 = (_QWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v9 + 1;\n        }\n        else\n        {\n          v9 = (_QWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_QWORD *)(v28 + 16) = *v9;\n      }\n    }\n    else if ( v2 == 2 )\n    {\n      if ( *a1 >= 0x30 )\n      {\n        v4 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v4 + 2;\n      }\n      else\n      {\n        v4 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v4;\n    }\n    else if ( v2 > 2 )\n    {\n      if ( v2 == 3 )\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v5 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v5 + 2;\n        }\n        else\n        {\n          v5 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v5;\n      }\n      else\n      {\n        if ( *a1 >= 0x30 )\n        {\n          v6 = (_DWORD *)*((_QWORD *)a1 + 1);\n          *((_QWORD *)a1 + 1) = v6 + 2;\n        }\n        else\n        {\n          v6 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n          *a1 += 8;\n        }\n        *(_WORD *)(v28 + 16) = *v6;\n      }\n    }\n    else\n    {\n      if ( v2 != 1 )\n        return 0xFFFFFFFFLL;\n      if ( *a1 >= 0x30 )\n      {\n        v3 = (_DWORD *)*((_QWORD *)a1 + 1);\n        *((_QWORD *)a1 + 1) = v3 + 2;\n      }\n      else\n      {\n        v3 = (_DWORD *)(*((_QWORD *)a1 + 2) + *a1);\n        *a1 += 8;\n      }\n      *(_BYTE *)(v28 + 16) = *v3;\n    }\n    ++v27;\n    v28 += 32LL;\n  }\n  return 0LL;\n}\n"], [4232050, "sub_409372", "__int64 __fastcall sub_409372(unsigned __int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( a1 + a2 < a1 )\n    result = -1LL;\n  else\n    result = a1 + a2;\n  return result;\n}\n"], [4232102, "sub_4093A6", "__int64 __fastcall sub_4093A6(char *a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // rax\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rax\n  void *v9; // rax\n  __int64 v10; // rsi\n  __int64 v11; // rax\n  unsigned __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned __int64 v14; // rax\n  size_t v15; // rax\n  void *v16; // rax\n  __int64 v17; // rsi\n  __int64 v18; // rax\n  char *v19; // rax\n  int v20; // eax\n  __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  size_t v23; // rax\n  void *v24; // rax\n  __int64 v25; // rsi\n  __int64 v26; // rax\n  unsigned __int64 v27; // rax\n  size_t v28; // rax\n  void *v29; // rax\n  char v33; // [rsp+2Fh] [rbp-E1h]\n  int v34; // [rsp+30h] [rbp-E0h]\n  int ii; // [rsp+34h] [rbp-DCh]\n  __int64 v37; // [rsp+40h] [rbp-D0h]\n  __int64 v38; // [rsp+48h] [rbp-C8h]\n  __int64 v39; // [rsp+50h] [rbp-C0h]\n  unsigned __int64 v40; // [rsp+58h] [rbp-B8h]\n  unsigned __int64 v41; // [rsp+60h] [rbp-B0h]\n  __int64 v42; // [rsp+68h] [rbp-A8h]\n  char *i; // [rsp+70h] [rbp-A0h]\n  char *j; // [rsp+70h] [rbp-A0h]\n  unsigned __int64 v45; // [rsp+78h] [rbp-98h]\n  char *k; // [rsp+80h] [rbp-90h]\n  char *l; // [rsp+80h] [rbp-90h]\n  unsigned __int64 v48; // [rsp+88h] [rbp-88h]\n  char *m; // [rsp+90h] [rbp-80h]\n  char *n; // [rsp+90h] [rbp-80h]\n  unsigned __int64 v51; // [rsp+98h] [rbp-78h]\n  __int64 v52; // [rsp+A0h] [rbp-70h]\n  unsigned __int64 v53; // [rsp+A8h] [rbp-68h]\n  void *dest; // [rsp+B8h] [rbp-58h]\n  unsigned __int64 v55; // [rsp+C8h] [rbp-48h]\n  void *v56; // [rsp+D8h] [rbp-38h]\n  unsigned __int64 v57; // [rsp+E8h] [rbp-28h]\n  void *v58; // [rsp+F8h] [rbp-18h]\n  void *v59; // [rsp+108h] [rbp-8h]\n\n  v37 = 0LL;\n  v40 = 0LL;\n  v41 = 0LL;\n  *(_QWORD *)a2 = 0LL;\n  v38 = 7LL;\n  *(_QWORD *)(a2 + 8) = a2 + 32;\n  *(_QWORD *)a3 = 0LL;\n  v39 = 7LL;\n  *(_QWORD *)(a3 + 8) = a3 + 16;\n  while ( 1 )\n  {\n    do\n    {\n      if ( !*a1 )\n      {\n        *(_QWORD *)(*(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2) = a1;\n        *(_QWORD *)(a2 + 16) = v40;\n        *(_QWORD *)(a2 + 24) = v41;\n        return 0LL;\n      }\n      v3 = a1++;\n    }\n    while ( *v3 != 37 );\n    v42 = -1LL;\n    v52 = *(_QWORD *)(a2 + 8) + 88LL * *(_QWORD *)a2;\n    *(_QWORD *)v52 = a1 - 1;\n    *(_DWORD *)(v52 + 16) = 0;\n    *(_QWORD *)(v52 + 24) = 0LL;\n    *(_QWORD *)(v52 + 32) = 0LL;\n    *(_QWORD *)(v52 + 40) = -1LL;\n    *(_QWORD *)(v52 + 48) = 0LL;\n    *(_QWORD *)(v52 + 56) = 0LL;\n    *(_QWORD *)(v52 + 64) = -1LL;\n    *(_QWORD *)(v52 + 80) = -1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( i = a1; *i > 47 && *i <= 57; ++i )\n        ;\n      if ( *i == 36 )\n      {\n        v45 = 0LL;\n        for ( j = a1; *j > 47 && *j <= 57; ++j )\n        {\n          if ( v45 > 0x1999999999999999LL )\n            v4 = -1LL;\n          else\n            v4 = 10 * v45;\n          v45 = sub_409372(v4, *j - 48);\n        }\n        if ( !v45 || v45 == -1LL )\n        {\nLABEL_272:\n          if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n            free(*(void **)(a3 + 8));\n          if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n            free(*(void **)(a2 + 8));\n          *__errno_location() = 22;\n          return 0xFFFFFFFFLL;\n        }\n        v42 = v45 - 1;\n        a1 = j + 1;\n      }\n    }\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( 1 )\n              {\n                while ( *a1 == 39 )\n                {\n                  *(_DWORD *)(v52 + 16) |= 1u;\n                  ++a1;\n                }\n                if ( *a1 != 45 )\n                  break;\n                *(_DWORD *)(v52 + 16) |= 2u;\n                ++a1;\n              }\n              if ( *a1 != 43 )\n                break;\n              *(_DWORD *)(v52 + 16) |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 32 )\n              break;\n            *(_DWORD *)(v52 + 16) |= 8u;\n            ++a1;\n          }\n          if ( *a1 != 35 )\n            break;\n          *(_DWORD *)(v52 + 16) |= 0x10u;\n          ++a1;\n        }\n        if ( *a1 != 48 )\n          break;\n        *(_DWORD *)(v52 + 16) |= 0x20u;\n        ++a1;\n      }\n      if ( *a1 != 73 )\n        break;\n      *(_DWORD *)(v52 + 16) |= 0x40u;\n      ++a1;\n    }\n    if ( *a1 != 42 )\n    {\n      if ( *a1 > 47 && *a1 <= 57 )\n      {\n        *(_QWORD *)(v52 + 24) = a1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 32) = a1;\n        if ( v40 < *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24) )\n          v40 = *(_QWORD *)(v52 + 32) - *(_QWORD *)(v52 + 24);\n      }\n      goto LABEL_88;\n    }\n    *(_QWORD *)(v52 + 24) = a1++;\n    *(_QWORD *)(v52 + 32) = a1;\n    if ( !v40 )\n      v40 = 1LL;\n    if ( *a1 > 47 && *a1 <= 57 )\n    {\n      for ( k = a1; *k > 47 && *k <= 57; ++k )\n        ;\n      if ( *k == 36 )\n      {\n        v48 = 0LL;\n        for ( l = a1; *l > 47 && *l <= 57; ++l )\n        {\n          if ( v48 > 0x1999999999999999LL )\n            v5 = -1LL;\n          else\n            v5 = 10 * v48;\n          v48 = sub_409372(v5, *l - 48);\n        }\n        if ( !v48 || v48 == -1LL )\n          goto LABEL_272;\n        *(_QWORD *)(v52 + 40) = v48 - 1;\n        a1 = l + 1;\n      }\n    }\n    if ( *(_QWORD *)(v52 + 40) == -1LL )\n    {\n      v6 = v37++;\n      *(_QWORD *)(v52 + 40) = v6;\n      if ( *(_QWORD *)(v52 + 40) == -1LL )\n        goto LABEL_272;\n    }\n    v53 = *(_QWORD *)(v52 + 40);\n    if ( v53 >= v39 )\n      break;\nLABEL_75:\n    while ( *(_QWORD *)a3 <= v53 )\n    {\n      v10 = *(_QWORD *)(a3 + 8);\n      v11 = (*(_QWORD *)a3)++;\n      *(_DWORD *)(v10 + 32 * v11) = 0;\n    }\n    if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) )\n    {\n      if ( *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) != 5 )\n        goto LABEL_272;\n    }\n    else\n    {\n      *(_DWORD *)(32 * v53 + *(_QWORD *)(a3 + 8)) = 5;\n    }\nLABEL_88:\n    if ( *a1 == 46 )\n    {\n      if ( *++a1 == 42 )\n      {\n        *(_QWORD *)(v52 + 48) = a1++ - 1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 <= 1 )\n          v41 = 2LL;\n        if ( *a1 > 47 && *a1 <= 57 )\n        {\n          for ( m = a1; *m > 47 && *m <= 57; ++m )\n            ;\n          if ( *m == 36 )\n          {\n            v51 = 0LL;\n            for ( n = a1; *n > 47 && *n <= 57; ++n )\n            {\n              if ( v51 > 0x1999999999999999LL )\n                v12 = -1LL;\n              else\n                v12 = 10 * v51;\n              v51 = sub_409372(v12, *n - 48);\n            }\n            if ( !v51 || v51 == -1LL )\n              goto LABEL_272;\n            *(_QWORD *)(v52 + 64) = v51 - 1;\n            a1 = n + 1;\n          }\n        }\n        if ( *(_QWORD *)(v52 + 64) == -1LL )\n        {\n          v13 = v37++;\n          *(_QWORD *)(v52 + 64) = v13;\n          if ( *(_QWORD *)(v52 + 64) == -1LL )\n            goto LABEL_272;\n        }\n        v55 = *(_QWORD *)(v52 + 64);\n        if ( v55 >= v39 )\n        {\n          if ( v39 < 0 )\n            v14 = -1LL;\n          else\n            v14 = 2 * v39;\n          v39 = v14;\n          if ( v14 <= v55 )\n            v39 = sub_409372(v55, 1LL);\n          if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n            v15 = -1LL;\n          else\n            v15 = 32 * v39;\n          if ( v15 == -1LL )\n            goto LABEL_277;\n          v16 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v15) : realloc(*(void **)(a3 + 8), v15);\n          v56 = v16;\n          if ( !v16 )\n            goto LABEL_277;\n          if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n            memcpy(v16, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n          *(_QWORD *)(a3 + 8) = v56;\n        }\n        while ( *(_QWORD *)a3 <= v55 )\n        {\n          v17 = *(_QWORD *)(a3 + 8);\n          v18 = (*(_QWORD *)a3)++;\n          *(_DWORD *)(v17 + 32 * v18) = 0;\n        }\n        if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) )\n        {\n          if ( *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) != 5 )\n            goto LABEL_272;\n        }\n        else\n        {\n          *(_DWORD *)(32 * v55 + *(_QWORD *)(a3 + 8)) = 5;\n        }\n      }\n      else\n      {\n        *(_QWORD *)(v52 + 48) = a1 - 1;\n        while ( *a1 > 47 && *a1 <= 57 )\n          ++a1;\n        *(_QWORD *)(v52 + 56) = a1;\n        if ( v41 < *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48) )\n          v41 = *(_QWORD *)(v52 + 56) - *(_QWORD *)(v52 + 48);\n      }\n    }\n    for ( ii = 0; ; ii += 8 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              while ( *a1 == 104 )\n              {\n                ii |= 1 << (ii & 1);\n                ++a1;\n              }\n              if ( *a1 != 76 )\n                break;\n              ii |= 4u;\n              ++a1;\n            }\n            if ( *a1 != 108 )\n              break;\n            ii += 8;\n            ++a1;\n          }\n          if ( *a1 != 106 )\n            break;\n          ii += 8;\n          ++a1;\n        }\n        if ( *a1 != 122 && *a1 != 90 )\n          break;\n        ii += 8;\n        ++a1;\n      }\n      if ( *a1 != 116 )\n        break;\n      ++a1;\n    }\n    v19 = a1++;\n    v33 = *v19;\n    v20 = *v19;\n    if ( v20 == 100 )\n    {\nLABEL_185:\n      if ( ii > 15 || (ii & 4) != 0 )\n      {\n        v34 = 9;\n      }\n      else if ( ii <= 7 )\n      {\n        if ( (ii & 2) != 0 )\n        {\n          v34 = 1;\n        }\n        else if ( (ii & 1) != 0 )\n        {\n          v34 = 3;\n        }\n        else\n        {\n          v34 = 5;\n        }\n      }\n      else\n      {\n        v34 = 7;\n      }\n      goto LABEL_229;\n    }\n    if ( v20 > 100 )\n    {\n      if ( v20 == 111 )\n        goto LABEL_195;\n      if ( v20 > 111 )\n      {\n        if ( v20 == 115 )\n        {\n          if ( ii <= 7 )\n            v34 = 15;\n          else\n            v34 = 16;\n          goto LABEL_229;\n        }\n        if ( v20 > 115 )\n        {\n          if ( v20 != 117 && v20 != 120 )\n            goto LABEL_272;\nLABEL_195:\n          if ( ii > 15 || (ii & 4) != 0 )\n          {\n            v34 = 10;\n          }\n          else if ( ii <= 7 )\n          {\n            if ( (ii & 2) != 0 )\n            {\n              v34 = 2;\n            }\n            else if ( (ii & 1) != 0 )\n            {\n              v34 = 4;\n            }\n            else\n            {\n              v34 = 6;\n            }\n          }\n          else\n          {\n            v34 = 8;\n          }\n          goto LABEL_229;\n        }\n        if ( v20 != 112 )\n          goto LABEL_272;\n        v34 = 17;\n      }\n      else\n      {\n        if ( v20 == 105 )\n          goto LABEL_185;\n        if ( v20 <= 105 )\n        {\n          if ( v20 > 103 )\n            goto LABEL_272;\nLABEL_205:\n          if ( ii > 15 || (ii & 4) != 0 )\n            v34 = 12;\n          else\n            v34 = 11;\n          goto LABEL_229;\n        }\n        if ( v20 != 110 )\n          goto LABEL_272;\n        if ( ii > 15 || (ii & 4) != 0 )\n        {\n          v34 = 22;\n        }\n        else if ( ii <= 7 )\n        {\n          if ( (ii & 2) != 0 )\n          {\n            v34 = 18;\n          }\n          else if ( (ii & 1) != 0 )\n          {\n            v34 = 19;\n          }\n          else\n          {\n            v34 = 20;\n          }\n        }\n        else\n        {\n          v34 = 21;\n        }\n      }\n    }\n    else if ( v20 > 71 )\n    {\n      if ( v20 == 88 )\n        goto LABEL_195;\n      if ( v20 > 88 )\n      {\n        if ( v20 == 97 )\n          goto LABEL_205;\n        if ( v20 != 99 )\n          goto LABEL_272;\n        if ( ii <= 7 )\n          v34 = 13;\n        else\n          v34 = 14;\n      }\n      else\n      {\n        if ( v20 != 83 )\n          goto LABEL_272;\n        v34 = 16;\n        v33 = 115;\n      }\n    }\n    else\n    {\n      if ( v20 >= 69 || v20 == 65 )\n        goto LABEL_205;\n      if ( v20 == 67 )\n      {\n        v34 = 14;\n        v33 = 99;\n      }\n      else\n      {\n        if ( v20 != 37 )\n          goto LABEL_272;\n        v34 = 0;\n      }\n    }\nLABEL_229:\n    if ( v34 )\n    {\n      *(_QWORD *)(v52 + 80) = v42;\n      if ( *(_QWORD *)(v52 + 80) == -1LL )\n      {\n        v21 = v37++;\n        *(_QWORD *)(v52 + 80) = v21;\n        if ( *(_QWORD *)(v52 + 80) == -1LL )\n          goto LABEL_272;\n      }\n      v57 = *(_QWORD *)(v52 + 80);\n      if ( v57 >= v39 )\n      {\n        if ( v39 < 0 )\n          v22 = -1LL;\n        else\n          v22 = 2 * v39;\n        v39 = v22;\n        if ( v22 <= v57 )\n          v39 = sub_409372(v57, 1LL);\n        if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n          v23 = -1LL;\n        else\n          v23 = 32 * v39;\n        if ( v23 == -1LL )\n          goto LABEL_277;\n        v24 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v23) : realloc(*(void **)(a3 + 8), v23);\n        v58 = v24;\n        if ( !v24 )\n          goto LABEL_277;\n        if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n          memcpy(v24, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n        *(_QWORD *)(a3 + 8) = v58;\n      }\n      while ( *(_QWORD *)a3 <= v57 )\n      {\n        v25 = *(_QWORD *)(a3 + 8);\n        v26 = (*(_QWORD *)a3)++;\n        *(_DWORD *)(v25 + 32 * v26) = 0;\n      }\n      if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) )\n      {\n        if ( *(_DWORD *)(32 * v57 + *(_QWORD *)(a3 + 8)) != v34 )\n          goto LABEL_272;\n      }\n      else\n      {\n        *(_DWORD *)(*(_QWORD *)(a3 + 8) + 32 * v57) = v34;\n      }\n    }\n    *(_BYTE *)(v52 + 72) = v33;\n    *(_QWORD *)(v52 + 8) = a1;\n    if ( ++*(_QWORD *)a2 >= (unsigned __int64)v38 )\n    {\n      if ( v38 < 0 )\n        v27 = -1LL;\n      else\n        v27 = 2 * v38;\n      v38 = v27;\n      if ( v27 > 0x2E8BA2E8BA2E8BALL )\n        v28 = -1LL;\n      else\n        v28 = 88 * v27;\n      if ( v28 == -1LL )\n        goto LABEL_277;\n      v29 = *(_QWORD *)(a2 + 8) == a2 + 32 ? malloc(v28) : realloc(*(void **)(a2 + 8), v28);\n      v59 = v29;\n      if ( !v29 )\n        goto LABEL_277;\n      if ( *(_QWORD *)(a2 + 8) == a2 + 32 )\n        memcpy(v29, *(const void **)(a2 + 8), 88LL * *(_QWORD *)a2);\n      *(_QWORD *)(a2 + 8) = v59;\n    }\n  }\n  if ( v39 < 0 )\n    v7 = -1LL;\n  else\n    v7 = 2 * v39;\n  v39 = v7;\n  if ( v7 <= v53 )\n    v39 = sub_409372(v53, 1LL);\n  if ( (unsigned __int64)v39 > 0x7FFFFFFFFFFFFFFLL )\n    v8 = -1LL;\n  else\n    v8 = 32 * v39;\n  if ( v8 != -1LL )\n  {\n    v9 = *(_QWORD *)(a3 + 8) == a3 + 16 ? malloc(v8) : realloc(*(void **)(a3 + 8), v8);\n    dest = v9;\n    if ( v9 )\n    {\n      if ( *(_QWORD *)(a3 + 8) == a3 + 16 )\n        memcpy(v9, *(const void **)(a3 + 8), 32LL * *(_QWORD *)a3);\n      *(_QWORD *)(a3 + 8) = dest;\n      goto LABEL_75;\n    }\n  }\nLABEL_277:\n  if ( *(_QWORD *)(a3 + 8) != a3 + 16 )\n    free(*(void **)(a3 + 8));\n  if ( *(_QWORD *)(a2 + 8) != a2 + 32 )\n    free(*(void **)(a2 + 8));\n  *__errno_location() = 12;\n  return 0xFFFFFFFFLL;\n}\n"], [4237648, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_60CE18 - off_60CE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_60CE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4237760, "fini", "void fini(void)\n{\n  ;\n}\n"], [4237776, "sub_40A9D0", "int __fastcall sub_40A9D0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_60D1C8 )\n    v1 = (void *)qword_60D1C8;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4237804, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]