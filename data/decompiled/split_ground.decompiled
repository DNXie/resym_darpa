[[4200712, ".init_proc", "void *init_proc()\n{\n  void *result; // rax\n\n  result = &_gmon_start__;\n  if ( &_gmon_start__ )\n    result = (void *)__gmon_start__();\n  return result;\n}\n"], [4200752, "sub_401930", "__int64 sub_401930()\n{\n  return qword_610010();\n}\n"], [4200768, ".getenv", "// attributes: thunk\nchar *getenv(const char *name)\n{\n  return getenv(name);\n}\n"], [4200784, ".sigprocmask", "// attributes: thunk\nint sigprocmask(int how, const sigset_t *set, sigset_t *oset)\n{\n  return sigprocmask(how, set, oset);\n}\n"], [4200800, ".free", "// attributes: thunk\nvoid free(void *ptr)\n{\n  free(ptr);\n}\n"], [4200816, ".abort", "// attributes: thunk\nvoid __noreturn abort(void)\n{\n  abort();\n}\n"], [4200832, ".__errno_location", "// attributes: thunk\nint *__errno_location(void)\n{\n  return _errno_location();\n}\n"], [4200848, ".strncmp", "// attributes: thunk\nint strncmp(const char *s1, const char *s2, size_t n)\n{\n  return strncmp(s1, s2, n);\n}\n"], [4200864, "._exit", "// attributes: thunk\nvoid __noreturn _exit(int status)\n{\n  exit(status);\n}\n"], [4200880, ".strcpy", "// attributes: thunk\nchar *strcpy(char *dest, const char *src)\n{\n  return strcpy(dest, src);\n}\n"], [4200896, ".__fpending", "// attributes: thunk\nsize_t __fpending(FILE *fp)\n{\n  return _fpending(fp);\n}\n"], [4200912, ".iconv", "// attributes: thunk\nsize_t iconv(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)\n{\n  return iconv(cd, inbuf, inbytesleft, outbuf, outbytesleft);\n}\n"], [4200928, ".getc_unlocked", "// attributes: thunk\nint getc_unlocked(FILE *stream)\n{\n  return getc_unlocked(stream);\n}\n"], [4200944, ".sigaction", "// attributes: thunk\nint sigaction(int sig, const struct sigaction *act, struct sigaction *oact)\n{\n  return sigaction(sig, act, oact);\n}\n"], [4200960, ".fcntl", "// attributes: thunk\nint fcntl(int fd, int cmd, ...)\n{\n  return fcntl(fd, cmd);\n}\n"], [4200976, ".setenv", "// attributes: thunk\nint setenv(const char *name, const char *value, int replace)\n{\n  return setenv(name, value, replace);\n}\n"], [4200992, ".clearerr_unlocked", "// attributes: thunk\nvoid clearerr_unlocked(FILE *stream)\n{\n  clearerr_unlocked(stream);\n}\n"], [4201008, ".write", "// attributes: thunk\nssize_t write(int fd, const void *buf, size_t n)\n{\n  return write(fd, buf, n);\n}\n"], [4201024, ".textdomain", "// attributes: thunk\nchar *textdomain(const char *domainname)\n{\n  return textdomain(domainname);\n}\n"], [4201040, ".fclose", "// attributes: thunk\nint fclose(FILE *stream)\n{\n  return fclose(stream);\n}\n"], [4201056, ".bindtextdomain", "// attributes: thunk\nchar *bindtextdomain(const char *domainname, const char *dirname)\n{\n  return bindtextdomain(domainname, dirname);\n}\n"], [4201072, ".__ctype_get_mb_cur_max", "// attributes: thunk\nsize_t __ctype_get_mb_cur_max(void)\n{\n  return _ctype_get_mb_cur_max();\n}\n"], [4201088, ".strlen", "// attributes: thunk\nsize_t strlen(const char *s)\n{\n  return strlen(s);\n}\n"], [4201104, ".__stack_chk_fail", "// attributes: thunk\nvoid __noreturn __stack_chk_fail()\n{\n  _stack_chk_fail();\n}\n"], [4201120, ".getopt_long", "// attributes: thunk\nint getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)\n{\n  return getopt_long(argc, argv, shortopts, longopts, longind);\n}\n"], [4201136, ".mbrtowc", "// attributes: thunk\nsize_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)\n{\n  return mbrtowc(pwc, s, n, p);\n}\n"], [4201152, ".gettext", "// attributes: thunk\nchar *gettext(const char *msgid)\n{\n  return gettext(msgid);\n}\n"], [4201168, ".dup2", "// attributes: thunk\nint dup2(int fd, int fd2)\n{\n  return dup2(fd, fd2);\n}\n"], [4201184, ".strchr", "// attributes: thunk\nchar *strchr(const char *s, int c)\n{\n  return strchr(s, c);\n}\n"], [4201200, ".printf", "// attributes: thunk\nint printf(const char *format, ...)\n{\n  return printf(format);\n}\n"], [4201216, ".strrchr", "// attributes: thunk\nchar *strrchr(const char *s, int c)\n{\n  return strrchr(s, c);\n}\n"], [4201232, ".lseek", "// attributes: thunk\n__off_t lseek(int fd, __off_t offset, int whence)\n{\n  return lseek(fd, offset, whence);\n}\n"], [4201248, ".__assert_fail", "// attributes: thunk\nvoid __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)\n{\n  _assert_fail(assertion, file, line, function);\n}\n"], [4201264, ".memset", "// attributes: thunk\nvoid *memset(void *s, int c, size_t n)\n{\n  return memset(s, c, n);\n}\n"], [4201280, ".fscanf", "// attributes: thunk\nint fscanf(FILE *stream, const char *format, ...)\n{\n  return fscanf(stream, format);\n}\n"], [4201296, ".strnlen", "// attributes: thunk\nsize_t strnlen(const char *string, size_t maxlen)\n{\n  return strnlen(string, maxlen);\n}\n"], [4201312, ".close", "// attributes: thunk\nint close(int fd)\n{\n  return close(fd);\n}\n"], [4201328, ".pipe", "// attributes: thunk\nint pipe(int pipedes[2])\n{\n  return pipe(pipedes);\n}\n"], [4201344, ".memchr", "// attributes: thunk\nvoid *memchr(const void *s, int c, size_t n)\n{\n  return memchr(s, c, n);\n}\n"], [4201360, ".read", "// attributes: thunk\nssize_t read(int fd, void *buf, size_t nbytes)\n{\n  return read(fd, buf, nbytes);\n}\n"], [4201376, ".__libc_start_main", "// attributes: thunk\nint __fastcall __libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)\n{\n  return _libc_start_main(main, argc, ubp_av, init, fini, rtld_fini, stack_end);\n}\n"], [4201392, ".memcmp", "// attributes: thunk\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n  return memcmp(s1, s2, n);\n}\n"], [4201408, ".fputs_unlocked", "// attributes: thunk\nint fputs_unlocked(const char *s, FILE *stream)\n{\n  return fputs_unlocked(s, stream);\n}\n"], [4201424, ".ferror_unlocked", "// attributes: thunk\nint ferror_unlocked(FILE *stream)\n{\n  return ferror_unlocked(stream);\n}\n"], [4201440, ".calloc", "// attributes: thunk\nvoid *calloc(size_t nmemb, size_t size)\n{\n  return calloc(nmemb, size);\n}\n"], [4201456, ".strcmp", "// attributes: thunk\nint strcmp(const char *s1, const char *s2)\n{\n  return strcmp(s1, s2);\n}\n"], [4201472, ".fprintf", "// attributes: thunk\nint fprintf(FILE *stream, const char *format, ...)\n{\n  return fprintf(stream, format);\n}\n"], [4201488, ".sigemptyset", "// attributes: thunk\nint sigemptyset(sigset_t *set)\n{\n  return sigemptyset(set);\n}\n"], [4201504, ".__gmon_start__", "// attributes: thunk\n__int64 __gmon_start__(void)\n{\n  return _gmon_start__();\n}\n"], [4201520, ".strtol", "// attributes: thunk\n__int64 strtol(const char *nptr, char **endptr, int base)\n{\n  return strtol(nptr, endptr, base);\n}\n"], [4201536, ".memcpy", "// attributes: thunk\nvoid *memcpy(void *dest, const void *src, size_t n)\n{\n  return memcpy(dest, src, n);\n}\n"], [4201552, ".fileno", "// attributes: thunk\nint fileno(FILE *stream)\n{\n  return fileno(stream);\n}\n"], [4201568, ".iswalnum", "// attributes: thunk\nint iswalnum(wint_t wc)\n{\n  return iswalnum(wc);\n}\n"], [4201584, ".malloc", "// attributes: thunk\nvoid *malloc(size_t size)\n{\n  return malloc(size);\n}\n"], [4201600, ".fflush", "// attributes: thunk\nint fflush(FILE *stream)\n{\n  return fflush(stream);\n}\n"], [4201616, ".nl_langinfo", "// attributes: thunk\nchar *nl_langinfo(nl_item item)\n{\n  return nl_langinfo(item);\n}\n"], [4201632, ".ungetc", "// attributes: thunk\nint ungetc(int c, FILE *stream)\n{\n  return ungetc(c, stream);\n}\n"], [4201648, ".__fxstat", "// attributes: thunk\nint __fxstat(int ver, int fildes, struct stat *stat_buf)\n{\n  return _fxstat(ver, fildes, stat_buf);\n}\n"], [4201664, ".__freading", "// attributes: thunk\nint __freading(FILE *fp)\n{\n  return _freading(fp);\n}\n"], [4201680, ".fwrite_unlocked", "// attributes: thunk\nsize_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)\n{\n  return fwrite_unlocked(ptr, size, n, stream);\n}\n"], [4201696, ".realloc", "// attributes: thunk\nvoid *realloc(void *ptr, size_t size)\n{\n  return realloc(ptr, size);\n}\n"], [4201712, ".fdopen", "// attributes: thunk\nFILE *fdopen(int fd, const char *modes)\n{\n  return fdopen(fd, modes);\n}\n"], [4201728, ".setlocale", "// attributes: thunk\nchar *setlocale(int category, const char *locale)\n{\n  return setlocale(category, locale);\n}\n"], [4201744, ".iconv_close", "// attributes: thunk\nint iconv_close(iconv_t cd)\n{\n  return iconv_close(cd);\n}\n"], [4201760, ".iswspace", "// attributes: thunk\nint iswspace(wint_t wc)\n{\n  return iswspace(wc);\n}\n"], [4201776, ".memmove", "// attributes: thunk\nvoid *memmove(void *dest, const void *src, size_t n)\n{\n  return memmove(dest, src, n);\n}\n"], [4201792, ".error", "// attributes: thunk\nvoid error(int status, int errnum, const char *format, ...)\n{\n  error(status, errnum, format);\n}\n"], [4201808, ".waitpid", "// attributes: thunk\n__pid_t waitpid(__pid_t pid, int *stat_loc, int options)\n{\n  return waitpid(pid, stat_loc, options);\n}\n"], [4201824, ".open", "// attributes: thunk\nint open(const char *file, int oflag, ...)\n{\n  return open(file, oflag);\n}\n"], [4201840, ".fseeko", "// attributes: thunk\nint fseeko(FILE *stream, __off_t off, int whence)\n{\n  return fseeko(stream, off, whence);\n}\n"], [4201856, ".strtoumax", "// attributes: thunk\nuintmax_t strtoumax(const char *nptr, char **endptr, int base)\n{\n  return strtoumax(nptr, endptr, base);\n}\n"], [4201872, ".strtoul", "// attributes: thunk\nunsigned __int64 strtoul(const char *nptr, char **endptr, int base)\n{\n  return strtoul(nptr, endptr, base);\n}\n"], [4201888, ".__cxa_atexit", "// attributes: thunk\nint __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)\n{\n  return _cxa_atexit(lpfunc, obj, lpdso_handle);\n}\n"], [4201904, ".getpagesize", "// attributes: thunk\nint getpagesize(void)\n{\n  return getpagesize();\n}\n"], [4201920, ".__libc_current_sigrtmin", "// attributes: thunk\nint __libc_current_sigrtmin(void)\n{\n  return _libc_current_sigrtmin();\n}\n"], [4201936, ".sprintf", "// attributes: thunk\nint sprintf(char *s, const char *format, ...)\n{\n  return sprintf(s, format);\n}\n"], [4201952, ".exit", "// attributes: thunk\nvoid __noreturn exit(int status)\n{\n  exit(status);\n}\n"], [4201968, ".fwrite", "// attributes: thunk\nsize_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)\n{\n  return fwrite(ptr, size, n, s);\n}\n"], [4201984, ".__libc_current_sigrtmax", "// attributes: thunk\nint __libc_current_sigrtmax(void)\n{\n  return _libc_current_sigrtmax();\n}\n"], [4202000, ".strdup", "// attributes: thunk\nchar *strdup(const char *s)\n{\n  return strdup(s);\n}\n"], [4202016, ".mbsinit", "// attributes: thunk\nint mbsinit(const mbstate_t *ps)\n{\n  return mbsinit(ps);\n}\n"], [4202032, ".execl", "// attributes: thunk\nint execl(const char *path, const char *arg, ...)\n{\n  return execl(path, arg);\n}\n"], [4202048, ".iswprint", "// attributes: thunk\nint iswprint(wint_t wc)\n{\n  return iswprint(wc);\n}\n"], [4202064, ".sigaddset", "// attributes: thunk\nint sigaddset(sigset_t *set, int signo)\n{\n  return sigaddset(set, signo);\n}\n"], [4202080, ".fork", "// attributes: thunk\n__pid_t fork(void)\n{\n  return fork();\n}\n"], [4202096, ".__ctype_b_loc", "// attributes: thunk\nconst unsigned __int16 **__ctype_b_loc(void)\n{\n  return _ctype_b_loc();\n}\n"], [4202112, ".iconv_open", "// attributes: thunk\niconv_t iconv_open(const char *tocode, const char *fromcode)\n{\n  return iconv_open(tocode, fromcode);\n}\n"], [4202128, "start", "// positive sp value has been detected, the output may be wrong!\nvoid __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void))\n{\n  __int64 v3; // rax\n  int v4; // esi\n  __int64 v5; // [rsp-8h] [rbp-8h] BYREF\n  char *retaddr; // [rsp+0h] [rbp+0h] BYREF\n\n  v4 = v5;\n  v5 = v3;\n  __libc_start_main(main, v4, &retaddr, init, fini, a3, &v5);\n  __halt();\n}\n"], [4202176, "sub_401EC0", "signed __int64 sub_401EC0()\n{\n  signed __int64 result; // rax\n\n  result = &unk_6104CF - &unk_6104C8;\n  if ( (unsigned __int64)(&unk_6104CF - &unk_6104C8) > 0xE )\n    result = 0LL;\n  return result;\n}\n"], [4202224, "sub_401EF0", "__int64 sub_401EF0()\n{\n  return 0LL;\n}\n"], [4202288, "sub_401F30", "signed __int64 sub_401F30()\n{\n  signed __int64 result; // rax\n\n  if ( !byte_610538 )\n  {\n    result = sub_401EC0();\n    byte_610538 = 1;\n  }\n  return result;\n}\n"], [4202320, "sub_401F50", "__int64 sub_401F50()\n{\n  return sub_401EF0();\n}\n"], [4202365, "sub_401F7D", "__int64 __fastcall sub_401F7D(unsigned __int8 a1)\n{\n  return a1;\n}\n"], [4202380, "sub_401F8C", "unsigned __int64 __fastcall sub_401F8C(__int64 a1, unsigned __int64 a2)\n{\n  return a2 - 1 + a1 - (a2 - 1 + a1) % a2;\n}\n"], [4202450, "sub_401FD2", "int sub_401FD2()\n{\n  FILE *v0; // rbx\n  char *v1; // rax\n\n  v0 = stdout;\n  v1 = gettext(\n         \"\\n\"\n         \"SIZE may be (or may be an integer optionally followed by) one of following:\\n\"\n         \"KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.\\n\");\n  return fputs_unlocked(v1, v0);\n}\n"], [4202494, "sub_401FFE", "int sub_401FFE()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // rbx\n  char *v8; // rax\n  const char *s1; // [rsp+8h] [rbp-18h]\n\n  v0 = sub_4051FC(qword_6106C8);\n  v1 = gettext(\"\\nReport %s bugs to %s\\n\");\n  printf(v1, v0, \"bug-coreutils@gnu.org\");\n  v2 = gettext(\"%s home page: <%s>\\n\");\n  printf(v2, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  fputs_unlocked(v4, v3);\n  s1 = setlocale(5, 0LL);\n  if ( s1 && strncmp(s1, \"en_\", 3uLL) )\n  {\n    v5 = sub_4051FC(qword_6106C8);\n    v6 = gettext(\"Report %s translation bugs to <http://translationproject.org/team/>\\n\");\n    printf(v6, v5);\n  }\n  v7 = sub_4051FC(qword_6106C8);\n  v8 = gettext(\"For complete documentation, run: info coreutils '%s invocation'\\n\");\n  return printf(v8, v7);\n}\n"], [4202760, "sub_402108", "__int64 __fastcall sub_402108(__int64 a1)\n{\n  return a1;\n}\n"], [4202774, "sub_402116", "__int64 __fastcall sub_402116(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, __int64 a14)\n{\n  __int64 result; // rax\n\n  if ( a14 <= 0 || (unsigned __int64)a14 > 0x2000000000000000LL || a14 <= 0x7FFF )\n    result = 0x8000LL;\n  else\n    result = a14;\n  return result;\n}\n"], [4202872, "sub_402178", "_BOOL8 __fastcall sub_402178(int a1)\n{\n  return qword_610540 && a1 == 32;\n}\n"], [4202914, "sub_4021A2", "void __fastcall sub_4021A2(unsigned __int64 a1, int a2)\n{\n  char *v2; // rax\n  size_t v3; // rax\n  unsigned __int64 v4; // [rsp+8h] [rbp-28h]\n  size_t v5; // [rsp+20h] [rbp-10h]\n  size_t v6; // [rsp+28h] [rbp-8h]\n\n  v4 = a1;\n  v5 = 0LL;\n  if ( a2 == 5 || a2 == 6 || a2 == 7 )\n  {\n    v6 = strlen(s);\n    while ( 1 )\n    {\n      v4 /= v6;\n      if ( !v4 )\n        break;\n      ++v5;\n    }\n    v5 += a1 % v6 != 0;\n  }\n  if ( n )\n  {\n    if ( n < v5 )\n    {\n      v2 = gettext(\"the suffix length needs to be at least %zu\");\n      error(1, 0, v2, v5);\n    }\n  }\n  else\n  {\n    v3 = 2LL;\n    if ( v5 >= 2 )\n      v3 = v5;\n    n = v3;\n  }\n}\n"], [4203131, "sub_40227B", "void __fastcall __noreturn sub_40227B(int a1)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbx\n  char *v5; // rax\n  FILE *v6; // rbx\n  char *v7; // rax\n  char *v8; // rax\n  FILE *v9; // rbx\n  char *v10; // rax\n  FILE *v11; // rbx\n  char *v12; // rax\n  FILE *v13; // rbx\n  char *v14; // rax\n  FILE *v15; // rbx\n  char *v16; // rax\n\n  v1 = qword_6106C8;\n  if ( a1 )\n  {\n    v2 = gettext(\"Try `%s --help' for more information.\\n\");\n    fprintf(stderr, v2, v1);\n  }\n  else\n  {\n    v3 = gettext(\"Usage: %s [OPTION]... [INPUT [PREFIX]]\\n\");\n    printf(v3, v1);\n    v4 = stdout;\n    v5 = gettext(\n           \"Output fixed-size pieces of INPUT to PREFIXaa, PREFIXab, ...; default\\n\"\n           \"size is 1000 lines, and default PREFIX is `x'.  With no INPUT, or when INPUT\\n\"\n           \"is -, read standard input.\\n\"\n           \"\\n\");\n    fputs_unlocked(v5, v4);\n    v6 = stdout;\n    v7 = gettext(\"Mandatory arguments to long options are mandatory for short options too.\\n\");\n    fputs_unlocked(v7, v6);\n    v8 = gettext(\n           \"  -a, --suffix-length=N   use suffixes of length N (default %d)\\n\"\n           \"  -b, --bytes=SIZE        put SIZE bytes per output file\\n\"\n           \"  -C, --line-bytes=SIZE   put at most SIZE bytes of lines per output file\\n\"\n           \"  -d, --numeric-suffixes  use numeric suffixes instead of alphabetic\\n\"\n           \"  -e, --elide-empty-files  do not generate empty output files with `-n'\\n\"\n           \"      --filter=COMMAND    write to shell COMMAND; file name is $FILE\\n\"\n           \"  -l, --lines=NUMBER      put NUMBER lines per output file\\n\"\n           \"  -n, --number=CHUNKS     generate CHUNKS output files.  See below\\n\"\n           \"  -u, --unbuffered        immediately copy input to output with `-n r/...'\\n\");\n    fprintf(stdout, v8, 2LL);\n    v9 = stdout;\n    v10 = gettext(\n            \"      --verbose           print a diagnostic just before each\\n\"\n            \"                            output file is opened\\n\");\n    fputs_unlocked(v10, v9);\n    v11 = stdout;\n    v12 = gettext(\"      --help     display this help and exit\\n\");\n    fputs_unlocked(v12, v11);\n    v13 = stdout;\n    v14 = gettext(\"      --version  output version information and exit\\n\");\n    fputs_unlocked(v14, v13);\n    sub_401FD2();\n    v15 = stdout;\n    v16 = gettext(\n            \"\\n\"\n            \"CHUNKS may be:\\n\"\n            \"N       split into N files based on size of input\\n\"\n            \"K/N     output Kth of N to stdout\\n\"\n            \"l/N     split into N files without splitting lines\\n\"\n            \"l/K/N   output Kth of N to stdout without splitting lines\\n\"\n            \"r/N     like `l' but use round robin distribution\\n\"\n            \"r/K/N   likewise but only output Kth of N to stdout\\n\");\n    fputs_unlocked(v16, v15);\n    sub_401FFE();\n  }\n  exit(a1);\n}\n"], [4203462, "sub_4023C6", "void sub_4023C6()\n{\n  char *v1; // rax\n  size_t i; // [rsp+8h] [rbp-18h]\n  size_t n; // [rsp+10h] [rbp-10h]\n  size_t v4; // [rsp+18h] [rbp-8h]\n\n  if ( dest )\n  {\n    for ( i = ::n; i--; *((_BYTE *)qword_610690 + i) = s[*(_QWORD *)(8 * i + qword_6106B0)] )\n    {\n      *((_BYTE *)qword_610690 + i) = s[++*(_QWORD *)(8 * i + qword_6106B0)];\n      if ( *((_BYTE *)qword_610690 + i) )\n        return;\n      *(_QWORD *)(8 * i + qword_6106B0) = 0LL;\n    }\n    v1 = gettext(\"output file suffixes exhausted\");\n    error(1, 0, v1);\n  }\n  else\n  {\n    n = strlen(src);\n    v4 = ::n + n;\n    if ( ::n + n + 1 < n )\n      sub_408A4A();\n    dest = (void *)sub_4088C8(v4 + 1);\n    qword_610690 = (char *)dest + n;\n    memcpy(dest, src, n);\n    memset(qword_610690, *s, ::n);\n    *((_BYTE *)dest + v4) = 0;\n    qword_6106B0 = sub_4089B3(::n, 8LL);\n  }\n}\n"], [4203952, "sub_4025B0", "__int64 __fastcall sub_4025B0(const char *a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  __int64 v6; // rbx\n  char *v7; // rax\n  __int64 result; // rax\n  char *v9; // rbx\n  int *v10; // rax\n  __int64 v11; // rbx\n  char *v12; // rax\n  char *v13; // rbx\n  int *v14; // rax\n  char *v15; // rbx\n  int *v16; // rax\n  char *v17; // rbx\n  int *v18; // rax\n  char *v19; // rbx\n  int *v20; // rax\n  char *v21; // rbx\n  int *v22; // rax\n  __int64 v23; // rbx\n  const char *v24; // rax\n  __int64 v25; // r12\n  char *v26; // rbx\n  int *v27; // rax\n  char *v28; // rbx\n  int *v29; // rax\n  char *v30; // rbx\n  int *v31; // rax\n  __int64 v32; // rax\n  int i; // [rsp+18h] [rbp-28h]\n  __pid_t v34; // [rsp+1Ch] [rbp-24h]\n  int pipedes[2]; // [rsp+20h] [rbp-20h] BYREF\n  char *path; // [rsp+28h] [rbp-18h]\n\n  if ( qword_610540 )\n  {\n    path = getenv(\"SHELL\");\n    if ( !path )\n      path = \"/bin/sh\";\n    if ( setenv(\"FILE\", a1, 1) )\n    {\n      v9 = gettext(\"failed to set FILE environment variable\");\n      v10 = __errno_location();\n      error(1, *v10, v9);\n    }\n    if ( byte_6106A8 )\n    {\n      v11 = sub_4060A6(a1);\n      v12 = gettext(\"executing with FILE=%s\\n\");\n      fprintf(stdout, v12, v11);\n    }\n    if ( pipe(pipedes) )\n    {\n      v13 = gettext(\"failed to create pipe\");\n      v14 = __errno_location();\n      error(1, *v14, v13);\n    }\n    v34 = fork();\n    if ( !v34 )\n    {\n      for ( i = 0; i < (unsigned __int64)qword_610560; ++i )\n      {\n        if ( close(*(_DWORD *)(4LL * i + qword_610550)) )\n        {\n          v15 = gettext(\"closing prior pipe\");\n          v16 = __errno_location();\n          error(1, *v16, v15);\n        }\n      }\n      if ( close(pipedes[1]) )\n      {\n        v17 = gettext(\"closing output pipe\");\n        v18 = __errno_location();\n        error(1, *v18, v17);\n      }\n      if ( pipedes[0] )\n      {\n        if ( dup2(pipedes[0], 0) )\n        {\n          v19 = gettext(\"moving input pipe\");\n          v20 = __errno_location();\n          error(1, *v20, v19);\n        }\n        if ( close(pipedes[0]) )\n        {\n          v21 = gettext(\"closing input pipe\");\n          v22 = __errno_location();\n          error(1, *v22, v21);\n        }\n      }\n      sigprocmask(2, &oset, 0LL);\n      v23 = qword_610540;\n      v24 = (const char *)sub_4051FC(path);\n      execl(path, v24, \"-c\", v23, 0LL);\n      v25 = qword_610540;\n      v26 = gettext(\"failed to run command: \\\"%s -c %s\\\"\");\n      v27 = __errno_location();\n      error(1, *v27, v26, path, v25);\n    }\n    if ( v34 == -1 )\n    {\n      v28 = gettext(\"fork system call failed\");\n      v29 = __errno_location();\n      error(1, *v29, v28);\n    }\n    if ( close(pipedes[0]) )\n    {\n      v30 = gettext(\"failed to close input pipe\");\n      v31 = __errno_location();\n      error(1, *v31, v30);\n    }\n    dword_610548 = v34;\n    if ( qword_610560 == qword_610558 )\n      qword_610550 = sub_408809(qword_610550, &qword_610558, 4LL);\n    v32 = qword_610560++;\n    *(_DWORD *)(qword_610550 + 4 * v32) = pipedes[1];\n    result = (unsigned int)pipedes[1];\n  }\n  else\n  {\n    if ( byte_6106A8 )\n    {\n      v6 = sub_4060A6(a1);\n      v7 = gettext(\"creating file %s\\n\");\n      fprintf(stdout, v7, v6);\n    }\n    result = sub_4052B3((_DWORD)a1, 577, 438, a4, a5, a6);\n  }\n  return result;\n}\n"], [4204928, "sub_402980", "unsigned __int64 __fastcall sub_402980(__int64 a1, int a2, __pid_t a3, const char *a4)\n{\n  int *v4; // rax\n  int *v5; // rax\n  int *v6; // rax\n  char *v7; // rbx\n  int *v8; // rax\n  __int64 v9; // rbx\n  char *v10; // rax\n  __int64 v11; // rbx\n  char *v12; // rax\n  unsigned int v13; // ebx\n  char *v14; // rax\n  int stat_loc; // [rsp+60h] [rbp-40h] BYREF\n  int i; // [rsp+64h] [rbp-3Ch]\n  unsigned int v20; // [rsp+68h] [rbp-38h]\n  int status; // [rsp+6Ch] [rbp-34h]\n  char s[24]; // [rsp+70h] [rbp-30h] BYREF\n  unsigned __int64 v23; // [rsp+88h] [rbp-18h]\n\n  v23 = __readfsqword(0x28u);\n  if ( a1 )\n  {\n    if ( (unsigned int)sub_409583(a1) )\n    {\n      v4 = __errno_location();\n      if ( !sub_402178(*v4) )\n      {\n        v5 = __errno_location();\n        error(1, *v5, \"%s\", a4);\n      }\n    }\n  }\n  if ( a2 >= 0 )\n  {\n    if ( !a1 && close(a2) < 0 )\n    {\n      v6 = __errno_location();\n      error(1, *v6, \"%s\", a4);\n    }\n    for ( i = 0; i < (unsigned __int64)qword_610560; ++i )\n    {\n      if ( *(_DWORD *)(4LL * i + qword_610550) == a2 )\n      {\n        --qword_610560;\n        *(_DWORD *)(qword_610550 + 4LL * i) = *(_DWORD *)(4 * qword_610560 + qword_610550);\n        break;\n      }\n    }\n  }\n  if ( a3 > 0 )\n  {\n    stat_loc = 0;\n    if ( waitpid(a3, &stat_loc, 0) == -1 && *__errno_location() != 10 )\n    {\n      v7 = gettext(\"waiting for child process\");\n      v8 = __errno_location();\n      error(1, *v8, v7);\n    }\n    if ( (char)((stat_loc & 0x7F) + 1) >> 1 <= 0 )\n    {\n      if ( (stat_loc & 0x7F) != 0 )\n      {\n        v13 = stat_loc;\n        v14 = gettext(\"unknown status from command (0x%X)\");\n        error(1, 0, v14, v13);\n      }\n      else\n      {\n        status = (stat_loc & 0xFF00) >> 8;\n        if ( status )\n        {\n          v11 = qword_610540;\n          v12 = gettext(\"with FILE=%s, exit %d from command: %s\");\n          error(status, 0, v12, a4, (unsigned int)status, v11);\n        }\n      }\n    }\n    else\n    {\n      v20 = stat_loc & 0x7F;\n      if ( v20 != 13 )\n      {\n        if ( (unsigned int)sub_40995A(v20, s) )\n          sprintf(s, \"%d\", v20);\n        v9 = qword_610540;\n        v10 = gettext(\"with FILE=%s, signal %s from command: %s\");\n        error(v20 + 128, 0, v10, a4, s, v9);\n      }\n    }\n  }\n  return __readfsqword(0x28u) ^ v23;\n}\n"], [4205713, "sub_402C91", "void __fastcall sub_402C91(char a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rsi\n  __int64 v4; // rdx\n  int v5; // ecx\n  int v6; // er8\n  int v7; // er9\n  const char *v8; // rbx\n  int *v9; // rax\n  int *v10; // rax\n  const char *v11; // rbx\n  int *v12; // rax\n\n  if ( a1 )\n  {\n    if ( !a2 && !a3 && byte_6106A9 )\n      return;\n    v3 = (unsigned int)dword_6102D8;\n    sub_402980(0LL, dword_6102D8, dword_610548, (const char *)dest);\n    sub_4023C6();\n    dword_6102D8 = sub_4025B0((const char *)dest, v3, v4, v5, v6, v7);\n    if ( dword_6102D8 < 0 )\n    {\n      v8 = (const char *)dest;\n      v9 = __errno_location();\n      error(1, *v9, \"%s\", v8);\n    }\n  }\n  if ( sub_405445((unsigned int)dword_6102D8, a2, a3) != a3 )\n  {\n    v10 = __errno_location();\n    if ( !sub_402178(*v10) )\n    {\n      v11 = (const char *)dest;\n      v12 = __errno_location();\n      error(1, *v12, \"%s\", v11);\n    }\n  }\n}\n"], [4205978, "sub_402D9A", "unsigned __int64 __fastcall sub_402D9A(unsigned __int64 a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4)\n{\n  const char *v4; // rbx\n  int *v5; // rax\n  bool v6; // al\n  int *v7; // rax\n  unsigned __int64 result; // rax\n  unsigned __int8 v11; // [rsp+2Fh] [rbp-41h]\n  unsigned __int64 v12; // [rsp+30h] [rbp-40h]\n  unsigned __int64 v13; // [rsp+38h] [rbp-38h]\n  unsigned __int64 v14; // [rsp+40h] [rbp-30h]\n  __int64 v15; // [rsp+48h] [rbp-28h]\n  unsigned __int64 v16; // [rsp+50h] [rbp-20h]\n\n  v11 = 1;\n  v14 = a1;\n  v16 = 0LL;\n  do\n  {\n    v12 = sub_4053C5(0LL, a2, a3);\n    if ( v12 < a3 && *__errno_location() )\n    {\n      v4 = s1;\n      v5 = __errno_location();\n      error(1, *v5, \"%s\", v4);\n    }\n    v15 = a2;\n    v13 = v12;\n    while ( v13 >= v14 )\n    {\n      sub_402C91(v11, v15, v14);\n      v16 += v11;\n      v6 = !a4 || v16 < a4;\n      v11 = v6;\n      if ( !v6 )\n      {\n        v7 = __errno_location();\n        if ( sub_402178(*v7) )\n        {\n          v12 = 0LL;\n          goto LABEL_18;\n        }\n      }\n      v15 += v14;\n      v13 -= v14;\n      v14 = a1;\n    }\n    if ( v13 )\n    {\n      sub_402C91(v11, v15, v13);\n      v16 += v11;\n      v14 -= v13;\n      v11 = 0;\n    }\nLABEL_18:\n    ;\n  }\n  while ( v12 == a3 );\n  while ( 1 )\n  {\n    result = v16++;\n    if ( result >= a4 )\n      break;\n    sub_402C91(1, 0LL, 0LL);\n  }\n  return result;\n}\n"], [4206396, "sub_402F3C", "unsigned __int64 __fastcall sub_402F3C(unsigned __int64 a1, char *a2, unsigned __int64 a3)\n{\n  const char *v3; // rbx\n  int *v4; // rax\n  unsigned __int64 result; // rax\n  char v7; // [rsp+2Fh] [rbp-41h]\n  void *s; // [rsp+30h] [rbp-40h]\n  char *sa; // [rsp+30h] [rbp-40h]\n  __int64 v10; // [rsp+38h] [rbp-38h]\n  __int64 v11; // [rsp+40h] [rbp-30h]\n  unsigned __int64 v12; // [rsp+48h] [rbp-28h]\n  char *v13; // [rsp+50h] [rbp-20h]\n\n  v7 = 1;\n  v11 = 0LL;\n  do\n  {\n    v12 = sub_4053C5(0LL, a2, a3);\n    if ( v12 < a3 && *__errno_location() )\n    {\n      v3 = s1;\n      v4 = __errno_location();\n      error(1, *v4, \"%s\", v3);\n    }\n    v10 = (__int64)a2;\n    s = a2;\n    v13 = &a2[v12];\n    a2[v12] = 10;\n    while ( 1 )\n    {\n      sa = (char *)memchr(s, 10, v13 - (_BYTE *)s + 1);\n      if ( sa == v13 )\n        break;\n      s = sa + 1;\n      if ( ++v11 >= a1 )\n      {\n        sub_402C91(v7, v10, (__int64)s - v10);\n        v10 = (__int64)s;\n        v7 = 1;\n        v11 = 0LL;\n      }\n    }\n    if ( v13 != (char *)v10 )\n    {\n      sub_402C91(v7, v10, (__int64)&v13[-v10]);\n      v7 = 0;\n    }\n    result = v12;\n  }\n  while ( v12 == a3 );\n  return result;\n}\n"], [4206768, "sub_4030B0", "void __fastcall sub_4030B0(__int64 a1)\n{\n  const char *v1; // rbx\n  int *v2; // rax\n  char v3; // [rsp+17h] [rbp-39h]\n  _BYTE *src; // [rsp+18h] [rbp-38h]\n  size_t n; // [rsp+20h] [rbp-30h]\n  size_t na; // [rsp+20h] [rbp-30h]\n  _BYTE *dest; // [rsp+28h] [rbp-28h]\n  unsigned __int64 v8; // [rsp+38h] [rbp-18h]\n\n  v3 = 0;\n  n = 0LL;\n  dest = (_BYTE *)sub_4088C8(a1);\n  do\n  {\n    v8 = sub_4053C5(0LL, &dest[n], a1 - n);\n    if ( v8 < a1 - n && *__errno_location() )\n    {\n      v1 = s1;\n      v2 = __errno_location();\n      error(1, *v2, \"%s\", v1);\n    }\n    na = v8 + n;\n    if ( na != a1 )\n    {\n      if ( !na )\n        break;\n      v3 = 1;\n    }\n    src = &dest[na];\n    if ( na == a1 )\n    {\n      while ( src > dest && *(src - 1) != 10 )\n        --src;\n    }\n    if ( src == dest )\n      src = &dest[na];\n    sub_402C91(1, (__int64)dest, src - dest);\n    n = dest - src + na;\n    if ( n )\n      memmove(dest, src, n);\n  }\n  while ( v3 != 1 );\n  free(dest);\n}\n"], [4207155, "sub_403233", "void __fastcall sub_403233(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  const char *v5; // rbx\n  int *v6; // rax\n  unsigned __int64 v7; // rax\n  const char *v8; // rbx\n  int *v9; // rax\n  __int64 v10; // rax\n  unsigned __int64 v11; // rdx\n  unsigned __int64 v12; // rax\n  char *v13; // rax\n  char *v14; // rbx\n  int *v15; // rax\n  unsigned __int64 v16; // rax\n  char v20; // [rsp+35h] [rbp-6Bh]\n  char v21; // [rsp+36h] [rbp-6Ah]\n  char v22; // [rsp+37h] [rbp-69h]\n  unsigned __int64 v23; // [rsp+38h] [rbp-68h]\n  __int64 v24; // [rsp+40h] [rbp-60h]\n  __int64 v25; // [rsp+48h] [rbp-58h]\n  __int64 v26; // [rsp+50h] [rbp-50h]\n  unsigned __int64 v27; // [rsp+58h] [rbp-48h]\n  char *v28; // [rsp+60h] [rbp-40h]\n  unsigned __int64 v29; // [rsp+68h] [rbp-38h]\n  char *v30; // [rsp+78h] [rbp-28h]\n  __int64 v31; // [rsp+88h] [rbp-18h]\n\n  if ( !a2 || a1 > a2 || a5 < a2 )\n    __assert_fail(\"n && k <= n && n <= file_size\", \"../../src/src/split.c\", 0x25Au, \"lines_chunk_split\");\n  v29 = a5 / a2;\n  v23 = 1LL;\n  v24 = a5 / a2 - 1;\n  v25 = 0LL;\n  v20 = 1;\n  v21 = 0;\n  if ( a1 > 1 )\n  {\n    if ( lseek(0, (a1 - 1) * v29 - 1, 1) < 0 )\n    {\n      v5 = s1;\n      v6 = __errno_location();\n      error(1, *v6, \"%s\", v5);\n    }\n    v25 = (a1 - 1) * v29 - 1;\n    v23 = a1 - 1;\n    v24 = v25;\n  }\n  while ( v25 < (__int64)a5 )\n  {\n    v26 = a3;\n    v7 = sub_4053C5(0LL, a3, a4);\n    if ( a5 - v25 <= v7 )\n      v7 = a5 - v25;\n    v27 = v7;\n    if ( v7 < a4 && *__errno_location() )\n    {\n      v8 = s1;\n      v9 = __errno_location();\n      error(1, *v9, \"%s\", v8);\n    }\n    else if ( !v27 )\n    {\n      break;\n    }\n    v21 = 0;\n    v30 = (char *)(a3 + v27);\nLABEL_44:\n    while ( (char *)v26 != v30 )\n    {\n      v22 = 0;\n      v10 = v24 - v25;\n      if ( v24 - v25 < 0 )\n        v10 = 0LL;\n      v11 = v10;\n      v12 = v27;\n      if ( v11 <= v27 )\n        v12 = v11;\n      v13 = (char *)memchr((const void *)(v12 + v26), 10, v27 - v12);\n      v28 = v13 + 1;\n      if ( v13 )\n        v22 = 1;\n      else\n        v28 = v30;\n      v31 = (__int64)&v28[-v26];\n      if ( a1 == v23 )\n      {\n        if ( sub_405445(1LL, v26, v31) != v31 )\n        {\n          v14 = gettext(\"write error\");\n          v15 = __errno_location();\n          error(1, *v15, \"%s\", v14);\n        }\n      }\n      else if ( !a1 )\n      {\n        sub_402C91(v20, v26, v31);\n      }\n      v25 += v31;\n      v26 = (__int64)v28;\n      v27 -= v31;\n      v20 = v22;\n      while ( v22 || v25 - 1 >= v24 )\n      {\n        if ( v22 != 1 && v28 == v30 )\n        {\n          v21 = 1;\n          goto LABEL_44;\n        }\n        ++v23;\n        if ( a1 && v23 > a1 )\n          return;\n        if ( v23 == a2 )\n          v24 = a5 - 1;\n        else\n          v24 += v29;\n        if ( v25 - 1 < v24 )\n        {\n          v22 = 0;\n        }\n        else if ( !a1 )\n        {\n          sub_402C91(1, 0LL, 0LL);\n        }\n      }\n    }\n  }\n  if ( v21 )\n    ++v23;\n  while ( !a1 )\n  {\n    v16 = v23++;\n    if ( v16 > a2 )\n      break;\n    sub_402C91(1, 0LL, 0LL);\n  }\n}\n"], [4208196, "sub_403644", "unsigned __int64 __fastcall sub_403644(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  __int64 v5; // rax\n  const char *v6; // rbx\n  int *v7; // rax\n  unsigned __int64 result; // rax\n  const char *v9; // rbx\n  int *v10; // rax\n  int *v11; // rax\n  const char *v12; // rbx\n  int *v13; // rax\n  __int64 offset; // [rsp+38h] [rbp-28h]\n  __int64 v17; // [rsp+40h] [rbp-20h]\n  unsigned __int64 v18; // [rsp+48h] [rbp-18h]\n\n  if ( !a1 || !a2 || a1 > a2 || a5 < a2 )\n    __assert_fail(\"k && n && k <= n && n <= file_size\", \"../../src/src/split.c\", 0x2C6u, \"bytes_chunk_extract\");\n  offset = (a1 - 1) * (a5 / a2);\n  if ( a1 == a2 )\n    v5 = a5;\n  else\n    v5 = a1 * (a5 / a2);\n  v17 = v5;\n  if ( lseek(0, offset, 1) < 0 )\n  {\n    v6 = s1;\n    v7 = __errno_location();\n    error(1, *v7, \"%s\", v6);\n  }\n  while ( 1 )\n  {\n    result = offset;\n    if ( offset >= v17 )\n      break;\n    result = sub_4053C5(0LL, a3, a4);\n    if ( v17 - offset <= result )\n      result = v17 - offset;\n    v18 = result;\n    if ( result < a4 && (result = (unsigned int)*__errno_location(), (_DWORD)result) )\n    {\n      v9 = s1;\n      v10 = __errno_location();\n      error(1, *v10, \"%s\", v9);\n    }\n    else if ( !v18 )\n    {\n      return result;\n    }\n    if ( sub_405445(1LL, a3, v18) != v18 )\n    {\n      v11 = __errno_location();\n      if ( !sub_402178(*v11) )\n      {\n        v12 = (const char *)sub_4060A6(off_40D563);\n        v13 = __errno_location();\n        error(1, *v13, \"%s\", v12);\n      }\n    }\n    offset += v18;\n  }\n  return result;\n}\n"], [4208684, "sub_40382C", "__int64 __fastcall sub_40382C(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  __int64 v6; // rax\n  __int64 v7; // rbx\n  const char *v8; // rbx\n  __int64 v9; // rax\n  const char *v10; // rbx\n  const char *v11; // rbx\n  const char *v12; // rbx\n  int *v13; // rax\n  __int64 v16; // [rsp+10h] [rbp-30h]\n  unsigned __int8 v17; // [rsp+23h] [rbp-1Dh]\n  int fd; // [rsp+24h] [rbp-1Ch]\n  __int64 i; // [rsp+28h] [rbp-18h]\n\n  v16 = a2;\n  v17 = 0;\n  if ( *(int *)(32 * a2 + a1 + 8) < 0 )\n  {\n    if ( a2 )\n      v6 = a2 - 1;\n    else\n      v6 = a3 - 1;\n    for ( i = v6; ; *(_DWORD *)(32 * i + a1 + 8) = -2 )\n    {\n      if ( *(_DWORD *)(32 * v16 + a1 + 8) == -1 )\n      {\n        fd = sub_4025B0(*(const char **)(32 * v16 + a1), a2, 32 * v16, a4, a5, a6);\n      }\n      else\n      {\n        a2 = 3073LL;\n        fd = sub_4052B3(*(_QWORD *)(32 * v16 + a1), 3073, 32 * (int)v16, a4, a5, a6);\n      }\n      if ( fd >= 0 )\n        break;\n      if ( *__errno_location() != 24 && *__errno_location() != 23 )\n      {\n        v8 = *(const char **)(32 * v16 + a1);\n        a2 = (unsigned int)*__errno_location();\n        error(1, a2, \"%s\", v8);\n      }\n      v17 = 1;\n      while ( *(int *)(32 * i + a1 + 8) < 0 )\n      {\n        if ( i )\n          v9 = i - 1;\n        else\n          v9 = a3 - 1;\n        i = v9;\n        if ( v9 == v16 )\n        {\n          v10 = *(const char **)(32 * v16 + a1);\n          a2 = (unsigned int)*__errno_location();\n          error(1, a2, \"%s\", v10);\n        }\n      }\n      if ( (unsigned int)sub_409583(*(_QWORD *)(32 * i + a1 + 16)) )\n      {\n        v11 = *(const char **)(32 * i + a1);\n        a2 = (unsigned int)*__errno_location();\n        error(1, a2, \"%s\", v11);\n      }\n      *(_QWORD *)(32 * i + a1 + 16) = 0LL;\n    }\n    *(_DWORD *)(a1 + 32 * v16 + 8) = fd;\n    v7 = 32 * v16 + a1;\n    *(_QWORD *)(v7 + 16) = fdopen(fd, &off_40D563[2]);\n    if ( !*(_QWORD *)(v7 + 16) )\n    {\n      v12 = *(const char **)(32 * v16 + a1);\n      v13 = __errno_location();\n      error(1, *v13, \"%s\", v12);\n    }\n    *(_DWORD *)(a1 + 32 * v16 + 24) = dword_610548;\n    dword_610548 = 0;\n  }\n  return v17;\n}\n"], [4209400, "sub_403AF8", "__int64 __fastcall sub_403AF8(__int64 a1, unsigned __int64 a2, char *a3, __int64 a4)\n{\n  __int64 result; // rax\n  int v5; // er8\n  int v6; // er9\n  const char *v7; // rbx\n  int *v8; // rax\n  int v9; // er8\n  int v10; // er9\n  char *v11; // rbx\n  int *v12; // rax\n  char *v13; // rbx\n  int *v14; // rax\n  __int64 v15; // rax\n  int *v16; // rax\n  int *v17; // rax\n  const char *v18; // rbx\n  int *v19; // rax\n  int *v20; // rax\n  const char *v21; // rbx\n  int *v22; // rax\n  int v23; // eax\n  char v26; // [rsp+28h] [rbp-58h]\n  unsigned __int8 v27; // [rsp+29h] [rbp-57h]\n  bool v28; // [rsp+2Ah] [rbp-56h]\n  char v29; // [rsp+2Bh] [rbp-55h]\n  int v30; // [rsp+2Ch] [rbp-54h]\n  __int64 v31; // [rsp+30h] [rbp-50h]\n  unsigned __int64 i; // [rsp+30h] [rbp-50h]\n  unsigned __int64 j; // [rsp+30h] [rbp-50h]\n  __int64 v34; // [rsp+38h] [rbp-48h]\n  __int64 v35; // [rsp+40h] [rbp-40h]\n  char *s; // [rsp+48h] [rbp-38h]\n  char *v37; // [rsp+50h] [rbp-30h]\n  char *v38; // [rsp+50h] [rbp-30h]\n  __int64 v39; // [rsp+58h] [rbp-28h]\n  char *v40; // [rsp+60h] [rbp-20h]\n  size_t size; // [rsp+68h] [rbp-18h]\n\n  v26 = 0;\n  v27 = 0;\n  if ( a1 )\n  {\n    v35 = 1LL;\n  }\n  else\n  {\n    v34 = sub_40877F(a2, 32LL);\n    for ( i = 0LL; i < a2; ++i )\n    {\n      sub_4023C6();\n      *(_QWORD *)(32 * i + v34) = sub_408A1D(dest);\n      *(_DWORD *)(32 * i + v34 + 8) = -1;\n      *(_QWORD *)(32 * i + v34 + 16) = 0LL;\n      *(_DWORD *)(32 * i + v34 + 24) = 0;\n    }\n    v31 = 0LL;\n    v28 = 0;\n  }\nLABEL_7:\n  s = a3;\n  result = sub_40783E(0LL, a3, a4);\n  v39 = result;\n  if ( result == -1 )\n  {\n    v7 = s1;\n    v8 = __errno_location();\n    error(1, *v8, \"%s\", v7);\nLABEL_10:\n    v40 = &a3[v39];\n    while ( 1 )\n    {\n      if ( s == v40 )\n        goto LABEL_7;\n      v29 = 0;\n      v37 = (char *)memchr(s, 10, v40 - s);\n      if ( v37 )\n      {\n        v38 = v37 + 1;\n        v29 = 1;\n      }\n      else\n      {\n        v38 = &a3[v39];\n      }\n      size = v38 - s;\n      if ( a1 )\n      {\n        if ( v35 == a1 && byte_6106AA )\n        {\n          if ( sub_405445(1LL, s, size) != size )\n          {\n            v11 = gettext(\"write error\");\n            v12 = __errno_location();\n            error(1, *v12, \"%s\", v11);\n          }\n        }\n        else if ( v35 == a1 && fwrite_unlocked(s, size, 1uLL, stdout) != 1 )\n        {\n          clearerr_unlocked(stdout);\n          v13 = gettext(\"write error\");\n          v14 = __errno_location();\n          error(1, *v14, \"%s\", v13);\n        }\n        if ( v29 )\n        {\n          if ( v35 == a2 )\n            v15 = 1LL;\n          else\n            v15 = v35 + 1;\n          v35 = v15;\n        }\n        goto LABEL_45;\n      }\n      v28 = (v28 | (unsigned __int8)sub_40382C(v34, v31, a2, v31, v9, v10)) != 0;\n      if ( byte_6106AA )\n      {\n        if ( sub_405445(*(unsigned int *)(32 * v31 + v34 + 8), s, size) != size )\n        {\n          v16 = __errno_location();\n          if ( !sub_402178(*v16) )\n            goto LABEL_34;\n        }\n      }\n      else if ( fwrite_unlocked(s, size, 1uLL, *(FILE **)(32 * v31 + v34 + 16)) != 1 )\n      {\n        v17 = __errno_location();\n        if ( !sub_402178(*v17) )\n        {\nLABEL_34:\n          v18 = *(const char **)(32 * v31 + v34);\n          v19 = __errno_location();\n          error(1, *v19, \"%s\", v18);\n          goto LABEL_35;\n        }\n      }\nLABEL_35:\n      v20 = __errno_location();\n      if ( !sub_402178(*v20) )\n        v27 = 1;\n      if ( v28 )\n      {\n        if ( (unsigned int)sub_409583(*(_QWORD *)(32 * v31 + v34 + 16)) )\n        {\n          v21 = *(const char **)(32 * v31 + v34);\n          v22 = __errno_location();\n          error(1, *v22, \"%s\", v21);\n        }\n        *(_QWORD *)(32 * v31 + v34 + 16) = 0LL;\n        *(_DWORD *)(32 * v31 + v34 + 8) = -2;\n      }\n      if ( v29 )\n      {\n        if ( ++v31 == a2 )\n        {\n          v26 = 1;\n          result = v27 ^ 1u;\n          if ( v27 != 1 )\n            goto LABEL_48;\n          v27 = 0;\n          v31 = 0LL;\n        }\n      }\nLABEL_45:\n      s = v38;\n    }\n  }\n  if ( result )\n    goto LABEL_10;\nLABEL_48:\n  if ( !a1 )\n  {\n    if ( v26 )\n      v23 = a2;\n    else\n      v23 = v31;\n    v30 = v23;\n    for ( j = 0LL; ; ++j )\n    {\n      result = j;\n      if ( j >= a2 )\n        break;\n      if ( v30 <= j && byte_6106A9 != 1 )\n        v28 = (v28 | (unsigned __int8)sub_40382C(v34, j, a2, j, v5, v6)) != 0;\n      if ( *(int *)(32 * j + v34 + 8) >= 0 )\n        sub_402980(\n          *(_QWORD *)(32 * j + v34 + 16),\n          *(_DWORD *)(32 * j + v34 + 8),\n          *(_DWORD *)(32 * j + v34 + 24),\n          *(const char **)(32 * j + v34));\n      *(_DWORD *)(32 * j + v34 + 8) = -2;\n    }\n  }\n  return result;\n}\n"], [4210928, "sub_4040F0", "void __fastcall sub_4040F0(_QWORD *a1, _QWORD *a2, char *a3)\n{\n  char *v3; // rax\n  char *v4; // rbx\n  char *v5; // rax\n\n  *a3 = 0;\n  if ( (unsigned int)sub_409117(a3 + 1, 0LL, 10LL, a2, &locale) || !*a2 )\n  {\n    v3 = gettext(\"%s: invalid number of chunks\");\n    error(1, 0, v3, a3 + 1);\n  }\n  if ( a3 != optarg && ((unsigned int)sub_409117(optarg, 0LL, 10LL, a1, &locale) || !*a1 || *a2 < *a1) )\n  {\n    v4 = optarg;\n    v5 = gettext(\"%s: invalid chunk number\");\n    error(1, 0, v5, v4);\n  }\n}\n"], [4211188, "main", "void __fastcall __noreturn main(int a1, char **a2, char **a3)\n{\n  int v3; // eax\n  char *v4; // rbx\n  char *v5; // rax\n  char *v6; // rax\n  char *v7; // rbx\n  char *v8; // rax\n  char *v9; // rbx\n  char *v10; // rax\n  char *v11; // rax\n  char *v12; // rbx\n  char *v13; // rax\n  char *v14; // rax\n  char *v15; // rbx\n  char *v16; // rax\n  char *v17; // rax\n  const unsigned __int16 *v18; // rbx\n  char *v19; // rbx\n  char *v20; // rax\n  char *v21; // rax\n  char v22; // al\n  __int64 v23; // rbx\n  char *v24; // rax\n  char *v25; // rbx\n  char *v26; // rax\n  int v27; // eax\n  char *v28; // rax\n  char *v29; // rax\n  int v30; // eax\n  int v31; // eax\n  __int64 v32; // rbx\n  char *v33; // rax\n  __int64 v34; // r12\n  char *v35; // rbx\n  int *v36; // rax\n  __int64 v37; // r8\n  __int64 v38; // r9\n  const char *v39; // rbx\n  int *v40; // rax\n  __int64 v41; // rbx\n  char *v42; // rax\n  __int64 v43; // rbx\n  char *v44; // rax\n  unsigned __int64 v45; // rax\n  __int64 v46; // rax\n  const char *v47; // rbx\n  int *v48; // rax\n  __int64 v49[18]; // [rsp+0h] [rbp-250h] BYREF\n  char **argv; // [rsp+90h] [rbp-1C0h] BYREF\n  int argc; // [rsp+9Ch] [rbp-1B4h]\n  unsigned int v52; // [rsp+A0h] [rbp-1B0h]\n  int v53; // [rsp+A4h] [rbp-1ACh]\n  int v54; // [rsp+A8h] [rbp-1A8h]\n  int v55; // [rsp+ACh] [rbp-1A4h]\n  unsigned __int64 v56; // [rsp+B0h] [rbp-1A0h] BYREF\n  unsigned __int64 v57; // [rsp+B8h] [rbp-198h] BYREF\n  unsigned __int64 v58; // [rsp+C0h] [rbp-190h]\n  unsigned __int64 v59; // [rsp+C8h] [rbp-188h]\n  unsigned __int64 v60; // [rsp+D0h] [rbp-180h]\n  __off_t v61; // [rsp+D8h] [rbp-178h]\n  char *v62; // [rsp+E0h] [rbp-170h]\n  char *v63; // [rsp+E8h] [rbp-168h]\n  struct stat stat_buf; // [rsp+F0h] [rbp-160h] BYREF\n  struct sigaction v65; // [rsp+180h] [rbp-D0h] BYREF\n  char v66[24]; // [rsp+220h] [rbp-30h] BYREF\n  unsigned __int64 v67; // [rsp+238h] [rbp-18h]\n\n  argc = a1;\n  argv = a2;\n  v67 = __readfsqword(0x28u);\n  v52 = 0;\n  v58 = 0LL;\n  v60 = getpagesize();\n  v56 = 0LL;\n  v53 = 0;\n  sub_40554A(*a2);\n  setlocale(6, &locale);\n  bindtextdomain(\"coreutils\", \"/root/Product/coreutils/exe/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40C850(sub_405111);\n  s1 = (char *)sub_402108((__int64)off_40D563);\n  src = (char *)sub_402108((__int64)\"x\");\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          while ( 1 )\n          {\n            while ( 1 )\n            {\n              if ( optind )\n                v3 = optind;\n              else\n                v3 = 1;\n              v54 = v3;\n              v55 = getopt_long(argc, argv, \"0123456789C:a:b:del:n:u\", &longopts, 0LL);\n              if ( v55 == -1 )\n              {\n                if ( v56 && qword_610540 )\n                {\n                  v28 = gettext(\"--filter does not process a chunk extracted to stdout\");\n                  error(0, 0, v28);\n                  sub_40227B(1);\n                }\n                if ( !v52 )\n                {\n                  v52 = 3;\n                  v57 = 1000LL;\n                }\n                if ( !v57 )\n                {\n                  v29 = gettext(\"%s: invalid number of lines\");\n                  error(0, 0, v29, \"0\");\n                  sub_40227B(1);\n                }\n                sub_4021A2(v57, v52);\n                if ( optind < argc )\n                {\n                  v30 = optind++;\n                  s1 = argv[v30];\n                }\n                if ( optind < argc )\n                {\n                  v31 = optind++;\n                  src = argv[v31];\n                }\n                if ( optind < argc )\n                {\n                  v32 = sub_4060A6(argv[optind]);\n                  v33 = gettext(\"extra operand %s\");\n                  error(0, 0, v33, v32);\n                  sub_40227B(1);\n                }\n                if ( strcmp(s1, off_40D563) && (int)sub_409A8A(0LL, s1, 0LL, 0LL) < 0 )\n                {\n                  v34 = sub_4060A6(s1);\n                  v35 = gettext(\"cannot open %s for reading\");\n                  v36 = __errno_location();\n                  error(1, *v36, v35, v34);\n                }\n                if ( (unsigned int)sub_40C870(0, &stat_buf) )\n                {\n                  v39 = s1;\n                  v40 = __errno_location();\n                  error(1, *v40, \"%s\", v39);\n                }\n                if ( !v58 )\n                {\n                  qmemcpy(v49, &stat_buf, sizeof(v49));\n                  v58 = sub_402116(\n                          (__int64)&argv,\n                          (__int64)&v65,\n                          (__int64)v49,\n                          0LL,\n                          v37,\n                          v38,\n                          v49[0],\n                          v49[1],\n                          v49[2],\n                          v49[3],\n                          v49[4],\n                          v49[5],\n                          v49[6],\n                          v49[7]);\n                }\n                v59 = stat_buf.st_size;\n                if ( v52 == 5 || v52 == 6 )\n                {\n                  v61 = lseek(0, 0LL, 1);\n                  if ( v61 < 0 )\n                  {\n                    v41 = sub_4060A6(s1);\n                    v42 = gettext(\"%s: cannot determine file size\");\n                    error(1, 0, v42, v41);\n                  }\n                  v59 -= v61;\n                  if ( (v57 & 0x8000000000000000LL) != 0LL )\n                  {\n                    v43 = sub_4054C5(v57, v66);\n                    v44 = gettext(\"%s: invalid number of chunks\");\n                    error(1, 27, v44, v43);\n                  }\n                  v45 = v57;\n                  if ( v59 >= v57 )\n                    v45 = v59;\n                  v59 = v45;\n                }\n                v46 = sub_4088C8(v58 + v60);\n                v62 = (char *)sub_401F8C(v46, v60);\n                if ( qword_610540 )\n                {\n                  sigemptyset(&stru_610600);\n                  sigaction(13, 0LL, &v65);\n                  if ( v65.sa_handler != (__sighandler_t)1 )\n                    sigaddset(&stru_610600, 13);\n                  sigprocmask(0, &stru_610600, &oset);\n                }\n                if ( v52 > 4 )\n                {\n                  if ( v52 == 6 )\n                  {\n                    sub_403233(v56, v57, (__int64)v62, v58, v59);\n                  }\n                  else if ( v52 < 6 )\n                  {\n                    if ( v56 )\n                      sub_403644(v56, v57, (__int64)v62, v58, v59);\n                    else\n                      sub_402D9A(v59 / v57, (__int64)v62, v58, v57);\n                  }\n                  else\n                  {\n                    if ( v52 != 7 )\nLABEL_146:\n                      abort();\n                    sub_403AF8(v56, v57, v62, v58);\n                  }\n                }\n                else if ( v52 >= 3 )\n                {\n                  sub_402F3C(v57, v62, v58);\n                }\n                else if ( v52 == 1 )\n                {\n                  sub_402D9A(v57, (__int64)v62, v58, 0LL);\n                }\n                else\n                {\n                  if ( v52 != 2 )\n                    goto LABEL_146;\n                  sub_4030B0(v57);\n                }\n                if ( close(0) )\n                {\n                  v47 = s1;\n                  v48 = __errno_location();\n                  error(1, *v48, \"%s\", v47);\n                }\n                sub_402980(0LL, dword_6102D8, dword_610548, (const char *)dest);\n                exit(0);\n              }\n              if ( v55 != 100 )\n                break;\n              s = \"0123456789\";\n            }\n            if ( v55 <= 100 )\n              break;\n            if ( v55 == 117 )\n            {\n              byte_6106AA = 1;\n            }\n            else if ( v55 > 117 )\n            {\n              switch ( v55 )\n              {\n                case 129:\n                  qword_610540 = (__int64)optarg;\n                  break;\n                case 130:\n                  if ( !(unsigned int)sub_409117(optarg, 0LL, 10LL, &v65, \"bEGKkMmPTYZ0\")\n                    && v65.sa_handler\n                    && (char *)~v60 >= (char *)v65.sa_handler )\n                  {\n                    v58 = (unsigned __int64)v65.sa_handler;\n                  }\n                  else\n                  {\n                    v25 = optarg;\n                    v26 = gettext(\"%s: invalid IO block size\");\n                    error(0, 0, v26, v25);\n                  }\n                  break;\n                case 128:\n                  byte_6106A8 = 1;\n                  break;\n                default:\n                  goto LABEL_96;\n              }\n            }\n            else\n            {\n              switch ( v55 )\n              {\n                case 'l':\n                  if ( v52 )\n                  {\n                    v11 = gettext(\"cannot split in more than one way\");\n                    error(0, 0, v11);\n                    sub_40227B(1);\n                  }\n                  v52 = 3;\n                  if ( (unsigned int)sub_409117(optarg, 0LL, 10LL, &v57, &locale) || !v57 )\n                  {\n                    v12 = optarg;\n                    v13 = gettext(\"%s: invalid number of lines\");\n                    error(0, 0, v13, v12);\n                    sub_40227B(1);\n                  }\n                  break;\n                case 'n':\n                  if ( v52 )\n                  {\n                    v17 = gettext(\"cannot split in more than one way\");\n                    error(0, 0, v17);\n                    sub_40227B(1);\n                  }\n                  while ( 1 )\n                  {\n                    v18 = *__ctype_b_loc();\n                    if ( (v18[(unsigned __int8)sub_401F7D(*optarg)] & 0x2000) == 0 )\n                      break;\n                    ++optarg;\n                  }\n                  if ( !strncmp(optarg, \"r/\", 2uLL) )\n                  {\n                    v52 = 7;\n                    optarg += 2;\n                  }\n                  else if ( !strncmp(optarg, \"l/\", 2uLL) )\n                  {\n                    v52 = 6;\n                    optarg += 2;\n                  }\n                  else\n                  {\n                    v52 = 5;\n                  }\n                  v63 = strchr(optarg, 47);\n                  if ( v63 )\n                  {\n                    sub_4040F0(&v56, &v57, v63);\n                  }\n                  else if ( (unsigned int)sub_409117(optarg, 0LL, 10LL, &v57, &locale) || !v57 )\n                  {\n                    v19 = optarg;\n                    v20 = gettext(\"%s: invalid number of chunks\");\n                    error(1, 0, v20, v19);\n                  }\n                  break;\n                case 'e':\n                  byte_6106A9 = 1;\n                  break;\n                default:\n                  goto LABEL_96;\n              }\n            }\n          }\n          if ( v55 > 57 )\n            break;\n          if ( v55 < 48 )\n          {\n            if ( v55 == -131 )\n            {\n              v27 = sub_405DB6(\"Torbjorn Granlund\", &unk_40D6B5);\n              sub_408660(\n                (_DWORD)stdout,\n                (unsigned int)\"split\",\n                (unsigned int)\"GNU coreutils\",\n                (_DWORD)off_6102E0,\n                v27,\n                (unsigned int)\"Richard M. Stallman\",\n                0);\n              exit(0);\n            }\n            if ( v55 == -130 )\n              sub_40227B(0);\nLABEL_96:\n            sub_40227B(1);\n          }\n          if ( !v52 )\n          {\n            v52 = 4;\n            v57 = 0LL;\n          }\n          if ( v52 != 4 )\n          {\n            v21 = gettext(\"cannot split in more than one way\");\n            error(0, 0, v21);\n            sub_40227B(1);\n          }\n          if ( v53 && v53 != v54 )\n            v57 = 0LL;\n          v53 = v54;\n          if ( v57 > 0x1999999999999999LL || v55 - 48 + 10 * v57 < v57 )\n          {\n            v22 = 1;\n          }\n          else\n          {\n            v57 = 10 * v57 + v55 - 48;\n            v22 = 0;\n          }\n          if ( v22 )\n          {\n            v23 = sub_4054C5(v57, v66);\n            v24 = gettext(\"line count option -%s%c... is too large\");\n            error(1, 0, v24, v23, (unsigned int)v55);\n          }\n        }\n        if ( v55 != 97 )\n          break;\n        if ( (unsigned int)sub_408C0B(optarg, 0LL, 10LL, &v65, &locale)\n          || (char *)v65.sa_handler > (char *)0x1FFFFFFFFFFFFFFFLL )\n        {\n          v4 = optarg;\n          v5 = gettext(\"%s: invalid suffix length\");\n          error(0, 0, v5, v4);\n          sub_40227B(1);\n        }\n        n = (size_t)v65.sa_handler;\n      }\n      if ( v55 != 98 )\n        break;\n      if ( v52 )\n      {\n        v6 = gettext(\"cannot split in more than one way\");\n        error(0, 0, v6);\n        sub_40227B(1);\n      }\n      v52 = 1;\n      if ( (unsigned int)sub_409117(optarg, 0LL, 10LL, &v57, \"bEGKkMmPTYZ0\") || !v57 )\n      {\n        v7 = optarg;\n        v8 = gettext(\"%s: invalid number of bytes\");\n        error(0, 0, v8, v7);\n        sub_40227B(1);\n      }\n      if ( (v57 & 0x8000000000000000LL) != 0LL )\n        goto LABEL_39;\n    }\n    if ( v55 != 67 )\n      goto LABEL_96;\n    if ( v52 )\n    {\n      v14 = gettext(\"cannot split in more than one way\");\n      error(0, 0, v14);\n      sub_40227B(1);\n    }\n    v52 = 2;\n    if ( (unsigned int)sub_409117(optarg, 0LL, 10LL, &v57, \"bEGKkMmPTYZ0\") || !v57 )\n    {\n      v15 = optarg;\n      v16 = gettext(\"%s: invalid number of bytes\");\n      error(0, 0, v16, v15);\n      sub_40227B(1);\n    }\n    if ( (v57 & 0x8000000000000000LL) != 0LL )\n    {\nLABEL_39:\n      v9 = optarg;\n      v10 = gettext(\"%s: invalid number of bytes\");\n      error(1, 27, v10, v9);\n    }\n  }\n}\n"], [4215036, "sub_4050FC", "__int64 __fastcall sub_4050FC(unsigned __int8 a1)\n{\n  __int64 result; // rax\n\n  result = a1;\n  byte_6106C0 = a1;\n  return result;\n}\n"], [4215057, "sub_405111", "__int64 sub_405111()\n{\n  const char *v0; // rbx\n  int *v1; // rax\n  int *v2; // rax\n  __int64 result; // rax\n  char *v4; // [rsp+8h] [rbp-18h]\n\n  if ( (unsigned int)sub_409B7A(stdout) && (byte_6106C0 != 1 || *__errno_location() != 32) )\n  {\n    v4 = gettext(\"write error\");\n    if ( qword_6106B8 )\n    {\n      v0 = (const char *)sub_4076BF(qword_6106B8);\n      v1 = __errno_location();\n      error(0, *v1, \"%s: %s\", v0, v4);\n    }\n    else\n    {\n      v2 = __errno_location();\n      error(0, *v2, \"%s\", v4);\n    }\n    _exit(status);\n  }\n  result = sub_409B7A(stderr);\n  if ( (_DWORD)result )\n    _exit(status);\n  return result;\n}\n"], [4215292, "sub_4051FC", "_BYTE *__fastcall sub_4051FC(_BYTE *a1)\n{\n  char v2; // [rsp+17h] [rbp-11h]\n  _BYTE *i; // [rsp+20h] [rbp-8h]\n\n  v2 = 0;\n  while ( *a1 == 47 )\n    ++a1;\n  for ( i = a1; *i; ++i )\n  {\n    if ( *i == 47 )\n    {\n      v2 = 1;\n    }\n    else if ( v2 )\n    {\n      a1 = i;\n      v2 = 0;\n    }\n  }\n  return a1;\n}\n"], [4215397, "sub_405265", "size_t __fastcall sub_405265(const char *a1)\n{\n  size_t i; // [rsp+10h] [rbp-10h]\n\n  for ( i = strlen(a1); i > 1 && a1[i - 1] == 47; --i )\n    ;\n  return i;\n}\n"], [4215475, "sub_4052B3", "__int64 __fastcall sub_4052B3(const char *a1, char a2, unsigned int a3)\n{\n  unsigned int v3; // eax\n  unsigned int v5; // [rsp+14h] [rbp-CCh]\n\n  v5 = 0;\n  if ( (a2 & 0x40) != 0 )\n    v5 = a3;\n  v3 = open(a1, a2, v5);\n  return sub_407EE1(v3);\n}\n"], [4215749, "sub_4053C5", "__int64 __fastcall sub_4053C5(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v5; // [rsp+28h] [rbp-18h]\n  __int64 v7; // [rsp+38h] [rbp-8h]\n\n  v5 = 0LL;\n  while ( a3 )\n  {\n    v7 = sub_40783E(a1, a2, a3);\n    if ( v7 == -1 )\n      break;\n    if ( !v7 )\n    {\n      *__errno_location() = 0;\n      return v5;\n    }\n    v5 += v7;\n    a2 += v7;\n    a3 -= v7;\n  }\n  return v5;\n}\n"], [4215877, "sub_405445", "__int64 __fastcall sub_405445(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v5; // [rsp+28h] [rbp-18h]\n  __int64 v7; // [rsp+38h] [rbp-8h]\n\n  v5 = 0LL;\n  while ( a3 )\n  {\n    v7 = sub_4078AF(a1, a2, a3);\n    if ( v7 == -1 )\n      break;\n    if ( !v7 )\n    {\n      *__errno_location() = 28;\n      return v5;\n    }\n    v5 += v7;\n    a2 += v7;\n    a3 -= v7;\n  }\n  return v5;\n}\n"], [4216005, "sub_4054C5", "__int64 __fastcall sub_4054C5(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  do\n  {\n    *(_BYTE *)--v4 = a1 % 0xA + 48;\n    a1 /= 0xAuLL;\n  }\n  while ( a1 );\n  return v4;\n}\n"], [4216138, "sub_40554A", "char *__fastcall sub_40554A(const char *a1)\n{\n  char *v1; // rax\n  char *result; // rax\n  char *s; // [rsp+8h] [rbp-18h]\n  char *v4; // [rsp+10h] [rbp-10h]\n  char *s1; // [rsp+18h] [rbp-8h]\n\n  s = (char *)a1;\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v4 = strrchr(a1, 47);\n  if ( v4 )\n    v1 = v4 + 1;\n  else\n    v1 = (char *)a1;\n  s1 = v1;\n  if ( v1 - a1 > 6 && !strncmp(v1 - 7, \"/.libs/\", 7uLL) )\n  {\n    s = s1;\n    if ( !strncmp(s1, \"lt-\", 3uLL) )\n    {\n      s = s1 + 3;\n      program_invocation_short_name = (__int64)(s1 + 3);\n    }\n  }\n  qword_6106C8 = (__int64)s;\n  result = s;\n  program_invocation_name = (__int64)s;\n  return result;\n}\n"], [4216369, "sub_405631", "bool __fastcall sub_405631(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_40DEC0[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4216423, "sub_405667", "__int64 __fastcall sub_405667(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  size_t v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_405631(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_407920(*(_QWORD *)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4216903, "sub_405847", "__int64 __fastcall sub_405847(_BYTE *a1, __int64 a2)\n{\n  size_t v7; // rax\n  unsigned __int8 v10; // [rsp+13h] [rbp-ADh]\n  char v11; // [rsp+14h] [rbp-ACh]\n  char v12; // [rsp+15h] [rbp-ABh]\n  char v13; // [rsp+16h] [rbp-AAh]\n  char v14; // [rsp+17h] [rbp-A9h]\n  char *s; // [rsp+18h] [rbp-A8h]\n  _BYTE *v16; // [rsp+20h] [rbp-A0h]\n  char v17[4]; // [rsp+30h] [rbp-90h] BYREF\n  int v18; // [rsp+34h] [rbp-8Ch] BYREF\n  char v19; // [rsp+3Ch] [rbp-84h]\n  unsigned __int64 v20; // [rsp+40h] [rbp-80h]\n  __int64 v21; // [rsp+48h] [rbp-78h]\n  __int64 v22; // [rsp+50h] [rbp-70h]\n  __int64 v23; // [rsp+58h] [rbp-68h]\n  __int64 v24; // [rsp+60h] [rbp-60h]\n  __int64 v25; // [rsp+68h] [rbp-58h]\n  unsigned __int64 v26; // [rsp+70h] [rbp-50h] BYREF\n  __int64 v27; // [rsp+78h] [rbp-48h]\n  wint_t wc[2]; // [rsp+80h] [rbp-40h]\n  __int64 v29; // [rsp+88h] [rbp-38h]\n  __int64 v30; // [rsp+90h] [rbp-30h]\n  __int64 v31; // [rsp+98h] [rbp-28h]\n  unsigned __int64 v32; // [rsp+B8h] [rbp-8h]\n\n  v32 = __readfsqword(0x28u);\n  s = (char *)sub_407B82(a2, 2LL);\n  v10 = 0;\n  while ( *a1 )\n  {\n    v16 = (_BYTE *)sub_40AE01(a1, s);\n    if ( !v16 )\n      break;\n    if ( __ctype_get_mb_cur_max() <= 1 )\n    {\n      v13 = 1;\n      if ( a1 < v16 && ((*__ctype_b_loc())[(unsigned __int8)*(v16 - 1)] & 8) != 0 )\n        v13 = 0;\n      v7 = strlen(s);\n      v14 = 1;\n      if ( v16[v7] && ((*__ctype_b_loc())[(unsigned __int8)v16[v7]] & 8) != 0 )\n        v14 = 0;\n      if ( v13 && v14 )\n      {\n        v10 = 1;\n        break;\n      }\n      if ( !*v16 )\n        break;\n      a1 = v16 + 1;\n    }\n    else\n    {\n      v20 = (unsigned __int64)a1;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      v11 = 1;\n      if ( v20 < (unsigned __int64)v16 )\n      {\n        do\n        {\n          sub_405667((__int64)v17);\n          if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n            abort();\n          v26 = v20;\n          v27 = v21;\n          *(_QWORD *)wc = v22;\n          v29 = v23;\n          v30 = v24;\n          v31 = v25;\n          v20 += v21;\n          v19 = 0;\n        }\n        while ( v20 < (unsigned __int64)v16 );\n        if ( LOBYTE(wc[0]) && iswalnum(wc[1]) )\n          v11 = 0;\n      }\n      v20 = (unsigned __int64)v16;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      *(_QWORD *)wc = s;\n      LOBYTE(v26) = 0;\n      memset((char *)&v26 + 4, 0, sizeof(unsigned __int64));\n      for ( BYTE4(v27) = 0; ; BYTE4(v27) = 0 )\n      {\n        sub_405667((__int64)&v26);\n        if ( (unsigned __int8)v30 == 1 && !HIDWORD(v30) )\n          break;\n        sub_405667((__int64)v17);\n        if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n          abort();\n        v20 += v21;\n        v19 = 0;\n        *(_QWORD *)wc += v29;\n      }\n      v12 = 1;\n      sub_405667((__int64)v17);\n      if ( (unsigned __int8)v22 != 1 || HIDWORD(v22) )\n      {\n        v26 = v20;\n        v27 = v21;\n        *(_QWORD *)wc = v22;\n        v29 = v23;\n        v30 = v24;\n        v31 = v25;\n        if ( (_BYTE)v22 )\n        {\n          if ( iswalnum(wc[1]) )\n            v12 = 0;\n        }\n      }\n      if ( v11 && v12 )\n      {\n        v10 = 1;\n        break;\n      }\n      v20 = (unsigned __int64)v16;\n      v17[0] = 0;\n      memset(&v18, 0, 8uLL);\n      v19 = 0;\n      sub_405667((__int64)v17);\n      if ( (unsigned __int8)v22 == 1 && !HIDWORD(v22) )\n        break;\n      a1 = &v16[v21];\n    }\n  }\n  free(s);\n  return v10;\n}\n"], [4218133, "sub_405D15", "const char *__fastcall sub_405D15(const char *a1)\n{\n  size_t v2; // rbx\n  size_t v3; // rax\n  char *s; // [rsp+10h] [rbp-20h]\n  char *v5; // [rsp+18h] [rbp-18h]\n\n  s = gettext(a1);\n  if ( s == a1 )\n    return a1;\n  if ( (unsigned __int8)sub_405847(s, (__int64)a1) )\n    return s;\n  v2 = strlen(s);\n  v3 = strlen(a1);\n  v5 = (char *)sub_4088C8(v2 + v3 + 4);\n  sprintf(v5, \"%s (%s)\", s, a1);\n  return v5;\n}\n"], [4218294, "sub_405DB6", "char *__fastcall sub_405DB6(const char *a1, __int64 a2)\n{\n  char *v2; // rax\n  char *result; // rax\n  size_t v4; // rbx\n  size_t v5; // rax\n  char *ptr; // [rsp+18h] [rbp-68h]\n  char *v7; // [rsp+20h] [rbp-60h]\n  __int64 v8; // [rsp+28h] [rbp-58h]\n  __int64 v9; // [rsp+30h] [rbp-50h]\n  char *s1; // [rsp+38h] [rbp-48h]\n  char *s; // [rsp+40h] [rbp-40h]\n  size_t n; // [rsp+48h] [rbp-38h]\n  char *dest; // [rsp+50h] [rbp-30h]\n  char *v14; // [rsp+58h] [rbp-28h]\n  char *v15; // [rsp+60h] [rbp-20h]\n  char *v16; // [rsp+68h] [rbp-18h]\n\n  s1 = gettext(a1);\n  s = (char *)sub_40A0EB();\n  ptr = 0LL;\n  v7 = 0LL;\n  v9 = 0LL;\n  if ( (unsigned int)sub_409B03(s, \"UTF-8\") )\n  {\n    ptr = (char *)sub_408B1E(a2, \"UTF-8\", s);\n    v8 = (__int64)ptr;\n    n = strlen(s);\n    dest = (char *)sub_4088C8(n + 11);\n    memcpy(dest, s, n);\n    memcpy(&dest[n], \"//TRANSLIT\", 0xBuLL);\n    v14 = (char *)sub_408B1E(a2, \"UTF-8\", dest);\n    free(dest);\n    if ( v14 )\n    {\n      if ( strchr(v14, 63) )\n      {\n        free(v14);\n      }\n      else\n      {\n        v7 = v14;\n        v9 = (__int64)v14;\n      }\n    }\n  }\n  else\n  {\n    v8 = a2;\n    v9 = a2;\n  }\n  if ( v8 )\n  {\n    v2 = (char *)v8;\n  }\n  else if ( v9 )\n  {\n    v2 = (char *)v9;\n  }\n  else\n  {\n    v2 = (char *)a1;\n  }\n  v15 = v2;\n  if ( !strcmp(s1, a1) )\n  {\n    if ( ptr && ptr != v15 )\n      free(ptr);\n    if ( v7 && v7 != v15 )\n      free(v7);\n    result = v15;\n  }\n  else if ( (unsigned __int8)sub_405847(s1, (__int64)a1)\n         || v8 && (unsigned __int8)sub_405847(s1, v8)\n         || v9 && (unsigned __int8)sub_405847(s1, v9) )\n  {\n    if ( ptr )\n      free(ptr);\n    if ( v7 )\n      free(v7);\n    result = s1;\n  }\n  else\n  {\n    v4 = strlen(s1);\n    v5 = strlen(v15);\n    v16 = (char *)sub_4088C8(v4 + v5 + 4);\n    sprintf(v16, \"%s (%s)\", s1, v15);\n    if ( ptr )\n      free(ptr);\n    if ( v7 )\n      free(v7);\n    result = v16;\n  }\n  return result;\n}\n"], [4219010, "sub_406082", "__int64 __fastcall sub_406082(unsigned int a1, __int64 a2)\n{\n  return sub_407531(a1, 6LL, a2);\n}\n"], [4219046, "sub_4060A6", "__int64 __fastcall sub_4060A6(__int64 a1)\n{\n  return sub_406082(0, a1);\n}\n"], [4219077, "sub_4060C5", "__int64 __fastcall sub_4060C5(__int64 *a1)\n{\n  __int64 *v1; // rax\n  int v3; // [rsp+14h] [rbp-Ch]\n  __int64 v4; // [rsp+18h] [rbp-8h]\n\n  v3 = *__errno_location();\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_6106E0;\n  v4 = sub_4089EC(v1, 56LL);\n  *__errno_location() = v3;\n  return v4;\n}\n"], [4219150, "sub_40610E", "__int64 __fastcall sub_40610E(__int64 *a1)\n{\n  __int64 *v1; // rax\n\n  if ( a1 )\n    v1 = a1;\n  else\n    v1 = &qword_6106E0;\n  return *(unsigned int *)v1;\n}\n"], [4219180, "sub_40612C", "__int64 *__fastcall sub_40612C(__int64 *a1, int a2)\n{\n  __int64 *result; // rax\n\n  if ( a1 )\n    result = a1;\n  else\n    result = &qword_6106E0;\n  *(_DWORD *)result = a2;\n  return result;\n}\n"], [4219216, "sub_406150", "__int64 __fastcall sub_406150(__int64 *a1, unsigned __int8 a2, char a3)\n{\n  __int64 *v3; // rax\n  unsigned int v5; // [rsp+24h] [rbp-Ch]\n\n  if ( a1 )\n    v3 = a1;\n  else\n    v3 = &qword_6106E0;\n  v5 = (*((_DWORD *)v3 + (a2 >> 5) + 2) >> (a2 & 0x1F)) & 1;\n  *((_DWORD *)v3 + (a2 >> 5) + 2) ^= (v5 ^ a3 & 1) << (a2 & 0x1F);\n  return v5;\n}\n"], [4219352, "sub_4061D8", "__int64 __fastcall sub_4061D8(__int64 *a1, int a2)\n{\n  __int64 *v3; // [rsp+4h] [rbp-18h]\n  unsigned int v4; // [rsp+18h] [rbp-4h]\n\n  v3 = a1;\n  if ( !a1 )\n    v3 = &qword_6106E0;\n  v4 = *((_DWORD *)v3 + 1);\n  *((_DWORD *)v3 + 1) = a2;\n  return v4;\n}\n"], [4219403, "sub_40620B", "__int64 *__fastcall sub_40620B(__int64 *a1, __int64 a2, __int64 a3)\n{\n  __int64 *result; // rax\n  __int64 *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = a1;\n  if ( !a1 )\n    v4 = &qword_6106E0;\n  *(_DWORD *)v4 = 8;\n  if ( !a2 || !a3 )\n    abort();\n  v4[5] = a2;\n  result = v4;\n  v4[6] = a3;\n  return result;\n}\n"], [4219493, "sub_406265", "_QWORD *__fastcall sub_406265(_QWORD *a1, int a2)\n{\n  __int64 v3[7]; // [rsp+10h] [rbp-40h] BYREF\n\n  memset(v3, 0, sizeof(v3));\n  if ( a2 == 8 )\n    abort();\n  LODWORD(v3[0]) = a2;\n  *a1 = v3[0];\n  a1[1] = v3[1];\n  a1[2] = v3[2];\n  a1[3] = v3[3];\n  a1[4] = v3[4];\n  a1[5] = v3[5];\n  a1[6] = v3[6];\n  return a1;\n}\n"], [4219613, "sub_4062DD", "char *__fastcall sub_4062DD(const char *a1, int a2)\n{\n  char *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = gettext(a1);\n  if ( v3 == a1 && a2 == 7 )\n    v3 = (char *)L\"\\\"`'\";\n  return v3;\n}\n"], [4219674, "sub_40631A", "unsigned __int64 __fastcall sub_40631A(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, unsigned int a5, int a6, __int64 a7, char *a8, char *a9)\n{\n  int v9; // eax\n  bool v10; // al\n  int v11; // eax\n  char v20; // [rsp+65h] [rbp-6Bh]\n  bool v21; // [rsp+66h] [rbp-6Ah]\n  unsigned __int8 v22; // [rsp+67h] [rbp-69h]\n  char v23; // [rsp+68h] [rbp-68h]\n  char v24; // [rsp+69h] [rbp-67h]\n  bool v25; // [rsp+6Ah] [rbp-66h]\n  bool v26; // [rsp+6Bh] [rbp-65h]\n  wchar_t pwc; // [rsp+6Ch] [rbp-64h] BYREF\n  __int64 i; // [rsp+70h] [rbp-60h]\n  unsigned __int64 v29; // [rsp+78h] [rbp-58h]\n  char *s; // [rsp+80h] [rbp-50h]\n  size_t n; // [rsp+88h] [rbp-48h]\n  unsigned __int64 v32; // [rsp+90h] [rbp-40h]\n  unsigned __int64 j; // [rsp+98h] [rbp-38h]\n  size_t v34; // [rsp+A0h] [rbp-30h]\n  unsigned __int64 v35; // [rsp+A8h] [rbp-28h]\n  mbstate_t p; // [rsp+B0h] [rbp-20h] BYREF\n  unsigned __int64 v37; // [rsp+B8h] [rbp-18h]\n\n  v37 = __readfsqword(0x28u);\n  v29 = 0LL;\n  s = 0LL;\n  n = 0LL;\n  v20 = 0;\n  v26 = __ctype_get_mb_cur_max() == 1;\n  v21 = (a6 & 2) != 0;\n  if ( a5 == 3 )\n    goto LABEL_11;\n  if ( a5 > 3 )\n  {\n    if ( a5 == 5 )\n    {\n      v20 = 1;\n      v21 = 0;\n      goto LABEL_33;\n    }\n    if ( a5 >= 5 )\n    {\n      if ( a5 > 8 )\n        abort();\n      if ( a5 != 8 )\n      {\n        a8 = sub_4062DD((const char *)L\"`'\", a5);\n        a9 = sub_4062DD((const char *)L\"'\", a5);\n      }\n      if ( (a6 & 2) == 0 )\n      {\n        for ( s = a8; *s; ++s )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(v29 + a1) = *s;\n          ++v29;\n        }\n      }\n      v20 = 1;\n      s = a9;\n      n = strlen(a9);\n      goto LABEL_33;\n    }\n    a5 = 3;\n    v21 = 1;\nLABEL_11:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 34;\n      ++v29;\n    }\n    v20 = 1;\n    s = (char *)L\"\\\"`'\";\n    n = 1LL;\n    goto LABEL_33;\n  }\n  if ( a5 == 1 )\n  {\n    a5 = 2;\n    v21 = 1;\n    goto LABEL_27;\n  }\n  if ( a5 > 1 )\n  {\nLABEL_27:\n    if ( !v21 )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(a1 + v29) = 39;\n      ++v29;\n    }\n    s = (_BYTE *)(L\"\\\"`'\" + 4);\n    n = 1LL;\n    goto LABEL_33;\n  }\n  v21 = 0;\nLABEL_33:\n  for ( i = 0LL; a4 == -1LL ? *(_BYTE *)(a3 + i) != 0 : i != a4; ++i )\n  {\n    v24 = 0;\n    if ( v20 && n && i + n <= a4 && !memcmp((const void *)(a3 + i), s, n) )\n    {\n      if ( v21 )\n        return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n      v24 = 1;\n    }\n    v22 = *(_BYTE *)(a3 + i);\n    if ( v22 > 0x3Au )\n    {\n      if ( v22 == 94 )\n        goto LABEL_144;\n      if ( v22 > 0x5Eu )\n      {\n        if ( v22 <= 0x7Au )\n        {\n          if ( v22 >= 0x61u || v22 == 95 )\n            goto LABEL_206;\n          goto LABEL_144;\n        }\n        if ( v22 != 124 )\n        {\n          if ( v22 < 0x7Cu || v22 == 125 )\n          {\n            if ( a4 == -1LL )\n              v10 = *(_BYTE *)(a3 + 1) != 0;\n            else\n              v10 = a4 != 1;\n            if ( v10 )\n              goto LABEL_206;\n          }\n          else if ( v22 != 126 )\n          {\nLABEL_157:\n            if ( v26 )\n            {\n              v32 = 1LL;\n              v25 = ((*__ctype_b_loc())[v22] & 0x4000) != 0;\n            }\n            else\n            {\n              memset(&p, 0, sizeof(p));\n              v32 = 0LL;\n              v25 = 1;\n              if ( a4 == -1LL )\n                a4 = strlen((const char *)a3);\n              do\n              {\n                v34 = mbrtowc(&pwc, (const char *)(v32 + i + a3), a4 - (v32 + i), &p);\n                if ( !v34 )\n                  break;\n                if ( v34 == -1LL )\n                {\n                  v25 = 0;\n                  break;\n                }\n                if ( v34 == -2LL )\n                {\n                  v25 = 0;\n                  while ( i + v32 < a4 && *(_BYTE *)(v32 + i + a3) )\n                    ++v32;\n                  break;\n                }\n                if ( v21 && a5 == 2 )\n                {\n                  for ( j = 1LL; j < v34; ++j )\n                  {\n                    v11 = *(char *)(j + v32 + i + a3);\n                    if ( v11 == 94 )\n                      return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    if ( v11 > 94 )\n                    {\n                      if ( v11 == 96 || v11 == 124 )\n                        return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                    else if ( (unsigned int)(v11 - 91) <= 1 )\n                    {\n                      return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                    }\n                  }\n                }\n                if ( !iswprint(pwc) )\n                  v25 = 0;\n                v32 += v34;\n              }\n              while ( !mbsinit(&p) );\n            }\n            if ( v32 > 1 || v20 && !v25 )\n            {\n              v35 = i + v32;\n              while ( 1 )\n              {\n                if ( v20 && !v25 )\n                {\n                  if ( v21 )\n                    return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = (v22 >> 6) + 48;\n                  if ( ++v29 < a2 )\n                    *(_BYTE *)(v29 + a1) = ((v22 >> 3) & 7) + 48;\n                  ++v29;\n                  v22 = (v22 & 7) + 48;\n                }\n                else if ( v24 )\n                {\n                  if ( v29 < a2 )\n                    *(_BYTE *)(a1 + v29) = 92;\n                  ++v29;\n                  v24 = 0;\n                }\n                if ( i + 1 >= v35 )\n                  break;\n                if ( v29 < a2 )\n                  *(_BYTE *)(v29 + a1) = v22;\n                ++v29;\n                ++i;\n                v22 = *(_BYTE *)(a3 + i);\n              }\n              goto LABEL_215;\n            }\n            goto LABEL_206;\n          }\n          goto LABEL_143;\n        }\nLABEL_144:\n        if ( a5 == 2 && v21 )\n          return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        goto LABEL_206;\n      }\n      if ( v22 > 0x5Au )\n      {\n        if ( v22 == 92 )\n        {\n          v23 = *(_BYTE *)(a3 + i);\n          if ( v20 && v21 && n )\n            goto LABEL_215;\n          goto LABEL_134;\n        }\n        if ( v22 <= 0x5Cu )\n          goto LABEL_144;\n      }\n      else\n      {\n        if ( v22 >= 0x41u )\n          goto LABEL_206;\n        if ( v22 <= 0x3Eu )\n          goto LABEL_144;\n        if ( v22 != 63 )\n          goto LABEL_157;\n        if ( a5 == 2 )\n        {\n          if ( v21 )\n            return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        }\n        else if ( a5 == 3 && (a6 & 4) != 0 && i + 2 < a4 && *(_BYTE *)(i + 1 + a3) == 63 )\n        {\n          v9 = *(char *)(i + 2 + a3);\n          if ( v9 != 45 )\n          {\n            if ( v9 > 45 )\n            {\n              if ( v9 != 47 && (v9 < 47 || (unsigned int)(v9 - 60) > 2) )\n                goto LABEL_206;\n            }\n            else if ( v9 != 33 && (v9 < 33 || (unsigned int)(v9 - 39) > 2) )\n            {\n              goto LABEL_206;\n            }\n          }\n          if ( v21 )\n            return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          v22 = *(_BYTE *)(i + 2 + a3);\n          i += 2LL;\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 34;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 63;\n          ++v29;\n        }\n      }\n    }\n    else\n    {\n      if ( v22 >= 0x2Bu )\n        goto LABEL_206;\n      if ( v22 > 0x22u )\n      {\n        if ( v22 != 38 )\n        {\n          if ( v22 > 0x26u )\n          {\n            if ( v22 == 39 )\n            {\n              if ( a5 == 2 )\n              {\n                if ( v21 )\n                  return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n                if ( v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 92;\n                if ( ++v29 < a2 )\n                  *(_BYTE *)(a1 + v29) = 39;\n                ++v29;\n              }\n              goto LABEL_206;\n            }\n            goto LABEL_144;\n          }\n          if ( v22 != 36 )\n          {\n            if ( v22 > 0x24u )\n              goto LABEL_206;\nLABEL_143:\n            if ( i )\n              goto LABEL_206;\n          }\n        }\n        goto LABEL_144;\n      }\n      if ( v22 >= 0x20u )\n        goto LABEL_144;\n      if ( v22 == 9 )\n      {\n        v23 = 116;\n        goto LABEL_134;\n      }\n      if ( v22 > 9u )\n      {\n        if ( v22 == 11 )\n        {\n          v23 = 118;\n        }\n        else\n        {\n          if ( v22 < 0xBu )\n          {\n            v23 = 110;\n            goto LABEL_134;\n          }\n          if ( v22 == 12 )\n          {\n            v23 = 102;\n          }\n          else\n          {\n            if ( v22 != 13 )\n              goto LABEL_157;\n            v23 = 114;\nLABEL_134:\n            if ( a5 == 2 && v21 )\n              return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          }\n        }\nLABEL_136:\n        if ( v20 )\n        {\n          v22 = v23;\nLABEL_211:\n          if ( v21 )\n            return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 92;\n          ++v29;\n          goto LABEL_215;\n        }\n        goto LABEL_206;\n      }\n      if ( v22 == 7 )\n      {\n        v23 = 97;\n        goto LABEL_136;\n      }\n      if ( v22 > 7u )\n      {\n        v23 = 98;\n        goto LABEL_136;\n      }\n      if ( v22 )\n        goto LABEL_157;\n      if ( v20 )\n      {\n        if ( v21 )\n          return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n        if ( v29 < a2 )\n          *(_BYTE *)(a1 + v29) = 92;\n        ++v29;\n        if ( i + 1 < a4 && *(char *)(i + 1 + a3) > 47 && *(char *)(i + 1 + a3) <= 57 )\n        {\n          if ( v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          if ( ++v29 < a2 )\n            *(_BYTE *)(a1 + v29) = 48;\n          ++v29;\n        }\n        v22 = 48;\n      }\n      else if ( (a6 & 1) != 0 )\n      {\n        continue;\n      }\n    }\nLABEL_206:\n    if ( (v20 == 1 || v21) && a7 && (*(_DWORD *)(4LL * (v22 >> 5) + a7) & (1 << (v22 & 0x1F))) != 0 || v24 == 1 )\n      goto LABEL_211;\nLABEL_215:\n    if ( v29 < a2 )\n      *(_BYTE *)(v29 + a1) = v22;\n    ++v29;\n  }\n  if ( !v29 && a5 == 2 && v21 )\n    return sub_40631A(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, (__int64)a9);\n  if ( s && !v21 )\n  {\n    while ( *s )\n    {\n      if ( v29 < a2 )\n        *(_BYTE *)(v29 + a1) = *s;\n      ++v29;\n      ++s;\n    }\n  }\n  if ( v29 < a2 )\n    *(_BYTE *)(a1 + v29) = 0;\n  return v29;\n}\n"], [4222821, "sub_406F65", "unsigned __int64 __fastcall sub_406F65(__int64 a1, unsigned __int64 a2, __int64 a3, size_t a4, __int64 *a5)\n{\n  __int64 *v5; // rax\n  int v9; // [rsp+4Ch] [rbp-14h]\n  __int64 *v10; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a5 )\n    v5 = a5;\n  else\n    v5 = &qword_6106E0;\n  v10 = v5;\n  v9 = *__errno_location();\n  v11 = sub_40631A(\n          a1,\n          a2,\n          a3,\n          a4,\n          *(_DWORD *)v10,\n          *((_DWORD *)v10 + 1),\n          (__int64)(v10 + 1),\n          (char *)v10[5],\n          (char *)v10[6]);\n  *__errno_location() = v9;\n  return v11;\n}\n"], [4222981, "sub_407005", "__int64 __fastcall sub_407005(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_407037(a1, a2, 0LL, a3);\n}\n"], [4223031, "sub_407037", "__int64 __fastcall sub_407037(__int64 a1, size_t a2, _QWORD *a3, __int64 *a4)\n{\n  __int64 *v4; // rax\n  int v7; // [rsp+40h] [rbp-20h]\n  int v8; // [rsp+44h] [rbp-1Ch]\n  __int64 *v9; // [rsp+48h] [rbp-18h]\n  unsigned __int64 v10; // [rsp+50h] [rbp-10h]\n  __int64 v11; // [rsp+58h] [rbp-8h]\n\n  if ( a4 )\n    v4 = a4;\n  else\n    v4 = &qword_6106E0;\n  v9 = v4;\n  v7 = *__errno_location();\n  v8 = *((_DWORD *)v9 + 1) | (a3 == 0LL);\n  v10 = sub_40631A(0LL, 0LL, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]) + 1;\n  v11 = sub_4088AE(v10);\n  sub_40631A(v11, v10, a1, a2, *(_DWORD *)v9, v8, (__int64)(v9 + 1), (char *)v9[5], (char *)v9[6]);\n  *__errno_location() = v7;\n  if ( a3 )\n    *a3 = v10 - 1;\n  return v11;\n}\n"], [4223331, "sub_407163", "void sub_407163()\n{\n  unsigned int i; // [rsp+4h] [rbp-Ch]\n  void **ptr; // [rsp+8h] [rbp-8h]\n\n  ptr = (void **)off_610310;\n  for ( i = 1; i < dword_6102F0; ++i )\n    free(ptr[2 * i + 1]);\n  if ( ptr[1] != &unk_610720 )\n  {\n    free(ptr[1]);\n    qword_610300 = 256LL;\n    off_610308 = &unk_610720;\n  }\n  if ( ptr != (void **)&qword_610300 )\n  {\n    free(ptr);\n    off_610310 = &qword_610300;\n  }\n  dword_6102F0 = 1;\n}\n"], [4223502, "sub_40720E", "void *__fastcall sub_40720E(int a1, __int64 a2, size_t a3, __int64 a4)\n{\n  __int64 *v4; // rax\n  void *v5; // rdx\n  bool v9; // [rsp+4Bh] [rbp-45h]\n  int v10; // [rsp+4Ch] [rbp-44h]\n  int v11; // [rsp+54h] [rbp-3Ch]\n  __int64 *v12; // [rsp+58h] [rbp-38h]\n  void *ptr; // [rsp+60h] [rbp-30h]\n  __int64 v14; // [rsp+68h] [rbp-28h]\n  unsigned __int64 v15; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v16; // [rsp+70h] [rbp-20h]\n  unsigned __int64 v17; // [rsp+78h] [rbp-18h]\n\n  v10 = *__errno_location();\n  v12 = off_610310;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= (unsigned int)a1 )\n  {\n    v14 = (unsigned int)(a1 + 1);\n    v9 = off_610310 == &qword_610300;\n    if ( off_610310 == &qword_610300 )\n      v4 = 0LL;\n    else\n      v4 = off_610310;\n    v12 = (__int64 *)sub_4088FD(v4, 16 * v14);\n    off_610310 = v12;\n    if ( v9 )\n    {\n      v5 = off_610308;\n      *v12 = qword_610300;\n      v12[1] = (__int64)v5;\n    }\n    memset(&v12[2 * (unsigned int)dword_6102F0], 0, 16 * (v14 - (unsigned int)dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v15 = v12[2 * a1];\n  ptr = (void *)v12[2 * a1 + 1];\n  v11 = *(_DWORD *)(a4 + 4) | 1;\n  v17 = sub_40631A((__int64)ptr, v15, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v15 <= v17 )\n  {\n    v16 = v17 + 1;\n    v12[2 * a1] = v17 + 1;\n    if ( ptr != &unk_610720 )\n      free(ptr);\n    ptr = (void *)sub_4088AE(v16);\n    v12[2 * a1 + 1] = (__int64)ptr;\n    sub_40631A((__int64)ptr, v16, a2, a3, *(_DWORD *)a4, v11, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *__errno_location() = v10;\n  return ptr;\n}\n"], [4224148, "sub_407494", "void *__fastcall sub_407494(int a1, __int64 a2)\n{\n  return sub_40720E(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&qword_6106E0);\n}\n"], [4224191, "sub_4074BF", "void *__fastcall sub_4074BF(int a1, __int64 a2, size_t a3)\n{\n  return sub_40720E(a1, a2, a3, (__int64)&qword_6106E0);\n}\n"], [4224235, "sub_4074EB", "void *__fastcall sub_4074EB(__int64 a1)\n{\n  return sub_407494(0, a1);\n}\n"], [4224266, "sub_40750A", "void *__fastcall sub_40750A(__int64 a1, size_t a2)\n{\n  return sub_4074BF(0, a1, a2);\n}\n"], [4224305, "sub_407531", "void *__fastcall sub_407531(int a1, int a2, __int64 a3)\n{\n  _QWORD v5[8]; // [rsp+10h] [rbp-40h] BYREF\n\n  sub_406265(v5, a2);\n  return sub_40720E(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v5);\n}\n"], [4224370, "sub_407572", "void *__fastcall sub_407572(int a1, int a2, __int64 a3, size_t a4)\n{\n  _QWORD v7[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  sub_406265(v7, a2);\n  return sub_40720E(a1, a3, a4, (__int64)v7);\n}\n"], [4224433, "sub_4075B1", "void *__fastcall sub_4075B1(int a1, __int64 a2)\n{\n  return sub_407531(0, a1, a2);\n}\n"], [4224469, "sub_4075D5", "void *__fastcall sub_4075D5(int a1, __int64 a2, size_t a3)\n{\n  return sub_407572(0, a1, a2, a3);\n}\n"], [4224513, "sub_407601", "void *__fastcall sub_407601(__int64 a1, size_t a2, unsigned __int8 a3)\n{\n  __int64 v4[8]; // [rsp+20h] [rbp-40h] BYREF\n\n  v4[0] = qword_6106E0;\n  v4[1] = qword_6106E8;\n  v4[2] = qword_6106F0;\n  v4[3] = qword_6106F8;\n  v4[4] = qword_610700;\n  v4[5] = qword_610708;\n  v4[6] = qword_610710;\n  sub_406150(v4, a3, 1);\n  return sub_40720E(0, a1, a2, (__int64)v4);\n}\n"], [4224661, "sub_407695", "void *__fastcall sub_407695(__int64 a1, unsigned __int8 a2)\n{\n  return sub_407601(a1, 0xFFFFFFFFFFFFFFFFLL, a2);\n}\n"], [4224703, "sub_4076BF", "void *__fastcall sub_4076BF(__int64 a1)\n{\n  return sub_407695(a1, 0x3Au);\n}\n"], [4224734, "sub_4076DE", "void *__fastcall sub_4076DE(__int64 a1, size_t a2)\n{\n  return sub_407601(a1, a2, 0x3Au);\n}\n"], [4224776, "sub_407708", "__int64 __fastcall sub_407708(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  return sub_40773E(a1, a2, a3, a4, -1LL);\n}\n"], [4224830, "sub_40773E", "void *__fastcall sub_40773E(int a1, __int64 a2, __int64 a3, __int64 a4, size_t a5)\n{\n  __int64 v8[8]; // [rsp+30h] [rbp-40h] BYREF\n\n  v8[0] = qword_6106E0;\n  v8[1] = qword_6106E8;\n  v8[2] = qword_6106F0;\n  v8[3] = qword_6106F8;\n  v8[4] = qword_610700;\n  v8[5] = qword_610708;\n  v8[6] = qword_610710;\n  sub_40620B(v8, a2, a3);\n  return sub_40720E(a1, a4, a5, (__int64)v8);\n}\n"], [4224981, "sub_4077D5", "__int64 __fastcall sub_4077D5(__int64 a1, __int64 a2, __int64 a3)\n{\n  return sub_407708(0, a1, a2, a3);\n}\n"], [4225028, "sub_407804", "void *__fastcall sub_407804(__int64 a1, __int64 a2, __int64 a3, size_t a4)\n{\n  return sub_40773E(0, a1, a2, a3, a4);\n}\n"], [4225086, "sub_40783E", "ssize_t __fastcall sub_40783E(int a1, void *a2, size_t a3)\n{\n  ssize_t result; // rax\n  ssize_t v5; // [rsp+28h] [rbp-8h]\n\nLABEL_1:\n  for ( result = read(a1, a2, a3); ; result = read(a1, a2, 0x7FFFE000uLL) )\n  {\n    v5 = result;\n    if ( result >= 0 )\n      break;\n    if ( *__errno_location() == 4 )\n      goto LABEL_1;\n    if ( *__errno_location() != 22 || a3 <= 0x7FFFE000 )\n      return v5;\n    a3 = 2147475456LL;\n  }\n  return result;\n}\n"], [4225199, "sub_4078AF", "ssize_t __fastcall sub_4078AF(int a1, const void *a2, size_t a3)\n{\n  ssize_t result; // rax\n  ssize_t v5; // [rsp+28h] [rbp-8h]\n\nLABEL_1:\n  for ( result = write(a1, a2, a3); ; result = write(a1, a2, 0x7FFFE000uLL) )\n  {\n    v5 = result;\n    if ( result >= 0 )\n      break;\n    if ( *__errno_location() == 4 )\n      goto LABEL_1;\n    if ( *__errno_location() != 22 || a3 <= 0x7FFFE000 )\n      return v5;\n    a3 = 2147475456LL;\n  }\n  return result;\n}\n"], [4225312, "sub_407920", "__int64 __fastcall sub_407920(const void *a1, size_t a2)\n{\n  __int64 result; // rax\n  _BYTE *v3; // [rsp+18h] [rbp-8h]\n\n  v3 = memchr(a1, 0, a2);\n  if ( v3 )\n    result = v3 - (_BYTE *)a1 + 1;\n  else\n    result = a2;\n  return result;\n}\n"], [4225386, "sub_40796A", "bool __fastcall sub_40796A(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_40DEC0[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4225440, "sub_4079A0", "__int64 __fastcall sub_4079A0(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = *(unsigned __int8 *)(a1 + 20);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)(a1 + 8) )\n    {\n      if ( sub_40796A(**(_BYTE **)(a1 + 24)) )\n      {\n        *(_QWORD *)(a1 + 32) = 1LL;\n        *(_DWORD *)(a1 + 44) = **(char **)(a1 + 24);\n        *(_BYTE *)(a1 + 40) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 20) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 12)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbiter.h\", 0x86u, \"mbiter_multi_next\");\n      *(_BYTE *)(a1 + 8) = 1;\n    }\n    *(_QWORD *)(a1 + 32) = mbrtowc(\n                             (wchar_t *)(a1 + 44),\n                             *(const char **)(a1 + 24),\n                             *(_QWORD *)a1 - *(_QWORD *)(a1 + 24),\n                             (mbstate_t *)(a1 + 12));\n    if ( *(_QWORD *)(a1 + 32) == -1LL )\n    {\n      *(_QWORD *)(a1 + 32) = 1LL;\n      *(_BYTE *)(a1 + 40) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 32) == -2LL )\n    {\n      *(_QWORD *)(a1 + 32) = *(_QWORD *)a1 - *(_QWORD *)(a1 + 24);\n      *(_BYTE *)(a1 + 40) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 32) )\n      {\n        *(_QWORD *)(a1 + 32) = 1LL;\n        if ( **(_BYTE **)(a1 + 24) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbiter.h\", 0xA1u, \"mbiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 44) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbiter.h\", 0xA2u, \"mbiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 40) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 12)) )\n        *(_BYTE *)(a1 + 8) = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4225922, "sub_407B82", "char *__fastcall sub_407B82(const char *a1, int a2)\n{\n  size_t v2; // rax\n  size_t v3; // rax\n  int v5; // [rsp+14h] [rbp-7Ch]\n  char *v6; // [rsp+18h] [rbp-78h]\n  char *i; // [rsp+20h] [rbp-70h]\n  char *j; // [rsp+20h] [rbp-70h]\n  char *v9; // [rsp+28h] [rbp-68h]\n  unsigned __int64 v10; // [rsp+30h] [rbp-60h] BYREF\n  char v11; // [rsp+38h] [rbp-58h]\n  int v12; // [rsp+3Ch] [rbp-54h] BYREF\n  char k; // [rsp+44h] [rbp-4Ch]\n  char *v14; // [rsp+48h] [rbp-48h]\n  __int64 v15; // [rsp+50h] [rbp-40h]\n  char v16; // [rsp+58h] [rbp-38h]\n  wint_t wc; // [rsp+5Ch] [rbp-34h]\n  unsigned __int64 v18; // [rsp+78h] [rbp-18h]\n\n  v18 = __readfsqword(0x28u);\n  v9 = strdup(a1);\n  if ( !v9 )\n    sub_408A4A();\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( a2 )\n    {\n      for ( i = v9; *i && ((*__ctype_b_loc())[(unsigned __int8)*i] & 0x2000) != 0; ++i )\n        ;\n      v3 = strlen(i);\n      memmove(v9, i, v3 + 1);\n    }\n    if ( a2 != 1 )\n    {\n      for ( j = &v9[strlen(v9) - 1]; j >= v9 && ((*__ctype_b_loc())[(unsigned __int8)*j] & 0x2000) != 0; --j )\n        *j = 0;\n    }\n  }\n  else\n  {\n    if ( a2 )\n    {\n      v14 = v9;\n      v10 = (unsigned __int64)&v9[strlen(v9)];\n      v11 = 0;\n      memset(&v12, 0, 8uLL);\n      for ( k = 0; (unsigned __int64)v14 < v10; k = 0 )\n      {\n        sub_4079A0((__int64)&v10);\n        if ( !v16 || !iswspace(wc) )\n          break;\n        v14 += v15;\n      }\n      v2 = strlen(v14);\n      memmove(v9, v14, v2 + 1);\n    }\n    if ( a2 != 1 )\n    {\n      v5 = 0;\n      v14 = v9;\n      v10 = (unsigned __int64)&v9[strlen(v9)];\n      v11 = 0;\n      memset(&v12, 0, 8uLL);\n      k = 0;\n      while ( (unsigned __int64)v14 < v10 )\n      {\n        sub_4079A0((__int64)&v10);\n        if ( v5 || !v16 || !iswspace(wc) )\n        {\n          if ( v5 || v16 == 1 && iswspace(wc) )\n          {\n            if ( v5 != 1 || v16 == 1 && iswspace(wc) )\n            {\n              if ( v5 == 1 && v16 && iswspace(wc) )\n              {\n                v5 = 2;\n                v6 = v14;\n              }\n              else if ( v5 != 2 || !v16 || !iswspace(wc) )\n              {\n                v5 = 1;\n              }\n            }\n          }\n          else\n          {\n            v5 = 1;\n          }\n        }\n        v14 += v15;\n        k = 0;\n      }\n      if ( v5 == 2 )\n        *v6 = 0;\n    }\n  }\n  return v9;\n}\n"], [4226785, "sub_407EE1", "__int64 __fastcall sub_407EE1(int a1)\n{\n  unsigned int fd; // [rsp+Ch] [rbp-14h]\n  unsigned int v3; // [rsp+18h] [rbp-8h]\n  int v4; // [rsp+1Ch] [rbp-4h]\n\n  fd = a1;\n  if ( a1 >= 0 && a1 <= 2 )\n  {\n    v3 = sub_40BDFD((unsigned int)a1);\n    v4 = *__errno_location();\n    close(a1);\n    *__errno_location() = v4;\n    fd = v3;\n  }\n  return fd;\n}\n"], [4226862, "sub_407F2E", "int __fastcall sub_407F2E(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5, unsigned __int64 a6)\n{\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r12\n  __int64 v11; // rbx\n  char *v12; // rax\n  __int64 v13; // r13\n  __int64 v14; // r12\n  __int64 v15; // rbx\n  char *v16; // rax\n  int result; // eax\n  __int64 v18; // r14\n  __int64 v19; // r13\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // r13\n  __int64 v24; // r15\n  __int64 v25; // r14\n  __int64 v26; // r12\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r14\n  __int64 v30; // r13\n  __int64 v31; // r15\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r15\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r15\n  __int64 v42; // r14\n  __int64 v43; // r13\n  __int64 v44; // r12\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r15\n  __int64 v48; // r14\n  __int64 v49; // r13\n  __int64 v50; // r12\n  __int64 v51; // rbx\n  char *v52; // rax\n  __int64 v53; // [rsp+30h] [rbp-80h]\n  __int64 v54; // [rsp+38h] [rbp-78h]\n  __int64 v55; // [rsp+38h] [rbp-78h]\n  __int64 v56; // [rsp+40h] [rbp-70h]\n  __int64 v57; // [rsp+40h] [rbp-70h]\n  __int64 v58; // [rsp+40h] [rbp-70h]\n  __int64 v59; // [rsp+48h] [rbp-68h]\n  __int64 v60; // [rsp+48h] [rbp-68h]\n  __int64 v61; // [rsp+48h] [rbp-68h]\n  __int64 v62; // [rsp+48h] [rbp-68h]\n\n  if ( a2 )\n    fprintf(a1, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    fprintf(a1, \"%s %s\\n\", a3, a4);\n  v6 = gettext(\"(C)\");\n  fprintf(a1, \"Copyright %s %d Free Software Foundation, Inc.\", v6, 2011LL);\n  v7 = gettext(\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\");\n  fputs_unlocked(v7, a1);\n  if ( a6 == 4 )\n  {\n    v18 = a5[3];\n    v19 = a5[2];\n    v20 = a5[1];\n    v21 = *a5;\n    v22 = gettext(\"Written by %s, %s, %s,\\nand %s.\\n\");\n    result = fprintf(a1, v22, v21, v20, v19, v18);\n  }\n  else if ( a6 > 4 )\n  {\n    if ( a6 == 7 )\n    {\n      v35 = a5[6];\n      v36 = a5[5];\n      v37 = a5[4];\n      v60 = a5[3];\n      v56 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n      result = fprintf(a1, v40, v39, v38, v56, v60, v37, v36, v35);\n    }\n    else if ( a6 > 7 )\n    {\n      if ( a6 == 8 )\n      {\n        v61 = a5[7];\n        v41 = a5[6];\n        v42 = a5[5];\n        v43 = a5[4];\n        v57 = a5[3];\n        v54 = a5[2];\n        v44 = a5[1];\n        v45 = *a5;\n        v46 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        result = fprintf(a1, v46, v45, v44, v54, v57, v43, v42, v41, v61);\n      }\n      else\n      {\n        v62 = a5[8];\n        v58 = a5[7];\n        v47 = a5[6];\n        v48 = a5[5];\n        v49 = a5[4];\n        v55 = a5[3];\n        v53 = a5[2];\n        v50 = a5[1];\n        v51 = *a5;\n        if ( a6 == 9 )\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        else\n          v52 = gettext(\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        result = fprintf(a1, v52, v51, v50, v53, v55, v49, v48, v47, v58, v62);\n      }\n    }\n    else if ( a6 == 5 )\n    {\n      v23 = a5[4];\n      v24 = a5[3];\n      v25 = a5[2];\n      v26 = a5[1];\n      v27 = *a5;\n      v28 = gettext(\"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n      result = fprintf(a1, v28, v27, v26, v25, v24, v23);\n    }\n    else\n    {\n      v29 = a5[5];\n      v30 = a5[4];\n      v59 = a5[3];\n      v31 = a5[2];\n      v32 = a5[1];\n      v33 = *a5;\n      v34 = gettext(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n      result = fprintf(a1, v34, v33, v32, v31, v59, v30, v29);\n    }\n  }\n  else\n  {\n    switch ( a6 )\n    {\n      case 1uLL:\n        v8 = *a5;\n        v9 = gettext(\"Written by %s.\\n\");\n        result = fprintf(a1, v9, v8);\n        break;\n      case 0uLL:\n        abort();\n      case 2uLL:\n        v10 = a5[1];\n        v11 = *a5;\n        v12 = gettext(\"Written by %s and %s.\\n\");\n        result = fprintf(a1, v12, v11, v10);\n        break;\n      default:\n        v13 = a5[2];\n        v14 = a5[1];\n        v15 = *a5;\n        v16 = gettext(\"Written by %s, %s, and %s.\\n\");\n        result = fprintf(a1, v16, v15, v14, v13);\n        break;\n    }\n  }\n  return result;\n}\n"], [4228377, "sub_408519", "int __fastcall sub_408519(FILE *a1, const char *a2, const char *a3, const char *a4, __int64 *a5)\n{\n  unsigned __int64 i; // [rsp+38h] [rbp-8h]\n\n  for ( i = 0LL; a5[i]; ++i )\n    ;\n  return sub_407F2E(a1, a2, a3, a4, a5, i);\n}\n"], [4228487, "sub_408587", "int __fastcall sub_408587(FILE *a1, const char *a2, const char *a3, const char *a4, unsigned int *a5)\n{\n  __int64 *v5; // rax\n  unsigned __int64 i; // [rsp+38h] [rbp-58h]\n  __int64 v8[10]; // [rsp+40h] [rbp-50h] BYREF\n\n  for ( i = 0LL; i <= 9; ++i )\n  {\n    if ( *a5 >= 0x30 )\n    {\n      v5 = (__int64 *)*((_QWORD *)a5 + 1);\n      *((_QWORD *)a5 + 1) = v5 + 1;\n    }\n    else\n    {\n      v5 = (__int64 *)(*((_QWORD *)a5 + 2) + *a5);\n      *a5 += 8;\n    }\n    v8[i] = *v5;\n    if ( !v8[i] )\n      break;\n  }\n  return sub_407F2E(a1, a2, a3, a4, v8, i);\n}\n"], [4228704, "sub_408660", "int sub_408660(FILE *a1, const char *a2, const char *a3, const char *a4, ...)\n{\n  gcc_va_list va; // [rsp+28h] [rbp-C8h] BYREF\n\n  va_start(va, a4);\n  return sub_408587(a1, a2, a3, a4, (unsigned int *)va);\n}\n"], [4228886, "sub_408716", "int sub_408716()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = gettext(\"\\nReport bugs to: %s\\n\");\n  printf(v0, \"bug-coreutils@gnu.org\");\n  v1 = gettext(\"%s home page: <%s>\\n\");\n  printf(v1, \"GNU coreutils\", \"http://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = gettext(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\");\n  return fputs_unlocked(v3, v2);\n}\n"], [4228991, "sub_40877F", "__int64 __fastcall sub_40877F(unsigned __int64 a1, unsigned __int64 a2)\n{\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 < a1 )\n    sub_408A4A(a1, a2, 0xFFFFFFFFFFFFFFFFLL % a2);\n  return sub_4088C8(a2 * a1);\n}\n"], [4229053, "sub_4087BD", "__int64 __fastcall sub_4087BD(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rax\n  unsigned __int64 v4; // rdx\n\n  v3 = 0xFFFFFFFFFFFFFFFFLL / a3;\n  v4 = 0xFFFFFFFFFFFFFFFFLL % a3;\n  if ( v3 < a2 )\n    sub_408A4A(a1, a2, v4);\n  return sub_4088FD(a1, a3 * a2);\n}\n"], [4229129, "sub_408809", "__int64 __fastcall sub_408809(__int64 a1, unsigned __int64 *a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rdx\n  unsigned __int64 v6; // [rsp+28h] [rbp-8h]\n\n  v6 = *a2;\n  if ( a1 )\n  {\n    v3 = 0xAAAAAAAAAAAAAAAALL % a3;\n    if ( 0xAAAAAAAAAAAAAAAALL / a3 <= v6 )\n      sub_408A4A(a1, a2, v3);\n    v6 += (v6 + 1) >> 1;\n  }\n  else if ( !v6 )\n  {\n    v6 = (0x80 / a3 == 0) + 0x80 / a3;\n  }\n  *a2 = v6;\n  return sub_4088FD(a1, a3 * v6);\n}\n"], [4229294, "sub_4088AE", "__int64 __fastcall sub_4088AE(__int64 a1)\n{\n  return sub_4088C8(a1);\n}\n"], [4229320, "sub_4088C8", "void *__fastcall sub_4088C8(size_t a1, __int64 a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = malloc(a1);\n  if ( !v4 && a1 )\n    sub_408A4A(a1, a2, v2);\n  return v4;\n}\n"], [4229373, "sub_4088FD", "void *__fastcall sub_4088FD(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n  void *ptr; // [rsp+8h] [rbp-8h]\n\n  if ( a2 || !a1 )\n  {\n    ptr = realloc(a1, a2);\n    if ( !ptr )\n    {\n      if ( a2 )\n        sub_408A4A(a1, a2, v3);\n    }\n    result = ptr;\n  }\n  else\n  {\n    free(a1);\n    result = 0LL;\n  }\n  return result;\n}\n"], [4229470, "sub_40895E", "__int64 __fastcall sub_40895E(__int64 a1, unsigned __int64 *a2)\n{\n  return sub_408809(a1, a2, 1uLL);\n}\n"], [4229512, "sub_408988", "void *__fastcall sub_408988(size_t a1, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_4088C8(a1, a2);\n  return memset(v2, 0, a1);\n}\n"], [4229555, "sub_4089B3", "void *__fastcall sub_4089B3(size_t a1, size_t a2)\n{\n  __int64 v2; // rdx\n  void *v4; // [rsp+18h] [rbp-8h]\n\n  v4 = calloc(a1, a2);\n  if ( !v4 )\n    sub_408A4A(a1, a2, v2);\n  return v4;\n}\n"], [4229612, "sub_4089EC", "void *__fastcall sub_4089EC(const void *a1, size_t a2)\n{\n  void *v2; // rax\n\n  v2 = sub_4088C8(a2, a2);\n  return memcpy(v2, a1, a2);\n}\n"], [4229661, "sub_408A1D", "void *__fastcall sub_408A1D(const char *a1)\n{\n  size_t v1; // rax\n\n  v1 = strlen(a1);\n  return sub_4089EC(a1, v1 + 1);\n}\n"], [4229706, "sub_408A4A", "void __noreturn sub_408A4A()\n{\n  char *v0; // rax\n\n  v0 = gettext(\"memory exhausted\");\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"], [4229849, "sub_408AD9", "__int64 __fastcall sub_408AD9(__int64 a1, __int64 a2)\n{\n  __int64 v3; // [rsp+18h] [rbp-8h]\n\n  v3 = sub_40B9C5(a1, a2);\n  if ( !v3 && *__errno_location() == 12 )\n    sub_408A4A();\n  return v3;\n}\n"], [4229918, "sub_408B1E", "__int64 __fastcall sub_408B1E(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // [rsp+28h] [rbp-8h]\n\n  v4 = sub_40BCFA(a1, a2, a3);\n  if ( !v4 && *__errno_location() == 12 )\n    sub_408A4A();\n  return v4;\n}\n"], [4229995, "sub_408B6B", "__int64 __fastcall sub_408B6B(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4230090, "sub_408BCA", "__int64 __fastcall sub_408BCA(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_408B6B(a1, a2) )\n    ;\n  return i;\n}\n"], [4230155, "sub_408C0B", "__int64 __fastcall sub_408C0B(const char *a1, char **a2, int a3, _QWORD *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  unsigned __int64 v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoul\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoul(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_408BCA(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_408B6B(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_408BCA(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_408B6B(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_408BCA(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_408BCA(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_408B6B(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_408BCA(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_408BCA(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_408BCA(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_408BCA(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4231287, "sub_409077", "__int64 __fastcall sub_409077(unsigned __int64 *a1, int a2)\n{\n  __int64 result; // rax\n\n  if ( 0xFFFFFFFFFFFFFFFFLL / a2 >= *a1 )\n  {\n    *a1 *= a2;\n    result = 0LL;\n  }\n  else\n  {\n    *a1 = -1LL;\n    result = 1LL;\n  }\n  return result;\n}\n"], [4231382, "sub_4090D6", "__int64 __fastcall sub_4090D6(unsigned __int64 *a1, int a2, int a3)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-4h]\n\n  for ( i = 0; a3--; i |= sub_409077(a1, a2) )\n    ;\n  return i;\n}\n"], [4231447, "sub_409117", "__int64 __fastcall sub_409117(const char *a1, char **a2, int a3, uintmax_t *a4, const char *a5)\n{\n  char **v5; // rax\n  int v7; // eax\n  int v8; // eax\n  unsigned __int8 i; // [rsp+3Fh] [rbp-31h]\n  unsigned int v13; // [rsp+40h] [rbp-30h]\n  int v14; // [rsp+44h] [rbp-2Ch]\n  int v15; // [rsp+48h] [rbp-28h]\n  int v16; // [rsp+4Ch] [rbp-24h]\n  char v17; // [rsp+50h] [rbp-20h] BYREF\n  uintmax_t v18; // [rsp+58h] [rbp-18h] BYREF\n  unsigned __int8 *v19; // [rsp+60h] [rbp-10h]\n  char **endptr; // [rsp+68h] [rbp-8h]\n\n  v13 = 0;\n  if ( a3 < 0 || a3 > 36 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"../../src/lib/xstrtol.c\", 0x53u, \"xstrtoumax\");\n  if ( a2 )\n    v5 = a2;\n  else\n    v5 = (char **)&v17;\n  endptr = v5;\n  v19 = (unsigned __int8 *)a1;\n  for ( i = *a1; ((*__ctype_b_loc())[i] & 0x2000) != 0; i = *v19 )\n    ++v19;\n  if ( i == 45 )\n    return 4LL;\n  *__errno_location() = 0;\n  v18 = strtoumax(a1, endptr, a3);\n  if ( *endptr == a1 )\n  {\n    if ( !a5 || !**endptr || !strchr(a5, **endptr) )\n      return 4LL;\n    v18 = 1LL;\n  }\n  else if ( *__errno_location() )\n  {\n    if ( *__errno_location() != 34 )\n      return 4LL;\n    v13 = 1;\n  }\n  if ( !a5 )\n  {\n    *a4 = v18;\n    return v13;\n  }\n  if ( !**endptr )\n    goto LABEL_76;\n  v14 = 1024;\n  v15 = 1;\n  if ( !strchr(a5, **endptr) )\n  {\n    *a4 = v18;\n    return v13 | 2;\n  }\n  if ( strchr(a5, 48) )\n  {\n    v7 = (*endptr)[1];\n    if ( v7 == 68 )\n      goto LABEL_35;\n    if ( v7 != 105 )\n    {\n      if ( v7 != 66 )\n        goto LABEL_36;\nLABEL_35:\n      v14 = 1000;\n      v15 = 2;\n      goto LABEL_36;\n    }\n    if ( (*endptr)[2] == 66 )\n      v15 = 3;\n  }\nLABEL_36:\n  v8 = **endptr;\n  if ( v8 != 89 )\n  {\n    if ( v8 > 89 )\n    {\n      if ( v8 == 103 )\n      {\nLABEL_65:\n        v16 = sub_4090D6(&v18, v14, 3);\n        goto LABEL_74;\n      }\n      if ( v8 <= 103 )\n      {\n        switch ( v8 )\n        {\n          case 'b':\n            v16 = sub_409077(&v18, 512);\n            break;\n          case 'c':\n            v16 = 0;\n            break;\n          case 'Z':\n            v16 = sub_4090D6(&v18, v14, 7);\n            break;\n          default:\n            goto LABEL_73;\n        }\n        goto LABEL_74;\n      }\n      if ( v8 == 109 )\n        goto LABEL_67;\n      if ( v8 > 109 )\n      {\n        if ( v8 != 116 )\n        {\n          if ( v8 != 119 )\n            goto LABEL_73;\n          v16 = sub_409077(&v18, 2);\n          goto LABEL_74;\n        }\nLABEL_69:\n        v16 = sub_4090D6(&v18, v14, 4);\n        goto LABEL_74;\n      }\n      if ( v8 != 107 )\n        goto LABEL_73;\n    }\n    else if ( v8 != 75 )\n    {\n      if ( v8 <= 75 )\n      {\n        if ( v8 == 69 )\n        {\n          v16 = sub_4090D6(&v18, v14, 6);\n          goto LABEL_74;\n        }\n        if ( v8 != 71 )\n        {\n          if ( v8 != 66 )\n          {\nLABEL_73:\n            *a4 = v18;\n            return v13 | 2;\n          }\n          v16 = sub_409077(&v18, 1024);\n          goto LABEL_74;\n        }\n        goto LABEL_65;\n      }\n      if ( v8 == 80 )\n      {\n        v16 = sub_4090D6(&v18, v14, 5);\n        goto LABEL_74;\n      }\n      if ( v8 != 84 )\n      {\n        if ( v8 != 77 )\n          goto LABEL_73;\nLABEL_67:\n        v16 = sub_4090D6(&v18, v14, 2);\n        goto LABEL_74;\n      }\n      goto LABEL_69;\n    }\n    v16 = sub_4090D6(&v18, v14, 1);\n    goto LABEL_74;\n  }\n  v16 = sub_4090D6(&v18, v14, 8);\nLABEL_74:\n  v13 |= v16;\n  *endptr += v15;\n  if ( **endptr )\n    v13 |= 2u;\nLABEL_76:\n  *a4 = v18;\n  return v13;\n}\n"], [4232579, "sub_409583", "int __fastcall sub_409583(FILE *a1)\n{\n  int v2; // eax\n  int v3; // [rsp+14h] [rbp-Ch]\n  int v4; // [rsp+18h] [rbp-8h]\n\n  v3 = 0;\n  if ( fileno(a1) < 0 )\n    return fclose(a1);\n  if ( !__freading(a1) || (v2 = fileno(a1), lseek(v2, 0LL, 1) != -1) )\n  {\n    if ( (unsigned int)sub_40966B(a1) )\n      v3 = *__errno_location();\n  }\n  v4 = fclose(a1);\n  if ( v3 )\n  {\n    *__errno_location() = v3;\n    v4 = -1;\n  }\n  return v4;\n}\n"], [4232760, "sub_409638", "__int64 __fastcall sub_409638(_DWORD *a1)\n{\n  __int64 result; // rax\n\n  result = *a1 & 0x100;\n  if ( (_DWORD)result )\n    result = sub_4096B6(a1, 0LL, 1LL);\n  return result;\n}\n"], [4232811, "sub_40966B", "int __fastcall sub_40966B(FILE *a1)\n{\n  if ( !a1 || !__freading(a1) )\n    return fflush(a1);\n  sub_409638(a1);\n  return fflush(a1);\n}\n"], [4232886, "sub_4096B6", "int __fastcall sub_4096B6(FILE *a1, __off_t a2, int a3)\n{\n  int v3; // eax\n  __off_t v6; // [rsp+28h] [rbp-8h]\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n    return fseeko(a1, a2, a3);\n  v3 = fileno(a1);\n  v6 = lseek(v3, a2, a3);\n  if ( v6 == -1 )\n    return -1;\n  a1->_flags &= 0xFFFFFFEF;\n  a1->_offset = v6;\n  return 0;\n}\n"], [4233070, "sub_40976E", "__int64 __fastcall sub_40976E(const char *a1)\n{\n  unsigned int i; // [rsp+14h] [rbp-2Ch]\n  int v3; // [rsp+18h] [rbp-28h]\n  int v4; // [rsp+1Ch] [rbp-24h]\n  char *endptr; // [rsp+20h] [rbp-20h] BYREF\n  __int64 v6; // [rsp+28h] [rbp-18h]\n  __int64 v7; // [rsp+30h] [rbp-10h]\n  __int64 v8; // [rsp+38h] [rbp-8h]\n\n  if ( (unsigned int)(*a1 - 48) > 9 )\n  {\n    for ( i = 0; i <= 0x22; ++i )\n    {\n      if ( !strcmp((const char *)(12LL * i + 6357796), a1) )\n        return dword_610320[3 * i];\n    }\n    v3 = __libc_current_sigrtmin();\n    v4 = __libc_current_sigrtmax();\n    if ( v3 > 0 && !strncmp(a1, \"RTMIN\", 5uLL) )\n    {\n      v7 = strtol(a1 + 5, &endptr, 10);\n      if ( !*endptr && v7 >= 0 && v4 - v3 >= v7 )\n        return (unsigned int)(v7 + v3);\n    }\n    else if ( v4 > 0 && !strncmp(a1, \"RTMAX\", 5uLL) )\n    {\n      v8 = strtol(a1 + 5, &endptr, 10);\n      if ( !*endptr && v3 - v4 <= v8 && v8 <= 0 )\n        return (unsigned int)(v8 + v4);\n    }\n  }\n  else\n  {\n    v6 = strtol(a1, &endptr, 10);\n    if ( !*endptr && v6 <= 64 )\n      return v6;\n  }\n  return 0xFFFFFFFFLL;\n}\n"], [4233504, "sub_409920", "__int64 __fastcall sub_409920(const char *a1, int *a2)\n{\n  __int64 result; // rax\n\n  *a2 = sub_40976E(a1);\n  if ( *a2 >= 0 )\n    result = 0LL;\n  else\n    result = 0xFFFFFFFFLL;\n  return result;\n}\n"], [4233562, "sub_40995A", "__int64 __fastcall sub_40995A(int a1, char *a2)\n{\n  unsigned int i; // [rsp+1Ch] [rbp-14h]\n  int v4; // [rsp+20h] [rbp-10h]\n  int v5; // [rsp+24h] [rbp-Ch]\n\n  for ( i = 0; i <= 0x22; ++i )\n  {\n    if ( dword_610320[3 * i] == a1 )\n    {\n      strcpy(a2, (const char *)(12LL * i + 6357796));\n      return 0LL;\n    }\n  }\n  v4 = __libc_current_sigrtmin();\n  v5 = __libc_current_sigrtmax();\n  if ( v4 > a1 || a1 > v5 )\n    return 0xFFFFFFFFLL;\n  if ( (v5 - v4) / 2 + v4 < a1 )\n  {\n    if ( v5 == a1 )\n      sprintf(a2, \"RTMAX\");\n    else\n      sprintf(a2, \"RTMAX-%d\", (unsigned int)(v5 - a1));\n  }\n  else if ( a1 == v4 )\n  {\n    sprintf(a2, \"RTMIN\");\n  }\n  else\n  {\n    sprintf(a2, \"RTMIN+%d\", (unsigned int)(a1 - v4));\n  }\n  return 0LL;\n}\n"], [4233866, "sub_409A8A", "__int64 __fastcall sub_409A8A(int a1, const char *a2, int a3, unsigned int a4)\n{\n  int fd; // [rsp+24h] [rbp-Ch]\n  unsigned int v6; // [rsp+28h] [rbp-8h]\n  int v7; // [rsp+2Ch] [rbp-4h]\n\n  fd = open(a2, a3, a4);\n  if ( fd == a1 || fd < 0 )\n    return (unsigned int)fd;\n  v6 = dup2(fd, a1);\n  v7 = *__errno_location();\n  close(fd);\n  *__errno_location() = v7;\n  return v6;\n}\n"], [4233987, "sub_409B03", "__int64 __fastcall sub_409B03(unsigned __int8 *a1, unsigned __int8 *a2)\n{\n  unsigned __int8 *v2; // r12\n  unsigned __int8 *v3; // rbx\n  unsigned __int8 v5; // [rsp+1Eh] [rbp-12h]\n  unsigned __int8 v6; // [rsp+1Fh] [rbp-11h]\n\n  v2 = a1;\n  v3 = a2;\n  if ( a1 == a2 )\n    return 0LL;\n  do\n  {\n    v5 = sub_40C325(*v2);\n    v6 = sub_40C325(*v3);\n    if ( !v5 )\n      break;\n    ++v2;\n    ++v3;\n  }\n  while ( v5 == v6 );\n  return v5 - (unsigned int)v6;\n}\n"], [4234106, "sub_409B7A", "__int64 __fastcall sub_409B7A(FILE *a1)\n{\n  bool v2; // [rsp+1Dh] [rbp-3h]\n  bool v3; // [rsp+1Eh] [rbp-2h]\n  bool v4; // [rsp+1Fh] [rbp-1h]\n\n  v2 = __fpending(a1) != 0;\n  v3 = ferror_unlocked(a1) != 0;\n  v4 = sub_409583(a1) != 0;\n  if ( !v3 && (!v4 || !v2 && *__errno_location() == 9) )\n    return 0LL;\n  if ( !v4 )\n    *__errno_location() = 0;\n  return 0xFFFFFFFFLL;\n}\n"], [4234245, "sub_409C05", "void *sub_409C05()\n{\n  _BOOL4 v0; // eax\n  size_t v1; // rax\n  _BOOL4 v3; // [rsp+4h] [rbp-FCh]\n  int fd; // [rsp+8h] [rbp-F8h]\n  int c; // [rsp+Ch] [rbp-F4h]\n  int ca; // [rsp+Ch] [rbp-F4h]\n  void *v7; // [rsp+10h] [rbp-F0h]\n  const char *s; // [rsp+18h] [rbp-E8h]\n  void *ptr; // [rsp+20h] [rbp-E0h]\n  __int64 v10; // [rsp+28h] [rbp-D8h]\n  size_t n; // [rsp+38h] [rbp-C8h]\n  size_t v12; // [rsp+40h] [rbp-C0h]\n  char *dest; // [rsp+48h] [rbp-B8h]\n  FILE *stream; // [rsp+50h] [rbp-B0h]\n  size_t v15; // [rsp+58h] [rbp-A8h]\n  size_t v16; // [rsp+60h] [rbp-A0h]\n  void *v17; // [rsp+68h] [rbp-98h]\n  char src[64]; // [rsp+70h] [rbp-90h] BYREF\n  char v19[56]; // [rsp+B0h] [rbp-50h] BYREF\n  unsigned __int64 v20; // [rsp+E8h] [rbp-18h]\n\n  v20 = __readfsqword(0x28u);\n  v7 = (void *)qword_610820;\n  if ( !qword_610820 )\n  {\n    s = getenv(\"CHARSETALIASDIR\");\n    if ( !s || !*s )\n      s = \"/root/Product/coreutils/exe/lib\";\n    n = strlen(s);\n    v12 = strlen(\"charset.alias\");\n    v0 = n && s[n - 1] != 47;\n    v3 = v0;\n    dest = (char *)malloc(n + v0 + v12 + 1);\n    if ( dest )\n    {\n      memcpy(dest, s, n);\n      if ( v3 )\n        dest[n] = 47;\n      memcpy(&dest[n + v3], \"charset.alias\", v12 + 1);\n    }\n    if ( dest )\n    {\n      fd = open(dest, 0x20000);\n      if ( fd >= 0 )\n      {\n        stream = fdopen(fd, \"r\");\n        if ( stream )\n        {\n          ptr = 0LL;\n          v10 = 0LL;\n          while ( 1 )\n          {\n            c = getc_unlocked(stream);\n            if ( c == -1 )\n              break;\n            if ( c != 10 && c != 32 && c != 9 )\n            {\n              if ( c == 35 )\n              {\n                do\n                  ca = getc_unlocked(stream);\n                while ( ca != -1 && ca != 10 );\n                if ( ca == -1 )\n                  break;\n              }\n              else\n              {\n                ungetc(c, stream);\n                if ( fscanf(stream, \"%50s %50s\", src, v19) <= 1 )\n                  break;\n                v15 = strlen(src);\n                v16 = strlen(v19);\n                v17 = ptr;\n                if ( v10 )\n                {\n                  v1 = v16 + v15 + v10;\n                  v10 = v1 + 2;\n                  ptr = realloc(ptr, v1 + 3);\n                }\n                else\n                {\n                  v10 = v15 + v16 + 2;\n                  ptr = malloc(v15 + v16 + 3);\n                }\n                if ( !ptr )\n                {\n                  v10 = 0LL;\n                  free(v17);\n                  break;\n                }\n                strcpy((char *)ptr + v10 - v16 - v15 - 2, src);\n                strcpy((char *)ptr + v10 - v16 - 1, v19);\n              }\n            }\n          }\n          sub_409583(stream);\n          if ( v10 )\n          {\n            *((_BYTE *)ptr + v10) = 0;\n            v7 = ptr;\n          }\n          else\n          {\n            v7 = &unk_40DE98;\n          }\n        }\n        else\n        {\n          close(fd);\n          v7 = &unk_40DE98;\n        }\n      }\n      else\n      {\n        v7 = &unk_40DE98;\n      }\n      free(dest);\n    }\n    else\n    {\n      v7 = &unk_40DE98;\n    }\n    qword_610820 = (__int64)v7;\n  }\n  return v7;\n}\n"], [4235499, "sub_40A0EB", "const char *sub_40A0EB()\n{\n  const char *s1; // [rsp+0h] [rbp-10h]\n  char *s2; // [rsp+8h] [rbp-8h]\n  char *s2a; // [rsp+8h] [rbp-8h]\n\n  s1 = nl_langinfo(14);\n  if ( !s1 )\n    s1 = (const char *)&unk_40DE98;\n  for ( s2 = (char *)sub_409C05(); *s2; s2 = &s2a[strlen(s2a) + 1] )\n  {\n    if ( !strcmp(s1, s2) || *s2 == 42 && !s2[1] )\n    {\n      s1 = &s2[strlen(s2) + 1];\n      break;\n    }\n    s2a = &s2[strlen(s2) + 1];\n  }\n  if ( !*s1 )\n    s1 = \"ASCII\";\n  return s1;\n}\n"], [4235705, "sub_40A1B9", "__int64 __fastcall sub_40A1B9(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  if ( *(_QWORD *)a2 == a2 + 24 )\n  {\n    memcpy((void *)(a1 + 24), (const void *)(a2 + 24), *(_QWORD *)(a2 + 8));\n    *(_QWORD *)a1 = a1 + 24;\n  }\n  else\n  {\n    *(_QWORD *)a1 = *(_QWORD *)a2;\n  }\n  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);\n  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);\n  result = *(unsigned __int8 *)(a1 + 16);\n  if ( (_BYTE)result )\n  {\n    result = a1;\n    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);\n  }\n  return result;\n}\n"], [4235866, "sub_40A25A", "bool __fastcall sub_40A25A(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_40DEC0[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4235920, "sub_40A290", "__int64 __fastcall sub_40A290(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_40A25A(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_407920(*(const void **)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4236400, "sub_40A470", "__int64 __fastcall sub_40A470(_BYTE *a1, __int64 a2, unsigned __int64 a3, _QWORD *a4)\n{\n  void *v4; // rsp\n  unsigned __int64 v5; // rax\n  __int64 v8; // [rsp+8h] [rbp-68h] BYREF\n  __int64 v9; // [rsp+10h] [rbp-60h]\n  _BYTE *v10; // [rsp+18h] [rbp-58h]\n  char v11; // [rsp+27h] [rbp-49h]\n  unsigned __int64 i; // [rsp+28h] [rbp-48h]\n  __int64 v13; // [rsp+30h] [rbp-40h]\n  __int64 v14; // [rsp+38h] [rbp-38h]\n  _BYTE *v15; // [rsp+40h] [rbp-30h]\n  _BYTE *v16; // [rsp+48h] [rbp-28h]\n  unsigned __int64 v17; // [rsp+50h] [rbp-20h]\n  unsigned __int64 v18; // [rsp+58h] [rbp-18h]\n\n  v10 = a1;\n  v9 = a2;\n  HIBYTE(v8) = HIBYTE(a3);\n  v17 = a3;\n  if ( a3 > 0x1FFFFFFFFFFFFFFFLL )\n  {\n    v5 = 0LL;\n  }\n  else if ( 8 * v17 > 0xFAF )\n  {\n    v5 = sub_40C365(8 * v17);\n  }\n  else\n  {\n    v4 = alloca(16 * ((8 * (v17 + 2) + 30) / 0x10));\n    v5 = 16 * (((unsigned __int64)&v8 + 7) >> 4) + 16;\n  }\n  v18 = v5;\n  if ( !v5 )\n    return 0LL;\n  *(_QWORD *)(v18 + 8) = 1LL;\n  v13 = 0LL;\n  for ( i = 2LL; i < v17; ++i )\n  {\n    v11 = *(_BYTE *)(i - 1 + v9);\n    while ( 1 )\n    {\n      if ( *(_BYTE *)(v9 + v13) == v11 )\n      {\n        ++v13;\n        *(_QWORD *)(8 * i + v18) = i - v13;\n        goto LABEL_15;\n      }\n      if ( !v13 )\n        break;\n      v13 -= *(_QWORD *)(8 * v13 + v18);\n    }\n    *(_QWORD *)(v18 + 8 * i) = i;\nLABEL_15:\n    ;\n  }\n  *a4 = 0LL;\n  v14 = 0LL;\n  v15 = v10;\n  v16 = v10;\n  while ( *v16 )\n  {\n    if ( *(_BYTE *)(v9 + v14) == *v16 )\n    {\n      ++v14;\n      ++v16;\n      if ( v14 == v17 )\n      {\n        *a4 = v15;\n        break;\n      }\n    }\n    else if ( v14 )\n    {\n      v15 += *(_QWORD *)(8 * v14 + v18);\n      v14 -= *(_QWORD *)(8 * v14 + v18);\n    }\n    else\n    {\n      ++v15;\n      ++v16;\n    }\n  }\n  sub_40C420(v18);\n  return 1LL;\n}\n"], [4236986, "sub_40A6BA", "__int64 __fastcall sub_40A6BA(char *a1, void *a2, _QWORD *a3)\n{\n  void *v3; // rsp\n  unsigned __int64 v4; // rax\n  bool v7; // al\n  bool v8; // al\n  bool v9; // al\n  bool v10; // al\n  _QWORD *v14; // [rsp+8h] [rbp-108h] BYREF\n  void *v15; // [rsp+10h] [rbp-100h]\n  char *v16; // [rsp+18h] [rbp-F8h]\n  __int64 v17; // [rsp+20h] [rbp-F0h]\n  unsigned __int64 i; // [rsp+28h] [rbp-E8h]\n  __int64 v19; // [rsp+30h] [rbp-E0h]\n  __int64 v20; // [rsp+38h] [rbp-D8h]\n  __int64 v21; // [rsp+40h] [rbp-D0h]\n  unsigned __int64 v22; // [rsp+48h] [rbp-C8h]\n  unsigned __int64 v23; // [rsp+50h] [rbp-C0h]\n  unsigned __int64 v24; // [rsp+58h] [rbp-B8h]\n  unsigned __int64 v25; // [rsp+60h] [rbp-B0h]\n  unsigned __int64 v26; // [rsp+68h] [rbp-A8h]\n  char v27[4]; // [rsp+70h] [rbp-A0h] BYREF\n  int v28; // [rsp+74h] [rbp-9Ch] BYREF\n  char v29; // [rsp+7Ch] [rbp-94h]\n  char *v30; // [rsp+80h] [rbp-90h]\n  __int64 v31; // [rsp+88h] [rbp-88h]\n  char v32; // [rsp+90h] [rbp-80h]\n  int v33; // [rsp+94h] [rbp-7Ch]\n  char v34[4]; // [rsp+B0h] [rbp-60h] BYREF\n  int v35; // [rsp+B4h] [rbp-5Ch] BYREF\n  char v36; // [rsp+BCh] [rbp-54h]\n  void *s2; // [rsp+C0h] [rbp-50h] BYREF\n  __int64 v38; // [rsp+C8h] [rbp-48h]\n  char v39; // [rsp+D0h] [rbp-40h]\n  int v40; // [rsp+D4h] [rbp-3Ch]\n  unsigned __int64 v41; // [rsp+F8h] [rbp-18h]\n\n  v16 = a1;\n  v15 = a2;\n  v14 = a3;\n  v41 = __readfsqword(0x28u);\n  v22 = sub_40C6FF(a2);\n  if ( v22 > 0x492492492492492LL )\n  {\n    v4 = 0LL;\n  }\n  else if ( 56 * v22 > 0xFAF )\n  {\n    v4 = sub_40C365(56 * v22);\n  }\n  else\n  {\n    v3 = alloca(16 * ((56 * v22 + 46) / 0x10));\n    v4 = 16 * (((unsigned __int64)&v14 + 7) >> 4) + 16;\n  }\n  v23 = v4;\n  if ( !v4 )\n    return 0LL;\n  v24 = v23;\n  v25 = 48 * v22 + v23;\n  v17 = 0LL;\n  s2 = v15;\n  v34[0] = 0;\n  memset(&v35, 0, 8uLL);\n  v36 = 0;\n  while ( 1 )\n  {\n    sub_40A290((__int64)v34);\n    if ( v39 == 1 && !v40 )\n      break;\n    sub_40A1B9(48 * v17 + v24, (__int64)&s2);\n    s2 = (char *)s2 + v38;\n    v36 = 0;\n    ++v17;\n  }\n  *(_QWORD *)(v25 + 8) = 1LL;\n  v19 = 0LL;\n  for ( i = 2LL; i < v22; ++i )\n  {\n    v26 = 48 * i - 48 + v24;\n    while ( 1 )\n    {\n      if ( *(_BYTE *)(v26 + 16) && *(_BYTE *)(48 * v19 + v24 + 16) )\n      {\n        v7 = *(_DWORD *)(v26 + 20) == *(_DWORD *)(48 * v19 + v24 + 20);\n      }\n      else\n      {\n        v8 = *(_QWORD *)(v26 + 8) == *(_QWORD *)(48 * v19 + v24 + 8)\n          && !memcmp(*(const void **)v26, *(const void **)(48 * v19 + v24), *(_QWORD *)(v26 + 8));\n        v7 = v8;\n      }\n      if ( v7 )\n      {\n        ++v19;\n        *(_QWORD *)(8 * i + v25) = i - v19;\n        goto LABEL_30;\n      }\n      if ( !v19 )\n        break;\n      v19 -= *(_QWORD *)(8 * v19 + v25);\n    }\n    *(_QWORD *)(v25 + 8 * i) = i;\nLABEL_30:\n    ;\n  }\n  *v14 = 0LL;\n  v20 = 0LL;\n  v30 = v16;\n  v27[0] = 0;\n  memset(&v28, 0, 8uLL);\n  v29 = 0;\n  s2 = v16;\n  v34[0] = 0;\n  memset(&v35, 0, 8uLL);\n  v36 = 0;\n  while ( 1 )\n  {\n    sub_40A290((__int64)v34);\n    if ( v39 == 1 && !v40 )\n      break;\n    if ( *(_BYTE *)(48 * v20 + v24 + 16) && v39 )\n    {\n      v9 = *(_DWORD *)(48 * v20 + v24 + 20) == v40;\n    }\n    else\n    {\n      v10 = *(_QWORD *)(48 * v20 + v24 + 8) == v38\n         && !memcmp(*(const void **)(48 * v20 + v24), s2, *(_QWORD *)(48 * v20 + v24 + 8));\n      v9 = v10;\n    }\n    if ( v9 )\n    {\n      ++v20;\n      s2 = (char *)s2 + v38;\n      v36 = 0;\n      if ( v20 == v22 )\n      {\n        *v14 = v30;\n        break;\n      }\n    }\n    else if ( v20 )\n    {\n      v21 = *(_QWORD *)(8 * v20 + v25);\n      v20 -= v21;\n      while ( v21 )\n      {\n        sub_40A290((__int64)v27);\n        if ( v32 == 1 && !v33 )\n          abort();\n        v30 += v31;\n        v29 = 0;\n        --v21;\n      }\n    }\n    else\n    {\n      sub_40A290((__int64)v27);\n      if ( v32 == 1 && !v33 )\n        abort();\n      v30 += v31;\n      v29 = 0;\n      s2 = (char *)s2 + v38;\n      v36 = 0;\n    }\n  }\n  sub_40C420(v23);\n  return 1LL;\n}\n"], [4238849, "sub_40AE01", "_BYTE *__fastcall sub_40AE01(_BYTE *a1, char *a2)\n{\n  _BYTE *result; // rax\n  bool v7; // al\n  bool v8; // al\n  bool v12; // al\n  bool v13; // al\n  size_t v14; // rax\n  unsigned __int64 v15; // rax\n  _BYTE *v16; // [rsp+8h] [rbp-1C8h]\n  char v17; // [rsp+13h] [rbp-1BDh]\n  char v18; // [rsp+14h] [rbp-1BCh]\n  char v19; // [rsp+16h] [rbp-1BAh]\n  __int64 v20; // [rsp+18h] [rbp-1B8h] BYREF\n  unsigned __int64 v21; // [rsp+20h] [rbp-1B0h]\n  unsigned __int64 v22; // [rsp+28h] [rbp-1A8h]\n  unsigned __int64 v23; // [rsp+30h] [rbp-1A0h]\n  unsigned __int64 j; // [rsp+38h] [rbp-198h]\n  unsigned __int64 v25; // [rsp+40h] [rbp-190h]\n  unsigned __int64 v26; // [rsp+48h] [rbp-188h]\n  unsigned __int64 v27; // [rsp+50h] [rbp-180h]\n  char *string; // [rsp+58h] [rbp-178h]\n  _BYTE *v29; // [rsp+60h] [rbp-170h]\n  _BYTE *i; // [rsp+68h] [rbp-168h]\n  char v31[4]; // [rsp+70h] [rbp-160h] BYREF\n  _BYTE v32[12]; // [rsp+74h] [rbp-15Ch] BYREF\n  void *s2; // [rsp+80h] [rbp-150h]\n  __int64 v34; // [rsp+88h] [rbp-148h]\n  char v35; // [rsp+90h] [rbp-140h]\n  int v36; // [rsp+94h] [rbp-13Ch]\n  char v37[4]; // [rsp+B0h] [rbp-120h] BYREF\n  int v38; // [rsp+B4h] [rbp-11Ch] BYREF\n  char v39; // [rsp+BCh] [rbp-114h]\n  char *v40; // [rsp+C0h] [rbp-110h]\n  __int64 v41; // [rsp+C8h] [rbp-108h]\n  char v42; // [rsp+D0h] [rbp-100h]\n  int v43; // [rsp+D4h] [rbp-FCh]\n  __int64 v44; // [rsp+F0h] [rbp-E0h] BYREF\n  __int64 v45; // [rsp+F8h] [rbp-D8h]\n  void *s1; // [rsp+100h] [rbp-D0h]\n  size_t n; // [rsp+108h] [rbp-C8h]\n  __int64 v48; // [rsp+110h] [rbp-C0h]\n  __int64 v49; // [rsp+118h] [rbp-B8h]\n  __int64 v50; // [rsp+120h] [rbp-B0h]\n  __int64 v51; // [rsp+128h] [rbp-A8h]\n  __int64 v52; // [rsp+130h] [rbp-A0h] BYREF\n  __int64 v53; // [rsp+138h] [rbp-98h]\n  void *v54; // [rsp+140h] [rbp-90h]\n  size_t v55; // [rsp+148h] [rbp-88h]\n  __int64 v56; // [rsp+150h] [rbp-80h]\n  __int64 v57; // [rsp+158h] [rbp-78h]\n  __int64 v58; // [rsp+160h] [rbp-70h]\n  __int64 v59; // [rsp+168h] [rbp-68h]\n  char v60[4]; // [rsp+170h] [rbp-60h] BYREF\n  int v61; // [rsp+174h] [rbp-5Ch] BYREF\n  char k; // [rsp+17Ch] [rbp-54h]\n  void *v63; // [rsp+180h] [rbp-50h]\n  __int64 v64; // [rsp+188h] [rbp-48h]\n  char v65; // [rsp+190h] [rbp-40h]\n  int v66; // [rsp+194h] [rbp-3Ch]\n  unsigned __int64 v67; // [rsp+1B8h] [rbp-18h]\n\n  v16 = a1;\n  v67 = __readfsqword(0x28u);\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    if ( *a2 )\n    {\n      v18 = 1;\n      v25 = 0LL;\n      v26 = 0LL;\n      v27 = 0LL;\n      string = a2;\n      v19 = *a2;\n      while ( 1 )\n      {\n        if ( !*v16 )\n          return 0LL;\n        if ( v18 && v25 > 9 && 5 * v25 <= v26 )\n        {\n          if ( string )\n          {\n            v14 = strnlen(string, v26 - v27);\n            string += v14;\n            if ( !*string )\n              string = 0LL;\n            v27 = v26;\n          }\n          if ( !string )\n          {\n            v15 = strlen(a2);\n            if ( (unsigned __int8)sub_40A470(v16, (__int64)a2, v15, &v20) )\n              return (_BYTE *)v20;\n            v18 = 0;\n          }\n        }\n        ++v25;\n        ++v26;\n        if ( *v16 == v19 )\n          break;\nLABEL_96:\n        ++v16;\n      }\n      v29 = v16 + 1;\n      for ( i = a2 + 1; ; ++i )\n      {\n        if ( !*i )\n          return v16;\n        if ( !*v29 )\n          break;\n        ++v26;\n        if ( *v29 != *i )\n          goto LABEL_96;\n        ++v29;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      result = a1;\n    }\n  }\n  else\n  {\n    s2 = a2;\n    v31[0] = 0;\n    memset(v32, 0, 8uLL);\n    v32[8] = 0;\n    sub_40A290((__int64)v31);\n    if ( v35 != 1 || v36 )\n    {\n      v17 = 1;\n      v21 = 0LL;\n      v22 = 0LL;\n      v23 = 0LL;\n      v40 = a2;\n      v37[0] = 0;\n      memset(&v38, 0, 8uLL);\n      v39 = 0;\n      s1 = a1;\n      LOBYTE(v44) = 0;\n      memset((char *)&v44 + 4, 0, sizeof(__int64));\n      for ( BYTE4(v45) = 0; ; BYTE4(v45) = 0 )\n      {\n        sub_40A290((__int64)&v44);\n        if ( (unsigned __int8)v48 == 1 && !HIDWORD(v48) )\n          return 0LL;\n        if ( v17 && v21 > 9 && 5 * v21 <= v22 )\n        {\n          for ( j = v22 - v23; j; --j )\n          {\n            sub_40A290((__int64)v37);\n            if ( v42 == 1 && !v43 )\n              break;\n            v40 += v41;\n            v39 = 0;\n          }\n          v23 = v22;\n          sub_40A290((__int64)v37);\n          if ( v42 == 1 && !v43 )\n          {\n            if ( (unsigned __int8)sub_40A6BA(a1, a2, &v20) )\n              return (_BYTE *)v20;\n            v17 = 0;\n          }\n        }\n        ++v21;\n        ++v22;\n        if ( (_BYTE)v48 && v35 )\n        {\n          v7 = HIDWORD(v48) == v36;\n        }\n        else\n        {\n          v8 = n == v34 && !memcmp(s1, s2, n);\n          v7 = v8;\n        }\n        if ( v7 )\n          break;\nLABEL_71:\n        s1 = (char *)s1 + n;\n      }\n      v52 = v44;\n      v53 = v45;\n      v55 = n;\n      v56 = v48;\n      v57 = v49;\n      v58 = v50;\n      v59 = v51;\n      v54 = (char *)s1 + n;\n      BYTE4(v53) = 0;\n      v63 = a2;\n      v60[0] = 0;\n      memset(&v61, 0, 8uLL);\n      k = 0;\n      sub_40A290((__int64)v60);\n      if ( v65 == 1 && !v66 )\n        abort();\n      v63 = (char *)v63 + v64;\n      for ( k = 0; ; k = 0 )\n      {\n        sub_40A290((__int64)v60);\n        if ( v65 == 1 && !v66 )\n          return s1;\n        sub_40A290((__int64)&v52);\n        if ( (unsigned __int8)v56 == 1 && !HIDWORD(v56) )\n          break;\n        ++v22;\n        if ( (_BYTE)v56 && v65 )\n        {\n          v12 = HIDWORD(v56) != v66;\n        }\n        else\n        {\n          v13 = v55 != v64 || memcmp(v54, v63, v55);\n          v12 = v13;\n        }\n        if ( v12 )\n          goto LABEL_71;\n        v54 = (char *)v54 + v55;\n        BYTE4(v53) = 0;\n        v63 = (char *)v63 + v64;\n      }\n      result = 0LL;\n    }\n    else\n    {\n      result = a1;\n    }\n  }\n  return result;\n}\n"], [4240865, "sub_40B5E1", "__int64 __fastcall sub_40B5E1(char *a1, size_t a2, void *a3, void **a4, size_t *a5)\n{\n  int v9; // [rsp+34h] [rbp-107Ch]\n  char *inbuf; // [rsp+38h] [rbp-1078h] BYREF\n  size_t inbytesleft; // [rsp+40h] [rbp-1070h] BYREF\n  char *outbuf; // [rsp+48h] [rbp-1068h] BYREF\n  size_t outbytesleft; // [rsp+50h] [rbp-1060h] BYREF\n  void *ptr; // [rsp+58h] [rbp-1058h]\n  size_t v15; // [rsp+60h] [rbp-1050h]\n  size_t v16; // [rsp+68h] [rbp-1048h]\n  size_t v17; // [rsp+70h] [rbp-1040h]\n  size_t size; // [rsp+78h] [rbp-1038h]\n  size_t v19; // [rsp+80h] [rbp-1030h]\n  size_t v20; // [rsp+88h] [rbp-1028h]\n  char v21[4104]; // [rsp+90h] [rbp-1020h] BYREF\n  unsigned __int64 v22; // [rsp+1098h] [rbp-18h]\n\n  v22 = __readfsqword(0x28u);\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  v15 = 0LL;\n  inbuf = a1;\n  inbytesleft = a2;\n  while ( inbytesleft )\n  {\n    outbuf = v21;\n    outbytesleft = 4096LL;\n    v16 = iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n    if ( v16 == -1LL && *__errno_location() != 7 )\n    {\n      if ( *__errno_location() != 22 )\n        return 0xFFFFFFFFLL;\n      break;\n    }\n    v15 += outbuf - v21;\n  }\n  outbuf = v21;\n  outbytesleft = 4096LL;\n  v17 = iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft);\n  if ( v17 == -1LL )\n    return 0xFFFFFFFFLL;\n  v15 += outbuf - v21;\n  size = v15;\n  if ( !v15 )\n  {\n    *a5 = 0LL;\n    return 0LL;\n  }\n  if ( *a4 && *a5 >= size )\n  {\n    ptr = *a4;\n  }\n  else\n  {\n    ptr = malloc(size);\n    if ( !ptr )\n    {\n      *__errno_location() = 12;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  iconv(a3, 0LL, 0LL, 0LL, 0LL);\n  inbuf = a1;\n  inbytesleft = a2;\n  outbuf = (char *)ptr;\n  outbytesleft = size;\n  while ( inbytesleft )\n  {\n    v19 = iconv(a3, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n    if ( v19 == -1LL )\n    {\n      if ( *__errno_location() != 22 )\n        goto LABEL_26;\n      break;\n    }\n  }\n  v20 = iconv(a3, 0LL, 0LL, &outbuf, &outbytesleft);\n  if ( v20 != -1LL )\n  {\n    if ( outbytesleft )\n      abort();\n    *a4 = ptr;\n    *a5 = size;\n    return 0LL;\n  }\nLABEL_26:\n  if ( *a4 != ptr )\n  {\n    v9 = *__errno_location();\n    free(ptr);\n    *__errno_location() = v9;\n  }\n  return 0xFFFFFFFFLL;\n}\n"], [4241861, "sub_40B9C5", "void *__fastcall sub_40B9C5(char *a1, void *a2)\n{\n  void *result; // rax\n  char *v3; // rax\n  int v4; // [rsp+14h] [rbp-8Ch]\n  char *inbuf; // [rsp+18h] [rbp-88h] BYREF\n  size_t inbytesleft; // [rsp+20h] [rbp-80h] BYREF\n  char *outbuf; // [rsp+28h] [rbp-78h] BYREF\n  size_t outbytesleft; // [rsp+30h] [rbp-70h] BYREF\n  void *ptr; // [rsp+38h] [rbp-68h]\n  size_t size; // [rsp+40h] [rbp-60h]\n  __int64 v11; // [rsp+48h] [rbp-58h]\n  size_t v12; // [rsp+50h] [rbp-50h]\n  __int64 v13; // [rsp+58h] [rbp-48h]\n  size_t v14; // [rsp+60h] [rbp-40h]\n  char *v15; // [rsp+68h] [rbp-38h]\n  size_t v16; // [rsp+70h] [rbp-30h]\n  __int64 v17; // [rsp+78h] [rbp-28h]\n  size_t v18; // [rsp+80h] [rbp-20h]\n  char *v19; // [rsp+88h] [rbp-18h]\n  size_t v20; // [rsp+90h] [rbp-10h]\n  void *v21; // [rsp+98h] [rbp-8h]\n\n  inbuf = a1;\n  inbytesleft = strlen(a1);\n  size = inbytesleft;\n  v11 = 0xFFFFFFFFLL;\n  if ( inbytesleft <= 0xFFFFFFF )\n    size *= 16LL;\n  ptr = malloc(++size);\n  if ( ptr )\n  {\n    iconv(a2, 0LL, 0LL, 0LL, 0LL);\n    outbuf = (char *)ptr;\n    for ( outbytesleft = size - 1; ; outbytesleft = v14 - v13 - 1 )\n    {\n      v12 = iconv(a2, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n      if ( v12 != -1LL || *__errno_location() == 22 )\n        break;\n      if ( *__errno_location() != 7 )\n        goto LABEL_23;\n      v13 = outbuf - (_BYTE *)ptr;\n      v14 = 2 * size;\n      if ( 2 * size <= size || (v15 = (char *)realloc(ptr, v14)) == 0LL )\n      {\nLABEL_18:\n        *__errno_location() = 12;\nLABEL_23:\n        v4 = *__errno_location();\n        free(ptr);\n        *__errno_location() = v4;\n        return 0LL;\n      }\n      ptr = v15;\n      size = v14;\n      outbuf = &v15[v13];\n    }\n    while ( 1 )\n    {\n      v16 = iconv(a2, 0LL, 0LL, &outbuf, &outbytesleft);\n      if ( v16 != -1LL )\n        break;\n      if ( *__errno_location() != 7 )\n        goto LABEL_23;\n      v17 = outbuf - (_BYTE *)ptr;\n      v18 = 2 * size;\n      if ( 2 * size <= size )\n        goto LABEL_18;\n      v19 = (char *)realloc(ptr, v18);\n      if ( !v19 )\n        goto LABEL_18;\n      ptr = v19;\n      size = v18;\n      outbuf = &v19[v17];\n      outbytesleft = v18 - v17 - 1;\n    }\n    v3 = outbuf++;\n    *v3 = 0;\n    v20 = outbuf - (_BYTE *)ptr;\n    if ( outbuf - (_BYTE *)ptr < size )\n    {\n      v21 = realloc(ptr, v20);\n      if ( v21 )\n        ptr = v21;\n    }\n    result = ptr;\n  }\n  else\n  {\n    *__errno_location() = 12;\n    result = 0LL;\n  }\n  return result;\n}\n"], [4242682, "sub_40BCFA", "char *__fastcall sub_40BCFA(char *a1, char *a2, char *a3)\n{\n  char *result; // rax\n  int v5; // [rsp+20h] [rbp-20h]\n  int v6; // [rsp+24h] [rbp-1Ch]\n  iconv_t cd; // [rsp+28h] [rbp-18h]\n  void *ptr; // [rsp+30h] [rbp-10h]\n  char *v9; // [rsp+38h] [rbp-8h]\n\n  if ( *a1 && (unsigned int)sub_409B03((unsigned __int8 *)a2, (unsigned __int8 *)a3) )\n  {\n    cd = iconv_open(a3, a2);\n    if ( cd == (iconv_t)-1LL )\n      return 0LL;\n    ptr = sub_40B9C5(a1, cd);\n    if ( ptr )\n    {\n      if ( iconv_close(cd) < 0 )\n      {\n        v6 = *__errno_location();\n        free(ptr);\n        *__errno_location() = v6;\n        return 0LL;\n      }\n    }\n    else\n    {\n      v5 = *__errno_location();\n      iconv_close(cd);\n      *__errno_location() = v5;\n    }\n    result = (char *)ptr;\n  }\n  else\n  {\n    v9 = strdup(a1);\n    if ( !v9 )\n      *__errno_location() = 12;\n    result = v9;\n  }\n  return result;\n}\n"], [4242941, "sub_40BDFD", "__int64 __fastcall sub_40BDFD(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_40BE23(a1, 0, 3, a4, a5, a6);\n}\n"], [4242979, "sub_40BE23", "__int64 __fastcall sub_40BE23(int a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128 a7, __m128 a8, __m128 a9, __m128 a10, __m128 a11, __m128 a12, __m128 a13, __m128 a14)\n{\n  int v14; // ecx\n  int v15; // er8\n  int v16; // er9\n  int v18; // [rsp+10h] [rbp-E0h]\n  int v19; // [rsp+14h] [rbp-DCh]\n  int v20; // [rsp+18h] [rbp-D8h]\n  int v21; // [rsp+1Ch] [rbp-D4h]\n  __int64 v22; // [rsp+50h] [rbp-A0h]\n  __int64 v23; // [rsp+58h] [rbp-98h]\n  __int64 v24; // [rsp+60h] [rbp-90h]\n  __int64 v25; // [rsp+68h] [rbp-88h]\n  __m128 v26; // [rsp+70h] [rbp-80h]\n  __m128 v27; // [rsp+80h] [rbp-70h]\n  __m128 v28; // [rsp+90h] [rbp-60h]\n  __m128 v29; // [rsp+A0h] [rbp-50h]\n  __m128 v30; // [rsp+B0h] [rbp-40h]\n  __m128 v31; // [rsp+C0h] [rbp-30h]\n  __m128 v32; // [rsp+D0h] [rbp-20h]\n  __m128 v33; // [rsp+E0h] [rbp-10h]\n\n  v22 = a3;\n  v23 = a4;\n  v24 = a5;\n  v25 = a6;\n  v26 = a7;\n  v27 = a8;\n  v28 = a9;\n  v29 = a10;\n  v30 = a11;\n  v31 = a12;\n  v32 = a13;\n  v33 = a14;\n  if ( a2 != 1030 )\n    return (unsigned int)fcntl(a1, a2, v22);\n  v19 = v22;\n  if ( dword_610828 < 0 )\n  {\n    v18 = sub_40BE23(a1, 0, v22, a4, a5, a6);\n  }\n  else\n  {\n    v18 = fcntl(a1, 1030, (unsigned int)v22);\n    if ( v18 < 0 && *__errno_location() == 22 )\n    {\n      v18 = sub_40BE23(a1, 0, v19, v14, v15, v16);\n      if ( v18 < 0 )\n        return (unsigned int)v18;\n      dword_610828 = -1;\n    }\n    else\n    {\n      dword_610828 = 1;\n    }\n  }\n  if ( v18 >= 0 && dword_610828 == -1 )\n  {\n    v20 = fcntl(v18, 1);\n    if ( v20 < 0 || fcntl(v18, 2, v20 | 1u) == -1 )\n    {\n      v21 = *__errno_location();\n      close(v18);\n      *__errno_location() = v21;\n      v18 = -1;\n    }\n  }\n  return (unsigned int)v18;\n}\n"], [4243677, "sub_40C0DD", "_BOOL8 __fastcall sub_40C0DD(int a1)\n{\n  return a1 >= 0 && a1 <= 127;\n}\n"], [4243713, "sub_40C101", "_BOOL8 __fastcall sub_40C101(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4243771, "sub_40C13B", "_BOOL8 __fastcall sub_40C13B(int a1)\n{\n  return (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 90;\n}\n"], [4243817, "sub_40C169", "_BOOL8 __fastcall sub_40C169(int a1)\n{\n  return a1 == 32 || a1 == 9;\n}\n"], [4243853, "sub_40C18D", "_BOOL8 __fastcall sub_40C18D(int a1)\n{\n  return (a1 & 0xFFFFFFE0) == 0 || a1 == 127;\n}\n"], [4243893, "sub_40C1B5", "_BOOL8 __fastcall sub_40C1B5(int a1)\n{\n  return a1 > 47 && a1 <= 57;\n}\n"], [4243929, "sub_40C1D9", "_BOOL8 __fastcall sub_40C1D9(int a1)\n{\n  return a1 > 96 && a1 <= 122;\n}\n"], [4243965, "sub_40C1FD", "_BOOL8 __fastcall sub_40C1FD(int a1)\n{\n  return a1 > 32 && a1 <= 126;\n}\n"], [4244001, "sub_40C221", "_BOOL8 __fastcall sub_40C221(int a1)\n{\n  return a1 > 31 && a1 <= 126;\n}\n"], [4244037, "sub_40C245", "_BOOL8 __fastcall sub_40C245(int a1)\n{\n  return a1 > 32 && a1 <= 126 && (a1 <= 47 || a1 > 57) && ((int)(a1 & 0xFFFFFFDF) <= 64 || (int)(a1 & 0xFFFFFFDF) > 90);\n}\n"], [4244107, "sub_40C28B", "_BOOL8 __fastcall sub_40C28B(int a1)\n{\n  return a1 == 32 || a1 == 9 || a1 == 10 || a1 == 11 || a1 == 12 || a1 == 13;\n}\n"], [4244167, "sub_40C2C7", "_BOOL8 __fastcall sub_40C2C7(int a1)\n{\n  return a1 > 64 && a1 <= 90;\n}\n"], [4244203, "sub_40C2EB", "_BOOL8 __fastcall sub_40C2EB(int a1)\n{\n  return a1 > 47 && a1 <= 57 || (int)(a1 & 0xFFFFFFDF) > 64 && (int)(a1 & 0xFFFFFFDF) <= 70;\n}\n"], [4244261, "sub_40C325", "__int64 __fastcall sub_40C325(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 64 || a1 > 90 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 + 32);\n  return result;\n}\n"], [4244293, "sub_40C345", "__int64 __fastcall sub_40C345(int a1)\n{\n  __int64 result; // rax\n\n  if ( a1 <= 96 || a1 > 122 )\n    result = (unsigned int)a1;\n  else\n    result = (unsigned int)(a1 - 32);\n  return result;\n}\n"], [4244325, "sub_40C365", "unsigned __int64 __fastcall sub_40C365(unsigned __int64 a1)\n{\n  void *v2; // [rsp+20h] [rbp-10h]\n  unsigned __int64 v3; // [rsp+20h] [rbp-10h]\n\n  if ( a1 + 16 < a1 )\n    return 0LL;\n  v2 = malloc(a1 + 16);\n  if ( !v2 )\n    return 0LL;\n  v3 = (unsigned __int64)v2 + 16;\n  *(_DWORD *)(v3 - 4) = 336984906;\n  *(_QWORD *)(v3 - 16) = qword_610840[v3 % 0x101];\n  qword_610840[v3 % 0x101] = v3;\n  return v3;\n}\n"], [4244512, "sub_40C420", "void __fastcall sub_40C420(unsigned __int64 a1)\n{\n  _QWORD *i; // [rsp+18h] [rbp-18h]\n\n  if ( a1 && *(_DWORD *)(a1 - 4) == 336984906 )\n  {\n    for ( i = (_QWORD *)(8 * (a1 % 0x101) + 6359104); *i; i = (_QWORD *)(*i - 16LL) )\n    {\n      if ( *i == a1 )\n      {\n        *i = *(_QWORD *)(a1 - 16);\n        free((void *)(a1 - 16));\n        return;\n      }\n    }\n  }\n}\n"], [4244713, "sub_40C4E9", "bool __fastcall sub_40C4E9(unsigned __int8 a1)\n{\n  return (((unsigned int)dword_40DEC0[a1 >> 5] >> (a1 & 0x1F)) & 1) != 0;\n}\n"], [4244767, "sub_40C51F", "__int64 __fastcall sub_40C51F(__int64 a1)\n{\n  __int64 result; // rax\n  size_t v2; // rax\n  __int64 v3; // rax\n\n  result = *(unsigned __int8 *)(a1 + 12);\n  if ( !(_BYTE)result )\n  {\n    if ( !*(_BYTE *)a1 )\n    {\n      if ( sub_40C4E9(**(_BYTE **)(a1 + 16)) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        *(_DWORD *)(a1 + 36) = **(char **)(a1 + 16);\n        *(_BYTE *)(a1 + 32) = 1;\nLABEL_19:\n        result = a1;\n        *(_BYTE *)(a1 + 12) = 1;\n        return result;\n      }\n      if ( !mbsinit((const mbstate_t *)(a1 + 4)) )\n        __assert_fail(\"mbsinit (&iter->state)\", \"../../src/lib/mbuiter.h\", 0x8Eu, \"mbuiter_multi_next\");\n      *(_BYTE *)a1 = 1;\n    }\n    v2 = __ctype_get_mb_cur_max();\n    v3 = sub_407920(*(const void **)(a1 + 16), v2);\n    *(_QWORD *)(a1 + 24) = mbrtowc((wchar_t *)(a1 + 36), *(const char **)(a1 + 16), v3, (mbstate_t *)(a1 + 4));\n    if ( *(_QWORD *)(a1 + 24) == -1LL )\n    {\n      *(_QWORD *)(a1 + 24) = 1LL;\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else if ( *(_QWORD *)(a1 + 24) == -2LL )\n    {\n      *(_QWORD *)(a1 + 24) = strlen(*(const char **)(a1 + 16));\n      *(_BYTE *)(a1 + 32) = 0;\n    }\n    else\n    {\n      if ( !*(_QWORD *)(a1 + 24) )\n      {\n        *(_QWORD *)(a1 + 24) = 1LL;\n        if ( **(_BYTE **)(a1 + 16) )\n          __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"../../src/lib/mbuiter.h\", 0xAAu, \"mbuiter_multi_next\");\n        if ( *(_DWORD *)(a1 + 36) )\n          __assert_fail(\"iter->cur.wc == 0\", \"../../src/lib/mbuiter.h\", 0xABu, \"mbuiter_multi_next\");\n      }\n      *(_BYTE *)(a1 + 32) = 1;\n      if ( mbsinit((const mbstate_t *)(a1 + 4)) )\n        *(_BYTE *)a1 = 0;\n    }\n    goto LABEL_19;\n  }\n  return result;\n}\n"], [4245247, "sub_40C6FF", "size_t __fastcall sub_40C6FF(const char *a1)\n{\n  __int64 v3; // [rsp+18h] [rbp-58h]\n  char v4[4]; // [rsp+20h] [rbp-50h] BYREF\n  int v5; // [rsp+24h] [rbp-4Ch] BYREF\n  char i; // [rsp+2Ch] [rbp-44h]\n  const char *v7; // [rsp+30h] [rbp-40h]\n  __int64 v8; // [rsp+38h] [rbp-38h]\n  char v9; // [rsp+40h] [rbp-30h]\n  int v10; // [rsp+44h] [rbp-2Ch]\n  unsigned __int64 v11; // [rsp+68h] [rbp-8h]\n\n  v11 = __readfsqword(0x28u);\n  if ( __ctype_get_mb_cur_max() <= 1 )\n    return strlen(a1);\n  v3 = 0LL;\n  v7 = a1;\n  v4[0] = 0;\n  memset(&v5, 0, 8uLL);\n  for ( i = 0; ; i = 0 )\n  {\n    sub_40C51F((__int64)v4);\n    if ( v9 == 1 && !v10 )\n      break;\n    ++v3;\n    v7 += v8;\n  }\n  return v3;\n}\n"], [4245456, "init", "void __fastcall init(unsigned int a1, __int64 a2, __int64 a3)\n{\n  __int64 v4; // rbx\n  signed __int64 v5; // rbp\n\n  v4 = 0LL;\n  v5 = &off_60FE18 - off_60FE10;\n  init_proc();\n  if ( v5 )\n  {\n    do\n      ((void (__fastcall *)(_QWORD, __int64, __int64))off_60FE10[v4++])(a1, a2, a3);\n    while ( v4 != v5 );\n  }\n}\n"], [4245568, "fini", "void fini(void)\n{\n  ;\n}\n"], [4245584, "sub_40C850", "int __fastcall sub_40C850(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  if ( &qword_6102C8 )\n    v1 = (void *)qword_6102C8;\n  else\n    v1 = 0LL;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"], [4245616, "sub_40C870", "int __fastcall sub_40C870(int fildes, struct stat *stat_buf)\n{\n  return __fxstat(1, fildes, stat_buf);\n}\n"], [4245632, ".term_proc", "void term_proc()\n{\n  ;\n}\n"]]